
bin/kernel:     file format elf32-i386


Disassembly of section .text:

c0100000 <kern_entry>:

.text
.globl kern_entry
kern_entry:
    # load pa of boot pgdir
    movl $REALLOC(__boot_pgdir), %eax
c0100000:	b8 00 c0 14 00       	mov    $0x14c000,%eax
    movl %eax, %cr3
c0100005:	0f 22 d8             	mov    %eax,%cr3

    # enable paging
    movl %cr0, %eax
c0100008:	0f 20 c0             	mov    %cr0,%eax
    orl $(CR0_PE | CR0_PG | CR0_AM | CR0_WP | CR0_NE | CR0_TS | CR0_EM | CR0_MP), %eax
c010000b:	0d 2f 00 05 80       	or     $0x8005002f,%eax
    andl $~(CR0_TS | CR0_EM), %eax
c0100010:	83 e0 f3             	and    $0xfffffff3,%eax
    movl %eax, %cr0
c0100013:	0f 22 c0             	mov    %eax,%cr0

    # update eip
    # now, eip = 0x1.....
    leal next, %eax
c0100016:	8d 05 1e 00 10 c0    	lea    0xc010001e,%eax
    # set eip = KERNBASE + 0x1.....
    jmp *%eax
c010001c:	ff e0                	jmp    *%eax

c010001e <next>:
next:

    # unmap va 0 ~ 4M, it's temporary mapping
    xorl %eax, %eax
c010001e:	31 c0                	xor    %eax,%eax
    movl %eax, __boot_pgdir
c0100020:	a3 00 c0 14 c0       	mov    %eax,0xc014c000

    # set ebp, esp
    movl $0x0, %ebp
c0100025:	bd 00 00 00 00       	mov    $0x0,%ebp
    # the kernel stack region is from bootstack -- bootstacktop,
    # the kernel stack size is KSTACKSIZE (8KB)defined in memlayout.h
    movl $bootstacktop, %esp
c010002a:	bc 00 b0 14 c0       	mov    $0xc014b000,%esp
    # now kernel stack is ready , call the first C function
    call kern_init
c010002f:	e8 02 00 00 00       	call   c0100036 <kern_init>

c0100034 <spin>:

# should never get here
spin:
    jmp spin
c0100034:	eb fe                	jmp    c0100034 <spin>

c0100036 <kern_init>:
int kern_init(void) __attribute__((noreturn));
void grade_backtrace(void);
static void lab1_switch_test(void);

int
kern_init(void) {
c0100036:	55                   	push   %ebp
c0100037:	89 e5                	mov    %esp,%ebp
c0100039:	83 ec 18             	sub    $0x18,%esp
    extern char edata[], end[];
    memset(edata, 0, end - edata);
c010003c:	ba e4 22 15 c0       	mov    $0xc01522e4,%edx
c0100041:	b8 00 e0 14 c0       	mov    $0xc014e000,%eax
c0100046:	29 c2                	sub    %eax,%edx
c0100048:	89 d0                	mov    %edx,%eax
c010004a:	83 ec 04             	sub    $0x4,%esp
c010004d:	50                   	push   %eax
c010004e:	6a 00                	push   $0x0
c0100050:	68 00 e0 14 c0       	push   $0xc014e000
c0100055:	e8 ab 23 01 00       	call   c0112405 <memset>
c010005a:	83 c4 10             	add    $0x10,%esp

    cons_init();                // init the console
c010005d:	e8 d0 1e 00 00       	call   c0101f32 <cons_init>

    const char *message = "(THU.CST) os is loading ...";
c0100062:	c7 45 f4 e0 2c 11 c0 	movl   $0xc0112ce0,-0xc(%ebp)
    cprintf("%s\n\n", message);
c0100069:	83 ec 08             	sub    $0x8,%esp
c010006c:	ff 75 f4             	pushl  -0xc(%ebp)
c010006f:	68 fc 2c 11 c0       	push   $0xc0112cfc
c0100074:	e8 06 03 00 00       	call   c010037f <cprintf>
c0100079:	83 c4 10             	add    $0x10,%esp

    print_kerninfo();
c010007c:	e8 74 0a 00 00       	call   c0100af5 <print_kerninfo>

    grade_backtrace();
c0100081:	e8 95 00 00 00       	call   c010011b <grade_backtrace>

    pmm_init();                 // init physical memory management
c0100086:	e8 0d 3b 00 00       	call   c0103b98 <pmm_init>

    pic_init();                 // init interrupt controller
c010008b:	e8 14 20 00 00       	call   c01020a4 <pic_init>
    idt_init();                 // init interrupt descriptor table
c0100090:	e8 75 21 00 00       	call   c010220a <idt_init>

    vmm_init();                 // init virtual memory management
c0100095:	e8 a8 53 00 00       	call   c0105442 <vmm_init>
    sched_init();               // init scheduler
c010009a:	e8 10 c3 00 00       	call   c010c3af <sched_init>
    proc_init();                // init process table
c010009f:	e8 70 bf 00 00       	call   c010c014 <proc_init>
    
    ide_init();                 // init ide devices
c01000a4:	e8 4e 0e 00 00       	call   c0100ef7 <ide_init>
    swap_init();                // init swap
c01000a9:	e8 49 5d 00 00       	call   c0105df7 <swap_init>
    fs_init();                  // init fs
c01000ae:	e8 42 a7 00 00       	call   c010a7f5 <fs_init>
    
    clock_init();               // init clock interrupt
c01000b3:	e8 21 16 00 00       	call   c01016d9 <clock_init>
    intr_enable();              // enable irq interrupt
c01000b8:	e8 24 21 00 00       	call   c01021e1 <intr_enable>

    //LAB1: CAHLLENGE 1 If you try to do it, uncomment lab1_switch_test()
    // user/kernel mode switch test
    //lab1_switch_test();
    
    cpu_idle();                 // run idle process
c01000bd:	e8 3c c1 00 00       	call   c010c1fe <cpu_idle>

c01000c2 <grade_backtrace2>:
}

void __attribute__((noinline))
grade_backtrace2(int arg0, int arg1, int arg2, int arg3) {
c01000c2:	55                   	push   %ebp
c01000c3:	89 e5                	mov    %esp,%ebp
c01000c5:	83 ec 08             	sub    $0x8,%esp
    mon_backtrace(0, NULL, NULL);
c01000c8:	83 ec 04             	sub    $0x4,%esp
c01000cb:	6a 00                	push   $0x0
c01000cd:	6a 00                	push   $0x0
c01000cf:	6a 00                	push   $0x0
c01000d1:	e8 b5 0d 00 00       	call   c0100e8b <mon_backtrace>
c01000d6:	83 c4 10             	add    $0x10,%esp
}
c01000d9:	90                   	nop
c01000da:	c9                   	leave  
c01000db:	c3                   	ret    

c01000dc <grade_backtrace1>:

void __attribute__((noinline))
grade_backtrace1(int arg0, int arg1) {
c01000dc:	55                   	push   %ebp
c01000dd:	89 e5                	mov    %esp,%ebp
c01000df:	53                   	push   %ebx
c01000e0:	83 ec 04             	sub    $0x4,%esp
    grade_backtrace2(arg0, (int)&arg0, arg1, (int)&arg1);
c01000e3:	8d 4d 0c             	lea    0xc(%ebp),%ecx
c01000e6:	8b 55 0c             	mov    0xc(%ebp),%edx
c01000e9:	8d 5d 08             	lea    0x8(%ebp),%ebx
c01000ec:	8b 45 08             	mov    0x8(%ebp),%eax
c01000ef:	51                   	push   %ecx
c01000f0:	52                   	push   %edx
c01000f1:	53                   	push   %ebx
c01000f2:	50                   	push   %eax
c01000f3:	e8 ca ff ff ff       	call   c01000c2 <grade_backtrace2>
c01000f8:	83 c4 10             	add    $0x10,%esp
}
c01000fb:	90                   	nop
c01000fc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01000ff:	c9                   	leave  
c0100100:	c3                   	ret    

c0100101 <grade_backtrace0>:

void __attribute__((noinline))
grade_backtrace0(int arg0, int arg1, int arg2) {
c0100101:	55                   	push   %ebp
c0100102:	89 e5                	mov    %esp,%ebp
c0100104:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace1(arg0, arg2);
c0100107:	83 ec 08             	sub    $0x8,%esp
c010010a:	ff 75 10             	pushl  0x10(%ebp)
c010010d:	ff 75 08             	pushl  0x8(%ebp)
c0100110:	e8 c7 ff ff ff       	call   c01000dc <grade_backtrace1>
c0100115:	83 c4 10             	add    $0x10,%esp
}
c0100118:	90                   	nop
c0100119:	c9                   	leave  
c010011a:	c3                   	ret    

c010011b <grade_backtrace>:

void
grade_backtrace(void) {
c010011b:	55                   	push   %ebp
c010011c:	89 e5                	mov    %esp,%ebp
c010011e:	83 ec 08             	sub    $0x8,%esp
    grade_backtrace0(0, (int)kern_init, 0xffff0000);
c0100121:	b8 36 00 10 c0       	mov    $0xc0100036,%eax
c0100126:	83 ec 04             	sub    $0x4,%esp
c0100129:	68 00 00 ff ff       	push   $0xffff0000
c010012e:	50                   	push   %eax
c010012f:	6a 00                	push   $0x0
c0100131:	e8 cb ff ff ff       	call   c0100101 <grade_backtrace0>
c0100136:	83 c4 10             	add    $0x10,%esp
}
c0100139:	90                   	nop
c010013a:	c9                   	leave  
c010013b:	c3                   	ret    

c010013c <lab1_print_cur_status>:

static void
lab1_print_cur_status(void) {
c010013c:	55                   	push   %ebp
c010013d:	89 e5                	mov    %esp,%ebp
c010013f:	83 ec 18             	sub    $0x18,%esp
    static int round = 0;
    uint16_t reg1, reg2, reg3, reg4;
    asm volatile (
c0100142:	8c 4d f6             	mov    %cs,-0xa(%ebp)
c0100145:	8c 5d f4             	mov    %ds,-0xc(%ebp)
c0100148:	8c 45 f2             	mov    %es,-0xe(%ebp)
c010014b:	8c 55 f0             	mov    %ss,-0x10(%ebp)
            "mov %%cs, %0;"
            "mov %%ds, %1;"
            "mov %%es, %2;"
            "mov %%ss, %3;"
            : "=m"(reg1), "=m"(reg2), "=m"(reg3), "=m"(reg4));
    cprintf("%d: @ring %d\n", round, reg1 & 3);
c010014e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100152:	0f b7 c0             	movzwl %ax,%eax
c0100155:	83 e0 03             	and    $0x3,%eax
c0100158:	89 c2                	mov    %eax,%edx
c010015a:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c010015f:	83 ec 04             	sub    $0x4,%esp
c0100162:	52                   	push   %edx
c0100163:	50                   	push   %eax
c0100164:	68 01 2d 11 c0       	push   $0xc0112d01
c0100169:	e8 11 02 00 00       	call   c010037f <cprintf>
c010016e:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  cs = %x\n", round, reg1);
c0100171:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100175:	0f b7 d0             	movzwl %ax,%edx
c0100178:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c010017d:	83 ec 04             	sub    $0x4,%esp
c0100180:	52                   	push   %edx
c0100181:	50                   	push   %eax
c0100182:	68 0f 2d 11 c0       	push   $0xc0112d0f
c0100187:	e8 f3 01 00 00       	call   c010037f <cprintf>
c010018c:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ds = %x\n", round, reg2);
c010018f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c0100193:	0f b7 d0             	movzwl %ax,%edx
c0100196:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c010019b:	83 ec 04             	sub    $0x4,%esp
c010019e:	52                   	push   %edx
c010019f:	50                   	push   %eax
c01001a0:	68 1d 2d 11 c0       	push   $0xc0112d1d
c01001a5:	e8 d5 01 00 00       	call   c010037f <cprintf>
c01001aa:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  es = %x\n", round, reg3);
c01001ad:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c01001b1:	0f b7 d0             	movzwl %ax,%edx
c01001b4:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c01001b9:	83 ec 04             	sub    $0x4,%esp
c01001bc:	52                   	push   %edx
c01001bd:	50                   	push   %eax
c01001be:	68 2b 2d 11 c0       	push   $0xc0112d2b
c01001c3:	e8 b7 01 00 00       	call   c010037f <cprintf>
c01001c8:	83 c4 10             	add    $0x10,%esp
    cprintf("%d:  ss = %x\n", round, reg4);
c01001cb:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c01001cf:	0f b7 d0             	movzwl %ax,%edx
c01001d2:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c01001d7:	83 ec 04             	sub    $0x4,%esp
c01001da:	52                   	push   %edx
c01001db:	50                   	push   %eax
c01001dc:	68 39 2d 11 c0       	push   $0xc0112d39
c01001e1:	e8 99 01 00 00       	call   c010037f <cprintf>
c01001e6:	83 c4 10             	add    $0x10,%esp
    round ++;
c01001e9:	a1 00 e0 14 c0       	mov    0xc014e000,%eax
c01001ee:	83 c0 01             	add    $0x1,%eax
c01001f1:	a3 00 e0 14 c0       	mov    %eax,0xc014e000
}
c01001f6:	90                   	nop
c01001f7:	c9                   	leave  
c01001f8:	c3                   	ret    

c01001f9 <lab1_switch_to_user>:

static void
lab1_switch_to_user(void) {
c01001f9:	55                   	push   %ebp
c01001fa:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 : TODO
}
c01001fc:	90                   	nop
c01001fd:	5d                   	pop    %ebp
c01001fe:	c3                   	ret    

c01001ff <lab1_switch_to_kernel>:

static void
lab1_switch_to_kernel(void) {
c01001ff:	55                   	push   %ebp
c0100200:	89 e5                	mov    %esp,%ebp
    //LAB1 CHALLENGE 1 :  TODO
}
c0100202:	90                   	nop
c0100203:	5d                   	pop    %ebp
c0100204:	c3                   	ret    

c0100205 <lab1_switch_test>:

static void
lab1_switch_test(void) {
c0100205:	55                   	push   %ebp
c0100206:	89 e5                	mov    %esp,%ebp
c0100208:	83 ec 08             	sub    $0x8,%esp
    lab1_print_cur_status();
c010020b:	e8 2c ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to  user  mode +++\n");
c0100210:	83 ec 0c             	sub    $0xc,%esp
c0100213:	68 48 2d 11 c0       	push   $0xc0112d48
c0100218:	e8 62 01 00 00       	call   c010037f <cprintf>
c010021d:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_user();
c0100220:	e8 d4 ff ff ff       	call   c01001f9 <lab1_switch_to_user>
    lab1_print_cur_status();
c0100225:	e8 12 ff ff ff       	call   c010013c <lab1_print_cur_status>
    cprintf("+++ switch to kernel mode +++\n");
c010022a:	83 ec 0c             	sub    $0xc,%esp
c010022d:	68 68 2d 11 c0       	push   $0xc0112d68
c0100232:	e8 48 01 00 00       	call   c010037f <cprintf>
c0100237:	83 c4 10             	add    $0x10,%esp
    lab1_switch_to_kernel();
c010023a:	e8 c0 ff ff ff       	call   c01001ff <lab1_switch_to_kernel>
    lab1_print_cur_status();
c010023f:	e8 f8 fe ff ff       	call   c010013c <lab1_print_cur_status>
}
c0100244:	90                   	nop
c0100245:	c9                   	leave  
c0100246:	c3                   	ret    

c0100247 <strdup>:
#include <string.h>
#include <kmalloc.h>

char *
strdup(const char *src) {
c0100247:	55                   	push   %ebp
c0100248:	89 e5                	mov    %esp,%ebp
c010024a:	83 ec 18             	sub    $0x18,%esp
    char *dst;
    size_t len = strlen(src);
c010024d:	83 ec 0c             	sub    $0xc,%esp
c0100250:	ff 75 08             	pushl  0x8(%ebp)
c0100253:	e8 53 1e 01 00       	call   c01120ab <strlen>
c0100258:	83 c4 10             	add    $0x10,%esp
c010025b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((dst = kmalloc(len + 1)) != NULL) {
c010025e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100261:	83 c0 01             	add    $0x1,%eax
c0100264:	83 ec 0c             	sub    $0xc,%esp
c0100267:	50                   	push   %eax
c0100268:	e8 d7 6b 00 00       	call   c0106e44 <kmalloc>
c010026d:	83 c4 10             	add    $0x10,%esp
c0100270:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0100273:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100277:	74 1f                	je     c0100298 <strdup+0x51>
        memcpy(dst, src, len);
c0100279:	83 ec 04             	sub    $0x4,%esp
c010027c:	ff 75 f4             	pushl  -0xc(%ebp)
c010027f:	ff 75 08             	pushl  0x8(%ebp)
c0100282:	ff 75 f0             	pushl  -0x10(%ebp)
c0100285:	e8 5e 22 01 00       	call   c01124e8 <memcpy>
c010028a:	83 c4 10             	add    $0x10,%esp
        dst[len] = '\0';
c010028d:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100290:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100293:	01 d0                	add    %edx,%eax
c0100295:	c6 00 00             	movb   $0x0,(%eax)
    }
    return dst;
c0100298:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010029b:	c9                   	leave  
c010029c:	c3                   	ret    

c010029d <stradd>:

char *
stradd(const char *src1, const char *src2) {
c010029d:	55                   	push   %ebp
c010029e:	89 e5                	mov    %esp,%ebp
c01002a0:	83 ec 18             	sub    $0x18,%esp
    char *ret, *dst;
    size_t len1 = strlen(src1), len2 = strlen(src2);
c01002a3:	83 ec 0c             	sub    $0xc,%esp
c01002a6:	ff 75 08             	pushl  0x8(%ebp)
c01002a9:	e8 fd 1d 01 00       	call   c01120ab <strlen>
c01002ae:	83 c4 10             	add    $0x10,%esp
c01002b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01002b4:	83 ec 0c             	sub    $0xc,%esp
c01002b7:	ff 75 0c             	pushl  0xc(%ebp)
c01002ba:	e8 ec 1d 01 00       	call   c01120ab <strlen>
c01002bf:	83 c4 10             	add    $0x10,%esp
c01002c2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = dst = kmalloc(len1 + len2 + 1)) != NULL) {
c01002c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01002c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01002cb:	01 d0                	add    %edx,%eax
c01002cd:	83 c0 01             	add    $0x1,%eax
c01002d0:	83 ec 0c             	sub    $0xc,%esp
c01002d3:	50                   	push   %eax
c01002d4:	e8 6b 6b 00 00       	call   c0106e44 <kmalloc>
c01002d9:	83 c4 10             	add    $0x10,%esp
c01002dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01002df:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01002e2:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01002e5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01002e9:	74 3a                	je     c0100325 <stradd+0x88>
        memcpy(dst, src1, len1), dst += len1;
c01002eb:	83 ec 04             	sub    $0x4,%esp
c01002ee:	ff 75 f4             	pushl  -0xc(%ebp)
c01002f1:	ff 75 08             	pushl  0x8(%ebp)
c01002f4:	ff 75 ec             	pushl  -0x14(%ebp)
c01002f7:	e8 ec 21 01 00       	call   c01124e8 <memcpy>
c01002fc:	83 c4 10             	add    $0x10,%esp
c01002ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100302:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(dst, src2, len2), dst += len2;
c0100305:	83 ec 04             	sub    $0x4,%esp
c0100308:	ff 75 f0             	pushl  -0x10(%ebp)
c010030b:	ff 75 0c             	pushl  0xc(%ebp)
c010030e:	ff 75 ec             	pushl  -0x14(%ebp)
c0100311:	e8 d2 21 01 00       	call   c01124e8 <memcpy>
c0100316:	83 c4 10             	add    $0x10,%esp
c0100319:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010031c:	01 45 ec             	add    %eax,-0x14(%ebp)
        *dst = '\0';
c010031f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100322:	c6 00 00             	movb   $0x0,(%eax)
    }
    return ret;
c0100325:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
c0100328:	c9                   	leave  
c0100329:	c3                   	ret    

c010032a <cputch>:
/* *
 * cputch - writes a single character @c to stdout, and it will
 * increace the value of counter pointed by @cnt.
 * */
static void
cputch(int c, int *cnt) {
c010032a:	55                   	push   %ebp
c010032b:	89 e5                	mov    %esp,%ebp
c010032d:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c0100330:	83 ec 0c             	sub    $0xc,%esp
c0100333:	ff 75 08             	pushl  0x8(%ebp)
c0100336:	e8 28 1c 00 00       	call   c0101f63 <cons_putc>
c010033b:	83 c4 10             	add    $0x10,%esp
    (*cnt) ++;
c010033e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100341:	8b 00                	mov    (%eax),%eax
c0100343:	8d 50 01             	lea    0x1(%eax),%edx
c0100346:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100349:	89 10                	mov    %edx,(%eax)
}
c010034b:	90                   	nop
c010034c:	c9                   	leave  
c010034d:	c3                   	ret    

c010034e <vcprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want cprintf() instead.
 * */
int
vcprintf(const char *fmt, va_list ap) {
c010034e:	55                   	push   %ebp
c010034f:	89 e5                	mov    %esp,%ebp
c0100351:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c0100354:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    vprintfmt((void*)cputch, NO_FD, &cnt, fmt, ap);
c010035b:	83 ec 0c             	sub    $0xc,%esp
c010035e:	ff 75 0c             	pushl  0xc(%ebp)
c0100361:	ff 75 08             	pushl  0x8(%ebp)
c0100364:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0100367:	50                   	push   %eax
c0100368:	68 d9 6a ff ff       	push   $0xffff6ad9
c010036d:	68 2a 03 10 c0       	push   $0xc010032a
c0100372:	e8 d0 23 01 00       	call   c0112747 <vprintfmt>
c0100377:	83 c4 20             	add    $0x20,%esp
    return cnt;
c010037a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010037d:	c9                   	leave  
c010037e:	c3                   	ret    

c010037f <cprintf>:
 *
 * The return value is the number of characters which would be
 * written to stdout.
 * */
int
cprintf(const char *fmt, ...) {
c010037f:	55                   	push   %ebp
c0100380:	89 e5                	mov    %esp,%ebp
c0100382:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0100385:	8d 45 0c             	lea    0xc(%ebp),%eax
c0100388:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vcprintf(fmt, ap);
c010038b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010038e:	83 ec 08             	sub    $0x8,%esp
c0100391:	50                   	push   %eax
c0100392:	ff 75 08             	pushl  0x8(%ebp)
c0100395:	e8 b4 ff ff ff       	call   c010034e <vcprintf>
c010039a:	83 c4 10             	add    $0x10,%esp
c010039d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c01003a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01003a3:	c9                   	leave  
c01003a4:	c3                   	ret    

c01003a5 <cputchar>:

/* cputchar - writes a single character to stdout */
void
cputchar(int c) {
c01003a5:	55                   	push   %ebp
c01003a6:	89 e5                	mov    %esp,%ebp
c01003a8:	83 ec 08             	sub    $0x8,%esp
    cons_putc(c);
c01003ab:	83 ec 0c             	sub    $0xc,%esp
c01003ae:	ff 75 08             	pushl  0x8(%ebp)
c01003b1:	e8 ad 1b 00 00       	call   c0101f63 <cons_putc>
c01003b6:	83 c4 10             	add    $0x10,%esp
}
c01003b9:	90                   	nop
c01003ba:	c9                   	leave  
c01003bb:	c3                   	ret    

c01003bc <cputs>:
/* *
 * cputs- writes the string pointed by @str to stdout and
 * appends a newline character.
 * */
int
cputs(const char *str) {
c01003bc:	55                   	push   %ebp
c01003bd:	89 e5                	mov    %esp,%ebp
c01003bf:	83 ec 18             	sub    $0x18,%esp
    int cnt = 0;
c01003c2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    char c;
    while ((c = *str ++) != '\0') {
c01003c9:	eb 14                	jmp    c01003df <cputs+0x23>
        cputch(c, &cnt);
c01003cb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
c01003cf:	83 ec 08             	sub    $0x8,%esp
c01003d2:	8d 55 f0             	lea    -0x10(%ebp),%edx
c01003d5:	52                   	push   %edx
c01003d6:	50                   	push   %eax
c01003d7:	e8 4e ff ff ff       	call   c010032a <cputch>
c01003dc:	83 c4 10             	add    $0x10,%esp
 * */
int
cputs(const char *str) {
    int cnt = 0;
    char c;
    while ((c = *str ++) != '\0') {
c01003df:	8b 45 08             	mov    0x8(%ebp),%eax
c01003e2:	8d 50 01             	lea    0x1(%eax),%edx
c01003e5:	89 55 08             	mov    %edx,0x8(%ebp)
c01003e8:	0f b6 00             	movzbl (%eax),%eax
c01003eb:	88 45 f7             	mov    %al,-0x9(%ebp)
c01003ee:	80 7d f7 00          	cmpb   $0x0,-0x9(%ebp)
c01003f2:	75 d7                	jne    c01003cb <cputs+0xf>
        cputch(c, &cnt);
    }
    cputch('\n', &cnt);
c01003f4:	83 ec 08             	sub    $0x8,%esp
c01003f7:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01003fa:	50                   	push   %eax
c01003fb:	6a 0a                	push   $0xa
c01003fd:	e8 28 ff ff ff       	call   c010032a <cputch>
c0100402:	83 c4 10             	add    $0x10,%esp
    return cnt;
c0100405:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0100408:	c9                   	leave  
c0100409:	c3                   	ret    

c010040a <getchar>:

/* getchar - reads a single non-zero character from stdin */
int
getchar(void) {
c010040a:	55                   	push   %ebp
c010040b:	89 e5                	mov    %esp,%ebp
c010040d:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = cons_getc()) == 0)
c0100410:	e8 97 1b 00 00       	call   c0101fac <cons_getc>
c0100415:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100418:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010041c:	74 f2                	je     c0100410 <getchar+0x6>
        /* do nothing */;
    return c;
c010041e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100421:	c9                   	leave  
c0100422:	c3                   	ret    

c0100423 <readline>:
 * The readline() function returns the text of the line read. If some errors
 * are happened, NULL is returned. The return value is a global variable,
 * thus it should be copied before it is used.
 * */
char *
readline(const char *prompt) {
c0100423:	55                   	push   %ebp
c0100424:	89 e5                	mov    %esp,%ebp
c0100426:	83 ec 18             	sub    $0x18,%esp
    if (prompt != NULL) {
c0100429:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010042d:	74 13                	je     c0100442 <readline+0x1f>
        cprintf("%s", prompt);
c010042f:	83 ec 08             	sub    $0x8,%esp
c0100432:	ff 75 08             	pushl  0x8(%ebp)
c0100435:	68 87 2d 11 c0       	push   $0xc0112d87
c010043a:	e8 40 ff ff ff       	call   c010037f <cprintf>
c010043f:	83 c4 10             	add    $0x10,%esp
    }
    int i = 0, c;
c0100442:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        c = getchar();
c0100449:	e8 bc ff ff ff       	call   c010040a <getchar>
c010044e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (c < 0) {
c0100451:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100455:	79 0a                	jns    c0100461 <readline+0x3e>
            return NULL;
c0100457:	b8 00 00 00 00       	mov    $0x0,%eax
c010045c:	e9 82 00 00 00       	jmp    c01004e3 <readline+0xc0>
        }
        else if (c >= ' ' && i < BUFSIZE - 1) {
c0100461:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0100465:	7e 2b                	jle    c0100492 <readline+0x6f>
c0100467:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
c010046e:	7f 22                	jg     c0100492 <readline+0x6f>
            cputchar(c);
c0100470:	83 ec 0c             	sub    $0xc,%esp
c0100473:	ff 75 f0             	pushl  -0x10(%ebp)
c0100476:	e8 2a ff ff ff       	call   c01003a5 <cputchar>
c010047b:	83 c4 10             	add    $0x10,%esp
            buf[i ++] = c;
c010047e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100481:	8d 50 01             	lea    0x1(%eax),%edx
c0100484:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100487:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010048a:	88 90 20 e0 14 c0    	mov    %dl,-0x3feb1fe0(%eax)
c0100490:	eb 4c                	jmp    c01004de <readline+0xbb>
        }
        else if (c == '\b' && i > 0) {
c0100492:	83 7d f0 08          	cmpl   $0x8,-0x10(%ebp)
c0100496:	75 1a                	jne    c01004b2 <readline+0x8f>
c0100498:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010049c:	7e 14                	jle    c01004b2 <readline+0x8f>
            cputchar(c);
c010049e:	83 ec 0c             	sub    $0xc,%esp
c01004a1:	ff 75 f0             	pushl  -0x10(%ebp)
c01004a4:	e8 fc fe ff ff       	call   c01003a5 <cputchar>
c01004a9:	83 c4 10             	add    $0x10,%esp
            i --;
c01004ac:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c01004b0:	eb 2c                	jmp    c01004de <readline+0xbb>
        }
        else if (c == '\n' || c == '\r') {
c01004b2:	83 7d f0 0a          	cmpl   $0xa,-0x10(%ebp)
c01004b6:	74 06                	je     c01004be <readline+0x9b>
c01004b8:	83 7d f0 0d          	cmpl   $0xd,-0x10(%ebp)
c01004bc:	75 8b                	jne    c0100449 <readline+0x26>
            cputchar(c);
c01004be:	83 ec 0c             	sub    $0xc,%esp
c01004c1:	ff 75 f0             	pushl  -0x10(%ebp)
c01004c4:	e8 dc fe ff ff       	call   c01003a5 <cputchar>
c01004c9:	83 c4 10             	add    $0x10,%esp
            buf[i] = '\0';
c01004cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01004cf:	05 20 e0 14 c0       	add    $0xc014e020,%eax
c01004d4:	c6 00 00             	movb   $0x0,(%eax)
            return buf;
c01004d7:	b8 20 e0 14 c0       	mov    $0xc014e020,%eax
c01004dc:	eb 05                	jmp    c01004e3 <readline+0xc0>
        }
    }
c01004de:	e9 66 ff ff ff       	jmp    c0100449 <readline+0x26>
}
c01004e3:	c9                   	leave  
c01004e4:	c3                   	ret    

c01004e5 <__panic>:
/* *
 * __panic - __panic is called on unresolvable fatal errors. it prints
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
c01004e5:	55                   	push   %ebp
c01004e6:	89 e5                	mov    %esp,%ebp
c01004e8:	83 ec 18             	sub    $0x18,%esp
    if (is_panic) {
c01004eb:	a1 20 e4 14 c0       	mov    0xc014e420,%eax
c01004f0:	85 c0                	test   %eax,%eax
c01004f2:	75 5f                	jne    c0100553 <__panic+0x6e>
        goto panic_dead;
    }
    is_panic = 1;
c01004f4:	c7 05 20 e4 14 c0 01 	movl   $0x1,0xc014e420
c01004fb:	00 00 00 

    // print the 'message'
    va_list ap;
    va_start(ap, fmt);
c01004fe:	8d 45 14             	lea    0x14(%ebp),%eax
c0100501:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel panic at %s:%d:\n    ", file, line);
c0100504:	83 ec 04             	sub    $0x4,%esp
c0100507:	ff 75 0c             	pushl  0xc(%ebp)
c010050a:	ff 75 08             	pushl  0x8(%ebp)
c010050d:	68 8a 2d 11 c0       	push   $0xc0112d8a
c0100512:	e8 68 fe ff ff       	call   c010037f <cprintf>
c0100517:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010051a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010051d:	83 ec 08             	sub    $0x8,%esp
c0100520:	50                   	push   %eax
c0100521:	ff 75 10             	pushl  0x10(%ebp)
c0100524:	e8 25 fe ff ff       	call   c010034e <vcprintf>
c0100529:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010052c:	83 ec 0c             	sub    $0xc,%esp
c010052f:	68 a6 2d 11 c0       	push   $0xc0112da6
c0100534:	e8 46 fe ff ff       	call   c010037f <cprintf>
c0100539:	83 c4 10             	add    $0x10,%esp
    
    cprintf("stack trackback:\n");
c010053c:	83 ec 0c             	sub    $0xc,%esp
c010053f:	68 a8 2d 11 c0       	push   $0xc0112da8
c0100544:	e8 36 fe ff ff       	call   c010037f <cprintf>
c0100549:	83 c4 10             	add    $0x10,%esp
    print_stackframe();
c010054c:	e8 ee 06 00 00       	call   c0100c3f <print_stackframe>
c0100551:	eb 01                	jmp    c0100554 <__panic+0x6f>
 * "panic: 'message'", and then enters the kernel monitor.
 * */
void
__panic(const char *file, int line, const char *fmt, ...) {
    if (is_panic) {
        goto panic_dead;
c0100553:	90                   	nop
    print_stackframe();
    
    va_end(ap);

panic_dead:
    intr_disable();
c0100554:	e8 8f 1c 00 00       	call   c01021e8 <intr_disable>
    while (1) {
        kmonitor(NULL);
c0100559:	83 ec 0c             	sub    $0xc,%esp
c010055c:	6a 00                	push   $0x0
c010055e:	e8 4e 08 00 00       	call   c0100db1 <kmonitor>
c0100563:	83 c4 10             	add    $0x10,%esp
    }
c0100566:	eb f1                	jmp    c0100559 <__panic+0x74>

c0100568 <__warn>:
}

/* __warn - like panic, but don't */
void
__warn(const char *file, int line, const char *fmt, ...) {
c0100568:	55                   	push   %ebp
c0100569:	89 e5                	mov    %esp,%ebp
c010056b:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    va_start(ap, fmt);
c010056e:	8d 45 14             	lea    0x14(%ebp),%eax
c0100571:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cprintf("kernel warning at %s:%d:\n    ", file, line);
c0100574:	83 ec 04             	sub    $0x4,%esp
c0100577:	ff 75 0c             	pushl  0xc(%ebp)
c010057a:	ff 75 08             	pushl  0x8(%ebp)
c010057d:	68 ba 2d 11 c0       	push   $0xc0112dba
c0100582:	e8 f8 fd ff ff       	call   c010037f <cprintf>
c0100587:	83 c4 10             	add    $0x10,%esp
    vcprintf(fmt, ap);
c010058a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010058d:	83 ec 08             	sub    $0x8,%esp
c0100590:	50                   	push   %eax
c0100591:	ff 75 10             	pushl  0x10(%ebp)
c0100594:	e8 b5 fd ff ff       	call   c010034e <vcprintf>
c0100599:	83 c4 10             	add    $0x10,%esp
    cprintf("\n");
c010059c:	83 ec 0c             	sub    $0xc,%esp
c010059f:	68 a6 2d 11 c0       	push   $0xc0112da6
c01005a4:	e8 d6 fd ff ff       	call   c010037f <cprintf>
c01005a9:	83 c4 10             	add    $0x10,%esp
    va_end(ap);
}
c01005ac:	90                   	nop
c01005ad:	c9                   	leave  
c01005ae:	c3                   	ret    

c01005af <is_kernel_panic>:

bool
is_kernel_panic(void) {
c01005af:	55                   	push   %ebp
c01005b0:	89 e5                	mov    %esp,%ebp
    return is_panic;
c01005b2:	a1 20 e4 14 c0       	mov    0xc014e420,%eax
}
c01005b7:	5d                   	pop    %ebp
c01005b8:	c3                   	ret    

c01005b9 <stab_binsearch>:
 *      stab_binsearch(stabs, &left, &right, N_SO, 0xf0100184);
 * will exit setting left = 118, right = 554.
 * */
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
c01005b9:	55                   	push   %ebp
c01005ba:	89 e5                	mov    %esp,%ebp
c01005bc:	83 ec 20             	sub    $0x20,%esp
    int l = *region_left, r = *region_right, any_matches = 0;
c01005bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01005c2:	8b 00                	mov    (%eax),%eax
c01005c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01005c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01005ca:	8b 00                	mov    (%eax),%eax
c01005cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
c01005cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    while (l <= r) {
c01005d6:	e9 d2 00 00 00       	jmp    c01006ad <stab_binsearch+0xf4>
        int true_m = (l + r) / 2, m = true_m;
c01005db:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01005de:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01005e1:	01 d0                	add    %edx,%eax
c01005e3:	89 c2                	mov    %eax,%edx
c01005e5:	c1 ea 1f             	shr    $0x1f,%edx
c01005e8:	01 d0                	add    %edx,%eax
c01005ea:	d1 f8                	sar    %eax
c01005ec:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01005ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01005f2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005f5:	eb 04                	jmp    c01005fb <stab_binsearch+0x42>
            m --;
c01005f7:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)

    while (l <= r) {
        int true_m = (l + r) / 2, m = true_m;

        // search for earliest stab with right type
        while (m >= l && stabs[m].n_type != type) {
c01005fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01005fe:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100601:	7c 1f                	jl     c0100622 <stab_binsearch+0x69>
c0100603:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100606:	89 d0                	mov    %edx,%eax
c0100608:	01 c0                	add    %eax,%eax
c010060a:	01 d0                	add    %edx,%eax
c010060c:	c1 e0 02             	shl    $0x2,%eax
c010060f:	89 c2                	mov    %eax,%edx
c0100611:	8b 45 08             	mov    0x8(%ebp),%eax
c0100614:	01 d0                	add    %edx,%eax
c0100616:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c010061a:	0f b6 c0             	movzbl %al,%eax
c010061d:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100620:	75 d5                	jne    c01005f7 <stab_binsearch+0x3e>
            m --;
        }
        if (m < l) {    // no match in [l, m]
c0100622:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100625:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0100628:	7d 0b                	jge    c0100635 <stab_binsearch+0x7c>
            l = true_m + 1;
c010062a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010062d:	83 c0 01             	add    $0x1,%eax
c0100630:	89 45 fc             	mov    %eax,-0x4(%ebp)
            continue;
c0100633:	eb 78                	jmp    c01006ad <stab_binsearch+0xf4>
        }

        // actual binary search
        any_matches = 1;
c0100635:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        if (stabs[m].n_value < addr) {
c010063c:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010063f:	89 d0                	mov    %edx,%eax
c0100641:	01 c0                	add    %eax,%eax
c0100643:	01 d0                	add    %edx,%eax
c0100645:	c1 e0 02             	shl    $0x2,%eax
c0100648:	89 c2                	mov    %eax,%edx
c010064a:	8b 45 08             	mov    0x8(%ebp),%eax
c010064d:	01 d0                	add    %edx,%eax
c010064f:	8b 40 08             	mov    0x8(%eax),%eax
c0100652:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100655:	73 13                	jae    c010066a <stab_binsearch+0xb1>
            *region_left = m;
c0100657:	8b 45 0c             	mov    0xc(%ebp),%eax
c010065a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010065d:	89 10                	mov    %edx,(%eax)
            l = true_m + 1;
c010065f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100662:	83 c0 01             	add    $0x1,%eax
c0100665:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100668:	eb 43                	jmp    c01006ad <stab_binsearch+0xf4>
        } else if (stabs[m].n_value > addr) {
c010066a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010066d:	89 d0                	mov    %edx,%eax
c010066f:	01 c0                	add    %eax,%eax
c0100671:	01 d0                	add    %edx,%eax
c0100673:	c1 e0 02             	shl    $0x2,%eax
c0100676:	89 c2                	mov    %eax,%edx
c0100678:	8b 45 08             	mov    0x8(%ebp),%eax
c010067b:	01 d0                	add    %edx,%eax
c010067d:	8b 40 08             	mov    0x8(%eax),%eax
c0100680:	3b 45 18             	cmp    0x18(%ebp),%eax
c0100683:	76 16                	jbe    c010069b <stab_binsearch+0xe2>
            *region_right = m - 1;
c0100685:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100688:	8d 50 ff             	lea    -0x1(%eax),%edx
c010068b:	8b 45 10             	mov    0x10(%ebp),%eax
c010068e:	89 10                	mov    %edx,(%eax)
            r = m - 1;
c0100690:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0100693:	83 e8 01             	sub    $0x1,%eax
c0100696:	89 45 f8             	mov    %eax,-0x8(%ebp)
c0100699:	eb 12                	jmp    c01006ad <stab_binsearch+0xf4>
        } else {
            // exact match for 'addr', but continue loop to find
            // *region_right
            *region_left = m;
c010069b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010069e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01006a1:	89 10                	mov    %edx,(%eax)
            l = m;
c01006a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01006a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
            addr ++;
c01006a9:	83 45 18 01          	addl   $0x1,0x18(%ebp)
static void
stab_binsearch(const struct stab *stabs, int *region_left, int *region_right,
           int type, uintptr_t addr) {
    int l = *region_left, r = *region_right, any_matches = 0;

    while (l <= r) {
c01006ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01006b0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c01006b3:	0f 8e 22 ff ff ff    	jle    c01005db <stab_binsearch+0x22>
            l = m;
            addr ++;
        }
    }

    if (!any_matches) {
c01006b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01006bd:	75 0f                	jne    c01006ce <stab_binsearch+0x115>
        *region_right = *region_left - 1;
c01006bf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006c2:	8b 00                	mov    (%eax),%eax
c01006c4:	8d 50 ff             	lea    -0x1(%eax),%edx
c01006c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01006ca:	89 10                	mov    %edx,(%eax)
        l = *region_right;
        for (; l > *region_left && stabs[l].n_type != type; l --)
            /* do nothing */;
        *region_left = l;
    }
}
c01006cc:	eb 3f                	jmp    c010070d <stab_binsearch+0x154>
    if (!any_matches) {
        *region_right = *region_left - 1;
    }
    else {
        // find rightmost region containing 'addr'
        l = *region_right;
c01006ce:	8b 45 10             	mov    0x10(%ebp),%eax
c01006d1:	8b 00                	mov    (%eax),%eax
c01006d3:	89 45 fc             	mov    %eax,-0x4(%ebp)
        for (; l > *region_left && stabs[l].n_type != type; l --)
c01006d6:	eb 04                	jmp    c01006dc <stab_binsearch+0x123>
c01006d8:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
c01006dc:	8b 45 0c             	mov    0xc(%ebp),%eax
c01006df:	8b 00                	mov    (%eax),%eax
c01006e1:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c01006e4:	7d 1f                	jge    c0100705 <stab_binsearch+0x14c>
c01006e6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01006e9:	89 d0                	mov    %edx,%eax
c01006eb:	01 c0                	add    %eax,%eax
c01006ed:	01 d0                	add    %edx,%eax
c01006ef:	c1 e0 02             	shl    $0x2,%eax
c01006f2:	89 c2                	mov    %eax,%edx
c01006f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01006f7:	01 d0                	add    %edx,%eax
c01006f9:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c01006fd:	0f b6 c0             	movzbl %al,%eax
c0100700:	3b 45 14             	cmp    0x14(%ebp),%eax
c0100703:	75 d3                	jne    c01006d8 <stab_binsearch+0x11f>
            /* do nothing */;
        *region_left = l;
c0100705:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100708:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010070b:	89 10                	mov    %edx,(%eax)
    }
}
c010070d:	90                   	nop
c010070e:	c9                   	leave  
c010070f:	c3                   	ret    

c0100710 <debuginfo_eip>:
 * the specified instruction address, @addr.  Returns 0 if information
 * was found, and negative if not.  But even if it returns negative it
 * has stored some information into '*info'.
 * */
int
debuginfo_eip(uintptr_t addr, struct eipdebuginfo *info) {
c0100710:	55                   	push   %ebp
c0100711:	89 e5                	mov    %esp,%ebp
c0100713:	83 ec 38             	sub    $0x38,%esp
    const struct stab *stabs, *stab_end;
    const char *stabstr, *stabstr_end;

    info->eip_file = "<unknown>";
c0100716:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100719:	c7 00 d8 2d 11 c0    	movl   $0xc0112dd8,(%eax)
    info->eip_line = 0;
c010071f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100722:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    info->eip_fn_name = "<unknown>";
c0100729:	8b 45 0c             	mov    0xc(%ebp),%eax
c010072c:	c7 40 08 d8 2d 11 c0 	movl   $0xc0112dd8,0x8(%eax)
    info->eip_fn_namelen = 9;
c0100733:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100736:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
    info->eip_fn_addr = addr;
c010073d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100740:	8b 55 08             	mov    0x8(%ebp),%edx
c0100743:	89 50 10             	mov    %edx,0x10(%eax)
    info->eip_fn_narg = 0;
c0100746:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100749:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

    // find the relevant set of stabs
    if (addr >= KERNBASE) {
c0100750:	81 7d 08 ff ff ff bf 	cmpl   $0xbfffffff,0x8(%ebp)
c0100757:	76 21                	jbe    c010077a <debuginfo_eip+0x6a>
        stabs = __STAB_BEGIN__;
c0100759:	c7 45 f4 40 71 11 c0 	movl   $0xc0117140,-0xc(%ebp)
        stab_end = __STAB_END__;
c0100760:	c7 45 f0 dc c0 13 c0 	movl   $0xc013c0dc,-0x10(%ebp)
        stabstr = __STABSTR_BEGIN__;
c0100767:	c7 45 ec dd c0 13 c0 	movl   $0xc013c0dd,-0x14(%ebp)
        stabstr_end = __STABSTR_END__;
c010076e:	c7 45 e8 b9 86 14 c0 	movl   $0xc01486b9,-0x18(%ebp)
c0100775:	e9 c3 00 00 00       	jmp    c010083d <debuginfo_eip+0x12d>
    }
    else {
        // user-program linker script, tools/user.ld puts the information about the
        // program's stabs (included __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__,
        // and __STABSTR_END__) in a structure located at virtual address USTAB.
        const struct userstabdata *usd = (struct userstabdata *)USTAB;
c010077a:	c7 45 e4 00 00 20 00 	movl   $0x200000,-0x1c(%ebp)

        // make sure that debugger (current process) can access this memory
        struct mm_struct *mm;
        if (current == NULL || (mm = current->mm) == NULL) {
c0100781:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0100786:	85 c0                	test   %eax,%eax
c0100788:	74 11                	je     c010079b <debuginfo_eip+0x8b>
c010078a:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010078f:	8b 40 18             	mov    0x18(%eax),%eax
c0100792:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0100795:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0100799:	75 0a                	jne    c01007a5 <debuginfo_eip+0x95>
            return -1;
c010079b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007a0:	e9 4e 03 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)usd, sizeof(struct userstabdata), 0)) {
c01007a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007a8:	6a 00                	push   $0x0
c01007aa:	6a 10                	push   $0x10
c01007ac:	50                   	push   %eax
c01007ad:	ff 75 e0             	pushl  -0x20(%ebp)
c01007b0:	e8 bf 53 00 00       	call   c0105b74 <user_mem_check>
c01007b5:	83 c4 10             	add    $0x10,%esp
c01007b8:	85 c0                	test   %eax,%eax
c01007ba:	75 0a                	jne    c01007c6 <debuginfo_eip+0xb6>
            return -1;
c01007bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01007c1:	e9 2d 03 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }

        stabs = usd->stabs;
c01007c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007c9:	8b 00                	mov    (%eax),%eax
c01007cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        stab_end = usd->stab_end;
c01007ce:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007d1:	8b 40 04             	mov    0x4(%eax),%eax
c01007d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        stabstr = usd->stabstr;
c01007d7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007da:	8b 40 08             	mov    0x8(%eax),%eax
c01007dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        stabstr_end = usd->stabstr_end;
c01007e0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01007e3:	8b 40 0c             	mov    0xc(%eax),%eax
c01007e6:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // make sure the STABS and string table memory is valid
        if (!user_mem_check(mm, (uintptr_t)stabs, (uintptr_t)stab_end - (uintptr_t)stabs, 0)) {
c01007e9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01007ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007ef:	29 c2                	sub    %eax,%edx
c01007f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01007f4:	6a 00                	push   $0x0
c01007f6:	52                   	push   %edx
c01007f7:	50                   	push   %eax
c01007f8:	ff 75 e0             	pushl  -0x20(%ebp)
c01007fb:	e8 74 53 00 00       	call   c0105b74 <user_mem_check>
c0100800:	83 c4 10             	add    $0x10,%esp
c0100803:	85 c0                	test   %eax,%eax
c0100805:	75 0a                	jne    c0100811 <debuginfo_eip+0x101>
            return -1;
c0100807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010080c:	e9 e2 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
        if (!user_mem_check(mm, (uintptr_t)stabstr, stabstr_end - stabstr, 0)) {
c0100811:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0100814:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100817:	29 c2                	sub    %eax,%edx
c0100819:	89 d0                	mov    %edx,%eax
c010081b:	89 c2                	mov    %eax,%edx
c010081d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100820:	6a 00                	push   $0x0
c0100822:	52                   	push   %edx
c0100823:	50                   	push   %eax
c0100824:	ff 75 e0             	pushl  -0x20(%ebp)
c0100827:	e8 48 53 00 00       	call   c0105b74 <user_mem_check>
c010082c:	83 c4 10             	add    $0x10,%esp
c010082f:	85 c0                	test   %eax,%eax
c0100831:	75 0a                	jne    c010083d <debuginfo_eip+0x12d>
            return -1;
c0100833:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100838:	e9 b6 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
        }
    }

    // String table validity checks
    if (stabstr_end <= stabstr || stabstr_end[-1] != 0) {
c010083d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100840:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0100843:	76 0d                	jbe    c0100852 <debuginfo_eip+0x142>
c0100845:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100848:	83 e8 01             	sub    $0x1,%eax
c010084b:	0f b6 00             	movzbl (%eax),%eax
c010084e:	84 c0                	test   %al,%al
c0100850:	74 0a                	je     c010085c <debuginfo_eip+0x14c>
        return -1;
c0100852:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100857:	e9 97 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
    // 'eip'.  First, we find the basic source file containing 'eip'.
    // Then, we look in that source file for the function.  Then we look
    // for the line number.

    // Search the entire set of stabs for the source file (type N_SO).
    int lfile = 0, rfile = (stab_end - stabs) - 1;
c010085c:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0100863:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0100866:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100869:	29 c2                	sub    %eax,%edx
c010086b:	89 d0                	mov    %edx,%eax
c010086d:	c1 f8 02             	sar    $0x2,%eax
c0100870:	69 c0 ab aa aa aa    	imul   $0xaaaaaaab,%eax,%eax
c0100876:	83 e8 01             	sub    $0x1,%eax
c0100879:	89 45 d8             	mov    %eax,-0x28(%ebp)
    stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
c010087c:	83 ec 0c             	sub    $0xc,%esp
c010087f:	ff 75 08             	pushl  0x8(%ebp)
c0100882:	6a 64                	push   $0x64
c0100884:	8d 45 d8             	lea    -0x28(%ebp),%eax
c0100887:	50                   	push   %eax
c0100888:	8d 45 dc             	lea    -0x24(%ebp),%eax
c010088b:	50                   	push   %eax
c010088c:	ff 75 f4             	pushl  -0xc(%ebp)
c010088f:	e8 25 fd ff ff       	call   c01005b9 <stab_binsearch>
c0100894:	83 c4 20             	add    $0x20,%esp
    if (lfile == 0)
c0100897:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010089a:	85 c0                	test   %eax,%eax
c010089c:	75 0a                	jne    c01008a8 <debuginfo_eip+0x198>
        return -1;
c010089e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01008a3:	e9 4b 02 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>

    // Search within that file's stabs for the function definition
    // (N_FUN).
    int lfun = lfile, rfun = rfile;
c01008a8:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01008ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01008ae:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01008b1:	89 45 d0             	mov    %eax,-0x30(%ebp)
    int lline, rline;
    stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
c01008b4:	83 ec 0c             	sub    $0xc,%esp
c01008b7:	ff 75 08             	pushl  0x8(%ebp)
c01008ba:	6a 24                	push   $0x24
c01008bc:	8d 45 d0             	lea    -0x30(%ebp),%eax
c01008bf:	50                   	push   %eax
c01008c0:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c01008c3:	50                   	push   %eax
c01008c4:	ff 75 f4             	pushl  -0xc(%ebp)
c01008c7:	e8 ed fc ff ff       	call   c01005b9 <stab_binsearch>
c01008cc:	83 c4 20             	add    $0x20,%esp

    if (lfun <= rfun) {
c01008cf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01008d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01008d5:	39 c2                	cmp    %eax,%edx
c01008d7:	7f 7c                	jg     c0100955 <debuginfo_eip+0x245>
        // stabs[lfun] points to the function name
        // in the string table, but check bounds just in case.
        if (stabs[lfun].n_strx < stabstr_end - stabstr) {
c01008d9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01008dc:	89 c2                	mov    %eax,%edx
c01008de:	89 d0                	mov    %edx,%eax
c01008e0:	01 c0                	add    %eax,%eax
c01008e2:	01 d0                	add    %edx,%eax
c01008e4:	c1 e0 02             	shl    $0x2,%eax
c01008e7:	89 c2                	mov    %eax,%edx
c01008e9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01008ec:	01 d0                	add    %edx,%eax
c01008ee:	8b 00                	mov    (%eax),%eax
c01008f0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c01008f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01008f6:	29 d1                	sub    %edx,%ecx
c01008f8:	89 ca                	mov    %ecx,%edx
c01008fa:	39 d0                	cmp    %edx,%eax
c01008fc:	73 22                	jae    c0100920 <debuginfo_eip+0x210>
            info->eip_fn_name = stabstr + stabs[lfun].n_strx;
c01008fe:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100901:	89 c2                	mov    %eax,%edx
c0100903:	89 d0                	mov    %edx,%eax
c0100905:	01 c0                	add    %eax,%eax
c0100907:	01 d0                	add    %edx,%eax
c0100909:	c1 e0 02             	shl    $0x2,%eax
c010090c:	89 c2                	mov    %eax,%edx
c010090e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100911:	01 d0                	add    %edx,%eax
c0100913:	8b 10                	mov    (%eax),%edx
c0100915:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100918:	01 c2                	add    %eax,%edx
c010091a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010091d:	89 50 08             	mov    %edx,0x8(%eax)
        }
        info->eip_fn_addr = stabs[lfun].n_value;
c0100920:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100923:	89 c2                	mov    %eax,%edx
c0100925:	89 d0                	mov    %edx,%eax
c0100927:	01 c0                	add    %eax,%eax
c0100929:	01 d0                	add    %edx,%eax
c010092b:	c1 e0 02             	shl    $0x2,%eax
c010092e:	89 c2                	mov    %eax,%edx
c0100930:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100933:	01 d0                	add    %edx,%eax
c0100935:	8b 50 08             	mov    0x8(%eax),%edx
c0100938:	8b 45 0c             	mov    0xc(%ebp),%eax
c010093b:	89 50 10             	mov    %edx,0x10(%eax)
        addr -= info->eip_fn_addr;
c010093e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100941:	8b 40 10             	mov    0x10(%eax),%eax
c0100944:	29 45 08             	sub    %eax,0x8(%ebp)
        // Search within the function definition for the line number.
        lline = lfun;
c0100947:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010094a:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfun;
c010094d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100950:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0100953:	eb 15                	jmp    c010096a <debuginfo_eip+0x25a>
    } else {
        // Couldn't find function stab!  Maybe we're in an assembly
        // file.  Search the whole file for the line number.
        info->eip_fn_addr = addr;
c0100955:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100958:	8b 55 08             	mov    0x8(%ebp),%edx
c010095b:	89 50 10             	mov    %edx,0x10(%eax)
        lline = lfile;
c010095e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100961:	89 45 cc             	mov    %eax,-0x34(%ebp)
        rline = rfile;
c0100964:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0100967:	89 45 c8             	mov    %eax,-0x38(%ebp)
    }
    info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
c010096a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010096d:	8b 40 08             	mov    0x8(%eax),%eax
c0100970:	83 ec 08             	sub    $0x8,%esp
c0100973:	6a 3a                	push   $0x3a
c0100975:	50                   	push   %eax
c0100976:	e8 fe 18 01 00       	call   c0112279 <strfind>
c010097b:	83 c4 10             	add    $0x10,%esp
c010097e:	89 c2                	mov    %eax,%edx
c0100980:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100983:	8b 40 08             	mov    0x8(%eax),%eax
c0100986:	29 c2                	sub    %eax,%edx
c0100988:	8b 45 0c             	mov    0xc(%ebp),%eax
c010098b:	89 50 0c             	mov    %edx,0xc(%eax)

    // Search within [lline, rline] for the line number stab.
    // If found, set info->eip_line to the right line number.
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
c010098e:	83 ec 0c             	sub    $0xc,%esp
c0100991:	ff 75 08             	pushl  0x8(%ebp)
c0100994:	6a 44                	push   $0x44
c0100996:	8d 45 c8             	lea    -0x38(%ebp),%eax
c0100999:	50                   	push   %eax
c010099a:	8d 45 cc             	lea    -0x34(%ebp),%eax
c010099d:	50                   	push   %eax
c010099e:	ff 75 f4             	pushl  -0xc(%ebp)
c01009a1:	e8 13 fc ff ff       	call   c01005b9 <stab_binsearch>
c01009a6:	83 c4 20             	add    $0x20,%esp
    if (lline <= rline) {
c01009a9:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009af:	39 c2                	cmp    %eax,%edx
c01009b1:	7f 24                	jg     c01009d7 <debuginfo_eip+0x2c7>
        info->eip_line = stabs[rline].n_desc;
c01009b3:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01009b6:	89 c2                	mov    %eax,%edx
c01009b8:	89 d0                	mov    %edx,%eax
c01009ba:	01 c0                	add    %eax,%eax
c01009bc:	01 d0                	add    %edx,%eax
c01009be:	c1 e0 02             	shl    $0x2,%eax
c01009c1:	89 c2                	mov    %eax,%edx
c01009c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01009c6:	01 d0                	add    %edx,%eax
c01009c8:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01009cc:	0f b7 d0             	movzwl %ax,%edx
c01009cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01009d2:	89 50 04             	mov    %edx,0x4(%eax)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009d5:	eb 13                	jmp    c01009ea <debuginfo_eip+0x2da>
    // If not found, return -1.
    stab_binsearch(stabs, &lline, &rline, N_SLINE, addr);
    if (lline <= rline) {
        info->eip_line = stabs[rline].n_desc;
    } else {
        return -1;
c01009d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c01009dc:	e9 12 01 00 00       	jmp    c0100af3 <debuginfo_eip+0x3e3>
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
           && stabs[lline].n_type != N_SOL
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
        lline --;
c01009e1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009e4:	83 e8 01             	sub    $0x1,%eax
c01009e7:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Search backwards from the line number for the relevant filename stab.
    // We can't just use the "lfile" stab because inlined functions
    // can interpolate code from a different file!
    // Such included source files use the N_SOL stab type.
    while (lline >= lfile
c01009ea:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01009ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01009f0:	39 c2                	cmp    %eax,%edx
c01009f2:	7c 56                	jl     c0100a4a <debuginfo_eip+0x33a>
           && stabs[lline].n_type != N_SOL
c01009f4:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01009f7:	89 c2                	mov    %eax,%edx
c01009f9:	89 d0                	mov    %edx,%eax
c01009fb:	01 c0                	add    %eax,%eax
c01009fd:	01 d0                	add    %edx,%eax
c01009ff:	c1 e0 02             	shl    $0x2,%eax
c0100a02:	89 c2                	mov    %eax,%edx
c0100a04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a07:	01 d0                	add    %edx,%eax
c0100a09:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a0d:	3c 84                	cmp    $0x84,%al
c0100a0f:	74 39                	je     c0100a4a <debuginfo_eip+0x33a>
           && (stabs[lline].n_type != N_SO || !stabs[lline].n_value)) {
c0100a11:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a14:	89 c2                	mov    %eax,%edx
c0100a16:	89 d0                	mov    %edx,%eax
c0100a18:	01 c0                	add    %eax,%eax
c0100a1a:	01 d0                	add    %edx,%eax
c0100a1c:	c1 e0 02             	shl    $0x2,%eax
c0100a1f:	89 c2                	mov    %eax,%edx
c0100a21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a24:	01 d0                	add    %edx,%eax
c0100a26:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100a2a:	3c 64                	cmp    $0x64,%al
c0100a2c:	75 b3                	jne    c01009e1 <debuginfo_eip+0x2d1>
c0100a2e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a31:	89 c2                	mov    %eax,%edx
c0100a33:	89 d0                	mov    %edx,%eax
c0100a35:	01 c0                	add    %eax,%eax
c0100a37:	01 d0                	add    %edx,%eax
c0100a39:	c1 e0 02             	shl    $0x2,%eax
c0100a3c:	89 c2                	mov    %eax,%edx
c0100a3e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a41:	01 d0                	add    %edx,%eax
c0100a43:	8b 40 08             	mov    0x8(%eax),%eax
c0100a46:	85 c0                	test   %eax,%eax
c0100a48:	74 97                	je     c01009e1 <debuginfo_eip+0x2d1>
        lline --;
    }
    if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr) {
c0100a4a:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100a4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100a50:	39 c2                	cmp    %eax,%edx
c0100a52:	7c 46                	jl     c0100a9a <debuginfo_eip+0x38a>
c0100a54:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a57:	89 c2                	mov    %eax,%edx
c0100a59:	89 d0                	mov    %edx,%eax
c0100a5b:	01 c0                	add    %eax,%eax
c0100a5d:	01 d0                	add    %edx,%eax
c0100a5f:	c1 e0 02             	shl    $0x2,%eax
c0100a62:	89 c2                	mov    %eax,%edx
c0100a64:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a67:	01 d0                	add    %edx,%eax
c0100a69:	8b 00                	mov    (%eax),%eax
c0100a6b:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c0100a6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0100a71:	29 d1                	sub    %edx,%ecx
c0100a73:	89 ca                	mov    %ecx,%edx
c0100a75:	39 d0                	cmp    %edx,%eax
c0100a77:	73 21                	jae    c0100a9a <debuginfo_eip+0x38a>
        info->eip_file = stabstr + stabs[lline].n_strx;
c0100a79:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100a7c:	89 c2                	mov    %eax,%edx
c0100a7e:	89 d0                	mov    %edx,%eax
c0100a80:	01 c0                	add    %eax,%eax
c0100a82:	01 d0                	add    %edx,%eax
c0100a84:	c1 e0 02             	shl    $0x2,%eax
c0100a87:	89 c2                	mov    %eax,%edx
c0100a89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100a8c:	01 d0                	add    %edx,%eax
c0100a8e:	8b 10                	mov    (%eax),%edx
c0100a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0100a93:	01 c2                	add    %eax,%edx
c0100a95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100a98:	89 10                	mov    %edx,(%eax)
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
c0100a9a:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0100a9d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0100aa0:	39 c2                	cmp    %eax,%edx
c0100aa2:	7d 4a                	jge    c0100aee <debuginfo_eip+0x3de>
        for (lline = lfun + 1;
c0100aa4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0100aa7:	83 c0 01             	add    $0x1,%eax
c0100aaa:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0100aad:	eb 18                	jmp    c0100ac7 <debuginfo_eip+0x3b7>
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
            info->eip_fn_narg ++;
c0100aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100ab2:	8b 40 14             	mov    0x14(%eax),%eax
c0100ab5:	8d 50 01             	lea    0x1(%eax),%edx
c0100ab8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100abb:	89 50 14             	mov    %edx,0x14(%eax)
    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
             lline ++) {
c0100abe:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ac1:	83 c0 01             	add    $0x1,%eax
c0100ac4:	89 45 cc             	mov    %eax,-0x34(%ebp)

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ac7:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0100aca:	8b 45 d0             	mov    -0x30(%ebp),%eax
    }

    // Set eip_fn_narg to the number of arguments taken by the function,
    // or 0 if there was no containing function.
    if (lfun < rfun) {
        for (lline = lfun + 1;
c0100acd:	39 c2                	cmp    %eax,%edx
c0100acf:	7d 1d                	jge    c0100aee <debuginfo_eip+0x3de>
             lline < rfun && stabs[lline].n_type == N_PSYM;
c0100ad1:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0100ad4:	89 c2                	mov    %eax,%edx
c0100ad6:	89 d0                	mov    %edx,%eax
c0100ad8:	01 c0                	add    %eax,%eax
c0100ada:	01 d0                	add    %edx,%eax
c0100adc:	c1 e0 02             	shl    $0x2,%eax
c0100adf:	89 c2                	mov    %eax,%edx
c0100ae1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100ae4:	01 d0                	add    %edx,%eax
c0100ae6:	0f b6 40 04          	movzbl 0x4(%eax),%eax
c0100aea:	3c a0                	cmp    $0xa0,%al
c0100aec:	74 c1                	je     c0100aaf <debuginfo_eip+0x39f>
             lline ++) {
            info->eip_fn_narg ++;
        }
    }
    return 0;
c0100aee:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100af3:	c9                   	leave  
c0100af4:	c3                   	ret    

c0100af5 <print_kerninfo>:
 * print_kerninfo - print the information about kernel, including the location
 * of kernel entry, the start addresses of data and text segements, the start
 * address of free memory and how many memory that kernel has used.
 * */
void
print_kerninfo(void) {
c0100af5:	55                   	push   %ebp
c0100af6:	89 e5                	mov    %esp,%ebp
c0100af8:	83 ec 08             	sub    $0x8,%esp
    extern char etext[], edata[], end[], kern_init[];
    cprintf("Special kernel symbols:\n");
c0100afb:	83 ec 0c             	sub    $0xc,%esp
c0100afe:	68 e2 2d 11 c0       	push   $0xc0112de2
c0100b03:	e8 77 f8 ff ff       	call   c010037f <cprintf>
c0100b08:	83 c4 10             	add    $0x10,%esp
    cprintf("  entry  0x%08x (phys)\n", kern_init);
c0100b0b:	83 ec 08             	sub    $0x8,%esp
c0100b0e:	68 36 00 10 c0       	push   $0xc0100036
c0100b13:	68 fb 2d 11 c0       	push   $0xc0112dfb
c0100b18:	e8 62 f8 ff ff       	call   c010037f <cprintf>
c0100b1d:	83 c4 10             	add    $0x10,%esp
    cprintf("  etext  0x%08x (phys)\n", etext);
c0100b20:	83 ec 08             	sub    $0x8,%esp
c0100b23:	68 dd 2c 11 c0       	push   $0xc0112cdd
c0100b28:	68 13 2e 11 c0       	push   $0xc0112e13
c0100b2d:	e8 4d f8 ff ff       	call   c010037f <cprintf>
c0100b32:	83 c4 10             	add    $0x10,%esp
    cprintf("  edata  0x%08x (phys)\n", edata);
c0100b35:	83 ec 08             	sub    $0x8,%esp
c0100b38:	68 00 e0 14 c0       	push   $0xc014e000
c0100b3d:	68 2b 2e 11 c0       	push   $0xc0112e2b
c0100b42:	e8 38 f8 ff ff       	call   c010037f <cprintf>
c0100b47:	83 c4 10             	add    $0x10,%esp
    cprintf("  end    0x%08x (phys)\n", end);
c0100b4a:	83 ec 08             	sub    $0x8,%esp
c0100b4d:	68 e4 22 15 c0       	push   $0xc01522e4
c0100b52:	68 43 2e 11 c0       	push   $0xc0112e43
c0100b57:	e8 23 f8 ff ff       	call   c010037f <cprintf>
c0100b5c:	83 c4 10             	add    $0x10,%esp
    cprintf("Kernel executable memory footprint: %dKB\n", (end - kern_init + 1023)/1024);
c0100b5f:	b8 e4 22 15 c0       	mov    $0xc01522e4,%eax
c0100b64:	05 ff 03 00 00       	add    $0x3ff,%eax
c0100b69:	ba 36 00 10 c0       	mov    $0xc0100036,%edx
c0100b6e:	29 d0                	sub    %edx,%eax
c0100b70:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
c0100b76:	85 c0                	test   %eax,%eax
c0100b78:	0f 48 c2             	cmovs  %edx,%eax
c0100b7b:	c1 f8 0a             	sar    $0xa,%eax
c0100b7e:	83 ec 08             	sub    $0x8,%esp
c0100b81:	50                   	push   %eax
c0100b82:	68 5c 2e 11 c0       	push   $0xc0112e5c
c0100b87:	e8 f3 f7 ff ff       	call   c010037f <cprintf>
c0100b8c:	83 c4 10             	add    $0x10,%esp
}
c0100b8f:	90                   	nop
c0100b90:	c9                   	leave  
c0100b91:	c3                   	ret    

c0100b92 <print_debuginfo>:
/* *
 * print_debuginfo - read and print the stat information for the address @eip,
 * and info.eip_fn_addr should be the first address of the related function.
 * */
void
print_debuginfo(uintptr_t eip) {
c0100b92:	55                   	push   %ebp
c0100b93:	89 e5                	mov    %esp,%ebp
c0100b95:	81 ec 28 01 00 00    	sub    $0x128,%esp
    struct eipdebuginfo info;
    if (debuginfo_eip(eip, &info) != 0) {
c0100b9b:	83 ec 08             	sub    $0x8,%esp
c0100b9e:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0100ba1:	50                   	push   %eax
c0100ba2:	ff 75 08             	pushl  0x8(%ebp)
c0100ba5:	e8 66 fb ff ff       	call   c0100710 <debuginfo_eip>
c0100baa:	83 c4 10             	add    $0x10,%esp
c0100bad:	85 c0                	test   %eax,%eax
c0100baf:	74 15                	je     c0100bc6 <print_debuginfo+0x34>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
c0100bb1:	83 ec 08             	sub    $0x8,%esp
c0100bb4:	ff 75 08             	pushl  0x8(%ebp)
c0100bb7:	68 86 2e 11 c0       	push   $0xc0112e86
c0100bbc:	e8 be f7 ff ff       	call   c010037f <cprintf>
c0100bc1:	83 c4 10             	add    $0x10,%esp
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
    }
}
c0100bc4:	eb 65                	jmp    c0100c2b <print_debuginfo+0x99>
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100bc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100bcd:	eb 1c                	jmp    c0100beb <print_debuginfo+0x59>
            fnname[j] = info.eip_fn_name[j];
c0100bcf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0100bd2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bd5:	01 d0                	add    %edx,%eax
c0100bd7:	0f b6 00             	movzbl (%eax),%eax
c0100bda:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100be0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100be3:	01 ca                	add    %ecx,%edx
c0100be5:	88 02                	mov    %al,(%edx)
        cprintf("    <unknow>: -- 0x%08x --\n", eip);
    }
    else {
        char fnname[256];
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
c0100be7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100beb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0100bee:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0100bf1:	7f dc                	jg     c0100bcf <print_debuginfo+0x3d>
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
c0100bf3:	8d 95 dc fe ff ff    	lea    -0x124(%ebp),%edx
c0100bf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100bfc:	01 d0                	add    %edx,%eax
c0100bfe:	c6 00 00             	movb   $0x0,(%eax)
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
                fnname, eip - info.eip_fn_addr);
c0100c01:	8b 45 ec             	mov    -0x14(%ebp),%eax
        int j;
        for (j = 0; j < info.eip_fn_namelen; j ++) {
            fnname[j] = info.eip_fn_name[j];
        }
        fnname[j] = '\0';
        cprintf("    %s:%d: %s+%d\n", info.eip_file, info.eip_line,
c0100c04:	8b 55 08             	mov    0x8(%ebp),%edx
c0100c07:	89 d1                	mov    %edx,%ecx
c0100c09:	29 c1                	sub    %eax,%ecx
c0100c0b:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0100c0e:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0100c11:	83 ec 0c             	sub    $0xc,%esp
c0100c14:	51                   	push   %ecx
c0100c15:	8d 8d dc fe ff ff    	lea    -0x124(%ebp),%ecx
c0100c1b:	51                   	push   %ecx
c0100c1c:	52                   	push   %edx
c0100c1d:	50                   	push   %eax
c0100c1e:	68 a2 2e 11 c0       	push   $0xc0112ea2
c0100c23:	e8 57 f7 ff ff       	call   c010037f <cprintf>
c0100c28:	83 c4 20             	add    $0x20,%esp
                fnname, eip - info.eip_fn_addr);
    }
}
c0100c2b:	90                   	nop
c0100c2c:	c9                   	leave  
c0100c2d:	c3                   	ret    

c0100c2e <read_eip>:

static __noinline uint32_t
read_eip(void) {
c0100c2e:	55                   	push   %ebp
c0100c2f:	89 e5                	mov    %esp,%ebp
c0100c31:	83 ec 10             	sub    $0x10,%esp
    uint32_t eip;
    asm volatile("movl 4(%%ebp), %0" : "=r" (eip));
c0100c34:	8b 45 04             	mov    0x4(%ebp),%eax
c0100c37:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eip;
c0100c3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0100c3d:	c9                   	leave  
c0100c3e:	c3                   	ret    

c0100c3f <print_stackframe>:
 *
 * Note that, the length of ebp-chain is limited. In boot/bootasm.S, before jumping
 * to the kernel entry, the value of ebp has been set to zero, that's the boundary.
 * */
void
print_stackframe(void) {
c0100c3f:	55                   	push   %ebp
c0100c40:	89 e5                	mov    %esp,%ebp
      *    (3.4) call print_debuginfo(eip-1) to print the C calling function name and line number, etc.
      *    (3.5) popup a calling stackframe
      *           NOTICE: the calling funciton's return addr eip  = ss:[ebp+4]
      *                   the calling funciton's ebp = ss:[ebp]
      */
}
c0100c42:	90                   	nop
c0100c43:	5d                   	pop    %ebp
c0100c44:	c3                   	ret    

c0100c45 <parse>:
#define MAXARGS         16
#define WHITESPACE      " \t\n\r"

/* parse - parse the command buffer into whitespace-separated arguments */
static int
parse(char *buf, char **argv) {
c0100c45:	55                   	push   %ebp
c0100c46:	89 e5                	mov    %esp,%ebp
c0100c48:	83 ec 18             	sub    $0x18,%esp
    int argc = 0;
c0100c4b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c52:	eb 0c                	jmp    c0100c60 <parse+0x1b>
            *buf ++ = '\0';
c0100c54:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c57:	8d 50 01             	lea    0x1(%eax),%edx
c0100c5a:	89 55 08             	mov    %edx,0x8(%ebp)
c0100c5d:	c6 00 00             	movb   $0x0,(%eax)
static int
parse(char *buf, char **argv) {
    int argc = 0;
    while (1) {
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
c0100c60:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c63:	0f b6 00             	movzbl (%eax),%eax
c0100c66:	84 c0                	test   %al,%al
c0100c68:	74 1e                	je     c0100c88 <parse+0x43>
c0100c6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c6d:	0f b6 00             	movzbl (%eax),%eax
c0100c70:	0f be c0             	movsbl %al,%eax
c0100c73:	83 ec 08             	sub    $0x8,%esp
c0100c76:	50                   	push   %eax
c0100c77:	68 34 2f 11 c0       	push   $0xc0112f34
c0100c7c:	e8 c5 15 01 00       	call   c0112246 <strchr>
c0100c81:	83 c4 10             	add    $0x10,%esp
c0100c84:	85 c0                	test   %eax,%eax
c0100c86:	75 cc                	jne    c0100c54 <parse+0xf>
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
c0100c88:	8b 45 08             	mov    0x8(%ebp),%eax
c0100c8b:	0f b6 00             	movzbl (%eax),%eax
c0100c8e:	84 c0                	test   %al,%al
c0100c90:	74 69                	je     c0100cfb <parse+0xb6>
            break;
        }

        // save and scan past next arg
        if (argc == MAXARGS - 1) {
c0100c92:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
c0100c96:	75 12                	jne    c0100caa <parse+0x65>
            cprintf("Too many arguments (max %d).\n", MAXARGS);
c0100c98:	83 ec 08             	sub    $0x8,%esp
c0100c9b:	6a 10                	push   $0x10
c0100c9d:	68 39 2f 11 c0       	push   $0xc0112f39
c0100ca2:	e8 d8 f6 ff ff       	call   c010037f <cprintf>
c0100ca7:	83 c4 10             	add    $0x10,%esp
        }
        argv[argc ++] = buf;
c0100caa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100cad:	8d 50 01             	lea    0x1(%eax),%edx
c0100cb0:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0100cb3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0100cba:	8b 45 0c             	mov    0xc(%ebp),%eax
c0100cbd:	01 c2                	add    %eax,%edx
c0100cbf:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cc2:	89 02                	mov    %eax,(%edx)
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cc4:	eb 04                	jmp    c0100cca <parse+0x85>
            buf ++;
c0100cc6:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        // save and scan past next arg
        if (argc == MAXARGS - 1) {
            cprintf("Too many arguments (max %d).\n", MAXARGS);
        }
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
c0100cca:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ccd:	0f b6 00             	movzbl (%eax),%eax
c0100cd0:	84 c0                	test   %al,%al
c0100cd2:	0f 84 7a ff ff ff    	je     c0100c52 <parse+0xd>
c0100cd8:	8b 45 08             	mov    0x8(%ebp),%eax
c0100cdb:	0f b6 00             	movzbl (%eax),%eax
c0100cde:	0f be c0             	movsbl %al,%eax
c0100ce1:	83 ec 08             	sub    $0x8,%esp
c0100ce4:	50                   	push   %eax
c0100ce5:	68 34 2f 11 c0       	push   $0xc0112f34
c0100cea:	e8 57 15 01 00       	call   c0112246 <strchr>
c0100cef:	83 c4 10             	add    $0x10,%esp
c0100cf2:	85 c0                	test   %eax,%eax
c0100cf4:	74 d0                	je     c0100cc6 <parse+0x81>
            buf ++;
        }
    }
c0100cf6:	e9 57 ff ff ff       	jmp    c0100c52 <parse+0xd>
        // find global whitespace
        while (*buf != '\0' && strchr(WHITESPACE, *buf) != NULL) {
            *buf ++ = '\0';
        }
        if (*buf == '\0') {
            break;
c0100cfb:	90                   	nop
        argv[argc ++] = buf;
        while (*buf != '\0' && strchr(WHITESPACE, *buf) == NULL) {
            buf ++;
        }
    }
    return argc;
c0100cfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0100cff:	c9                   	leave  
c0100d00:	c3                   	ret    

c0100d01 <runcmd>:
/* *
 * runcmd - parse the input string, split it into separated arguments
 * and then lookup and invoke some related commands/
 * */
static int
runcmd(char *buf, struct trapframe *tf) {
c0100d01:	55                   	push   %ebp
c0100d02:	89 e5                	mov    %esp,%ebp
c0100d04:	83 ec 58             	sub    $0x58,%esp
    char *argv[MAXARGS];
    int argc = parse(buf, argv);
c0100d07:	83 ec 08             	sub    $0x8,%esp
c0100d0a:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d0d:	50                   	push   %eax
c0100d0e:	ff 75 08             	pushl  0x8(%ebp)
c0100d11:	e8 2f ff ff ff       	call   c0100c45 <parse>
c0100d16:	83 c4 10             	add    $0x10,%esp
c0100d19:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (argc == 0) {
c0100d1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0100d20:	75 0a                	jne    c0100d2c <runcmd+0x2b>
        return 0;
c0100d22:	b8 00 00 00 00       	mov    $0x0,%eax
c0100d27:	e9 83 00 00 00       	jmp    c0100daf <runcmd+0xae>
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100d33:	eb 59                	jmp    c0100d8e <runcmd+0x8d>
        if (strcmp(commands[i].name, argv[0]) == 0) {
c0100d35:	8b 4d b0             	mov    -0x50(%ebp),%ecx
c0100d38:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d3b:	89 d0                	mov    %edx,%eax
c0100d3d:	01 c0                	add    %eax,%eax
c0100d3f:	01 d0                	add    %edx,%eax
c0100d41:	c1 e0 02             	shl    $0x2,%eax
c0100d44:	05 00 b0 14 c0       	add    $0xc014b000,%eax
c0100d49:	8b 00                	mov    (%eax),%eax
c0100d4b:	83 ec 08             	sub    $0x8,%esp
c0100d4e:	51                   	push   %ecx
c0100d4f:	50                   	push   %eax
c0100d50:	e8 51 14 01 00       	call   c01121a6 <strcmp>
c0100d55:	83 c4 10             	add    $0x10,%esp
c0100d58:	85 c0                	test   %eax,%eax
c0100d5a:	75 2e                	jne    c0100d8a <runcmd+0x89>
            return commands[i].func(argc - 1, argv + 1, tf);
c0100d5c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100d5f:	89 d0                	mov    %edx,%eax
c0100d61:	01 c0                	add    %eax,%eax
c0100d63:	01 d0                	add    %edx,%eax
c0100d65:	c1 e0 02             	shl    $0x2,%eax
c0100d68:	05 08 b0 14 c0       	add    $0xc014b008,%eax
c0100d6d:	8b 10                	mov    (%eax),%edx
c0100d6f:	8d 45 b0             	lea    -0x50(%ebp),%eax
c0100d72:	83 c0 04             	add    $0x4,%eax
c0100d75:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0100d78:	83 e9 01             	sub    $0x1,%ecx
c0100d7b:	83 ec 04             	sub    $0x4,%esp
c0100d7e:	ff 75 0c             	pushl  0xc(%ebp)
c0100d81:	50                   	push   %eax
c0100d82:	51                   	push   %ecx
c0100d83:	ff d2                	call   *%edx
c0100d85:	83 c4 10             	add    $0x10,%esp
c0100d88:	eb 25                	jmp    c0100daf <runcmd+0xae>
    int argc = parse(buf, argv);
    if (argc == 0) {
        return 0;
    }
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100d8a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100d8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100d91:	83 f8 02             	cmp    $0x2,%eax
c0100d94:	76 9f                	jbe    c0100d35 <runcmd+0x34>
        if (strcmp(commands[i].name, argv[0]) == 0) {
            return commands[i].func(argc - 1, argv + 1, tf);
        }
    }
    cprintf("Unknown command '%s'\n", argv[0]);
c0100d96:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0100d99:	83 ec 08             	sub    $0x8,%esp
c0100d9c:	50                   	push   %eax
c0100d9d:	68 57 2f 11 c0       	push   $0xc0112f57
c0100da2:	e8 d8 f5 ff ff       	call   c010037f <cprintf>
c0100da7:	83 c4 10             	add    $0x10,%esp
    return 0;
c0100daa:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100daf:	c9                   	leave  
c0100db0:	c3                   	ret    

c0100db1 <kmonitor>:

/***** Implementations of basic kernel monitor commands *****/

void
kmonitor(struct trapframe *tf) {
c0100db1:	55                   	push   %ebp
c0100db2:	89 e5                	mov    %esp,%ebp
c0100db4:	83 ec 18             	sub    $0x18,%esp
    cprintf("Welcome to the kernel debug monitor!!\n");
c0100db7:	83 ec 0c             	sub    $0xc,%esp
c0100dba:	68 70 2f 11 c0       	push   $0xc0112f70
c0100dbf:	e8 bb f5 ff ff       	call   c010037f <cprintf>
c0100dc4:	83 c4 10             	add    $0x10,%esp
    cprintf("Type 'help' for a list of commands.\n");
c0100dc7:	83 ec 0c             	sub    $0xc,%esp
c0100dca:	68 98 2f 11 c0       	push   $0xc0112f98
c0100dcf:	e8 ab f5 ff ff       	call   c010037f <cprintf>
c0100dd4:	83 c4 10             	add    $0x10,%esp

    if (tf != NULL) {
c0100dd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0100ddb:	74 0e                	je     c0100deb <kmonitor+0x3a>
        print_trapframe(tf);
c0100ddd:	83 ec 0c             	sub    $0xc,%esp
c0100de0:	ff 75 08             	pushl  0x8(%ebp)
c0100de3:	e8 6f 14 00 00       	call   c0102257 <print_trapframe>
c0100de8:	83 c4 10             	add    $0x10,%esp
    }

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
c0100deb:	83 ec 0c             	sub    $0xc,%esp
c0100dee:	68 bd 2f 11 c0       	push   $0xc0112fbd
c0100df3:	e8 2b f6 ff ff       	call   c0100423 <readline>
c0100df8:	83 c4 10             	add    $0x10,%esp
c0100dfb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0100dfe:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0100e02:	74 e7                	je     c0100deb <kmonitor+0x3a>
            if (runcmd(buf, tf) < 0) {
c0100e04:	83 ec 08             	sub    $0x8,%esp
c0100e07:	ff 75 08             	pushl  0x8(%ebp)
c0100e0a:	ff 75 f4             	pushl  -0xc(%ebp)
c0100e0d:	e8 ef fe ff ff       	call   c0100d01 <runcmd>
c0100e12:	83 c4 10             	add    $0x10,%esp
c0100e15:	85 c0                	test   %eax,%eax
c0100e17:	78 02                	js     c0100e1b <kmonitor+0x6a>
                break;
            }
        }
    }
c0100e19:	eb d0                	jmp    c0100deb <kmonitor+0x3a>

    char *buf;
    while (1) {
        if ((buf = readline("K> ")) != NULL) {
            if (runcmd(buf, tf) < 0) {
                break;
c0100e1b:	90                   	nop
            }
        }
    }
}
c0100e1c:	90                   	nop
c0100e1d:	c9                   	leave  
c0100e1e:	c3                   	ret    

c0100e1f <mon_help>:

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
c0100e1f:	55                   	push   %ebp
c0100e20:	89 e5                	mov    %esp,%ebp
c0100e22:	83 ec 18             	sub    $0x18,%esp
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e25:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0100e2c:	eb 3c                	jmp    c0100e6a <mon_help+0x4b>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
c0100e2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e31:	89 d0                	mov    %edx,%eax
c0100e33:	01 c0                	add    %eax,%eax
c0100e35:	01 d0                	add    %edx,%eax
c0100e37:	c1 e0 02             	shl    $0x2,%eax
c0100e3a:	05 04 b0 14 c0       	add    $0xc014b004,%eax
c0100e3f:	8b 08                	mov    (%eax),%ecx
c0100e41:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0100e44:	89 d0                	mov    %edx,%eax
c0100e46:	01 c0                	add    %eax,%eax
c0100e48:	01 d0                	add    %edx,%eax
c0100e4a:	c1 e0 02             	shl    $0x2,%eax
c0100e4d:	05 00 b0 14 c0       	add    $0xc014b000,%eax
c0100e52:	8b 00                	mov    (%eax),%eax
c0100e54:	83 ec 04             	sub    $0x4,%esp
c0100e57:	51                   	push   %ecx
c0100e58:	50                   	push   %eax
c0100e59:	68 c1 2f 11 c0       	push   $0xc0112fc1
c0100e5e:	e8 1c f5 ff ff       	call   c010037f <cprintf>
c0100e63:	83 c4 10             	add    $0x10,%esp

/* mon_help - print the information about mon_* functions */
int
mon_help(int argc, char **argv, struct trapframe *tf) {
    int i;
    for (i = 0; i < NCOMMANDS; i ++) {
c0100e66:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0100e6a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0100e6d:	83 f8 02             	cmp    $0x2,%eax
c0100e70:	76 bc                	jbe    c0100e2e <mon_help+0xf>
        cprintf("%s - %s\n", commands[i].name, commands[i].desc);
    }
    return 0;
c0100e72:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e77:	c9                   	leave  
c0100e78:	c3                   	ret    

c0100e79 <mon_kerninfo>:
/* *
 * mon_kerninfo - call print_kerninfo in kern/debug/kdebug.c to
 * print the memory occupancy in kernel.
 * */
int
mon_kerninfo(int argc, char **argv, struct trapframe *tf) {
c0100e79:	55                   	push   %ebp
c0100e7a:	89 e5                	mov    %esp,%ebp
c0100e7c:	83 ec 08             	sub    $0x8,%esp
    print_kerninfo();
c0100e7f:	e8 71 fc ff ff       	call   c0100af5 <print_kerninfo>
    return 0;
c0100e84:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e89:	c9                   	leave  
c0100e8a:	c3                   	ret    

c0100e8b <mon_backtrace>:
/* *
 * mon_backtrace - call print_stackframe in kern/debug/kdebug.c to
 * print a backtrace of the stack.
 * */
int
mon_backtrace(int argc, char **argv, struct trapframe *tf) {
c0100e8b:	55                   	push   %ebp
c0100e8c:	89 e5                	mov    %esp,%ebp
c0100e8e:	83 ec 08             	sub    $0x8,%esp
    print_stackframe();
c0100e91:	e8 a9 fd ff ff       	call   c0100c3f <print_stackframe>
    return 0;
c0100e96:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100e9b:	c9                   	leave  
c0100e9c:	c3                   	ret    

c0100e9d <ide_wait_ready>:
    unsigned int size;          // Size in Sectors
    unsigned char model[41];    // Model in String
} ide_devices[MAX_IDE];

static int
ide_wait_ready(unsigned short iobase, bool check_error) {
c0100e9d:	55                   	push   %ebp
c0100e9e:	89 e5                	mov    %esp,%ebp
c0100ea0:	83 ec 14             	sub    $0x14,%esp
c0100ea3:	8b 45 08             	mov    0x8(%ebp),%eax
c0100ea6:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    int r;
    while ((r = inb(iobase + ISA_STATUS)) & IDE_BSY)
c0100eaa:	90                   	nop
c0100eab:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0100eaf:	83 c0 07             	add    $0x7,%eax
c0100eb2:	0f b7 c0             	movzwl %ax,%eax
c0100eb5:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100eb9:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0100ebd:	89 c2                	mov    %eax,%edx
c0100ebf:	ec                   	in     (%dx),%al
c0100ec0:	88 45 f9             	mov    %al,-0x7(%ebp)
    return data;
c0100ec3:	0f b6 45 f9          	movzbl -0x7(%ebp),%eax
c0100ec7:	0f b6 c0             	movzbl %al,%eax
c0100eca:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0100ecd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ed0:	25 80 00 00 00       	and    $0x80,%eax
c0100ed5:	85 c0                	test   %eax,%eax
c0100ed7:	75 d2                	jne    c0100eab <ide_wait_ready+0xe>
        /* nothing */;
    if (check_error && (r & (IDE_DF | IDE_ERR)) != 0) {
c0100ed9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0100edd:	74 11                	je     c0100ef0 <ide_wait_ready+0x53>
c0100edf:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0100ee2:	83 e0 21             	and    $0x21,%eax
c0100ee5:	85 c0                	test   %eax,%eax
c0100ee7:	74 07                	je     c0100ef0 <ide_wait_ready+0x53>
        return -1;
c0100ee9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0100eee:	eb 05                	jmp    c0100ef5 <ide_wait_ready+0x58>
    }
    return 0;
c0100ef0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0100ef5:	c9                   	leave  
c0100ef6:	c3                   	ret    

c0100ef7 <ide_init>:

void
ide_init(void) {
c0100ef7:	55                   	push   %ebp
c0100ef8:	89 e5                	mov    %esp,%ebp
c0100efa:	57                   	push   %edi
c0100efb:	53                   	push   %ebx
c0100efc:	81 ec 40 02 00 00    	sub    $0x240,%esp
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c0100f02:	66 c7 45 f6 00 00    	movw   $0x0,-0xa(%ebp)
c0100f08:	e9 c1 02 00 00       	jmp    c01011ce <ide_init+0x2d7>
        /* assume that no device here */
        ide_devices[ideno].valid = 0;
c0100f0d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f11:	c1 e0 03             	shl    $0x3,%eax
c0100f14:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100f1b:	29 c2                	sub    %eax,%edx
c0100f1d:	89 d0                	mov    %edx,%eax
c0100f1f:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c0100f24:	c6 00 00             	movb   $0x0,(%eax)

        iobase = IO_BASE(ideno);
c0100f27:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f2b:	66 d1 e8             	shr    %ax
c0100f2e:	0f b7 c0             	movzwl %ax,%eax
c0100f31:	0f b7 04 85 cc 2f 11 	movzwl -0x3feed034(,%eax,4),%eax
c0100f38:	c0 
c0100f39:	66 89 45 ea          	mov    %ax,-0x16(%ebp)

        /* wait device ready */
        ide_wait_ready(iobase, 0);
c0100f3d:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f41:	6a 00                	push   $0x0
c0100f43:	50                   	push   %eax
c0100f44:	e8 54 ff ff ff       	call   c0100e9d <ide_wait_ready>
c0100f49:	83 c4 08             	add    $0x8,%esp

        /* step1: select drive */
        outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4));
c0100f4c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100f50:	83 e0 01             	and    $0x1,%eax
c0100f53:	c1 e0 04             	shl    $0x4,%eax
c0100f56:	83 c8 e0             	or     $0xffffffe0,%eax
c0100f59:	0f b6 c0             	movzbl %al,%eax
c0100f5c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0100f60:	83 c2 06             	add    $0x6,%edx
c0100f63:	0f b7 d2             	movzwl %dx,%edx
c0100f66:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c0100f6a:	88 45 c7             	mov    %al,-0x39(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0100f6d:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
c0100f71:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c0100f75:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100f76:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f7a:	6a 00                	push   $0x0
c0100f7c:	50                   	push   %eax
c0100f7d:	e8 1b ff ff ff       	call   c0100e9d <ide_wait_ready>
c0100f82:	83 c4 08             	add    $0x8,%esp

        /* step2: send ATA identify command */
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
c0100f85:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100f89:	83 c0 07             	add    $0x7,%eax
c0100f8c:	0f b7 c0             	movzwl %ax,%eax
c0100f8f:	66 89 45 e0          	mov    %ax,-0x20(%ebp)
c0100f93:	c6 45 c8 ec          	movb   $0xec,-0x38(%ebp)
c0100f97:	0f b6 45 c8          	movzbl -0x38(%ebp),%eax
c0100f9b:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0100f9f:	ee                   	out    %al,(%dx)
        ide_wait_ready(iobase, 0);
c0100fa0:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fa4:	6a 00                	push   $0x0
c0100fa6:	50                   	push   %eax
c0100fa7:	e8 f1 fe ff ff       	call   c0100e9d <ide_wait_ready>
c0100fac:	83 c4 08             	add    $0x8,%esp

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
c0100faf:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fb3:	83 c0 07             	add    $0x7,%eax
c0100fb6:	0f b7 c0             	movzwl %ax,%eax
c0100fb9:	66 89 45 ca          	mov    %ax,-0x36(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0100fbd:	0f b7 45 ca          	movzwl -0x36(%ebp),%eax
c0100fc1:	89 c2                	mov    %eax,%edx
c0100fc3:	ec                   	in     (%dx),%al
c0100fc4:	88 45 c9             	mov    %al,-0x37(%ebp)
    return data;
c0100fc7:	0f b6 45 c9          	movzbl -0x37(%ebp),%eax
c0100fcb:	84 c0                	test   %al,%al
c0100fcd:	0f 84 ef 01 00 00    	je     c01011c2 <ide_init+0x2cb>
c0100fd3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0100fd7:	6a 01                	push   $0x1
c0100fd9:	50                   	push   %eax
c0100fda:	e8 be fe ff ff       	call   c0100e9d <ide_wait_ready>
c0100fdf:	83 c4 08             	add    $0x8,%esp
c0100fe2:	85 c0                	test   %eax,%eax
c0100fe4:	0f 85 d8 01 00 00    	jne    c01011c2 <ide_init+0x2cb>
            continue ;
        }

        /* device is ok */
        ide_devices[ideno].valid = 1;
c0100fea:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0100fee:	c1 e0 03             	shl    $0x3,%eax
c0100ff1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0100ff8:	29 c2                	sub    %eax,%edx
c0100ffa:	89 d0                	mov    %edx,%eax
c0100ffc:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c0101001:	c6 00 01             	movb   $0x1,(%eax)

        /* read identification space of the device */
        unsigned int buffer[128];
        insl(iobase + ISA_DATA, buffer, sizeof(buffer) / sizeof(unsigned int));
c0101004:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
c0101008:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010100b:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c0101011:	89 45 c0             	mov    %eax,-0x40(%ebp)
c0101014:	c7 45 bc 80 00 00 00 	movl   $0x80,-0x44(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c010101b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010101e:	8b 4d c0             	mov    -0x40(%ebp),%ecx
c0101021:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0101024:	89 cb                	mov    %ecx,%ebx
c0101026:	89 df                	mov    %ebx,%edi
c0101028:	89 c1                	mov    %eax,%ecx
c010102a:	fc                   	cld    
c010102b:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010102d:	89 c8                	mov    %ecx,%eax
c010102f:	89 fb                	mov    %edi,%ebx
c0101031:	89 5d c0             	mov    %ebx,-0x40(%ebp)
c0101034:	89 45 bc             	mov    %eax,-0x44(%ebp)

        unsigned char *ident = (unsigned char *)buffer;
c0101037:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax
c010103d:	89 45 dc             	mov    %eax,-0x24(%ebp)
        unsigned int sectors;
        unsigned int cmdsets = *(unsigned int *)(ident + IDE_IDENT_CMDSETS);
c0101040:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101043:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
c0101049:	89 45 d8             	mov    %eax,-0x28(%ebp)
        /* device use 48-bits or 28-bits addressing */
        if (cmdsets & (1 << 26)) {
c010104c:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010104f:	25 00 00 00 04       	and    $0x4000000,%eax
c0101054:	85 c0                	test   %eax,%eax
c0101056:	74 0e                	je     c0101066 <ide_init+0x16f>
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA_EXT);
c0101058:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010105b:	8b 80 c8 00 00 00    	mov    0xc8(%eax),%eax
c0101061:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0101064:	eb 09                	jmp    c010106f <ide_init+0x178>
        }
        else {
            sectors = *(unsigned int *)(ident + IDE_IDENT_MAX_LBA);
c0101066:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0101069:	8b 40 78             	mov    0x78(%eax),%eax
c010106c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        ide_devices[ideno].sets = cmdsets;
c010106f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101073:	c1 e0 03             	shl    $0x3,%eax
c0101076:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010107d:	29 c2                	sub    %eax,%edx
c010107f:	89 d0                	mov    %edx,%eax
c0101081:	8d 90 44 e4 14 c0    	lea    -0x3feb1bbc(%eax),%edx
c0101087:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010108a:	89 02                	mov    %eax,(%edx)
        ide_devices[ideno].size = sectors;
c010108c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101090:	c1 e0 03             	shl    $0x3,%eax
c0101093:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010109a:	29 c2                	sub    %eax,%edx
c010109c:	89 d0                	mov    %edx,%eax
c010109e:	8d 90 48 e4 14 c0    	lea    -0x3feb1bb8(%eax),%edx
c01010a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01010a7:	89 02                	mov    %eax,(%edx)

        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);
c01010a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010ac:	83 c0 62             	add    $0x62,%eax
c01010af:	0f b7 00             	movzwl (%eax),%eax
c01010b2:	0f b7 c0             	movzwl %ax,%eax
c01010b5:	25 00 02 00 00       	and    $0x200,%eax
c01010ba:	85 c0                	test   %eax,%eax
c01010bc:	75 16                	jne    c01010d4 <ide_init+0x1dd>
c01010be:	68 d4 2f 11 c0       	push   $0xc0112fd4
c01010c3:	68 17 30 11 c0       	push   $0xc0113017
c01010c8:	6a 7d                	push   $0x7d
c01010ca:	68 2c 30 11 c0       	push   $0xc011302c
c01010cf:	e8 11 f4 ff ff       	call   c01004e5 <__panic>

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
c01010d4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01010d8:	89 c2                	mov    %eax,%edx
c01010da:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010e1:	89 c2                	mov    %eax,%edx
c01010e3:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c01010ea:	29 d0                	sub    %edx,%eax
c01010ec:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c01010f1:	83 c0 0c             	add    $0xc,%eax
c01010f4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01010f7:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01010fa:	83 c0 36             	add    $0x36,%eax
c01010fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
        unsigned int i, length = 40;
c0101100:	c7 45 cc 28 00 00 00 	movl   $0x28,-0x34(%ebp)
        for (i = 0; i < length; i += 2) {
c0101107:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010110e:	eb 34                	jmp    c0101144 <ide_init+0x24d>
            model[i] = data[i + 1], model[i + 1] = data[i];
c0101110:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101113:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101116:	01 c2                	add    %eax,%edx
c0101118:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010111b:	8d 48 01             	lea    0x1(%eax),%ecx
c010111e:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0101121:	01 c8                	add    %ecx,%eax
c0101123:	0f b6 00             	movzbl (%eax),%eax
c0101126:	88 02                	mov    %al,(%edx)
c0101128:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010112b:	8d 50 01             	lea    0x1(%eax),%edx
c010112e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0101131:	01 c2                	add    %eax,%edx
c0101133:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101136:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101139:	01 c8                	add    %ecx,%eax
c010113b:	0f b6 00             	movzbl (%eax),%eax
c010113e:	88 02                	mov    %al,(%edx)
        /* check if supports LBA */
        assert((*(unsigned short *)(ident + IDE_IDENT_CAPABILITIES) & 0x200) != 0);

        unsigned char *model = ide_devices[ideno].model, *data = ident + IDE_IDENT_MODEL;
        unsigned int i, length = 40;
        for (i = 0; i < length; i += 2) {
c0101140:	83 45 ec 02          	addl   $0x2,-0x14(%ebp)
c0101144:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101147:	3b 45 cc             	cmp    -0x34(%ebp),%eax
c010114a:	72 c4                	jb     c0101110 <ide_init+0x219>
            model[i] = data[i + 1], model[i + 1] = data[i];
        }
        do {
            model[i] = '\0';
c010114c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010114f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0101152:	01 d0                	add    %edx,%eax
c0101154:	c6 00 00             	movb   $0x0,(%eax)
        } while (i -- > 0 && model[i] == ' ');
c0101157:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010115a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010115d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0101160:	85 c0                	test   %eax,%eax
c0101162:	74 0f                	je     c0101173 <ide_init+0x27c>
c0101164:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0101167:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010116a:	01 d0                	add    %edx,%eax
c010116c:	0f b6 00             	movzbl (%eax),%eax
c010116f:	3c 20                	cmp    $0x20,%al
c0101171:	74 d9                	je     c010114c <ide_init+0x255>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
c0101173:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101177:	89 c2                	mov    %eax,%edx
c0101179:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101180:	89 c2                	mov    %eax,%edx
c0101182:	8d 04 d5 00 00 00 00 	lea    0x0(,%edx,8),%eax
c0101189:	29 d0                	sub    %edx,%eax
c010118b:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c0101190:	8d 48 0c             	lea    0xc(%eax),%ecx
c0101193:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c0101197:	c1 e0 03             	shl    $0x3,%eax
c010119a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01011a1:	29 c2                	sub    %eax,%edx
c01011a3:	89 d0                	mov    %edx,%eax
c01011a5:	05 48 e4 14 c0       	add    $0xc014e448,%eax
c01011aa:	8b 10                	mov    (%eax),%edx
c01011ac:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011b0:	51                   	push   %ecx
c01011b1:	52                   	push   %edx
c01011b2:	50                   	push   %eax
c01011b3:	68 3e 30 11 c0       	push   $0xc011303e
c01011b8:	e8 c2 f1 ff ff       	call   c010037f <cprintf>
c01011bd:	83 c4 10             	add    $0x10,%esp
c01011c0:	eb 01                	jmp    c01011c3 <ide_init+0x2cc>
        outb(iobase + ISA_COMMAND, IDE_CMD_IDENTIFY);
        ide_wait_ready(iobase, 0);

        /* step3: polling */
        if (inb(iobase + ISA_STATUS) == 0 || ide_wait_ready(iobase, 1) != 0) {
            continue ;
c01011c2:	90                   	nop

void
ide_init(void) {
    static_assert((SECTSIZE % 4) == 0);
    unsigned short ideno, iobase;
    for (ideno = 0; ideno < MAX_IDE; ideno ++) {
c01011c3:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
c01011c7:	83 c0 01             	add    $0x1,%eax
c01011ca:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
c01011ce:	66 83 7d f6 03       	cmpw   $0x3,-0xa(%ebp)
c01011d3:	0f 86 34 fd ff ff    	jbe    c0100f0d <ide_init+0x16>

        cprintf("ide %d: %10u(sectors), '%s'.\n", ideno, ide_devices[ideno].size, ide_devices[ideno].model);
    }

    // enable ide interrupt
    pic_enable(IRQ_IDE1);
c01011d9:	83 ec 0c             	sub    $0xc,%esp
c01011dc:	6a 0e                	push   $0xe
c01011de:	e8 94 0e 00 00       	call   c0102077 <pic_enable>
c01011e3:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_IDE2);
c01011e6:	83 ec 0c             	sub    $0xc,%esp
c01011e9:	6a 0f                	push   $0xf
c01011eb:	e8 87 0e 00 00       	call   c0102077 <pic_enable>
c01011f0:	83 c4 10             	add    $0x10,%esp
}
c01011f3:	90                   	nop
c01011f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01011f7:	5b                   	pop    %ebx
c01011f8:	5f                   	pop    %edi
c01011f9:	5d                   	pop    %ebp
c01011fa:	c3                   	ret    

c01011fb <ide_device_valid>:

bool
ide_device_valid(unsigned short ideno) {
c01011fb:	55                   	push   %ebp
c01011fc:	89 e5                	mov    %esp,%ebp
c01011fe:	83 ec 04             	sub    $0x4,%esp
c0101201:	8b 45 08             	mov    0x8(%ebp),%eax
c0101204:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return VALID_IDE(ideno);
c0101208:	66 83 7d fc 03       	cmpw   $0x3,-0x4(%ebp)
c010120d:	77 25                	ja     c0101234 <ide_device_valid+0x39>
c010120f:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c0101213:	c1 e0 03             	shl    $0x3,%eax
c0101216:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c010121d:	29 c2                	sub    %eax,%edx
c010121f:	89 d0                	mov    %edx,%eax
c0101221:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c0101226:	0f b6 00             	movzbl (%eax),%eax
c0101229:	84 c0                	test   %al,%al
c010122b:	74 07                	je     c0101234 <ide_device_valid+0x39>
c010122d:	b8 01 00 00 00       	mov    $0x1,%eax
c0101232:	eb 05                	jmp    c0101239 <ide_device_valid+0x3e>
c0101234:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101239:	c9                   	leave  
c010123a:	c3                   	ret    

c010123b <ide_device_size>:

size_t
ide_device_size(unsigned short ideno) {
c010123b:	55                   	push   %ebp
c010123c:	89 e5                	mov    %esp,%ebp
c010123e:	83 ec 04             	sub    $0x4,%esp
c0101241:	8b 45 08             	mov    0x8(%ebp),%eax
c0101244:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    if (ide_device_valid(ideno)) {
c0101248:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010124c:	50                   	push   %eax
c010124d:	e8 a9 ff ff ff       	call   c01011fb <ide_device_valid>
c0101252:	83 c4 04             	add    $0x4,%esp
c0101255:	85 c0                	test   %eax,%eax
c0101257:	74 1b                	je     c0101274 <ide_device_size+0x39>
        return ide_devices[ideno].size;
c0101259:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c010125d:	c1 e0 03             	shl    $0x3,%eax
c0101260:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0101267:	29 c2                	sub    %eax,%edx
c0101269:	89 d0                	mov    %edx,%eax
c010126b:	05 48 e4 14 c0       	add    $0xc014e448,%eax
c0101270:	8b 00                	mov    (%eax),%eax
c0101272:	eb 05                	jmp    c0101279 <ide_device_size+0x3e>
    }
    return 0;
c0101274:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0101279:	c9                   	leave  
c010127a:	c3                   	ret    

c010127b <ide_read_secs>:

int
ide_read_secs(unsigned short ideno, uint32_t secno, void *dst, size_t nsecs) {
c010127b:	55                   	push   %ebp
c010127c:	89 e5                	mov    %esp,%ebp
c010127e:	57                   	push   %edi
c010127f:	53                   	push   %ebx
c0101280:	83 ec 40             	sub    $0x40,%esp
c0101283:	8b 45 08             	mov    0x8(%ebp),%eax
c0101286:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c010128a:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c0101291:	77 25                	ja     c01012b8 <ide_read_secs+0x3d>
c0101293:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c0101298:	77 1e                	ja     c01012b8 <ide_read_secs+0x3d>
c010129a:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010129e:	c1 e0 03             	shl    $0x3,%eax
c01012a1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01012a8:	29 c2                	sub    %eax,%edx
c01012aa:	89 d0                	mov    %edx,%eax
c01012ac:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c01012b1:	0f b6 00             	movzbl (%eax),%eax
c01012b4:	84 c0                	test   %al,%al
c01012b6:	75 19                	jne    c01012d1 <ide_read_secs+0x56>
c01012b8:	68 5c 30 11 c0       	push   $0xc011305c
c01012bd:	68 17 30 11 c0       	push   $0xc0113017
c01012c2:	68 9f 00 00 00       	push   $0x9f
c01012c7:	68 2c 30 11 c0       	push   $0xc011302c
c01012cc:	e8 14 f2 ff ff       	call   c01004e5 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01012d1:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c01012d8:	77 0f                	ja     c01012e9 <ide_read_secs+0x6e>
c01012da:	8b 55 0c             	mov    0xc(%ebp),%edx
c01012dd:	8b 45 14             	mov    0x14(%ebp),%eax
c01012e0:	01 d0                	add    %edx,%eax
c01012e2:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c01012e7:	76 19                	jbe    c0101302 <ide_read_secs+0x87>
c01012e9:	68 84 30 11 c0       	push   $0xc0113084
c01012ee:	68 17 30 11 c0       	push   $0xc0113017
c01012f3:	68 a0 00 00 00       	push   $0xa0
c01012f8:	68 2c 30 11 c0       	push   $0xc011302c
c01012fd:	e8 e3 f1 ff ff       	call   c01004e5 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c0101302:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101306:	66 d1 e8             	shr    %ax
c0101309:	0f b7 c0             	movzwl %ax,%eax
c010130c:	0f b7 04 85 cc 2f 11 	movzwl -0x3feed034(,%eax,4),%eax
c0101313:	c0 
c0101314:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101318:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010131c:	66 d1 e8             	shr    %ax
c010131f:	0f b7 c0             	movzwl %ax,%eax
c0101322:	0f b7 04 85 ce 2f 11 	movzwl -0x3feed032(,%eax,4),%eax
c0101329:	c0 
c010132a:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c010132e:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101332:	83 ec 08             	sub    $0x8,%esp
c0101335:	6a 00                	push   $0x0
c0101337:	50                   	push   %eax
c0101338:	e8 60 fb ff ff       	call   c0100e9d <ide_wait_ready>
c010133d:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c0101340:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101344:	83 c0 02             	add    $0x2,%eax
c0101347:	0f b7 c0             	movzwl %ax,%eax
c010134a:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c010134e:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101352:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101356:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010135a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c010135b:	8b 45 14             	mov    0x14(%ebp),%eax
c010135e:	0f b6 c0             	movzbl %al,%eax
c0101361:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101365:	83 c2 02             	add    $0x2,%edx
c0101368:	0f b7 d2             	movzwl %dx,%edx
c010136b:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c010136f:	88 45 d8             	mov    %al,-0x28(%ebp)
c0101372:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c0101376:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c010137a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c010137b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010137e:	0f b6 c0             	movzbl %al,%eax
c0101381:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101385:	83 c2 03             	add    $0x3,%edx
c0101388:	0f b7 d2             	movzwl %dx,%edx
c010138b:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c010138f:	88 45 d9             	mov    %al,-0x27(%ebp)
c0101392:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c0101396:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c010139a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c010139b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010139e:	c1 e8 08             	shr    $0x8,%eax
c01013a1:	0f b6 c0             	movzbl %al,%eax
c01013a4:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013a8:	83 c2 04             	add    $0x4,%edx
c01013ab:	0f b7 d2             	movzwl %dx,%edx
c01013ae:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01013b2:	88 45 da             	mov    %al,-0x26(%ebp)
c01013b5:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01013b9:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01013bd:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01013be:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013c1:	c1 e8 10             	shr    $0x10,%eax
c01013c4:	0f b6 c0             	movzbl %al,%eax
c01013c7:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01013cb:	83 c2 05             	add    $0x5,%edx
c01013ce:	0f b7 d2             	movzwl %dx,%edx
c01013d1:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01013d5:	88 45 db             	mov    %al,-0x25(%ebp)
c01013d8:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01013dc:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c01013e0:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c01013e1:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01013e5:	83 e0 01             	and    $0x1,%eax
c01013e8:	c1 e0 04             	shl    $0x4,%eax
c01013eb:	89 c2                	mov    %eax,%edx
c01013ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01013f0:	c1 e8 18             	shr    $0x18,%eax
c01013f3:	83 e0 0f             	and    $0xf,%eax
c01013f6:	09 d0                	or     %edx,%eax
c01013f8:	83 c8 e0             	or     $0xffffffe0,%eax
c01013fb:	0f b6 c0             	movzbl %al,%eax
c01013fe:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101402:	83 c2 06             	add    $0x6,%edx
c0101405:	0f b7 d2             	movzwl %dx,%edx
c0101408:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c010140c:	88 45 dc             	mov    %al,-0x24(%ebp)
c010140f:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0101413:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0101417:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);
c0101418:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010141c:	83 c0 07             	add    $0x7,%eax
c010141f:	0f b7 c0             	movzwl %ax,%eax
c0101422:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101426:	c6 45 dd 20          	movb   $0x20,-0x23(%ebp)
c010142a:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c010142e:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c0101432:	ee                   	out    %al,(%dx)

    int ret = 0;
c0101433:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c010143a:	eb 56                	jmp    c0101492 <ide_read_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c010143c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101440:	83 ec 08             	sub    $0x8,%esp
c0101443:	6a 01                	push   $0x1
c0101445:	50                   	push   %eax
c0101446:	e8 52 fa ff ff       	call   c0100e9d <ide_wait_ready>
c010144b:	83 c4 10             	add    $0x10,%esp
c010144e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101451:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101455:	75 43                	jne    c010149a <ide_read_secs+0x21f>
            goto out;
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
c0101457:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010145b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010145e:	8b 45 10             	mov    0x10(%ebp),%eax
c0101461:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0101464:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    return data;
}

static inline void
insl(uint32_t port, void *addr, int cnt) {
    asm volatile (
c010146b:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010146e:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c0101471:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0101474:	89 cb                	mov    %ecx,%ebx
c0101476:	89 df                	mov    %ebx,%edi
c0101478:	89 c1                	mov    %eax,%ecx
c010147a:	fc                   	cld    
c010147b:	f2 6d                	repnz insl (%dx),%es:(%edi)
c010147d:	89 c8                	mov    %ecx,%eax
c010147f:	89 fb                	mov    %edi,%ebx
c0101481:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c0101484:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_READ);

    int ret = 0;
    for (; nsecs > 0; nsecs --, dst += SECTSIZE) {
c0101487:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c010148b:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c0101492:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0101496:	75 a4                	jne    c010143c <ide_read_secs+0x1c1>
c0101498:	eb 01                	jmp    c010149b <ide_read_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c010149a:	90                   	nop
        }
        insl(iobase, dst, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c010149b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010149e:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01014a1:	5b                   	pop    %ebx
c01014a2:	5f                   	pop    %edi
c01014a3:	5d                   	pop    %ebp
c01014a4:	c3                   	ret    

c01014a5 <ide_write_secs>:

int
ide_write_secs(unsigned short ideno, uint32_t secno, const void *src, size_t nsecs) {
c01014a5:	55                   	push   %ebp
c01014a6:	89 e5                	mov    %esp,%ebp
c01014a8:	56                   	push   %esi
c01014a9:	53                   	push   %ebx
c01014aa:	83 ec 40             	sub    $0x40,%esp
c01014ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01014b0:	66 89 45 c4          	mov    %ax,-0x3c(%ebp)
    assert(nsecs <= MAX_NSECS && VALID_IDE(ideno));
c01014b4:	81 7d 14 80 00 00 00 	cmpl   $0x80,0x14(%ebp)
c01014bb:	77 25                	ja     c01014e2 <ide_write_secs+0x3d>
c01014bd:	66 83 7d c4 03       	cmpw   $0x3,-0x3c(%ebp)
c01014c2:	77 1e                	ja     c01014e2 <ide_write_secs+0x3d>
c01014c4:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c01014c8:	c1 e0 03             	shl    $0x3,%eax
c01014cb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c01014d2:	29 c2                	sub    %eax,%edx
c01014d4:	89 d0                	mov    %edx,%eax
c01014d6:	05 40 e4 14 c0       	add    $0xc014e440,%eax
c01014db:	0f b6 00             	movzbl (%eax),%eax
c01014de:	84 c0                	test   %al,%al
c01014e0:	75 19                	jne    c01014fb <ide_write_secs+0x56>
c01014e2:	68 5c 30 11 c0       	push   $0xc011305c
c01014e7:	68 17 30 11 c0       	push   $0xc0113017
c01014ec:	68 bc 00 00 00       	push   $0xbc
c01014f1:	68 2c 30 11 c0       	push   $0xc011302c
c01014f6:	e8 ea ef ff ff       	call   c01004e5 <__panic>
    assert(secno < MAX_DISK_NSECS && secno + nsecs <= MAX_DISK_NSECS);
c01014fb:	81 7d 0c ff ff ff 0f 	cmpl   $0xfffffff,0xc(%ebp)
c0101502:	77 0f                	ja     c0101513 <ide_write_secs+0x6e>
c0101504:	8b 55 0c             	mov    0xc(%ebp),%edx
c0101507:	8b 45 14             	mov    0x14(%ebp),%eax
c010150a:	01 d0                	add    %edx,%eax
c010150c:	3d 00 00 00 10       	cmp    $0x10000000,%eax
c0101511:	76 19                	jbe    c010152c <ide_write_secs+0x87>
c0101513:	68 84 30 11 c0       	push   $0xc0113084
c0101518:	68 17 30 11 c0       	push   $0xc0113017
c010151d:	68 bd 00 00 00       	push   $0xbd
c0101522:	68 2c 30 11 c0       	push   $0xc011302c
c0101527:	e8 b9 ef ff ff       	call   c01004e5 <__panic>
    unsigned short iobase = IO_BASE(ideno), ioctrl = IO_CTRL(ideno);
c010152c:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101530:	66 d1 e8             	shr    %ax
c0101533:	0f b7 c0             	movzwl %ax,%eax
c0101536:	0f b7 04 85 cc 2f 11 	movzwl -0x3feed034(,%eax,4),%eax
c010153d:	c0 
c010153e:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101542:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c0101546:	66 d1 e8             	shr    %ax
c0101549:	0f b7 c0             	movzwl %ax,%eax
c010154c:	0f b7 04 85 ce 2f 11 	movzwl -0x3feed032(,%eax,4),%eax
c0101553:	c0 
c0101554:	66 89 45 f0          	mov    %ax,-0x10(%ebp)

    ide_wait_ready(iobase, 0);
c0101558:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010155c:	83 ec 08             	sub    $0x8,%esp
c010155f:	6a 00                	push   $0x0
c0101561:	50                   	push   %eax
c0101562:	e8 36 f9 ff ff       	call   c0100e9d <ide_wait_ready>
c0101567:	83 c4 10             	add    $0x10,%esp

    // generate interrupt
    outb(ioctrl + ISA_CTRL, 0);
c010156a:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c010156e:	83 c0 02             	add    $0x2,%eax
c0101571:	0f b7 c0             	movzwl %ax,%eax
c0101574:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
c0101578:	c6 45 d7 00          	movb   $0x0,-0x29(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010157c:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c0101580:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0101584:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECCNT, nsecs);
c0101585:	8b 45 14             	mov    0x14(%ebp),%eax
c0101588:	0f b6 c0             	movzbl %al,%eax
c010158b:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010158f:	83 c2 02             	add    $0x2,%edx
c0101592:	0f b7 d2             	movzwl %dx,%edx
c0101595:	66 89 55 e8          	mov    %dx,-0x18(%ebp)
c0101599:	88 45 d8             	mov    %al,-0x28(%ebp)
c010159c:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01015a0:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c01015a4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SECTOR, secno & 0xFF);
c01015a5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015a8:	0f b6 c0             	movzbl %al,%eax
c01015ab:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015af:	83 c2 03             	add    $0x3,%edx
c01015b2:	0f b7 d2             	movzwl %dx,%edx
c01015b5:	66 89 55 e6          	mov    %dx,-0x1a(%ebp)
c01015b9:	88 45 d9             	mov    %al,-0x27(%ebp)
c01015bc:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01015c0:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01015c4:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_LO, (secno >> 8) & 0xFF);
c01015c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015c8:	c1 e8 08             	shr    $0x8,%eax
c01015cb:	0f b6 c0             	movzbl %al,%eax
c01015ce:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015d2:	83 c2 04             	add    $0x4,%edx
c01015d5:	0f b7 d2             	movzwl %dx,%edx
c01015d8:	66 89 55 e4          	mov    %dx,-0x1c(%ebp)
c01015dc:	88 45 da             	mov    %al,-0x26(%ebp)
c01015df:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01015e3:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01015e7:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
c01015e8:	8b 45 0c             	mov    0xc(%ebp),%eax
c01015eb:	c1 e8 10             	shr    $0x10,%eax
c01015ee:	0f b6 c0             	movzbl %al,%eax
c01015f1:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01015f5:	83 c2 05             	add    $0x5,%edx
c01015f8:	0f b7 d2             	movzwl %dx,%edx
c01015fb:	66 89 55 e2          	mov    %dx,-0x1e(%ebp)
c01015ff:	88 45 db             	mov    %al,-0x25(%ebp)
c0101602:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c0101606:	0f b7 55 e2          	movzwl -0x1e(%ebp),%edx
c010160a:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
c010160b:	0f b7 45 c4          	movzwl -0x3c(%ebp),%eax
c010160f:	83 e0 01             	and    $0x1,%eax
c0101612:	c1 e0 04             	shl    $0x4,%eax
c0101615:	89 c2                	mov    %eax,%edx
c0101617:	8b 45 0c             	mov    0xc(%ebp),%eax
c010161a:	c1 e8 18             	shr    $0x18,%eax
c010161d:	83 e0 0f             	and    $0xf,%eax
c0101620:	09 d0                	or     %edx,%eax
c0101622:	83 c8 e0             	or     $0xffffffe0,%eax
c0101625:	0f b6 c0             	movzbl %al,%eax
c0101628:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c010162c:	83 c2 06             	add    $0x6,%edx
c010162f:	0f b7 d2             	movzwl %dx,%edx
c0101632:	66 89 55 e0          	mov    %dx,-0x20(%ebp)
c0101636:	88 45 dc             	mov    %al,-0x24(%ebp)
c0101639:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c010163d:	0f b7 55 e0          	movzwl -0x20(%ebp),%edx
c0101641:	ee                   	out    %al,(%dx)
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);
c0101642:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101646:	83 c0 07             	add    $0x7,%eax
c0101649:	0f b7 c0             	movzwl %ax,%eax
c010164c:	66 89 45 de          	mov    %ax,-0x22(%ebp)
c0101650:	c6 45 dd 30          	movb   $0x30,-0x23(%ebp)
c0101654:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0101658:	0f b7 55 de          	movzwl -0x22(%ebp),%edx
c010165c:	ee                   	out    %al,(%dx)

    int ret = 0;
c010165d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c0101664:	eb 56                	jmp    c01016bc <ide_write_secs+0x217>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
c0101666:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c010166a:	83 ec 08             	sub    $0x8,%esp
c010166d:	6a 01                	push   $0x1
c010166f:	50                   	push   %eax
c0101670:	e8 28 f8 ff ff       	call   c0100e9d <ide_wait_ready>
c0101675:	83 c4 10             	add    $0x10,%esp
c0101678:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010167b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010167f:	75 43                	jne    c01016c4 <ide_write_secs+0x21f>
            goto out;
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
c0101681:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101685:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0101688:	8b 45 10             	mov    0x10(%ebp),%eax
c010168b:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010168e:	c7 45 cc 80 00 00 00 	movl   $0x80,-0x34(%ebp)
    asm volatile ("outw %0, %1" :: "a" (data), "d" (port) : "memory");
}

static inline void
outsl(uint32_t port, const void *addr, int cnt) {
    asm volatile (
c0101695:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0101698:	8b 4d d0             	mov    -0x30(%ebp),%ecx
c010169b:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010169e:	89 cb                	mov    %ecx,%ebx
c01016a0:	89 de                	mov    %ebx,%esi
c01016a2:	89 c1                	mov    %eax,%ecx
c01016a4:	fc                   	cld    
c01016a5:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
c01016a7:	89 c8                	mov    %ecx,%eax
c01016a9:	89 f3                	mov    %esi,%ebx
c01016ab:	89 5d d0             	mov    %ebx,-0x30(%ebp)
c01016ae:	89 45 cc             	mov    %eax,-0x34(%ebp)
    outb(iobase + ISA_CYL_HI, (secno >> 16) & 0xFF);
    outb(iobase + ISA_SDH, 0xE0 | ((ideno & 1) << 4) | ((secno >> 24) & 0xF));
    outb(iobase + ISA_COMMAND, IDE_CMD_WRITE);

    int ret = 0;
    for (; nsecs > 0; nsecs --, src += SECTSIZE) {
c01016b1:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c01016b5:	81 45 10 00 02 00 00 	addl   $0x200,0x10(%ebp)
c01016bc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01016c0:	75 a4                	jne    c0101666 <ide_write_secs+0x1c1>
c01016c2:	eb 01                	jmp    c01016c5 <ide_write_secs+0x220>
        if ((ret = ide_wait_ready(iobase, 1)) != 0) {
            goto out;
c01016c4:	90                   	nop
        }
        outsl(iobase, src, SECTSIZE / sizeof(uint32_t));
    }

out:
    return ret;
c01016c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01016c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
c01016cb:	5b                   	pop    %ebx
c01016cc:	5e                   	pop    %esi
c01016cd:	5d                   	pop    %ebp
c01016ce:	c3                   	ret    

c01016cf <SYSTEM_READ_TIMER>:
#define TIMER_RATEGEN   0x04                    // mode 2, rate generator
#define TIMER_16BIT     0x30                    // r/w counter 16 bits, LSB first

volatile size_t ticks;

long SYSTEM_READ_TIMER( void ){
c01016cf:	55                   	push   %ebp
c01016d0:	89 e5                	mov    %esp,%ebp
    return ticks;
c01016d2:	a1 00 21 15 c0       	mov    0xc0152100,%eax
}
c01016d7:	5d                   	pop    %ebp
c01016d8:	c3                   	ret    

c01016d9 <clock_init>:
/* *
 * clock_init - initialize 8253 clock to interrupt 100 times per second,
 * and then enable IRQ_TIMER.
 * */
void
clock_init(void) {
c01016d9:	55                   	push   %ebp
c01016da:	89 e5                	mov    %esp,%ebp
c01016dc:	83 ec 18             	sub    $0x18,%esp
c01016df:	66 c7 45 f6 43 00    	movw   $0x43,-0xa(%ebp)
c01016e5:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01016e9:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
c01016ed:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01016f1:	ee                   	out    %al,(%dx)
c01016f2:	66 c7 45 f4 40 00    	movw   $0x40,-0xc(%ebp)
c01016f8:	c6 45 f0 9c          	movb   $0x9c,-0x10(%ebp)
c01016fc:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c0101700:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0101704:	ee                   	out    %al,(%dx)
c0101705:	66 c7 45 f2 40 00    	movw   $0x40,-0xe(%ebp)
c010170b:	c6 45 f1 2e          	movb   $0x2e,-0xf(%ebp)
c010170f:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c0101713:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101717:	ee                   	out    %al,(%dx)
    outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
    outb(IO_TIMER1, TIMER_DIV(100) % 256);
    outb(IO_TIMER1, TIMER_DIV(100) / 256);

    // initialize time counter 'ticks' to zero
    ticks = 0;
c0101718:	c7 05 00 21 15 c0 00 	movl   $0x0,0xc0152100
c010171f:	00 00 00 

    cprintf("++ setup timer interrupts\n");
c0101722:	83 ec 0c             	sub    $0xc,%esp
c0101725:	68 be 30 11 c0       	push   $0xc01130be
c010172a:	e8 50 ec ff ff       	call   c010037f <cprintf>
c010172f:	83 c4 10             	add    $0x10,%esp
    pic_enable(IRQ_TIMER);
c0101732:	83 ec 0c             	sub    $0xc,%esp
c0101735:	6a 00                	push   $0x0
c0101737:	e8 3b 09 00 00       	call   c0102077 <pic_enable>
c010173c:	83 c4 10             	add    $0x10,%esp
}
c010173f:	90                   	nop
c0101740:	c9                   	leave  
c0101741:	c3                   	ret    

c0101742 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0101742:	55                   	push   %ebp
c0101743:	89 e5                	mov    %esp,%ebp
c0101745:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0101748:	9c                   	pushf  
c0101749:	58                   	pop    %eax
c010174a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010174d:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0101750:	25 00 02 00 00       	and    $0x200,%eax
c0101755:	85 c0                	test   %eax,%eax
c0101757:	74 0c                	je     c0101765 <__intr_save+0x23>
        intr_disable();
c0101759:	e8 8a 0a 00 00       	call   c01021e8 <intr_disable>
        return 1;
c010175e:	b8 01 00 00 00       	mov    $0x1,%eax
c0101763:	eb 05                	jmp    c010176a <__intr_save+0x28>
    }
    return 0;
c0101765:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010176a:	c9                   	leave  
c010176b:	c3                   	ret    

c010176c <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010176c:	55                   	push   %ebp
c010176d:	89 e5                	mov    %esp,%ebp
c010176f:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0101772:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0101776:	74 05                	je     c010177d <__intr_restore+0x11>
        intr_enable();
c0101778:	e8 64 0a 00 00       	call   c01021e1 <intr_enable>
    }
}
c010177d:	90                   	nop
c010177e:	c9                   	leave  
c010177f:	c3                   	ret    

c0101780 <delay>:
#include <memlayout.h>
#include <sync.h>

/* stupid I/O delay routine necessitated by historical PC design flaws */
static void
delay(void) {
c0101780:	55                   	push   %ebp
c0101781:	89 e5                	mov    %esp,%ebp
c0101783:	83 ec 10             	sub    $0x10,%esp
c0101786:	66 c7 45 fe 84 00    	movw   $0x84,-0x2(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c010178c:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0101790:	89 c2                	mov    %eax,%edx
c0101792:	ec                   	in     (%dx),%al
c0101793:	88 45 f4             	mov    %al,-0xc(%ebp)
c0101796:	66 c7 45 fc 84 00    	movw   $0x84,-0x4(%ebp)
c010179c:	0f b7 45 fc          	movzwl -0x4(%ebp),%eax
c01017a0:	89 c2                	mov    %eax,%edx
c01017a2:	ec                   	in     (%dx),%al
c01017a3:	88 45 f5             	mov    %al,-0xb(%ebp)
c01017a6:	66 c7 45 fa 84 00    	movw   $0x84,-0x6(%ebp)
c01017ac:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c01017b0:	89 c2                	mov    %eax,%edx
c01017b2:	ec                   	in     (%dx),%al
c01017b3:	88 45 f6             	mov    %al,-0xa(%ebp)
c01017b6:	66 c7 45 f8 84 00    	movw   $0x84,-0x8(%ebp)
c01017bc:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c01017c0:	89 c2                	mov    %eax,%edx
c01017c2:	ec                   	in     (%dx),%al
c01017c3:	88 45 f7             	mov    %al,-0x9(%ebp)
    inb(0x84);
    inb(0x84);
    inb(0x84);
    inb(0x84);
}
c01017c6:	90                   	nop
c01017c7:	c9                   	leave  
c01017c8:	c3                   	ret    

c01017c9 <cga_init>:
static uint16_t addr_6845;

/* TEXT-mode CGA/VGA display output */

static void
cga_init(void) {
c01017c9:	55                   	push   %ebp
c01017ca:	89 e5                	mov    %esp,%ebp
c01017cc:	83 ec 20             	sub    $0x20,%esp
    volatile uint16_t *cp = (uint16_t *)(CGA_BUF + KERNBASE);
c01017cf:	c7 45 fc 00 80 0b c0 	movl   $0xc00b8000,-0x4(%ebp)
    uint16_t was = *cp;
c01017d6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017d9:	0f b7 00             	movzwl (%eax),%eax
c01017dc:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    *cp = (uint16_t) 0xA55A;
c01017e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017e3:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
    if (*cp != 0xA55A) {
c01017e8:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01017eb:	0f b7 00             	movzwl (%eax),%eax
c01017ee:	66 3d 5a a5          	cmp    $0xa55a,%ax
c01017f2:	74 12                	je     c0101806 <cga_init+0x3d>
        cp = (uint16_t*)(MONO_BUF + KERNBASE);
c01017f4:	c7 45 fc 00 00 0b c0 	movl   $0xc00b0000,-0x4(%ebp)
        addr_6845 = MONO_BASE;
c01017fb:	66 c7 05 26 e5 14 c0 	movw   $0x3b4,0xc014e526
c0101802:	b4 03 
c0101804:	eb 13                	jmp    c0101819 <cga_init+0x50>
    } else {
        *cp = was;
c0101806:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0101809:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c010180d:	66 89 10             	mov    %dx,(%eax)
        addr_6845 = CGA_BASE;
c0101810:	66 c7 05 26 e5 14 c0 	movw   $0x3d4,0xc014e526
c0101817:	d4 03 
    }

    // Extract cursor location
    uint32_t pos;
    outb(addr_6845, 14);
c0101819:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c0101820:	0f b7 c0             	movzwl %ax,%eax
c0101823:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
c0101827:	c6 45 ea 0e          	movb   $0xe,-0x16(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010182b:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c010182f:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c0101833:	ee                   	out    %al,(%dx)
    pos = inb(addr_6845 + 1) << 8;
c0101834:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c010183b:	83 c0 01             	add    $0x1,%eax
c010183e:	0f b7 c0             	movzwl %ax,%eax
c0101841:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101845:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
c0101849:	89 c2                	mov    %eax,%edx
c010184b:	ec                   	in     (%dx),%al
c010184c:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c010184f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101853:	0f b6 c0             	movzbl %al,%eax
c0101856:	c1 e0 08             	shl    $0x8,%eax
c0101859:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(addr_6845, 15);
c010185c:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c0101863:	0f b7 c0             	movzwl %ax,%eax
c0101866:	66 89 45 f0          	mov    %ax,-0x10(%ebp)
c010186a:	c6 45 ec 0f          	movb   $0xf,-0x14(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c010186e:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
c0101872:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101876:	ee                   	out    %al,(%dx)
    pos |= inb(addr_6845 + 1);
c0101877:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c010187e:	83 c0 01             	add    $0x1,%eax
c0101881:	0f b7 c0             	movzwl %ax,%eax
c0101884:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101888:	0f b7 45 ee          	movzwl -0x12(%ebp),%eax
c010188c:	89 c2                	mov    %eax,%edx
c010188e:	ec                   	in     (%dx),%al
c010188f:	88 45 ed             	mov    %al,-0x13(%ebp)
    return data;
c0101892:	0f b6 45 ed          	movzbl -0x13(%ebp),%eax
c0101896:	0f b6 c0             	movzbl %al,%eax
c0101899:	09 45 f4             	or     %eax,-0xc(%ebp)

    crt_buf = (uint16_t*) cp;
c010189c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010189f:	a3 20 e5 14 c0       	mov    %eax,0xc014e520
    crt_pos = pos;
c01018a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01018a7:	66 a3 24 e5 14 c0    	mov    %ax,0xc014e524
}
c01018ad:	90                   	nop
c01018ae:	c9                   	leave  
c01018af:	c3                   	ret    

c01018b0 <serial_init>:

static bool serial_exists = 0;

static void
serial_init(void) {
c01018b0:	55                   	push   %ebp
c01018b1:	89 e5                	mov    %esp,%ebp
c01018b3:	83 ec 28             	sub    $0x28,%esp
c01018b6:	66 c7 45 f6 fa 03    	movw   $0x3fa,-0xa(%ebp)
c01018bc:	c6 45 da 00          	movb   $0x0,-0x26(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01018c0:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c01018c4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01018c8:	ee                   	out    %al,(%dx)
c01018c9:	66 c7 45 f4 fb 03    	movw   $0x3fb,-0xc(%ebp)
c01018cf:	c6 45 db 80          	movb   $0x80,-0x25(%ebp)
c01018d3:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c01018d7:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c01018db:	ee                   	out    %al,(%dx)
c01018dc:	66 c7 45 f2 f8 03    	movw   $0x3f8,-0xe(%ebp)
c01018e2:	c6 45 dc 0c          	movb   $0xc,-0x24(%ebp)
c01018e6:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c01018ea:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c01018ee:	ee                   	out    %al,(%dx)
c01018ef:	66 c7 45 f0 f9 03    	movw   $0x3f9,-0x10(%ebp)
c01018f5:	c6 45 dd 00          	movb   $0x0,-0x23(%ebp)
c01018f9:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c01018fd:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101901:	ee                   	out    %al,(%dx)
c0101902:	66 c7 45 ee fb 03    	movw   $0x3fb,-0x12(%ebp)
c0101908:	c6 45 de 03          	movb   $0x3,-0x22(%ebp)
c010190c:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c0101910:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101914:	ee                   	out    %al,(%dx)
c0101915:	66 c7 45 ec fc 03    	movw   $0x3fc,-0x14(%ebp)
c010191b:	c6 45 df 00          	movb   $0x0,-0x21(%ebp)
c010191f:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c0101923:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101927:	ee                   	out    %al,(%dx)
c0101928:	66 c7 45 ea f9 03    	movw   $0x3f9,-0x16(%ebp)
c010192e:	c6 45 e0 01          	movb   $0x1,-0x20(%ebp)
c0101932:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0101936:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c010193a:	ee                   	out    %al,(%dx)
c010193b:	66 c7 45 e8 fd 03    	movw   $0x3fd,-0x18(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101941:	0f b7 45 e8          	movzwl -0x18(%ebp),%eax
c0101945:	89 c2                	mov    %eax,%edx
c0101947:	ec                   	in     (%dx),%al
c0101948:	88 45 e1             	mov    %al,-0x1f(%ebp)
    return data;
c010194b:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
    // Enable rcv interrupts
    outb(COM1 + COM_IER, COM_IER_RDI);

    // Clear any preexisting overrun indications and interrupts
    // Serial port doesn't exist if COM_LSR returns 0xFF
    serial_exists = (inb(COM1 + COM_LSR) != 0xFF);
c010194f:	3c ff                	cmp    $0xff,%al
c0101951:	0f 95 c0             	setne  %al
c0101954:	0f b6 c0             	movzbl %al,%eax
c0101957:	a3 28 e5 14 c0       	mov    %eax,0xc014e528
c010195c:	66 c7 45 e6 fa 03    	movw   $0x3fa,-0x1a(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101962:	0f b7 45 e6          	movzwl -0x1a(%ebp),%eax
c0101966:	89 c2                	mov    %eax,%edx
c0101968:	ec                   	in     (%dx),%al
c0101969:	88 45 e2             	mov    %al,-0x1e(%ebp)
c010196c:	66 c7 45 e4 f8 03    	movw   $0x3f8,-0x1c(%ebp)
c0101972:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
c0101976:	89 c2                	mov    %eax,%edx
c0101978:	ec                   	in     (%dx),%al
c0101979:	88 45 e3             	mov    %al,-0x1d(%ebp)
    (void) inb(COM1+COM_IIR);
    (void) inb(COM1+COM_RX);

    if (serial_exists) {
c010197c:	a1 28 e5 14 c0       	mov    0xc014e528,%eax
c0101981:	85 c0                	test   %eax,%eax
c0101983:	74 0d                	je     c0101992 <serial_init+0xe2>
        pic_enable(IRQ_COM1);
c0101985:	83 ec 0c             	sub    $0xc,%esp
c0101988:	6a 04                	push   $0x4
c010198a:	e8 e8 06 00 00       	call   c0102077 <pic_enable>
c010198f:	83 c4 10             	add    $0x10,%esp
    }
}
c0101992:	90                   	nop
c0101993:	c9                   	leave  
c0101994:	c3                   	ret    

c0101995 <lpt_putc_sub>:

static void
lpt_putc_sub(int c) {
c0101995:	55                   	push   %ebp
c0101996:	89 e5                	mov    %esp,%ebp
c0101998:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c010199b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c01019a2:	eb 09                	jmp    c01019ad <lpt_putc_sub+0x18>
        delay();
c01019a4:	e8 d7 fd ff ff       	call   c0101780 <delay>
}

static void
lpt_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(LPTPORT + 1) & 0x80) && i < 12800; i ++) {
c01019a9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c01019ad:	66 c7 45 f4 79 03    	movw   $0x379,-0xc(%ebp)
c01019b3:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c01019b7:	89 c2                	mov    %eax,%edx
c01019b9:	ec                   	in     (%dx),%al
c01019ba:	88 45 f3             	mov    %al,-0xd(%ebp)
    return data;
c01019bd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c01019c1:	84 c0                	test   %al,%al
c01019c3:	78 09                	js     c01019ce <lpt_putc_sub+0x39>
c01019c5:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c01019cc:	7e d6                	jle    c01019a4 <lpt_putc_sub+0xf>
        delay();
    }
    outb(LPTPORT + 0, c);
c01019ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01019d1:	0f b6 c0             	movzbl %al,%eax
c01019d4:	66 c7 45 f8 78 03    	movw   $0x378,-0x8(%ebp)
c01019da:	88 45 f0             	mov    %al,-0x10(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c01019dd:	0f b6 45 f0          	movzbl -0x10(%ebp),%eax
c01019e1:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01019e5:	ee                   	out    %al,(%dx)
c01019e6:	66 c7 45 f6 7a 03    	movw   $0x37a,-0xa(%ebp)
c01019ec:	c6 45 f1 0d          	movb   $0xd,-0xf(%ebp)
c01019f0:	0f b6 45 f1          	movzbl -0xf(%ebp),%eax
c01019f4:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c01019f8:	ee                   	out    %al,(%dx)
c01019f9:	66 c7 45 fa 7a 03    	movw   $0x37a,-0x6(%ebp)
c01019ff:	c6 45 f2 08          	movb   $0x8,-0xe(%ebp)
c0101a03:	0f b6 45 f2          	movzbl -0xe(%ebp),%eax
c0101a07:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101a0b:	ee                   	out    %al,(%dx)
    outb(LPTPORT + 2, 0x08 | 0x04 | 0x01);
    outb(LPTPORT + 2, 0x08);
}
c0101a0c:	90                   	nop
c0101a0d:	c9                   	leave  
c0101a0e:	c3                   	ret    

c0101a0f <lpt_putc>:

/* lpt_putc - copy console output to parallel port */
static void
lpt_putc(int c) {
c0101a0f:	55                   	push   %ebp
c0101a10:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101a12:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101a16:	74 0d                	je     c0101a25 <lpt_putc+0x16>
        lpt_putc_sub(c);
c0101a18:	ff 75 08             	pushl  0x8(%ebp)
c0101a1b:	e8 75 ff ff ff       	call   c0101995 <lpt_putc_sub>
c0101a20:	83 c4 04             	add    $0x4,%esp
    else {
        lpt_putc_sub('\b');
        lpt_putc_sub(' ');
        lpt_putc_sub('\b');
    }
}
c0101a23:	eb 1e                	jmp    c0101a43 <lpt_putc+0x34>
lpt_putc(int c) {
    if (c != '\b') {
        lpt_putc_sub(c);
    }
    else {
        lpt_putc_sub('\b');
c0101a25:	6a 08                	push   $0x8
c0101a27:	e8 69 ff ff ff       	call   c0101995 <lpt_putc_sub>
c0101a2c:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub(' ');
c0101a2f:	6a 20                	push   $0x20
c0101a31:	e8 5f ff ff ff       	call   c0101995 <lpt_putc_sub>
c0101a36:	83 c4 04             	add    $0x4,%esp
        lpt_putc_sub('\b');
c0101a39:	6a 08                	push   $0x8
c0101a3b:	e8 55 ff ff ff       	call   c0101995 <lpt_putc_sub>
c0101a40:	83 c4 04             	add    $0x4,%esp
    }
}
c0101a43:	90                   	nop
c0101a44:	c9                   	leave  
c0101a45:	c3                   	ret    

c0101a46 <cga_putc>:

/* cga_putc - print character to console */
static void
cga_putc(int c) {
c0101a46:	55                   	push   %ebp
c0101a47:	89 e5                	mov    %esp,%ebp
c0101a49:	53                   	push   %ebx
c0101a4a:	83 ec 14             	sub    $0x14,%esp
    // set black on white
    if (!(c & ~0xFF)) {
c0101a4d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a50:	b0 00                	mov    $0x0,%al
c0101a52:	85 c0                	test   %eax,%eax
c0101a54:	75 07                	jne    c0101a5d <cga_putc+0x17>
        c |= 0x0700;
c0101a56:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)
    }

    switch (c & 0xff) {
c0101a5d:	8b 45 08             	mov    0x8(%ebp),%eax
c0101a60:	0f b6 c0             	movzbl %al,%eax
c0101a63:	83 f8 0a             	cmp    $0xa,%eax
c0101a66:	74 4e                	je     c0101ab6 <cga_putc+0x70>
c0101a68:	83 f8 0d             	cmp    $0xd,%eax
c0101a6b:	74 59                	je     c0101ac6 <cga_putc+0x80>
c0101a6d:	83 f8 08             	cmp    $0x8,%eax
c0101a70:	0f 85 8a 00 00 00    	jne    c0101b00 <cga_putc+0xba>
    case '\b':
        if (crt_pos > 0) {
c0101a76:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101a7d:	66 85 c0             	test   %ax,%ax
c0101a80:	0f 84 a0 00 00 00    	je     c0101b26 <cga_putc+0xe0>
            crt_pos --;
c0101a86:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101a8d:	83 e8 01             	sub    $0x1,%eax
c0101a90:	66 a3 24 e5 14 c0    	mov    %ax,0xc014e524
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
c0101a96:	a1 20 e5 14 c0       	mov    0xc014e520,%eax
c0101a9b:	0f b7 15 24 e5 14 c0 	movzwl 0xc014e524,%edx
c0101aa2:	0f b7 d2             	movzwl %dx,%edx
c0101aa5:	01 d2                	add    %edx,%edx
c0101aa7:	01 d0                	add    %edx,%eax
c0101aa9:	8b 55 08             	mov    0x8(%ebp),%edx
c0101aac:	b2 00                	mov    $0x0,%dl
c0101aae:	83 ca 20             	or     $0x20,%edx
c0101ab1:	66 89 10             	mov    %dx,(%eax)
        }
        break;
c0101ab4:	eb 70                	jmp    c0101b26 <cga_putc+0xe0>
    case '\n':
        crt_pos += CRT_COLS;
c0101ab6:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101abd:	83 c0 50             	add    $0x50,%eax
c0101ac0:	66 a3 24 e5 14 c0    	mov    %ax,0xc014e524
    case '\r':
        crt_pos -= (crt_pos % CRT_COLS);
c0101ac6:	0f b7 1d 24 e5 14 c0 	movzwl 0xc014e524,%ebx
c0101acd:	0f b7 0d 24 e5 14 c0 	movzwl 0xc014e524,%ecx
c0101ad4:	0f b7 c1             	movzwl %cx,%eax
c0101ad7:	69 c0 cd cc 00 00    	imul   $0xcccd,%eax,%eax
c0101add:	c1 e8 10             	shr    $0x10,%eax
c0101ae0:	89 c2                	mov    %eax,%edx
c0101ae2:	66 c1 ea 06          	shr    $0x6,%dx
c0101ae6:	89 d0                	mov    %edx,%eax
c0101ae8:	c1 e0 02             	shl    $0x2,%eax
c0101aeb:	01 d0                	add    %edx,%eax
c0101aed:	c1 e0 04             	shl    $0x4,%eax
c0101af0:	29 c1                	sub    %eax,%ecx
c0101af2:	89 ca                	mov    %ecx,%edx
c0101af4:	89 d8                	mov    %ebx,%eax
c0101af6:	29 d0                	sub    %edx,%eax
c0101af8:	66 a3 24 e5 14 c0    	mov    %ax,0xc014e524
        break;
c0101afe:	eb 27                	jmp    c0101b27 <cga_putc+0xe1>
    default:
        crt_buf[crt_pos ++] = c;     // write the character
c0101b00:	8b 0d 20 e5 14 c0    	mov    0xc014e520,%ecx
c0101b06:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101b0d:	8d 50 01             	lea    0x1(%eax),%edx
c0101b10:	66 89 15 24 e5 14 c0 	mov    %dx,0xc014e524
c0101b17:	0f b7 c0             	movzwl %ax,%eax
c0101b1a:	01 c0                	add    %eax,%eax
c0101b1c:	01 c8                	add    %ecx,%eax
c0101b1e:	8b 55 08             	mov    0x8(%ebp),%edx
c0101b21:	66 89 10             	mov    %dx,(%eax)
        break;
c0101b24:	eb 01                	jmp    c0101b27 <cga_putc+0xe1>
    case '\b':
        if (crt_pos > 0) {
            crt_pos --;
            crt_buf[crt_pos] = (c & ~0xff) | ' ';
        }
        break;
c0101b26:	90                   	nop
        crt_buf[crt_pos ++] = c;     // write the character
        break;
    }

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
c0101b27:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101b2e:	66 3d cf 07          	cmp    $0x7cf,%ax
c0101b32:	76 59                	jbe    c0101b8d <cga_putc+0x147>
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
c0101b34:	a1 20 e5 14 c0       	mov    0xc014e520,%eax
c0101b39:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
c0101b3f:	a1 20 e5 14 c0       	mov    0xc014e520,%eax
c0101b44:	83 ec 04             	sub    $0x4,%esp
c0101b47:	68 00 0f 00 00       	push   $0xf00
c0101b4c:	52                   	push   %edx
c0101b4d:	50                   	push   %eax
c0101b4e:	e8 f2 08 01 00       	call   c0112445 <memmove>
c0101b53:	83 c4 10             	add    $0x10,%esp
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b56:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
c0101b5d:	eb 15                	jmp    c0101b74 <cga_putc+0x12e>
            crt_buf[i] = 0x0700 | ' ';
c0101b5f:	a1 20 e5 14 c0       	mov    0xc014e520,%eax
c0101b64:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101b67:	01 d2                	add    %edx,%edx
c0101b69:	01 d0                	add    %edx,%eax
c0101b6b:	66 c7 00 20 07       	movw   $0x720,(%eax)

    // What is the purpose of this?
    if (crt_pos >= CRT_SIZE) {
        int i;
        memmove(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16_t));
        for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i ++) {
c0101b70:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0101b74:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
c0101b7b:	7e e2                	jle    c0101b5f <cga_putc+0x119>
            crt_buf[i] = 0x0700 | ' ';
        }
        crt_pos -= CRT_COLS;
c0101b7d:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101b84:	83 e8 50             	sub    $0x50,%eax
c0101b87:	66 a3 24 e5 14 c0    	mov    %ax,0xc014e524
    }

    // move that little blinky thing
    outb(addr_6845, 14);
c0101b8d:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c0101b94:	0f b7 c0             	movzwl %ax,%eax
c0101b97:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
c0101b9b:	c6 45 e8 0e          	movb   $0xe,-0x18(%ebp)
c0101b9f:	0f b6 45 e8          	movzbl -0x18(%ebp),%eax
c0101ba3:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0101ba7:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos >> 8);
c0101ba8:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101baf:	66 c1 e8 08          	shr    $0x8,%ax
c0101bb3:	0f b6 c0             	movzbl %al,%eax
c0101bb6:	0f b7 15 26 e5 14 c0 	movzwl 0xc014e526,%edx
c0101bbd:	83 c2 01             	add    $0x1,%edx
c0101bc0:	0f b7 d2             	movzwl %dx,%edx
c0101bc3:	66 89 55 f0          	mov    %dx,-0x10(%ebp)
c0101bc7:	88 45 e9             	mov    %al,-0x17(%ebp)
c0101bca:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101bce:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c0101bd2:	ee                   	out    %al,(%dx)
    outb(addr_6845, 15);
c0101bd3:	0f b7 05 26 e5 14 c0 	movzwl 0xc014e526,%eax
c0101bda:	0f b7 c0             	movzwl %ax,%eax
c0101bdd:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
c0101be1:	c6 45 ea 0f          	movb   $0xf,-0x16(%ebp)
c0101be5:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
c0101be9:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101bed:	ee                   	out    %al,(%dx)
    outb(addr_6845 + 1, crt_pos);
c0101bee:	0f b7 05 24 e5 14 c0 	movzwl 0xc014e524,%eax
c0101bf5:	0f b6 c0             	movzbl %al,%eax
c0101bf8:	0f b7 15 26 e5 14 c0 	movzwl 0xc014e526,%edx
c0101bff:	83 c2 01             	add    $0x1,%edx
c0101c02:	0f b7 d2             	movzwl %dx,%edx
c0101c05:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
c0101c09:	88 45 eb             	mov    %al,-0x15(%ebp)
c0101c0c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
c0101c10:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0101c14:	ee                   	out    %al,(%dx)
}
c0101c15:	90                   	nop
c0101c16:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0101c19:	c9                   	leave  
c0101c1a:	c3                   	ret    

c0101c1b <serial_putc_sub>:

static void
serial_putc_sub(int c) {
c0101c1b:	55                   	push   %ebp
c0101c1c:	89 e5                	mov    %esp,%ebp
c0101c1e:	83 ec 10             	sub    $0x10,%esp
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c21:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0101c28:	eb 09                	jmp    c0101c33 <serial_putc_sub+0x18>
        delay();
c0101c2a:	e8 51 fb ff ff       	call   c0101780 <delay>
}

static void
serial_putc_sub(int c) {
    int i;
    for (i = 0; !(inb(COM1 + COM_LSR) & COM_LSR_TXRDY) && i < 12800; i ++) {
c0101c2f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0101c33:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101c39:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101c3d:	89 c2                	mov    %eax,%edx
c0101c3f:	ec                   	in     (%dx),%al
c0101c40:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101c43:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c0101c47:	0f b6 c0             	movzbl %al,%eax
c0101c4a:	83 e0 20             	and    $0x20,%eax
c0101c4d:	85 c0                	test   %eax,%eax
c0101c4f:	75 09                	jne    c0101c5a <serial_putc_sub+0x3f>
c0101c51:	81 7d fc ff 31 00 00 	cmpl   $0x31ff,-0x4(%ebp)
c0101c58:	7e d0                	jle    c0101c2a <serial_putc_sub+0xf>
        delay();
    }
    outb(COM1 + COM_TX, c);
c0101c5a:	8b 45 08             	mov    0x8(%ebp),%eax
c0101c5d:	0f b6 c0             	movzbl %al,%eax
c0101c60:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
c0101c66:	88 45 f6             	mov    %al,-0xa(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101c69:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
c0101c6d:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c0101c71:	ee                   	out    %al,(%dx)
}
c0101c72:	90                   	nop
c0101c73:	c9                   	leave  
c0101c74:	c3                   	ret    

c0101c75 <serial_putc>:

/* serial_putc - print character to serial port */
static void
serial_putc(int c) {
c0101c75:	55                   	push   %ebp
c0101c76:	89 e5                	mov    %esp,%ebp
    if (c != '\b') {
c0101c78:	83 7d 08 08          	cmpl   $0x8,0x8(%ebp)
c0101c7c:	74 0d                	je     c0101c8b <serial_putc+0x16>
        serial_putc_sub(c);
c0101c7e:	ff 75 08             	pushl  0x8(%ebp)
c0101c81:	e8 95 ff ff ff       	call   c0101c1b <serial_putc_sub>
c0101c86:	83 c4 04             	add    $0x4,%esp
    else {
        serial_putc_sub('\b');
        serial_putc_sub(' ');
        serial_putc_sub('\b');
    }
}
c0101c89:	eb 1e                	jmp    c0101ca9 <serial_putc+0x34>
serial_putc(int c) {
    if (c != '\b') {
        serial_putc_sub(c);
    }
    else {
        serial_putc_sub('\b');
c0101c8b:	6a 08                	push   $0x8
c0101c8d:	e8 89 ff ff ff       	call   c0101c1b <serial_putc_sub>
c0101c92:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub(' ');
c0101c95:	6a 20                	push   $0x20
c0101c97:	e8 7f ff ff ff       	call   c0101c1b <serial_putc_sub>
c0101c9c:	83 c4 04             	add    $0x4,%esp
        serial_putc_sub('\b');
c0101c9f:	6a 08                	push   $0x8
c0101ca1:	e8 75 ff ff ff       	call   c0101c1b <serial_putc_sub>
c0101ca6:	83 c4 04             	add    $0x4,%esp
    }
}
c0101ca9:	90                   	nop
c0101caa:	c9                   	leave  
c0101cab:	c3                   	ret    

c0101cac <cons_intr>:
/* *
 * cons_intr - called by device interrupt routines to feed input
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
c0101cac:	55                   	push   %ebp
c0101cad:	89 e5                	mov    %esp,%ebp
c0101caf:	83 ec 18             	sub    $0x18,%esp
    int c;
    while ((c = (*proc)()) != -1) {
c0101cb2:	eb 33                	jmp    c0101ce7 <cons_intr+0x3b>
        if (c != 0) {
c0101cb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0101cb8:	74 2d                	je     c0101ce7 <cons_intr+0x3b>
            cons.buf[cons.wpos ++] = c;
c0101cba:	a1 44 e7 14 c0       	mov    0xc014e744,%eax
c0101cbf:	8d 50 01             	lea    0x1(%eax),%edx
c0101cc2:	89 15 44 e7 14 c0    	mov    %edx,0xc014e744
c0101cc8:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0101ccb:	88 90 40 e5 14 c0    	mov    %dl,-0x3feb1ac0(%eax)
            if (cons.wpos == CONSBUFSIZE) {
c0101cd1:	a1 44 e7 14 c0       	mov    0xc014e744,%eax
c0101cd6:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101cdb:	75 0a                	jne    c0101ce7 <cons_intr+0x3b>
                cons.wpos = 0;
c0101cdd:	c7 05 44 e7 14 c0 00 	movl   $0x0,0xc014e744
c0101ce4:	00 00 00 
 * characters into the circular console input buffer.
 * */
static void
cons_intr(int (*proc)(void)) {
    int c;
    while ((c = (*proc)()) != -1) {
c0101ce7:	8b 45 08             	mov    0x8(%ebp),%eax
c0101cea:	ff d0                	call   *%eax
c0101cec:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0101cef:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
c0101cf3:	75 bf                	jne    c0101cb4 <cons_intr+0x8>
            if (cons.wpos == CONSBUFSIZE) {
                cons.wpos = 0;
            }
        }
    }
}
c0101cf5:	90                   	nop
c0101cf6:	c9                   	leave  
c0101cf7:	c3                   	ret    

c0101cf8 <serial_proc_data>:

/* serial_proc_data - get data from serial port */
static int
serial_proc_data(void) {
c0101cf8:	55                   	push   %ebp
c0101cf9:	89 e5                	mov    %esp,%ebp
c0101cfb:	83 ec 10             	sub    $0x10,%esp
c0101cfe:	66 c7 45 f8 fd 03    	movw   $0x3fd,-0x8(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d04:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
c0101d08:	89 c2                	mov    %eax,%edx
c0101d0a:	ec                   	in     (%dx),%al
c0101d0b:	88 45 f7             	mov    %al,-0x9(%ebp)
    return data;
c0101d0e:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
    if (!(inb(COM1 + COM_LSR) & COM_LSR_DATA)) {
c0101d12:	0f b6 c0             	movzbl %al,%eax
c0101d15:	83 e0 01             	and    $0x1,%eax
c0101d18:	85 c0                	test   %eax,%eax
c0101d1a:	75 07                	jne    c0101d23 <serial_proc_data+0x2b>
        return -1;
c0101d1c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d21:	eb 2a                	jmp    c0101d4d <serial_proc_data+0x55>
c0101d23:	66 c7 45 fa f8 03    	movw   $0x3f8,-0x6(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d29:	0f b7 45 fa          	movzwl -0x6(%ebp),%eax
c0101d2d:	89 c2                	mov    %eax,%edx
c0101d2f:	ec                   	in     (%dx),%al
c0101d30:	88 45 f6             	mov    %al,-0xa(%ebp)
    return data;
c0101d33:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
    }
    int c = inb(COM1 + COM_RX);
c0101d37:	0f b6 c0             	movzbl %al,%eax
c0101d3a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (c == 127) {
c0101d3d:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
c0101d41:	75 07                	jne    c0101d4a <serial_proc_data+0x52>
        c = '\b';
c0101d43:	c7 45 fc 08 00 00 00 	movl   $0x8,-0x4(%ebp)
    }
    return c;
c0101d4a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0101d4d:	c9                   	leave  
c0101d4e:	c3                   	ret    

c0101d4f <serial_intr>:

/* serial_intr - try to feed input characters from serial port */
void
serial_intr(void) {
c0101d4f:	55                   	push   %ebp
c0101d50:	89 e5                	mov    %esp,%ebp
c0101d52:	83 ec 08             	sub    $0x8,%esp
    if (serial_exists) {
c0101d55:	a1 28 e5 14 c0       	mov    0xc014e528,%eax
c0101d5a:	85 c0                	test   %eax,%eax
c0101d5c:	74 10                	je     c0101d6e <serial_intr+0x1f>
        cons_intr(serial_proc_data);
c0101d5e:	83 ec 0c             	sub    $0xc,%esp
c0101d61:	68 f8 1c 10 c0       	push   $0xc0101cf8
c0101d66:	e8 41 ff ff ff       	call   c0101cac <cons_intr>
c0101d6b:	83 c4 10             	add    $0x10,%esp
    }
}
c0101d6e:	90                   	nop
c0101d6f:	c9                   	leave  
c0101d70:	c3                   	ret    

c0101d71 <kbd_proc_data>:
 *
 * The kbd_proc_data() function gets data from the keyboard.
 * If we finish a character, return it, else 0. And return -1 if no data.
 * */
static int
kbd_proc_data(void) {
c0101d71:	55                   	push   %ebp
c0101d72:	89 e5                	mov    %esp,%ebp
c0101d74:	83 ec 18             	sub    $0x18,%esp
c0101d77:	66 c7 45 ec 64 00    	movw   $0x64,-0x14(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101d7d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0101d81:	89 c2                	mov    %eax,%edx
c0101d83:	ec                   	in     (%dx),%al
c0101d84:	88 45 eb             	mov    %al,-0x15(%ebp)
    return data;
c0101d87:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
    int c;
    uint8_t data;
    static uint32_t shift;

    if ((inb(KBSTATP) & KBS_DIB) == 0) {
c0101d8b:	0f b6 c0             	movzbl %al,%eax
c0101d8e:	83 e0 01             	and    $0x1,%eax
c0101d91:	85 c0                	test   %eax,%eax
c0101d93:	75 0a                	jne    c0101d9f <kbd_proc_data+0x2e>
        return -1;
c0101d95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c0101d9a:	e9 5d 01 00 00       	jmp    c0101efc <kbd_proc_data+0x18b>
c0101d9f:	66 c7 45 f0 60 00    	movw   $0x60,-0x10(%ebp)
static inline void invlpg(void *addr) __attribute__((always_inline));

static inline uint8_t
inb(uint16_t port) {
    uint8_t data;
    asm volatile ("inb %1, %0" : "=a" (data) : "d" (port) : "memory");
c0101da5:	0f b7 45 f0          	movzwl -0x10(%ebp),%eax
c0101da9:	89 c2                	mov    %eax,%edx
c0101dab:	ec                   	in     (%dx),%al
c0101dac:	88 45 ea             	mov    %al,-0x16(%ebp)
    return data;
c0101daf:	0f b6 45 ea          	movzbl -0x16(%ebp),%eax
    }

    data = inb(KBDATAP);
c0101db3:	88 45 f3             	mov    %al,-0xd(%ebp)

    if (data == 0xE0) {
c0101db6:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
c0101dba:	75 17                	jne    c0101dd3 <kbd_proc_data+0x62>
        // E0 escape character
        shift |= E0ESC;
c0101dbc:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101dc1:	83 c8 40             	or     $0x40,%eax
c0101dc4:	a3 48 e7 14 c0       	mov    %eax,0xc014e748
        return 0;
c0101dc9:	b8 00 00 00 00       	mov    $0x0,%eax
c0101dce:	e9 29 01 00 00       	jmp    c0101efc <kbd_proc_data+0x18b>
    } else if (data & 0x80) {
c0101dd3:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dd7:	84 c0                	test   %al,%al
c0101dd9:	79 47                	jns    c0101e22 <kbd_proc_data+0xb1>
        // Key released
        data = (shift & E0ESC ? data : data & 0x7F);
c0101ddb:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101de0:	83 e0 40             	and    $0x40,%eax
c0101de3:	85 c0                	test   %eax,%eax
c0101de5:	75 09                	jne    c0101df0 <kbd_proc_data+0x7f>
c0101de7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101deb:	83 e0 7f             	and    $0x7f,%eax
c0101dee:	eb 04                	jmp    c0101df4 <kbd_proc_data+0x83>
c0101df0:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101df4:	88 45 f3             	mov    %al,-0xd(%ebp)
        shift &= ~(shiftcode[data] | E0ESC);
c0101df7:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101dfb:	0f b6 80 40 b0 14 c0 	movzbl -0x3feb4fc0(%eax),%eax
c0101e02:	83 c8 40             	or     $0x40,%eax
c0101e05:	0f b6 c0             	movzbl %al,%eax
c0101e08:	f7 d0                	not    %eax
c0101e0a:	89 c2                	mov    %eax,%edx
c0101e0c:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e11:	21 d0                	and    %edx,%eax
c0101e13:	a3 48 e7 14 c0       	mov    %eax,0xc014e748
        return 0;
c0101e18:	b8 00 00 00 00       	mov    $0x0,%eax
c0101e1d:	e9 da 00 00 00       	jmp    c0101efc <kbd_proc_data+0x18b>
    } else if (shift & E0ESC) {
c0101e22:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e27:	83 e0 40             	and    $0x40,%eax
c0101e2a:	85 c0                	test   %eax,%eax
c0101e2c:	74 11                	je     c0101e3f <kbd_proc_data+0xce>
        // Last character was an E0 escape; or with 0x80
        data |= 0x80;
c0101e2e:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
        shift &= ~E0ESC;
c0101e32:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e37:	83 e0 bf             	and    $0xffffffbf,%eax
c0101e3a:	a3 48 e7 14 c0       	mov    %eax,0xc014e748
    }

    shift |= shiftcode[data];
c0101e3f:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e43:	0f b6 80 40 b0 14 c0 	movzbl -0x3feb4fc0(%eax),%eax
c0101e4a:	0f b6 d0             	movzbl %al,%edx
c0101e4d:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e52:	09 d0                	or     %edx,%eax
c0101e54:	a3 48 e7 14 c0       	mov    %eax,0xc014e748
    shift ^= togglecode[data];
c0101e59:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e5d:	0f b6 80 40 b1 14 c0 	movzbl -0x3feb4ec0(%eax),%eax
c0101e64:	0f b6 d0             	movzbl %al,%edx
c0101e67:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e6c:	31 d0                	xor    %edx,%eax
c0101e6e:	a3 48 e7 14 c0       	mov    %eax,0xc014e748

    c = charcode[shift & (CTL | SHIFT)][data];
c0101e73:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e78:	83 e0 03             	and    $0x3,%eax
c0101e7b:	8b 14 85 40 b5 14 c0 	mov    -0x3feb4ac0(,%eax,4),%edx
c0101e82:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
c0101e86:	01 d0                	add    %edx,%eax
c0101e88:	0f b6 00             	movzbl (%eax),%eax
c0101e8b:	0f b6 c0             	movzbl %al,%eax
c0101e8e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (shift & CAPSLOCK) {
c0101e91:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101e96:	83 e0 08             	and    $0x8,%eax
c0101e99:	85 c0                	test   %eax,%eax
c0101e9b:	74 22                	je     c0101ebf <kbd_proc_data+0x14e>
        if ('a' <= c && c <= 'z')
c0101e9d:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
c0101ea1:	7e 0c                	jle    c0101eaf <kbd_proc_data+0x13e>
c0101ea3:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
c0101ea7:	7f 06                	jg     c0101eaf <kbd_proc_data+0x13e>
            c += 'A' - 'a';
c0101ea9:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
c0101ead:	eb 10                	jmp    c0101ebf <kbd_proc_data+0x14e>
        else if ('A' <= c && c <= 'Z')
c0101eaf:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
c0101eb3:	7e 0a                	jle    c0101ebf <kbd_proc_data+0x14e>
c0101eb5:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
c0101eb9:	7f 04                	jg     c0101ebf <kbd_proc_data+0x14e>
            c += 'a' - 'A';
c0101ebb:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
    }

    // Process special keys
    // Ctrl-Alt-Del: reboot
    if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
c0101ebf:	a1 48 e7 14 c0       	mov    0xc014e748,%eax
c0101ec4:	f7 d0                	not    %eax
c0101ec6:	83 e0 06             	and    $0x6,%eax
c0101ec9:	85 c0                	test   %eax,%eax
c0101ecb:	75 2c                	jne    c0101ef9 <kbd_proc_data+0x188>
c0101ecd:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
c0101ed4:	75 23                	jne    c0101ef9 <kbd_proc_data+0x188>
        cprintf("Rebooting!\n");
c0101ed6:	83 ec 0c             	sub    $0xc,%esp
c0101ed9:	68 d9 30 11 c0       	push   $0xc01130d9
c0101ede:	e8 9c e4 ff ff       	call   c010037f <cprintf>
c0101ee3:	83 c4 10             	add    $0x10,%esp
c0101ee6:	66 c7 45 ee 92 00    	movw   $0x92,-0x12(%ebp)
c0101eec:	c6 45 e9 03          	movb   $0x3,-0x17(%ebp)
        : "memory", "cc");
}

static inline void
outb(uint16_t port, uint8_t data) {
    asm volatile ("outb %0, %1" :: "a" (data), "d" (port) : "memory");
c0101ef0:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
c0101ef4:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c0101ef8:	ee                   	out    %al,(%dx)
        outb(0x92, 0x3); // courtesy of Chris Frost
    }
    return c;
c0101ef9:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0101efc:	c9                   	leave  
c0101efd:	c3                   	ret    

c0101efe <kbd_intr>:

/* kbd_intr - try to feed input characters from keyboard */
static void
kbd_intr(void) {
c0101efe:	55                   	push   %ebp
c0101eff:	89 e5                	mov    %esp,%ebp
c0101f01:	83 ec 08             	sub    $0x8,%esp
    cons_intr(kbd_proc_data);
c0101f04:	83 ec 0c             	sub    $0xc,%esp
c0101f07:	68 71 1d 10 c0       	push   $0xc0101d71
c0101f0c:	e8 9b fd ff ff       	call   c0101cac <cons_intr>
c0101f11:	83 c4 10             	add    $0x10,%esp
}
c0101f14:	90                   	nop
c0101f15:	c9                   	leave  
c0101f16:	c3                   	ret    

c0101f17 <kbd_init>:

static void
kbd_init(void) {
c0101f17:	55                   	push   %ebp
c0101f18:	89 e5                	mov    %esp,%ebp
c0101f1a:	83 ec 08             	sub    $0x8,%esp
    // drain the kbd buffer
    kbd_intr();
c0101f1d:	e8 dc ff ff ff       	call   c0101efe <kbd_intr>
    pic_enable(IRQ_KBD);
c0101f22:	83 ec 0c             	sub    $0xc,%esp
c0101f25:	6a 01                	push   $0x1
c0101f27:	e8 4b 01 00 00       	call   c0102077 <pic_enable>
c0101f2c:	83 c4 10             	add    $0x10,%esp
}
c0101f2f:	90                   	nop
c0101f30:	c9                   	leave  
c0101f31:	c3                   	ret    

c0101f32 <cons_init>:

/* cons_init - initializes the console devices */
void
cons_init(void) {
c0101f32:	55                   	push   %ebp
c0101f33:	89 e5                	mov    %esp,%ebp
c0101f35:	83 ec 08             	sub    $0x8,%esp
    cga_init();
c0101f38:	e8 8c f8 ff ff       	call   c01017c9 <cga_init>
    serial_init();
c0101f3d:	e8 6e f9 ff ff       	call   c01018b0 <serial_init>
    kbd_init();
c0101f42:	e8 d0 ff ff ff       	call   c0101f17 <kbd_init>
    if (!serial_exists) {
c0101f47:	a1 28 e5 14 c0       	mov    0xc014e528,%eax
c0101f4c:	85 c0                	test   %eax,%eax
c0101f4e:	75 10                	jne    c0101f60 <cons_init+0x2e>
        cprintf("serial port does not exist!!\n");
c0101f50:	83 ec 0c             	sub    $0xc,%esp
c0101f53:	68 e5 30 11 c0       	push   $0xc01130e5
c0101f58:	e8 22 e4 ff ff       	call   c010037f <cprintf>
c0101f5d:	83 c4 10             	add    $0x10,%esp
    }
}
c0101f60:	90                   	nop
c0101f61:	c9                   	leave  
c0101f62:	c3                   	ret    

c0101f63 <cons_putc>:

/* cons_putc - print a single character @c to console devices */
void
cons_putc(int c) {
c0101f63:	55                   	push   %ebp
c0101f64:	89 e5                	mov    %esp,%ebp
c0101f66:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0101f69:	e8 d4 f7 ff ff       	call   c0101742 <__intr_save>
c0101f6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        lpt_putc(c);
c0101f71:	83 ec 0c             	sub    $0xc,%esp
c0101f74:	ff 75 08             	pushl  0x8(%ebp)
c0101f77:	e8 93 fa ff ff       	call   c0101a0f <lpt_putc>
c0101f7c:	83 c4 10             	add    $0x10,%esp
        cga_putc(c);
c0101f7f:	83 ec 0c             	sub    $0xc,%esp
c0101f82:	ff 75 08             	pushl  0x8(%ebp)
c0101f85:	e8 bc fa ff ff       	call   c0101a46 <cga_putc>
c0101f8a:	83 c4 10             	add    $0x10,%esp
        serial_putc(c);
c0101f8d:	83 ec 0c             	sub    $0xc,%esp
c0101f90:	ff 75 08             	pushl  0x8(%ebp)
c0101f93:	e8 dd fc ff ff       	call   c0101c75 <serial_putc>
c0101f98:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0101f9b:	83 ec 0c             	sub    $0xc,%esp
c0101f9e:	ff 75 f4             	pushl  -0xc(%ebp)
c0101fa1:	e8 c6 f7 ff ff       	call   c010176c <__intr_restore>
c0101fa6:	83 c4 10             	add    $0x10,%esp
}
c0101fa9:	90                   	nop
c0101faa:	c9                   	leave  
c0101fab:	c3                   	ret    

c0101fac <cons_getc>:
/* *
 * cons_getc - return the next input character from console,
 * or 0 if none waiting.
 * */
int
cons_getc(void) {
c0101fac:	55                   	push   %ebp
c0101fad:	89 e5                	mov    %esp,%ebp
c0101faf:	83 ec 18             	sub    $0x18,%esp
    int c = 0;
c0101fb2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c0101fb9:	e8 84 f7 ff ff       	call   c0101742 <__intr_save>
c0101fbe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        // poll for any pending input characters,
        // so that this function works even when interrupts are disabled
        // (e.g., when called from the kernel monitor).
        serial_intr();
c0101fc1:	e8 89 fd ff ff       	call   c0101d4f <serial_intr>
        kbd_intr();
c0101fc6:	e8 33 ff ff ff       	call   c0101efe <kbd_intr>

        // grab the next character from the input buffer.
        if (cons.rpos != cons.wpos) {
c0101fcb:	8b 15 40 e7 14 c0    	mov    0xc014e740,%edx
c0101fd1:	a1 44 e7 14 c0       	mov    0xc014e744,%eax
c0101fd6:	39 c2                	cmp    %eax,%edx
c0101fd8:	74 31                	je     c010200b <cons_getc+0x5f>
            c = cons.buf[cons.rpos ++];
c0101fda:	a1 40 e7 14 c0       	mov    0xc014e740,%eax
c0101fdf:	8d 50 01             	lea    0x1(%eax),%edx
c0101fe2:	89 15 40 e7 14 c0    	mov    %edx,0xc014e740
c0101fe8:	0f b6 80 40 e5 14 c0 	movzbl -0x3feb1ac0(%eax),%eax
c0101fef:	0f b6 c0             	movzbl %al,%eax
c0101ff2:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (cons.rpos == CONSBUFSIZE) {
c0101ff5:	a1 40 e7 14 c0       	mov    0xc014e740,%eax
c0101ffa:	3d 00 02 00 00       	cmp    $0x200,%eax
c0101fff:	75 0a                	jne    c010200b <cons_getc+0x5f>
                cons.rpos = 0;
c0102001:	c7 05 40 e7 14 c0 00 	movl   $0x0,0xc014e740
c0102008:	00 00 00 
            }
        }
    }
    local_intr_restore(intr_flag);
c010200b:	83 ec 0c             	sub    $0xc,%esp
c010200e:	ff 75 f0             	pushl  -0x10(%ebp)
c0102011:	e8 56 f7 ff ff       	call   c010176c <__intr_restore>
c0102016:	83 c4 10             	add    $0x10,%esp
    return c;
c0102019:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010201c:	c9                   	leave  
c010201d:	c3                   	ret    

c010201e <pic_setmask>:
// Initial IRQ mask has interrupt 2 enabled (for slave 8259A).
static uint16_t irq_mask = 0xFFFF & ~(1 << IRQ_SLAVE);
static bool did_init = 0;

static void
pic_setmask(uint16_t mask) {
c010201e:	55                   	push   %ebp
c010201f:	89 e5                	mov    %esp,%ebp
c0102021:	83 ec 14             	sub    $0x14,%esp
c0102024:	8b 45 08             	mov    0x8(%ebp),%eax
c0102027:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    irq_mask = mask;
c010202b:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010202f:	66 a3 50 b5 14 c0    	mov    %ax,0xc014b550
    if (did_init) {
c0102035:	a1 4c e7 14 c0       	mov    0xc014e74c,%eax
c010203a:	85 c0                	test   %eax,%eax
c010203c:	74 36                	je     c0102074 <pic_setmask+0x56>
        outb(IO_PIC1 + 1, mask);
c010203e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c0102042:	0f b6 c0             	movzbl %al,%eax
c0102045:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c010204b:	88 45 fa             	mov    %al,-0x6(%ebp)
c010204e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
c0102052:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c0102056:	ee                   	out    %al,(%dx)
        outb(IO_PIC2 + 1, mask >> 8);
c0102057:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
c010205b:	66 c1 e8 08          	shr    $0x8,%ax
c010205f:	0f b6 c0             	movzbl %al,%eax
c0102062:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c0102068:	88 45 fb             	mov    %al,-0x5(%ebp)
c010206b:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
c010206f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c0102073:	ee                   	out    %al,(%dx)
    }
}
c0102074:	90                   	nop
c0102075:	c9                   	leave  
c0102076:	c3                   	ret    

c0102077 <pic_enable>:

void
pic_enable(unsigned int irq) {
c0102077:	55                   	push   %ebp
c0102078:	89 e5                	mov    %esp,%ebp
    pic_setmask(irq_mask & ~(1 << irq));
c010207a:	8b 45 08             	mov    0x8(%ebp),%eax
c010207d:	ba 01 00 00 00       	mov    $0x1,%edx
c0102082:	89 c1                	mov    %eax,%ecx
c0102084:	d3 e2                	shl    %cl,%edx
c0102086:	89 d0                	mov    %edx,%eax
c0102088:	f7 d0                	not    %eax
c010208a:	89 c2                	mov    %eax,%edx
c010208c:	0f b7 05 50 b5 14 c0 	movzwl 0xc014b550,%eax
c0102093:	21 d0                	and    %edx,%eax
c0102095:	0f b7 c0             	movzwl %ax,%eax
c0102098:	50                   	push   %eax
c0102099:	e8 80 ff ff ff       	call   c010201e <pic_setmask>
c010209e:	83 c4 04             	add    $0x4,%esp
}
c01020a1:	90                   	nop
c01020a2:	c9                   	leave  
c01020a3:	c3                   	ret    

c01020a4 <pic_init>:

/* pic_init - initialize the 8259A interrupt controllers */
void
pic_init(void) {
c01020a4:	55                   	push   %ebp
c01020a5:	89 e5                	mov    %esp,%ebp
c01020a7:	83 ec 30             	sub    $0x30,%esp
    did_init = 1;
c01020aa:	c7 05 4c e7 14 c0 01 	movl   $0x1,0xc014e74c
c01020b1:	00 00 00 
c01020b4:	66 c7 45 fe 21 00    	movw   $0x21,-0x2(%ebp)
c01020ba:	c6 45 d6 ff          	movb   $0xff,-0x2a(%ebp)
c01020be:	0f b6 45 d6          	movzbl -0x2a(%ebp),%eax
c01020c2:	0f b7 55 fe          	movzwl -0x2(%ebp),%edx
c01020c6:	ee                   	out    %al,(%dx)
c01020c7:	66 c7 45 fc a1 00    	movw   $0xa1,-0x4(%ebp)
c01020cd:	c6 45 d7 ff          	movb   $0xff,-0x29(%ebp)
c01020d1:	0f b6 45 d7          	movzbl -0x29(%ebp),%eax
c01020d5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
c01020d9:	ee                   	out    %al,(%dx)
c01020da:	66 c7 45 fa 20 00    	movw   $0x20,-0x6(%ebp)
c01020e0:	c6 45 d8 11          	movb   $0x11,-0x28(%ebp)
c01020e4:	0f b6 45 d8          	movzbl -0x28(%ebp),%eax
c01020e8:	0f b7 55 fa          	movzwl -0x6(%ebp),%edx
c01020ec:	ee                   	out    %al,(%dx)
c01020ed:	66 c7 45 f8 21 00    	movw   $0x21,-0x8(%ebp)
c01020f3:	c6 45 d9 20          	movb   $0x20,-0x27(%ebp)
c01020f7:	0f b6 45 d9          	movzbl -0x27(%ebp),%eax
c01020fb:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
c01020ff:	ee                   	out    %al,(%dx)
c0102100:	66 c7 45 f6 21 00    	movw   $0x21,-0xa(%ebp)
c0102106:	c6 45 da 04          	movb   $0x4,-0x26(%ebp)
c010210a:	0f b6 45 da          	movzbl -0x26(%ebp),%eax
c010210e:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
c0102112:	ee                   	out    %al,(%dx)
c0102113:	66 c7 45 f4 21 00    	movw   $0x21,-0xc(%ebp)
c0102119:	c6 45 db 03          	movb   $0x3,-0x25(%ebp)
c010211d:	0f b6 45 db          	movzbl -0x25(%ebp),%eax
c0102121:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
c0102125:	ee                   	out    %al,(%dx)
c0102126:	66 c7 45 f2 a0 00    	movw   $0xa0,-0xe(%ebp)
c010212c:	c6 45 dc 11          	movb   $0x11,-0x24(%ebp)
c0102130:	0f b6 45 dc          	movzbl -0x24(%ebp),%eax
c0102134:	0f b7 55 f2          	movzwl -0xe(%ebp),%edx
c0102138:	ee                   	out    %al,(%dx)
c0102139:	66 c7 45 f0 a1 00    	movw   $0xa1,-0x10(%ebp)
c010213f:	c6 45 dd 28          	movb   $0x28,-0x23(%ebp)
c0102143:	0f b6 45 dd          	movzbl -0x23(%ebp),%eax
c0102147:	0f b7 55 f0          	movzwl -0x10(%ebp),%edx
c010214b:	ee                   	out    %al,(%dx)
c010214c:	66 c7 45 ee a1 00    	movw   $0xa1,-0x12(%ebp)
c0102152:	c6 45 de 02          	movb   $0x2,-0x22(%ebp)
c0102156:	0f b6 45 de          	movzbl -0x22(%ebp),%eax
c010215a:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
c010215e:	ee                   	out    %al,(%dx)
c010215f:	66 c7 45 ec a1 00    	movw   $0xa1,-0x14(%ebp)
c0102165:	c6 45 df 03          	movb   $0x3,-0x21(%ebp)
c0102169:	0f b6 45 df          	movzbl -0x21(%ebp),%eax
c010216d:	0f b7 55 ec          	movzwl -0x14(%ebp),%edx
c0102171:	ee                   	out    %al,(%dx)
c0102172:	66 c7 45 ea 20 00    	movw   $0x20,-0x16(%ebp)
c0102178:	c6 45 e0 68          	movb   $0x68,-0x20(%ebp)
c010217c:	0f b6 45 e0          	movzbl -0x20(%ebp),%eax
c0102180:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
c0102184:	ee                   	out    %al,(%dx)
c0102185:	66 c7 45 e8 20 00    	movw   $0x20,-0x18(%ebp)
c010218b:	c6 45 e1 0a          	movb   $0xa,-0x1f(%ebp)
c010218f:	0f b6 45 e1          	movzbl -0x1f(%ebp),%eax
c0102193:	0f b7 55 e8          	movzwl -0x18(%ebp),%edx
c0102197:	ee                   	out    %al,(%dx)
c0102198:	66 c7 45 e6 a0 00    	movw   $0xa0,-0x1a(%ebp)
c010219e:	c6 45 e2 68          	movb   $0x68,-0x1e(%ebp)
c01021a2:	0f b6 45 e2          	movzbl -0x1e(%ebp),%eax
c01021a6:	0f b7 55 e6          	movzwl -0x1a(%ebp),%edx
c01021aa:	ee                   	out    %al,(%dx)
c01021ab:	66 c7 45 e4 a0 00    	movw   $0xa0,-0x1c(%ebp)
c01021b1:	c6 45 e3 0a          	movb   $0xa,-0x1d(%ebp)
c01021b5:	0f b6 45 e3          	movzbl -0x1d(%ebp),%eax
c01021b9:	0f b7 55 e4          	movzwl -0x1c(%ebp),%edx
c01021bd:	ee                   	out    %al,(%dx)
    outb(IO_PIC1, 0x0a);    // read IRR by default

    outb(IO_PIC2, 0x68);    // OCW3
    outb(IO_PIC2, 0x0a);    // OCW3

    if (irq_mask != 0xFFFF) {
c01021be:	0f b7 05 50 b5 14 c0 	movzwl 0xc014b550,%eax
c01021c5:	66 83 f8 ff          	cmp    $0xffff,%ax
c01021c9:	74 13                	je     c01021de <pic_init+0x13a>
        pic_setmask(irq_mask);
c01021cb:	0f b7 05 50 b5 14 c0 	movzwl 0xc014b550,%eax
c01021d2:	0f b7 c0             	movzwl %ax,%eax
c01021d5:	50                   	push   %eax
c01021d6:	e8 43 fe ff ff       	call   c010201e <pic_setmask>
c01021db:	83 c4 04             	add    $0x4,%esp
    }
}
c01021de:	90                   	nop
c01021df:	c9                   	leave  
c01021e0:	c3                   	ret    

c01021e1 <intr_enable>:
#include <x86.h>
#include <intr.h>

/* intr_enable - enable irq interrupt */
void
intr_enable(void) {
c01021e1:	55                   	push   %ebp
c01021e2:	89 e5                	mov    %esp,%ebp
    asm volatile ("lidt (%0)" :: "r" (pd) : "memory");
}

static inline void
sti(void) {
    asm volatile ("sti");
c01021e4:	fb                   	sti    
    sti();
}
c01021e5:	90                   	nop
c01021e6:	5d                   	pop    %ebp
c01021e7:	c3                   	ret    

c01021e8 <intr_disable>:

/* intr_disable - disable irq interrupt */
void
intr_disable(void) {
c01021e8:	55                   	push   %ebp
c01021e9:	89 e5                	mov    %esp,%ebp
}

static inline void
cli(void) {
    asm volatile ("cli" ::: "memory");
c01021eb:	fa                   	cli    
    cli();
}
c01021ec:	90                   	nop
c01021ed:	5d                   	pop    %ebp
c01021ee:	c3                   	ret    

c01021ef <print_ticks>:
#include <sync.h>
#include <proc.h>

#define TICK_NUM 100

static void print_ticks() {
c01021ef:	55                   	push   %ebp
c01021f0:	89 e5                	mov    %esp,%ebp
c01021f2:	83 ec 08             	sub    $0x8,%esp
    cprintf("%d ticks\n",TICK_NUM);
c01021f5:	83 ec 08             	sub    $0x8,%esp
c01021f8:	6a 64                	push   $0x64
c01021fa:	68 20 31 11 c0       	push   $0xc0113120
c01021ff:	e8 7b e1 ff ff       	call   c010037f <cprintf>
c0102204:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_GRADE
    cprintf("End of Test.\n");
    panic("EOT: kernel seems ok.");
#endif
}
c0102207:	90                   	nop
c0102208:	c9                   	leave  
c0102209:	c3                   	ret    

c010220a <idt_init>:
    sizeof(idt) - 1, (uintptr_t)idt
};

/* idt_init - initialize IDT to each of the entry points in kern/trap/vectors.S */
void
idt_init(void) {
c010220a:	55                   	push   %ebp
c010220b:	89 e5                	mov    %esp,%ebp
      *     Notice: the argument of lidt is idt_pd. try to find it!
      */
     /* LAB5 YOUR CODE */ 
     //you should update your lab1 code (just add ONE or TWO lines of code), let user app to use syscall to get the service of ucore
     //so you should setup the syscall interrupt gate in here
}
c010220d:	90                   	nop
c010220e:	5d                   	pop    %ebp
c010220f:	c3                   	ret    

c0102210 <trapname>:

static const char *
trapname(int trapno) {
c0102210:	55                   	push   %ebp
c0102211:	89 e5                	mov    %esp,%ebp
        "Alignment Check",
        "Machine-Check",
        "SIMD Floating-Point Exception"
    };

    if (trapno < sizeof(excnames)/sizeof(const char * const)) {
c0102213:	8b 45 08             	mov    0x8(%ebp),%eax
c0102216:	83 f8 13             	cmp    $0x13,%eax
c0102219:	77 0c                	ja     c0102227 <trapname+0x17>
        return excnames[trapno];
c010221b:	8b 45 08             	mov    0x8(%ebp),%eax
c010221e:	8b 04 85 80 35 11 c0 	mov    -0x3feeca80(,%eax,4),%eax
c0102225:	eb 18                	jmp    c010223f <trapname+0x2f>
    }
    if (trapno >= IRQ_OFFSET && trapno < IRQ_OFFSET + 16) {
c0102227:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
c010222b:	7e 0d                	jle    c010223a <trapname+0x2a>
c010222d:	83 7d 08 2f          	cmpl   $0x2f,0x8(%ebp)
c0102231:	7f 07                	jg     c010223a <trapname+0x2a>
        return "Hardware Interrupt";
c0102233:	b8 2a 31 11 c0       	mov    $0xc011312a,%eax
c0102238:	eb 05                	jmp    c010223f <trapname+0x2f>
    }
    return "(unknown trap)";
c010223a:	b8 3d 31 11 c0       	mov    $0xc011313d,%eax
}
c010223f:	5d                   	pop    %ebp
c0102240:	c3                   	ret    

c0102241 <trap_in_kernel>:

/* trap_in_kernel - test if trap happened in kernel */
bool
trap_in_kernel(struct trapframe *tf) {
c0102241:	55                   	push   %ebp
c0102242:	89 e5                	mov    %esp,%ebp
    return (tf->tf_cs == (uint16_t)KERNEL_CS);
c0102244:	8b 45 08             	mov    0x8(%ebp),%eax
c0102247:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010224b:	66 83 f8 08          	cmp    $0x8,%ax
c010224f:	0f 94 c0             	sete   %al
c0102252:	0f b6 c0             	movzbl %al,%eax
}
c0102255:	5d                   	pop    %ebp
c0102256:	c3                   	ret    

c0102257 <print_trapframe>:
    "TF", "IF", "DF", "OF", NULL, NULL, "NT", NULL,
    "RF", "VM", "AC", "VIF", "VIP", "ID", NULL, NULL,
};

void
print_trapframe(struct trapframe *tf) {
c0102257:	55                   	push   %ebp
c0102258:	89 e5                	mov    %esp,%ebp
c010225a:	83 ec 18             	sub    $0x18,%esp
    cprintf("trapframe at %p\n", tf);
c010225d:	83 ec 08             	sub    $0x8,%esp
c0102260:	ff 75 08             	pushl  0x8(%ebp)
c0102263:	68 7e 31 11 c0       	push   $0xc011317e
c0102268:	e8 12 e1 ff ff       	call   c010037f <cprintf>
c010226d:	83 c4 10             	add    $0x10,%esp
    print_regs(&tf->tf_regs);
c0102270:	8b 45 08             	mov    0x8(%ebp),%eax
c0102273:	83 ec 0c             	sub    $0xc,%esp
c0102276:	50                   	push   %eax
c0102277:	e8 b8 01 00 00       	call   c0102434 <print_regs>
c010227c:	83 c4 10             	add    $0x10,%esp
    cprintf("  ds   0x----%04x\n", tf->tf_ds);
c010227f:	8b 45 08             	mov    0x8(%ebp),%eax
c0102282:	0f b7 40 2c          	movzwl 0x2c(%eax),%eax
c0102286:	0f b7 c0             	movzwl %ax,%eax
c0102289:	83 ec 08             	sub    $0x8,%esp
c010228c:	50                   	push   %eax
c010228d:	68 8f 31 11 c0       	push   $0xc011318f
c0102292:	e8 e8 e0 ff ff       	call   c010037f <cprintf>
c0102297:	83 c4 10             	add    $0x10,%esp
    cprintf("  es   0x----%04x\n", tf->tf_es);
c010229a:	8b 45 08             	mov    0x8(%ebp),%eax
c010229d:	0f b7 40 28          	movzwl 0x28(%eax),%eax
c01022a1:	0f b7 c0             	movzwl %ax,%eax
c01022a4:	83 ec 08             	sub    $0x8,%esp
c01022a7:	50                   	push   %eax
c01022a8:	68 a2 31 11 c0       	push   $0xc01131a2
c01022ad:	e8 cd e0 ff ff       	call   c010037f <cprintf>
c01022b2:	83 c4 10             	add    $0x10,%esp
    cprintf("  fs   0x----%04x\n", tf->tf_fs);
c01022b5:	8b 45 08             	mov    0x8(%ebp),%eax
c01022b8:	0f b7 40 24          	movzwl 0x24(%eax),%eax
c01022bc:	0f b7 c0             	movzwl %ax,%eax
c01022bf:	83 ec 08             	sub    $0x8,%esp
c01022c2:	50                   	push   %eax
c01022c3:	68 b5 31 11 c0       	push   $0xc01131b5
c01022c8:	e8 b2 e0 ff ff       	call   c010037f <cprintf>
c01022cd:	83 c4 10             	add    $0x10,%esp
    cprintf("  gs   0x----%04x\n", tf->tf_gs);
c01022d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01022d3:	0f b7 40 20          	movzwl 0x20(%eax),%eax
c01022d7:	0f b7 c0             	movzwl %ax,%eax
c01022da:	83 ec 08             	sub    $0x8,%esp
c01022dd:	50                   	push   %eax
c01022de:	68 c8 31 11 c0       	push   $0xc01131c8
c01022e3:	e8 97 e0 ff ff       	call   c010037f <cprintf>
c01022e8:	83 c4 10             	add    $0x10,%esp
    cprintf("  trap 0x%08x %s\n", tf->tf_trapno, trapname(tf->tf_trapno));
c01022eb:	8b 45 08             	mov    0x8(%ebp),%eax
c01022ee:	8b 40 30             	mov    0x30(%eax),%eax
c01022f1:	83 ec 0c             	sub    $0xc,%esp
c01022f4:	50                   	push   %eax
c01022f5:	e8 16 ff ff ff       	call   c0102210 <trapname>
c01022fa:	83 c4 10             	add    $0x10,%esp
c01022fd:	89 c2                	mov    %eax,%edx
c01022ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102302:	8b 40 30             	mov    0x30(%eax),%eax
c0102305:	83 ec 04             	sub    $0x4,%esp
c0102308:	52                   	push   %edx
c0102309:	50                   	push   %eax
c010230a:	68 db 31 11 c0       	push   $0xc01131db
c010230f:	e8 6b e0 ff ff       	call   c010037f <cprintf>
c0102314:	83 c4 10             	add    $0x10,%esp
    cprintf("  err  0x%08x\n", tf->tf_err);
c0102317:	8b 45 08             	mov    0x8(%ebp),%eax
c010231a:	8b 40 34             	mov    0x34(%eax),%eax
c010231d:	83 ec 08             	sub    $0x8,%esp
c0102320:	50                   	push   %eax
c0102321:	68 ed 31 11 c0       	push   $0xc01131ed
c0102326:	e8 54 e0 ff ff       	call   c010037f <cprintf>
c010232b:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
c010232e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102331:	8b 40 38             	mov    0x38(%eax),%eax
c0102334:	83 ec 08             	sub    $0x8,%esp
c0102337:	50                   	push   %eax
c0102338:	68 fc 31 11 c0       	push   $0xc01131fc
c010233d:	e8 3d e0 ff ff       	call   c010037f <cprintf>
c0102342:	83 c4 10             	add    $0x10,%esp
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
c0102345:	8b 45 08             	mov    0x8(%ebp),%eax
c0102348:	0f b7 40 3c          	movzwl 0x3c(%eax),%eax
c010234c:	0f b7 c0             	movzwl %ax,%eax
c010234f:	83 ec 08             	sub    $0x8,%esp
c0102352:	50                   	push   %eax
c0102353:	68 0b 32 11 c0       	push   $0xc011320b
c0102358:	e8 22 e0 ff ff       	call   c010037f <cprintf>
c010235d:	83 c4 10             	add    $0x10,%esp
    cprintf("  flag 0x%08x ", tf->tf_eflags);
c0102360:	8b 45 08             	mov    0x8(%ebp),%eax
c0102363:	8b 40 40             	mov    0x40(%eax),%eax
c0102366:	83 ec 08             	sub    $0x8,%esp
c0102369:	50                   	push   %eax
c010236a:	68 1e 32 11 c0       	push   $0xc011321e
c010236f:	e8 0b e0 ff ff       	call   c010037f <cprintf>
c0102374:	83 c4 10             	add    $0x10,%esp

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c0102377:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010237e:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0102385:	eb 3f                	jmp    c01023c6 <print_trapframe+0x16f>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
c0102387:	8b 45 08             	mov    0x8(%ebp),%eax
c010238a:	8b 50 40             	mov    0x40(%eax),%edx
c010238d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0102390:	21 d0                	and    %edx,%eax
c0102392:	85 c0                	test   %eax,%eax
c0102394:	74 29                	je     c01023bf <print_trapframe+0x168>
c0102396:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0102399:	8b 04 85 80 b5 14 c0 	mov    -0x3feb4a80(,%eax,4),%eax
c01023a0:	85 c0                	test   %eax,%eax
c01023a2:	74 1b                	je     c01023bf <print_trapframe+0x168>
            cprintf("%s,", IA32flags[i]);
c01023a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023a7:	8b 04 85 80 b5 14 c0 	mov    -0x3feb4a80(,%eax,4),%eax
c01023ae:	83 ec 08             	sub    $0x8,%esp
c01023b1:	50                   	push   %eax
c01023b2:	68 2d 32 11 c0       	push   $0xc011322d
c01023b7:	e8 c3 df ff ff       	call   c010037f <cprintf>
c01023bc:	83 c4 10             	add    $0x10,%esp
    cprintf("  eip  0x%08x\n", tf->tf_eip);
    cprintf("  cs   0x----%04x\n", tf->tf_cs);
    cprintf("  flag 0x%08x ", tf->tf_eflags);

    int i, j;
    for (i = 0, j = 1; i < sizeof(IA32flags) / sizeof(IA32flags[0]); i ++, j <<= 1) {
c01023bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01023c3:	d1 65 f0             	shll   -0x10(%ebp)
c01023c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01023c9:	83 f8 17             	cmp    $0x17,%eax
c01023cc:	76 b9                	jbe    c0102387 <print_trapframe+0x130>
        if ((tf->tf_eflags & j) && IA32flags[i] != NULL) {
            cprintf("%s,", IA32flags[i]);
        }
    }
    cprintf("IOPL=%d\n", (tf->tf_eflags & FL_IOPL_MASK) >> 12);
c01023ce:	8b 45 08             	mov    0x8(%ebp),%eax
c01023d1:	8b 40 40             	mov    0x40(%eax),%eax
c01023d4:	25 00 30 00 00       	and    $0x3000,%eax
c01023d9:	c1 e8 0c             	shr    $0xc,%eax
c01023dc:	83 ec 08             	sub    $0x8,%esp
c01023df:	50                   	push   %eax
c01023e0:	68 31 32 11 c0       	push   $0xc0113231
c01023e5:	e8 95 df ff ff       	call   c010037f <cprintf>
c01023ea:	83 c4 10             	add    $0x10,%esp

    if (!trap_in_kernel(tf)) {
c01023ed:	83 ec 0c             	sub    $0xc,%esp
c01023f0:	ff 75 08             	pushl  0x8(%ebp)
c01023f3:	e8 49 fe ff ff       	call   c0102241 <trap_in_kernel>
c01023f8:	83 c4 10             	add    $0x10,%esp
c01023fb:	85 c0                	test   %eax,%eax
c01023fd:	75 32                	jne    c0102431 <print_trapframe+0x1da>
        cprintf("  esp  0x%08x\n", tf->tf_esp);
c01023ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0102402:	8b 40 44             	mov    0x44(%eax),%eax
c0102405:	83 ec 08             	sub    $0x8,%esp
c0102408:	50                   	push   %eax
c0102409:	68 3a 32 11 c0       	push   $0xc011323a
c010240e:	e8 6c df ff ff       	call   c010037f <cprintf>
c0102413:	83 c4 10             	add    $0x10,%esp
        cprintf("  ss   0x----%04x\n", tf->tf_ss);
c0102416:	8b 45 08             	mov    0x8(%ebp),%eax
c0102419:	0f b7 40 48          	movzwl 0x48(%eax),%eax
c010241d:	0f b7 c0             	movzwl %ax,%eax
c0102420:	83 ec 08             	sub    $0x8,%esp
c0102423:	50                   	push   %eax
c0102424:	68 49 32 11 c0       	push   $0xc0113249
c0102429:	e8 51 df ff ff       	call   c010037f <cprintf>
c010242e:	83 c4 10             	add    $0x10,%esp
    }
}
c0102431:	90                   	nop
c0102432:	c9                   	leave  
c0102433:	c3                   	ret    

c0102434 <print_regs>:

void
print_regs(struct pushregs *regs) {
c0102434:	55                   	push   %ebp
c0102435:	89 e5                	mov    %esp,%ebp
c0102437:	83 ec 08             	sub    $0x8,%esp
    cprintf("  edi  0x%08x\n", regs->reg_edi);
c010243a:	8b 45 08             	mov    0x8(%ebp),%eax
c010243d:	8b 00                	mov    (%eax),%eax
c010243f:	83 ec 08             	sub    $0x8,%esp
c0102442:	50                   	push   %eax
c0102443:	68 5c 32 11 c0       	push   $0xc011325c
c0102448:	e8 32 df ff ff       	call   c010037f <cprintf>
c010244d:	83 c4 10             	add    $0x10,%esp
    cprintf("  esi  0x%08x\n", regs->reg_esi);
c0102450:	8b 45 08             	mov    0x8(%ebp),%eax
c0102453:	8b 40 04             	mov    0x4(%eax),%eax
c0102456:	83 ec 08             	sub    $0x8,%esp
c0102459:	50                   	push   %eax
c010245a:	68 6b 32 11 c0       	push   $0xc011326b
c010245f:	e8 1b df ff ff       	call   c010037f <cprintf>
c0102464:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebp  0x%08x\n", regs->reg_ebp);
c0102467:	8b 45 08             	mov    0x8(%ebp),%eax
c010246a:	8b 40 08             	mov    0x8(%eax),%eax
c010246d:	83 ec 08             	sub    $0x8,%esp
c0102470:	50                   	push   %eax
c0102471:	68 7a 32 11 c0       	push   $0xc011327a
c0102476:	e8 04 df ff ff       	call   c010037f <cprintf>
c010247b:	83 c4 10             	add    $0x10,%esp
    cprintf("  oesp 0x%08x\n", regs->reg_oesp);
c010247e:	8b 45 08             	mov    0x8(%ebp),%eax
c0102481:	8b 40 0c             	mov    0xc(%eax),%eax
c0102484:	83 ec 08             	sub    $0x8,%esp
c0102487:	50                   	push   %eax
c0102488:	68 89 32 11 c0       	push   $0xc0113289
c010248d:	e8 ed de ff ff       	call   c010037f <cprintf>
c0102492:	83 c4 10             	add    $0x10,%esp
    cprintf("  ebx  0x%08x\n", regs->reg_ebx);
c0102495:	8b 45 08             	mov    0x8(%ebp),%eax
c0102498:	8b 40 10             	mov    0x10(%eax),%eax
c010249b:	83 ec 08             	sub    $0x8,%esp
c010249e:	50                   	push   %eax
c010249f:	68 98 32 11 c0       	push   $0xc0113298
c01024a4:	e8 d6 de ff ff       	call   c010037f <cprintf>
c01024a9:	83 c4 10             	add    $0x10,%esp
    cprintf("  edx  0x%08x\n", regs->reg_edx);
c01024ac:	8b 45 08             	mov    0x8(%ebp),%eax
c01024af:	8b 40 14             	mov    0x14(%eax),%eax
c01024b2:	83 ec 08             	sub    $0x8,%esp
c01024b5:	50                   	push   %eax
c01024b6:	68 a7 32 11 c0       	push   $0xc01132a7
c01024bb:	e8 bf de ff ff       	call   c010037f <cprintf>
c01024c0:	83 c4 10             	add    $0x10,%esp
    cprintf("  ecx  0x%08x\n", regs->reg_ecx);
c01024c3:	8b 45 08             	mov    0x8(%ebp),%eax
c01024c6:	8b 40 18             	mov    0x18(%eax),%eax
c01024c9:	83 ec 08             	sub    $0x8,%esp
c01024cc:	50                   	push   %eax
c01024cd:	68 b6 32 11 c0       	push   $0xc01132b6
c01024d2:	e8 a8 de ff ff       	call   c010037f <cprintf>
c01024d7:	83 c4 10             	add    $0x10,%esp
    cprintf("  eax  0x%08x\n", regs->reg_eax);
c01024da:	8b 45 08             	mov    0x8(%ebp),%eax
c01024dd:	8b 40 1c             	mov    0x1c(%eax),%eax
c01024e0:	83 ec 08             	sub    $0x8,%esp
c01024e3:	50                   	push   %eax
c01024e4:	68 c5 32 11 c0       	push   $0xc01132c5
c01024e9:	e8 91 de ff ff       	call   c010037f <cprintf>
c01024ee:	83 c4 10             	add    $0x10,%esp
}
c01024f1:	90                   	nop
c01024f2:	c9                   	leave  
c01024f3:	c3                   	ret    

c01024f4 <print_pgfault>:

static inline void
print_pgfault(struct trapframe *tf) {
c01024f4:	55                   	push   %ebp
c01024f5:	89 e5                	mov    %esp,%ebp
c01024f7:	53                   	push   %ebx
c01024f8:	83 ec 14             	sub    $0x14,%esp
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
c01024fb:	8b 45 08             	mov    0x8(%ebp),%eax
c01024fe:	8b 40 34             	mov    0x34(%eax),%eax
c0102501:	83 e0 01             	and    $0x1,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102504:	85 c0                	test   %eax,%eax
c0102506:	74 07                	je     c010250f <print_pgfault+0x1b>
c0102508:	bb d4 32 11 c0       	mov    $0xc01132d4,%ebx
c010250d:	eb 05                	jmp    c0102514 <print_pgfault+0x20>
c010250f:	bb e5 32 11 c0       	mov    $0xc01132e5,%ebx
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
c0102514:	8b 45 08             	mov    0x8(%ebp),%eax
c0102517:	8b 40 34             	mov    0x34(%eax),%eax
c010251a:	83 e0 02             	and    $0x2,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c010251d:	85 c0                	test   %eax,%eax
c010251f:	74 07                	je     c0102528 <print_pgfault+0x34>
c0102521:	b9 57 00 00 00       	mov    $0x57,%ecx
c0102526:	eb 05                	jmp    c010252d <print_pgfault+0x39>
c0102528:	b9 52 00 00 00       	mov    $0x52,%ecx
            (tf->tf_err & 4) ? 'U' : 'K',
c010252d:	8b 45 08             	mov    0x8(%ebp),%eax
c0102530:	8b 40 34             	mov    0x34(%eax),%eax
c0102533:	83 e0 04             	and    $0x4,%eax
    /* error_code:
     * bit 0 == 0 means no page found, 1 means protection fault
     * bit 1 == 0 means read, 1 means write
     * bit 2 == 0 means kernel, 1 means user
     * */
    cprintf("page fault at 0x%08x: %c/%c [%s].\n", rcr2(),
c0102536:	85 c0                	test   %eax,%eax
c0102538:	74 07                	je     c0102541 <print_pgfault+0x4d>
c010253a:	ba 55 00 00 00       	mov    $0x55,%edx
c010253f:	eb 05                	jmp    c0102546 <print_pgfault+0x52>
c0102541:	ba 4b 00 00 00       	mov    $0x4b,%edx
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102546:	0f 20 d0             	mov    %cr2,%eax
c0102549:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return cr2;
c010254c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010254f:	83 ec 0c             	sub    $0xc,%esp
c0102552:	53                   	push   %ebx
c0102553:	51                   	push   %ecx
c0102554:	52                   	push   %edx
c0102555:	50                   	push   %eax
c0102556:	68 f4 32 11 c0       	push   $0xc01132f4
c010255b:	e8 1f de ff ff       	call   c010037f <cprintf>
c0102560:	83 c4 20             	add    $0x20,%esp
            (tf->tf_err & 4) ? 'U' : 'K',
            (tf->tf_err & 2) ? 'W' : 'R',
            (tf->tf_err & 1) ? "protection fault" : "no page found");
}
c0102563:	90                   	nop
c0102564:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c0102567:	c9                   	leave  
c0102568:	c3                   	ret    

c0102569 <pgfault_handler>:

static int
pgfault_handler(struct trapframe *tf) {
c0102569:	55                   	push   %ebp
c010256a:	89 e5                	mov    %esp,%ebp
c010256c:	83 ec 18             	sub    $0x18,%esp
    extern struct mm_struct *check_mm_struct;
    if(check_mm_struct !=NULL) { //used for test check_swap
c010256f:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c0102574:	85 c0                	test   %eax,%eax
c0102576:	74 0e                	je     c0102586 <pgfault_handler+0x1d>
            print_pgfault(tf);
c0102578:	83 ec 0c             	sub    $0xc,%esp
c010257b:	ff 75 08             	pushl  0x8(%ebp)
c010257e:	e8 71 ff ff ff       	call   c01024f4 <print_pgfault>
c0102583:	83 c4 10             	add    $0x10,%esp
        }
    struct mm_struct *mm;
    if (check_mm_struct != NULL) {
c0102586:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c010258b:	85 c0                	test   %eax,%eax
c010258d:	74 32                	je     c01025c1 <pgfault_handler+0x58>
        assert(current == idleproc);
c010258f:	8b 15 28 f0 14 c0    	mov    0xc014f028,%edx
c0102595:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010259a:	39 c2                	cmp    %eax,%edx
c010259c:	74 19                	je     c01025b7 <pgfault_handler+0x4e>
c010259e:	68 17 33 11 c0       	push   $0xc0113317
c01025a3:	68 2b 33 11 c0       	push   $0xc011332b
c01025a8:	68 a9 00 00 00       	push   $0xa9
c01025ad:	68 40 33 11 c0       	push   $0xc0113340
c01025b2:	e8 2e df ff ff       	call   c01004e5 <__panic>
        mm = check_mm_struct;
c01025b7:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c01025bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01025bf:	eb 47                	jmp    c0102608 <pgfault_handler+0x9f>
    }
    else {
        if (current == NULL) {
c01025c1:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01025c6:	85 c0                	test   %eax,%eax
c01025c8:	75 33                	jne    c01025fd <pgfault_handler+0x94>
            print_trapframe(tf);
c01025ca:	83 ec 0c             	sub    $0xc,%esp
c01025cd:	ff 75 08             	pushl  0x8(%ebp)
c01025d0:	e8 82 fc ff ff       	call   c0102257 <print_trapframe>
c01025d5:	83 c4 10             	add    $0x10,%esp
            print_pgfault(tf);
c01025d8:	83 ec 0c             	sub    $0xc,%esp
c01025db:	ff 75 08             	pushl  0x8(%ebp)
c01025de:	e8 11 ff ff ff       	call   c01024f4 <print_pgfault>
c01025e3:	83 c4 10             	add    $0x10,%esp
            panic("unhandled page fault.\n");
c01025e6:	83 ec 04             	sub    $0x4,%esp
c01025e9:	68 51 33 11 c0       	push   $0xc0113351
c01025ee:	68 b0 00 00 00       	push   $0xb0
c01025f3:	68 40 33 11 c0       	push   $0xc0113340
c01025f8:	e8 e8 de ff ff       	call   c01004e5 <__panic>
        }
        mm = current->mm;
c01025fd:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0102602:	8b 40 18             	mov    0x18(%eax),%eax
c0102605:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline uintptr_t
rcr2(void) {
    uintptr_t cr2;
    asm volatile ("mov %%cr2, %0" : "=r" (cr2) :: "memory");
c0102608:	0f 20 d0             	mov    %cr2,%eax
c010260b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return cr2;
c010260e:	8b 55 f0             	mov    -0x10(%ebp),%edx
    }
    return do_pgfault(mm, tf->tf_err, rcr2());
c0102611:	8b 45 08             	mov    0x8(%ebp),%eax
c0102614:	8b 40 34             	mov    0x34(%eax),%eax
c0102617:	83 ec 04             	sub    $0x4,%esp
c010261a:	52                   	push   %edx
c010261b:	50                   	push   %eax
c010261c:	ff 75 f4             	pushl  -0xc(%ebp)
c010261f:	e8 59 34 00 00       	call   c0105a7d <do_pgfault>
c0102624:	83 c4 10             	add    $0x10,%esp
}
c0102627:	c9                   	leave  
c0102628:	c3                   	ret    

c0102629 <trap_dispatch>:

static volatile int in_swap_tick_event = 0;
extern struct mm_struct *check_mm_struct;

static void
trap_dispatch(struct trapframe *tf) {
c0102629:	55                   	push   %ebp
c010262a:	89 e5                	mov    %esp,%ebp
c010262c:	83 ec 18             	sub    $0x18,%esp
    char c;

    int ret=0;
c010262f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    switch (tf->tf_trapno) {
c0102636:	8b 45 08             	mov    0x8(%ebp),%eax
c0102639:	8b 40 30             	mov    0x30(%eax),%eax
c010263c:	83 f8 2f             	cmp    $0x2f,%eax
c010263f:	77 38                	ja     c0102679 <trap_dispatch+0x50>
c0102641:	83 f8 2e             	cmp    $0x2e,%eax
c0102644:	0f 83 70 01 00 00    	jae    c01027ba <trap_dispatch+0x191>
c010264a:	83 f8 20             	cmp    $0x20,%eax
c010264d:	0f 84 6a 01 00 00    	je     c01027bd <trap_dispatch+0x194>
c0102653:	83 f8 20             	cmp    $0x20,%eax
c0102656:	77 0a                	ja     c0102662 <trap_dispatch+0x39>
c0102658:	83 f8 0e             	cmp    $0xe,%eax
c010265b:	74 3e                	je     c010269b <trap_dispatch+0x72>
c010265d:	e9 0d 01 00 00       	jmp    c010276f <trap_dispatch+0x146>
c0102662:	83 f8 21             	cmp    $0x21,%eax
c0102665:	0f 84 d3 00 00 00    	je     c010273e <trap_dispatch+0x115>
c010266b:	83 f8 24             	cmp    $0x24,%eax
c010266e:	0f 84 ca 00 00 00    	je     c010273e <trap_dispatch+0x115>
c0102674:	e9 f6 00 00 00       	jmp    c010276f <trap_dispatch+0x146>
c0102679:	83 f8 78             	cmp    $0x78,%eax
c010267c:	0f 82 ed 00 00 00    	jb     c010276f <trap_dispatch+0x146>
c0102682:	83 f8 79             	cmp    $0x79,%eax
c0102685:	0f 86 cd 00 00 00    	jbe    c0102758 <trap_dispatch+0x12f>
c010268b:	3d 80 00 00 00       	cmp    $0x80,%eax
c0102690:	0f 84 9e 00 00 00    	je     c0102734 <trap_dispatch+0x10b>
c0102696:	e9 d4 00 00 00       	jmp    c010276f <trap_dispatch+0x146>
    case T_PGFLT:  //page fault
        if ((ret = pgfault_handler(tf)) != 0) {
c010269b:	83 ec 0c             	sub    $0xc,%esp
c010269e:	ff 75 08             	pushl  0x8(%ebp)
c01026a1:	e8 c3 fe ff ff       	call   c0102569 <pgfault_handler>
c01026a6:	83 c4 10             	add    $0x10,%esp
c01026a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01026ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01026b0:	0f 84 0a 01 00 00    	je     c01027c0 <trap_dispatch+0x197>
            print_trapframe(tf);
c01026b6:	83 ec 0c             	sub    $0xc,%esp
c01026b9:	ff 75 08             	pushl  0x8(%ebp)
c01026bc:	e8 96 fb ff ff       	call   c0102257 <print_trapframe>
c01026c1:	83 c4 10             	add    $0x10,%esp
            if (current == NULL) {
c01026c4:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01026c9:	85 c0                	test   %eax,%eax
c01026cb:	75 17                	jne    c01026e4 <trap_dispatch+0xbb>
                panic("handle pgfault failed. ret=%d\n", ret);
c01026cd:	ff 75 f4             	pushl  -0xc(%ebp)
c01026d0:	68 68 33 11 c0       	push   $0xc0113368
c01026d5:	68 c5 00 00 00       	push   $0xc5
c01026da:	68 40 33 11 c0       	push   $0xc0113340
c01026df:	e8 01 de ff ff       	call   c01004e5 <__panic>
            }
            else {
                if (trap_in_kernel(tf)) {
c01026e4:	83 ec 0c             	sub    $0xc,%esp
c01026e7:	ff 75 08             	pushl  0x8(%ebp)
c01026ea:	e8 52 fb ff ff       	call   c0102241 <trap_in_kernel>
c01026ef:	83 c4 10             	add    $0x10,%esp
c01026f2:	85 c0                	test   %eax,%eax
c01026f4:	74 17                	je     c010270d <trap_dispatch+0xe4>
                    panic("handle pgfault failed in kernel mode. ret=%d\n", ret);
c01026f6:	ff 75 f4             	pushl  -0xc(%ebp)
c01026f9:	68 88 33 11 c0       	push   $0xc0113388
c01026fe:	68 c9 00 00 00       	push   $0xc9
c0102703:	68 40 33 11 c0       	push   $0xc0113340
c0102708:	e8 d8 dd ff ff       	call   c01004e5 <__panic>
                }
                cprintf("killed by kernel.\n");
c010270d:	83 ec 0c             	sub    $0xc,%esp
c0102710:	68 b6 33 11 c0       	push   $0xc01133b6
c0102715:	e8 65 dc ff ff       	call   c010037f <cprintf>
c010271a:	83 c4 10             	add    $0x10,%esp
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
c010271d:	ff 75 f4             	pushl  -0xc(%ebp)
c0102720:	68 cc 33 11 c0       	push   $0xc01133cc
c0102725:	68 cc 00 00 00       	push   $0xcc
c010272a:	68 40 33 11 c0       	push   $0xc0113340
c010272f:	e8 b1 dd ff ff       	call   c01004e5 <__panic>
                do_exit(-E_KILLED);
            }
        }
        break;
    case T_SYSCALL:
        syscall();
c0102734:	e8 74 a6 00 00       	call   c010cdad <syscall>
        break;
c0102739:	e9 83 00 00 00       	jmp    c01027c1 <trap_dispatch+0x198>
         */
        break;
    case IRQ_OFFSET + IRQ_COM1:
    case IRQ_OFFSET + IRQ_KBD:
        // There are user level shell in LAB8, so we need change COM/KBD interrupt processing.
        c = cons_getc();
c010273e:	e8 69 f8 ff ff       	call   c0101fac <cons_getc>
c0102743:	88 45 f3             	mov    %al,-0xd(%ebp)
        {
          extern void dev_stdin_write(char c);
          dev_stdin_write(c);
c0102746:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
c010274a:	83 ec 0c             	sub    $0xc,%esp
c010274d:	50                   	push   %eax
c010274e:	e8 b3 be 00 00       	call   c010e606 <dev_stdin_write>
c0102753:	83 c4 10             	add    $0x10,%esp
        }
        break;
c0102756:	eb 69                	jmp    c01027c1 <trap_dispatch+0x198>
    //LAB1 CHALLENGE 1 : YOUR CODE you should modify below codes.
    case T_SWITCH_TOU:
    case T_SWITCH_TOK:
        panic("T_SWITCH_** ??\n");
c0102758:	83 ec 04             	sub    $0x4,%esp
c010275b:	68 f5 33 11 c0       	push   $0xc01133f5
c0102760:	68 fa 00 00 00       	push   $0xfa
c0102765:	68 40 33 11 c0       	push   $0xc0113340
c010276a:	e8 76 dd ff ff       	call   c01004e5 <__panic>
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
    default:
        print_trapframe(tf);
c010276f:	83 ec 0c             	sub    $0xc,%esp
c0102772:	ff 75 08             	pushl  0x8(%ebp)
c0102775:	e8 dd fa ff ff       	call   c0102257 <print_trapframe>
c010277a:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c010277d:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0102782:	85 c0                	test   %eax,%eax
c0102784:	74 1d                	je     c01027a3 <trap_dispatch+0x17a>
            cprintf("unhandled trap.\n");
c0102786:	83 ec 0c             	sub    $0xc,%esp
c0102789:	68 05 34 11 c0       	push   $0xc0113405
c010278e:	e8 ec db ff ff       	call   c010037f <cprintf>
c0102793:	83 c4 10             	add    $0x10,%esp
            do_exit(-E_KILLED);
c0102796:	83 ec 0c             	sub    $0xc,%esp
c0102799:	6a f7                	push   $0xfffffff7
c010279b:	e8 8d 8e 00 00       	call   c010b62d <do_exit>
c01027a0:	83 c4 10             	add    $0x10,%esp
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");
c01027a3:	83 ec 04             	sub    $0x4,%esp
c01027a6:	68 16 34 11 c0       	push   $0xc0113416
c01027ab:	68 07 01 00 00       	push   $0x107
c01027b0:	68 40 33 11 c0       	push   $0xc0113340
c01027b5:	e8 2b dd ff ff       	call   c01004e5 <__panic>
        panic("T_SWITCH_** ??\n");
        break;
    case IRQ_OFFSET + IRQ_IDE1:
    case IRQ_OFFSET + IRQ_IDE2:
        /* do nothing */
        break;
c01027ba:	90                   	nop
c01027bb:	eb 04                	jmp    c01027c1 <trap_dispatch+0x198>
        /* LAB7 YOUR CODE */
        /* you should upate you lab6 code
         * IMPORTANT FUNCTIONS:
	     * run_timer_list
         */
        break;
c01027bd:	90                   	nop
c01027be:	eb 01                	jmp    c01027c1 <trap_dispatch+0x198>
                cprintf("killed by kernel.\n");
                panic("handle user mode pgfault failed. ret=%d\n", ret); 
                do_exit(-E_KILLED);
            }
        }
        break;
c01027c0:	90                   	nop
        }
        // in kernel, it must be a mistake
        panic("unexpected trap in kernel.\n");

    }
}
c01027c1:	90                   	nop
c01027c2:	c9                   	leave  
c01027c3:	c3                   	ret    

c01027c4 <trap>:
 * trap - handles or dispatches an exception/interrupt. if and when trap() returns,
 * the code in kern/trap/trapentry.S restores the old CPU state saved in the
 * trapframe and then uses the iret instruction to return from the exception.
 * */
void
trap(struct trapframe *tf) {
c01027c4:	55                   	push   %ebp
c01027c5:	89 e5                	mov    %esp,%ebp
c01027c7:	83 ec 18             	sub    $0x18,%esp
    // dispatch based on what type of trap occurred
    // used for previous projects
    if (current == NULL) {
c01027ca:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01027cf:	85 c0                	test   %eax,%eax
c01027d1:	75 10                	jne    c01027e3 <trap+0x1f>
        trap_dispatch(tf);
c01027d3:	83 ec 0c             	sub    $0xc,%esp
c01027d6:	ff 75 08             	pushl  0x8(%ebp)
c01027d9:	e8 4b fe ff ff       	call   c0102629 <trap_dispatch>
c01027de:	83 c4 10             	add    $0x10,%esp
            if (current->need_resched) {
                schedule();
            }
        }
    }
}
c01027e1:	eb 73                	jmp    c0102856 <trap+0x92>
    if (current == NULL) {
        trap_dispatch(tf);
    }
    else {
        // keep a trapframe chain in stack
        struct trapframe *otf = current->tf;
c01027e3:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01027e8:	8b 40 3c             	mov    0x3c(%eax),%eax
c01027eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
        current->tf = tf;
c01027ee:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01027f3:	8b 55 08             	mov    0x8(%ebp),%edx
c01027f6:	89 50 3c             	mov    %edx,0x3c(%eax)
    
        bool in_kernel = trap_in_kernel(tf);
c01027f9:	83 ec 0c             	sub    $0xc,%esp
c01027fc:	ff 75 08             	pushl  0x8(%ebp)
c01027ff:	e8 3d fa ff ff       	call   c0102241 <trap_in_kernel>
c0102804:	83 c4 10             	add    $0x10,%esp
c0102807:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
        trap_dispatch(tf);
c010280a:	83 ec 0c             	sub    $0xc,%esp
c010280d:	ff 75 08             	pushl  0x8(%ebp)
c0102810:	e8 14 fe ff ff       	call   c0102629 <trap_dispatch>
c0102815:	83 c4 10             	add    $0x10,%esp
    
        current->tf = otf;
c0102818:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010281d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0102820:	89 50 3c             	mov    %edx,0x3c(%eax)
        if (!in_kernel) {
c0102823:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0102827:	75 2d                	jne    c0102856 <trap+0x92>
            if (current->flags & PF_EXITING) {
c0102829:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010282e:	8b 40 44             	mov    0x44(%eax),%eax
c0102831:	83 e0 01             	and    $0x1,%eax
c0102834:	85 c0                	test   %eax,%eax
c0102836:	74 0d                	je     c0102845 <trap+0x81>
                do_exit(-E_KILLED);
c0102838:	83 ec 0c             	sub    $0xc,%esp
c010283b:	6a f7                	push   $0xfffffff7
c010283d:	e8 eb 8d 00 00       	call   c010b62d <do_exit>
c0102842:	83 c4 10             	add    $0x10,%esp
            }
            if (current->need_resched) {
c0102845:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010284a:	8b 40 10             	mov    0x10(%eax),%eax
c010284d:	85 c0                	test   %eax,%eax
c010284f:	74 05                	je     c0102856 <trap+0x92>
                schedule();
c0102851:	e8 5c 9c 00 00       	call   c010c4b2 <schedule>
            }
        }
    }
}
c0102856:	90                   	nop
c0102857:	c9                   	leave  
c0102858:	c3                   	ret    

c0102859 <vector0>:
# handler
.text
.globl __alltraps
.globl vector0
vector0:
  pushl $0
c0102859:	6a 00                	push   $0x0
  pushl $0
c010285b:	6a 00                	push   $0x0
  jmp __alltraps
c010285d:	e9 69 0a 00 00       	jmp    c01032cb <__alltraps>

c0102862 <vector1>:
.globl vector1
vector1:
  pushl $0
c0102862:	6a 00                	push   $0x0
  pushl $1
c0102864:	6a 01                	push   $0x1
  jmp __alltraps
c0102866:	e9 60 0a 00 00       	jmp    c01032cb <__alltraps>

c010286b <vector2>:
.globl vector2
vector2:
  pushl $0
c010286b:	6a 00                	push   $0x0
  pushl $2
c010286d:	6a 02                	push   $0x2
  jmp __alltraps
c010286f:	e9 57 0a 00 00       	jmp    c01032cb <__alltraps>

c0102874 <vector3>:
.globl vector3
vector3:
  pushl $0
c0102874:	6a 00                	push   $0x0
  pushl $3
c0102876:	6a 03                	push   $0x3
  jmp __alltraps
c0102878:	e9 4e 0a 00 00       	jmp    c01032cb <__alltraps>

c010287d <vector4>:
.globl vector4
vector4:
  pushl $0
c010287d:	6a 00                	push   $0x0
  pushl $4
c010287f:	6a 04                	push   $0x4
  jmp __alltraps
c0102881:	e9 45 0a 00 00       	jmp    c01032cb <__alltraps>

c0102886 <vector5>:
.globl vector5
vector5:
  pushl $0
c0102886:	6a 00                	push   $0x0
  pushl $5
c0102888:	6a 05                	push   $0x5
  jmp __alltraps
c010288a:	e9 3c 0a 00 00       	jmp    c01032cb <__alltraps>

c010288f <vector6>:
.globl vector6
vector6:
  pushl $0
c010288f:	6a 00                	push   $0x0
  pushl $6
c0102891:	6a 06                	push   $0x6
  jmp __alltraps
c0102893:	e9 33 0a 00 00       	jmp    c01032cb <__alltraps>

c0102898 <vector7>:
.globl vector7
vector7:
  pushl $0
c0102898:	6a 00                	push   $0x0
  pushl $7
c010289a:	6a 07                	push   $0x7
  jmp __alltraps
c010289c:	e9 2a 0a 00 00       	jmp    c01032cb <__alltraps>

c01028a1 <vector8>:
.globl vector8
vector8:
  pushl $8
c01028a1:	6a 08                	push   $0x8
  jmp __alltraps
c01028a3:	e9 23 0a 00 00       	jmp    c01032cb <__alltraps>

c01028a8 <vector9>:
.globl vector9
vector9:
  pushl $0
c01028a8:	6a 00                	push   $0x0
  pushl $9
c01028aa:	6a 09                	push   $0x9
  jmp __alltraps
c01028ac:	e9 1a 0a 00 00       	jmp    c01032cb <__alltraps>

c01028b1 <vector10>:
.globl vector10
vector10:
  pushl $10
c01028b1:	6a 0a                	push   $0xa
  jmp __alltraps
c01028b3:	e9 13 0a 00 00       	jmp    c01032cb <__alltraps>

c01028b8 <vector11>:
.globl vector11
vector11:
  pushl $11
c01028b8:	6a 0b                	push   $0xb
  jmp __alltraps
c01028ba:	e9 0c 0a 00 00       	jmp    c01032cb <__alltraps>

c01028bf <vector12>:
.globl vector12
vector12:
  pushl $12
c01028bf:	6a 0c                	push   $0xc
  jmp __alltraps
c01028c1:	e9 05 0a 00 00       	jmp    c01032cb <__alltraps>

c01028c6 <vector13>:
.globl vector13
vector13:
  pushl $13
c01028c6:	6a 0d                	push   $0xd
  jmp __alltraps
c01028c8:	e9 fe 09 00 00       	jmp    c01032cb <__alltraps>

c01028cd <vector14>:
.globl vector14
vector14:
  pushl $14
c01028cd:	6a 0e                	push   $0xe
  jmp __alltraps
c01028cf:	e9 f7 09 00 00       	jmp    c01032cb <__alltraps>

c01028d4 <vector15>:
.globl vector15
vector15:
  pushl $0
c01028d4:	6a 00                	push   $0x0
  pushl $15
c01028d6:	6a 0f                	push   $0xf
  jmp __alltraps
c01028d8:	e9 ee 09 00 00       	jmp    c01032cb <__alltraps>

c01028dd <vector16>:
.globl vector16
vector16:
  pushl $0
c01028dd:	6a 00                	push   $0x0
  pushl $16
c01028df:	6a 10                	push   $0x10
  jmp __alltraps
c01028e1:	e9 e5 09 00 00       	jmp    c01032cb <__alltraps>

c01028e6 <vector17>:
.globl vector17
vector17:
  pushl $17
c01028e6:	6a 11                	push   $0x11
  jmp __alltraps
c01028e8:	e9 de 09 00 00       	jmp    c01032cb <__alltraps>

c01028ed <vector18>:
.globl vector18
vector18:
  pushl $0
c01028ed:	6a 00                	push   $0x0
  pushl $18
c01028ef:	6a 12                	push   $0x12
  jmp __alltraps
c01028f1:	e9 d5 09 00 00       	jmp    c01032cb <__alltraps>

c01028f6 <vector19>:
.globl vector19
vector19:
  pushl $0
c01028f6:	6a 00                	push   $0x0
  pushl $19
c01028f8:	6a 13                	push   $0x13
  jmp __alltraps
c01028fa:	e9 cc 09 00 00       	jmp    c01032cb <__alltraps>

c01028ff <vector20>:
.globl vector20
vector20:
  pushl $0
c01028ff:	6a 00                	push   $0x0
  pushl $20
c0102901:	6a 14                	push   $0x14
  jmp __alltraps
c0102903:	e9 c3 09 00 00       	jmp    c01032cb <__alltraps>

c0102908 <vector21>:
.globl vector21
vector21:
  pushl $0
c0102908:	6a 00                	push   $0x0
  pushl $21
c010290a:	6a 15                	push   $0x15
  jmp __alltraps
c010290c:	e9 ba 09 00 00       	jmp    c01032cb <__alltraps>

c0102911 <vector22>:
.globl vector22
vector22:
  pushl $0
c0102911:	6a 00                	push   $0x0
  pushl $22
c0102913:	6a 16                	push   $0x16
  jmp __alltraps
c0102915:	e9 b1 09 00 00       	jmp    c01032cb <__alltraps>

c010291a <vector23>:
.globl vector23
vector23:
  pushl $0
c010291a:	6a 00                	push   $0x0
  pushl $23
c010291c:	6a 17                	push   $0x17
  jmp __alltraps
c010291e:	e9 a8 09 00 00       	jmp    c01032cb <__alltraps>

c0102923 <vector24>:
.globl vector24
vector24:
  pushl $0
c0102923:	6a 00                	push   $0x0
  pushl $24
c0102925:	6a 18                	push   $0x18
  jmp __alltraps
c0102927:	e9 9f 09 00 00       	jmp    c01032cb <__alltraps>

c010292c <vector25>:
.globl vector25
vector25:
  pushl $0
c010292c:	6a 00                	push   $0x0
  pushl $25
c010292e:	6a 19                	push   $0x19
  jmp __alltraps
c0102930:	e9 96 09 00 00       	jmp    c01032cb <__alltraps>

c0102935 <vector26>:
.globl vector26
vector26:
  pushl $0
c0102935:	6a 00                	push   $0x0
  pushl $26
c0102937:	6a 1a                	push   $0x1a
  jmp __alltraps
c0102939:	e9 8d 09 00 00       	jmp    c01032cb <__alltraps>

c010293e <vector27>:
.globl vector27
vector27:
  pushl $0
c010293e:	6a 00                	push   $0x0
  pushl $27
c0102940:	6a 1b                	push   $0x1b
  jmp __alltraps
c0102942:	e9 84 09 00 00       	jmp    c01032cb <__alltraps>

c0102947 <vector28>:
.globl vector28
vector28:
  pushl $0
c0102947:	6a 00                	push   $0x0
  pushl $28
c0102949:	6a 1c                	push   $0x1c
  jmp __alltraps
c010294b:	e9 7b 09 00 00       	jmp    c01032cb <__alltraps>

c0102950 <vector29>:
.globl vector29
vector29:
  pushl $0
c0102950:	6a 00                	push   $0x0
  pushl $29
c0102952:	6a 1d                	push   $0x1d
  jmp __alltraps
c0102954:	e9 72 09 00 00       	jmp    c01032cb <__alltraps>

c0102959 <vector30>:
.globl vector30
vector30:
  pushl $0
c0102959:	6a 00                	push   $0x0
  pushl $30
c010295b:	6a 1e                	push   $0x1e
  jmp __alltraps
c010295d:	e9 69 09 00 00       	jmp    c01032cb <__alltraps>

c0102962 <vector31>:
.globl vector31
vector31:
  pushl $0
c0102962:	6a 00                	push   $0x0
  pushl $31
c0102964:	6a 1f                	push   $0x1f
  jmp __alltraps
c0102966:	e9 60 09 00 00       	jmp    c01032cb <__alltraps>

c010296b <vector32>:
.globl vector32
vector32:
  pushl $0
c010296b:	6a 00                	push   $0x0
  pushl $32
c010296d:	6a 20                	push   $0x20
  jmp __alltraps
c010296f:	e9 57 09 00 00       	jmp    c01032cb <__alltraps>

c0102974 <vector33>:
.globl vector33
vector33:
  pushl $0
c0102974:	6a 00                	push   $0x0
  pushl $33
c0102976:	6a 21                	push   $0x21
  jmp __alltraps
c0102978:	e9 4e 09 00 00       	jmp    c01032cb <__alltraps>

c010297d <vector34>:
.globl vector34
vector34:
  pushl $0
c010297d:	6a 00                	push   $0x0
  pushl $34
c010297f:	6a 22                	push   $0x22
  jmp __alltraps
c0102981:	e9 45 09 00 00       	jmp    c01032cb <__alltraps>

c0102986 <vector35>:
.globl vector35
vector35:
  pushl $0
c0102986:	6a 00                	push   $0x0
  pushl $35
c0102988:	6a 23                	push   $0x23
  jmp __alltraps
c010298a:	e9 3c 09 00 00       	jmp    c01032cb <__alltraps>

c010298f <vector36>:
.globl vector36
vector36:
  pushl $0
c010298f:	6a 00                	push   $0x0
  pushl $36
c0102991:	6a 24                	push   $0x24
  jmp __alltraps
c0102993:	e9 33 09 00 00       	jmp    c01032cb <__alltraps>

c0102998 <vector37>:
.globl vector37
vector37:
  pushl $0
c0102998:	6a 00                	push   $0x0
  pushl $37
c010299a:	6a 25                	push   $0x25
  jmp __alltraps
c010299c:	e9 2a 09 00 00       	jmp    c01032cb <__alltraps>

c01029a1 <vector38>:
.globl vector38
vector38:
  pushl $0
c01029a1:	6a 00                	push   $0x0
  pushl $38
c01029a3:	6a 26                	push   $0x26
  jmp __alltraps
c01029a5:	e9 21 09 00 00       	jmp    c01032cb <__alltraps>

c01029aa <vector39>:
.globl vector39
vector39:
  pushl $0
c01029aa:	6a 00                	push   $0x0
  pushl $39
c01029ac:	6a 27                	push   $0x27
  jmp __alltraps
c01029ae:	e9 18 09 00 00       	jmp    c01032cb <__alltraps>

c01029b3 <vector40>:
.globl vector40
vector40:
  pushl $0
c01029b3:	6a 00                	push   $0x0
  pushl $40
c01029b5:	6a 28                	push   $0x28
  jmp __alltraps
c01029b7:	e9 0f 09 00 00       	jmp    c01032cb <__alltraps>

c01029bc <vector41>:
.globl vector41
vector41:
  pushl $0
c01029bc:	6a 00                	push   $0x0
  pushl $41
c01029be:	6a 29                	push   $0x29
  jmp __alltraps
c01029c0:	e9 06 09 00 00       	jmp    c01032cb <__alltraps>

c01029c5 <vector42>:
.globl vector42
vector42:
  pushl $0
c01029c5:	6a 00                	push   $0x0
  pushl $42
c01029c7:	6a 2a                	push   $0x2a
  jmp __alltraps
c01029c9:	e9 fd 08 00 00       	jmp    c01032cb <__alltraps>

c01029ce <vector43>:
.globl vector43
vector43:
  pushl $0
c01029ce:	6a 00                	push   $0x0
  pushl $43
c01029d0:	6a 2b                	push   $0x2b
  jmp __alltraps
c01029d2:	e9 f4 08 00 00       	jmp    c01032cb <__alltraps>

c01029d7 <vector44>:
.globl vector44
vector44:
  pushl $0
c01029d7:	6a 00                	push   $0x0
  pushl $44
c01029d9:	6a 2c                	push   $0x2c
  jmp __alltraps
c01029db:	e9 eb 08 00 00       	jmp    c01032cb <__alltraps>

c01029e0 <vector45>:
.globl vector45
vector45:
  pushl $0
c01029e0:	6a 00                	push   $0x0
  pushl $45
c01029e2:	6a 2d                	push   $0x2d
  jmp __alltraps
c01029e4:	e9 e2 08 00 00       	jmp    c01032cb <__alltraps>

c01029e9 <vector46>:
.globl vector46
vector46:
  pushl $0
c01029e9:	6a 00                	push   $0x0
  pushl $46
c01029eb:	6a 2e                	push   $0x2e
  jmp __alltraps
c01029ed:	e9 d9 08 00 00       	jmp    c01032cb <__alltraps>

c01029f2 <vector47>:
.globl vector47
vector47:
  pushl $0
c01029f2:	6a 00                	push   $0x0
  pushl $47
c01029f4:	6a 2f                	push   $0x2f
  jmp __alltraps
c01029f6:	e9 d0 08 00 00       	jmp    c01032cb <__alltraps>

c01029fb <vector48>:
.globl vector48
vector48:
  pushl $0
c01029fb:	6a 00                	push   $0x0
  pushl $48
c01029fd:	6a 30                	push   $0x30
  jmp __alltraps
c01029ff:	e9 c7 08 00 00       	jmp    c01032cb <__alltraps>

c0102a04 <vector49>:
.globl vector49
vector49:
  pushl $0
c0102a04:	6a 00                	push   $0x0
  pushl $49
c0102a06:	6a 31                	push   $0x31
  jmp __alltraps
c0102a08:	e9 be 08 00 00       	jmp    c01032cb <__alltraps>

c0102a0d <vector50>:
.globl vector50
vector50:
  pushl $0
c0102a0d:	6a 00                	push   $0x0
  pushl $50
c0102a0f:	6a 32                	push   $0x32
  jmp __alltraps
c0102a11:	e9 b5 08 00 00       	jmp    c01032cb <__alltraps>

c0102a16 <vector51>:
.globl vector51
vector51:
  pushl $0
c0102a16:	6a 00                	push   $0x0
  pushl $51
c0102a18:	6a 33                	push   $0x33
  jmp __alltraps
c0102a1a:	e9 ac 08 00 00       	jmp    c01032cb <__alltraps>

c0102a1f <vector52>:
.globl vector52
vector52:
  pushl $0
c0102a1f:	6a 00                	push   $0x0
  pushl $52
c0102a21:	6a 34                	push   $0x34
  jmp __alltraps
c0102a23:	e9 a3 08 00 00       	jmp    c01032cb <__alltraps>

c0102a28 <vector53>:
.globl vector53
vector53:
  pushl $0
c0102a28:	6a 00                	push   $0x0
  pushl $53
c0102a2a:	6a 35                	push   $0x35
  jmp __alltraps
c0102a2c:	e9 9a 08 00 00       	jmp    c01032cb <__alltraps>

c0102a31 <vector54>:
.globl vector54
vector54:
  pushl $0
c0102a31:	6a 00                	push   $0x0
  pushl $54
c0102a33:	6a 36                	push   $0x36
  jmp __alltraps
c0102a35:	e9 91 08 00 00       	jmp    c01032cb <__alltraps>

c0102a3a <vector55>:
.globl vector55
vector55:
  pushl $0
c0102a3a:	6a 00                	push   $0x0
  pushl $55
c0102a3c:	6a 37                	push   $0x37
  jmp __alltraps
c0102a3e:	e9 88 08 00 00       	jmp    c01032cb <__alltraps>

c0102a43 <vector56>:
.globl vector56
vector56:
  pushl $0
c0102a43:	6a 00                	push   $0x0
  pushl $56
c0102a45:	6a 38                	push   $0x38
  jmp __alltraps
c0102a47:	e9 7f 08 00 00       	jmp    c01032cb <__alltraps>

c0102a4c <vector57>:
.globl vector57
vector57:
  pushl $0
c0102a4c:	6a 00                	push   $0x0
  pushl $57
c0102a4e:	6a 39                	push   $0x39
  jmp __alltraps
c0102a50:	e9 76 08 00 00       	jmp    c01032cb <__alltraps>

c0102a55 <vector58>:
.globl vector58
vector58:
  pushl $0
c0102a55:	6a 00                	push   $0x0
  pushl $58
c0102a57:	6a 3a                	push   $0x3a
  jmp __alltraps
c0102a59:	e9 6d 08 00 00       	jmp    c01032cb <__alltraps>

c0102a5e <vector59>:
.globl vector59
vector59:
  pushl $0
c0102a5e:	6a 00                	push   $0x0
  pushl $59
c0102a60:	6a 3b                	push   $0x3b
  jmp __alltraps
c0102a62:	e9 64 08 00 00       	jmp    c01032cb <__alltraps>

c0102a67 <vector60>:
.globl vector60
vector60:
  pushl $0
c0102a67:	6a 00                	push   $0x0
  pushl $60
c0102a69:	6a 3c                	push   $0x3c
  jmp __alltraps
c0102a6b:	e9 5b 08 00 00       	jmp    c01032cb <__alltraps>

c0102a70 <vector61>:
.globl vector61
vector61:
  pushl $0
c0102a70:	6a 00                	push   $0x0
  pushl $61
c0102a72:	6a 3d                	push   $0x3d
  jmp __alltraps
c0102a74:	e9 52 08 00 00       	jmp    c01032cb <__alltraps>

c0102a79 <vector62>:
.globl vector62
vector62:
  pushl $0
c0102a79:	6a 00                	push   $0x0
  pushl $62
c0102a7b:	6a 3e                	push   $0x3e
  jmp __alltraps
c0102a7d:	e9 49 08 00 00       	jmp    c01032cb <__alltraps>

c0102a82 <vector63>:
.globl vector63
vector63:
  pushl $0
c0102a82:	6a 00                	push   $0x0
  pushl $63
c0102a84:	6a 3f                	push   $0x3f
  jmp __alltraps
c0102a86:	e9 40 08 00 00       	jmp    c01032cb <__alltraps>

c0102a8b <vector64>:
.globl vector64
vector64:
  pushl $0
c0102a8b:	6a 00                	push   $0x0
  pushl $64
c0102a8d:	6a 40                	push   $0x40
  jmp __alltraps
c0102a8f:	e9 37 08 00 00       	jmp    c01032cb <__alltraps>

c0102a94 <vector65>:
.globl vector65
vector65:
  pushl $0
c0102a94:	6a 00                	push   $0x0
  pushl $65
c0102a96:	6a 41                	push   $0x41
  jmp __alltraps
c0102a98:	e9 2e 08 00 00       	jmp    c01032cb <__alltraps>

c0102a9d <vector66>:
.globl vector66
vector66:
  pushl $0
c0102a9d:	6a 00                	push   $0x0
  pushl $66
c0102a9f:	6a 42                	push   $0x42
  jmp __alltraps
c0102aa1:	e9 25 08 00 00       	jmp    c01032cb <__alltraps>

c0102aa6 <vector67>:
.globl vector67
vector67:
  pushl $0
c0102aa6:	6a 00                	push   $0x0
  pushl $67
c0102aa8:	6a 43                	push   $0x43
  jmp __alltraps
c0102aaa:	e9 1c 08 00 00       	jmp    c01032cb <__alltraps>

c0102aaf <vector68>:
.globl vector68
vector68:
  pushl $0
c0102aaf:	6a 00                	push   $0x0
  pushl $68
c0102ab1:	6a 44                	push   $0x44
  jmp __alltraps
c0102ab3:	e9 13 08 00 00       	jmp    c01032cb <__alltraps>

c0102ab8 <vector69>:
.globl vector69
vector69:
  pushl $0
c0102ab8:	6a 00                	push   $0x0
  pushl $69
c0102aba:	6a 45                	push   $0x45
  jmp __alltraps
c0102abc:	e9 0a 08 00 00       	jmp    c01032cb <__alltraps>

c0102ac1 <vector70>:
.globl vector70
vector70:
  pushl $0
c0102ac1:	6a 00                	push   $0x0
  pushl $70
c0102ac3:	6a 46                	push   $0x46
  jmp __alltraps
c0102ac5:	e9 01 08 00 00       	jmp    c01032cb <__alltraps>

c0102aca <vector71>:
.globl vector71
vector71:
  pushl $0
c0102aca:	6a 00                	push   $0x0
  pushl $71
c0102acc:	6a 47                	push   $0x47
  jmp __alltraps
c0102ace:	e9 f8 07 00 00       	jmp    c01032cb <__alltraps>

c0102ad3 <vector72>:
.globl vector72
vector72:
  pushl $0
c0102ad3:	6a 00                	push   $0x0
  pushl $72
c0102ad5:	6a 48                	push   $0x48
  jmp __alltraps
c0102ad7:	e9 ef 07 00 00       	jmp    c01032cb <__alltraps>

c0102adc <vector73>:
.globl vector73
vector73:
  pushl $0
c0102adc:	6a 00                	push   $0x0
  pushl $73
c0102ade:	6a 49                	push   $0x49
  jmp __alltraps
c0102ae0:	e9 e6 07 00 00       	jmp    c01032cb <__alltraps>

c0102ae5 <vector74>:
.globl vector74
vector74:
  pushl $0
c0102ae5:	6a 00                	push   $0x0
  pushl $74
c0102ae7:	6a 4a                	push   $0x4a
  jmp __alltraps
c0102ae9:	e9 dd 07 00 00       	jmp    c01032cb <__alltraps>

c0102aee <vector75>:
.globl vector75
vector75:
  pushl $0
c0102aee:	6a 00                	push   $0x0
  pushl $75
c0102af0:	6a 4b                	push   $0x4b
  jmp __alltraps
c0102af2:	e9 d4 07 00 00       	jmp    c01032cb <__alltraps>

c0102af7 <vector76>:
.globl vector76
vector76:
  pushl $0
c0102af7:	6a 00                	push   $0x0
  pushl $76
c0102af9:	6a 4c                	push   $0x4c
  jmp __alltraps
c0102afb:	e9 cb 07 00 00       	jmp    c01032cb <__alltraps>

c0102b00 <vector77>:
.globl vector77
vector77:
  pushl $0
c0102b00:	6a 00                	push   $0x0
  pushl $77
c0102b02:	6a 4d                	push   $0x4d
  jmp __alltraps
c0102b04:	e9 c2 07 00 00       	jmp    c01032cb <__alltraps>

c0102b09 <vector78>:
.globl vector78
vector78:
  pushl $0
c0102b09:	6a 00                	push   $0x0
  pushl $78
c0102b0b:	6a 4e                	push   $0x4e
  jmp __alltraps
c0102b0d:	e9 b9 07 00 00       	jmp    c01032cb <__alltraps>

c0102b12 <vector79>:
.globl vector79
vector79:
  pushl $0
c0102b12:	6a 00                	push   $0x0
  pushl $79
c0102b14:	6a 4f                	push   $0x4f
  jmp __alltraps
c0102b16:	e9 b0 07 00 00       	jmp    c01032cb <__alltraps>

c0102b1b <vector80>:
.globl vector80
vector80:
  pushl $0
c0102b1b:	6a 00                	push   $0x0
  pushl $80
c0102b1d:	6a 50                	push   $0x50
  jmp __alltraps
c0102b1f:	e9 a7 07 00 00       	jmp    c01032cb <__alltraps>

c0102b24 <vector81>:
.globl vector81
vector81:
  pushl $0
c0102b24:	6a 00                	push   $0x0
  pushl $81
c0102b26:	6a 51                	push   $0x51
  jmp __alltraps
c0102b28:	e9 9e 07 00 00       	jmp    c01032cb <__alltraps>

c0102b2d <vector82>:
.globl vector82
vector82:
  pushl $0
c0102b2d:	6a 00                	push   $0x0
  pushl $82
c0102b2f:	6a 52                	push   $0x52
  jmp __alltraps
c0102b31:	e9 95 07 00 00       	jmp    c01032cb <__alltraps>

c0102b36 <vector83>:
.globl vector83
vector83:
  pushl $0
c0102b36:	6a 00                	push   $0x0
  pushl $83
c0102b38:	6a 53                	push   $0x53
  jmp __alltraps
c0102b3a:	e9 8c 07 00 00       	jmp    c01032cb <__alltraps>

c0102b3f <vector84>:
.globl vector84
vector84:
  pushl $0
c0102b3f:	6a 00                	push   $0x0
  pushl $84
c0102b41:	6a 54                	push   $0x54
  jmp __alltraps
c0102b43:	e9 83 07 00 00       	jmp    c01032cb <__alltraps>

c0102b48 <vector85>:
.globl vector85
vector85:
  pushl $0
c0102b48:	6a 00                	push   $0x0
  pushl $85
c0102b4a:	6a 55                	push   $0x55
  jmp __alltraps
c0102b4c:	e9 7a 07 00 00       	jmp    c01032cb <__alltraps>

c0102b51 <vector86>:
.globl vector86
vector86:
  pushl $0
c0102b51:	6a 00                	push   $0x0
  pushl $86
c0102b53:	6a 56                	push   $0x56
  jmp __alltraps
c0102b55:	e9 71 07 00 00       	jmp    c01032cb <__alltraps>

c0102b5a <vector87>:
.globl vector87
vector87:
  pushl $0
c0102b5a:	6a 00                	push   $0x0
  pushl $87
c0102b5c:	6a 57                	push   $0x57
  jmp __alltraps
c0102b5e:	e9 68 07 00 00       	jmp    c01032cb <__alltraps>

c0102b63 <vector88>:
.globl vector88
vector88:
  pushl $0
c0102b63:	6a 00                	push   $0x0
  pushl $88
c0102b65:	6a 58                	push   $0x58
  jmp __alltraps
c0102b67:	e9 5f 07 00 00       	jmp    c01032cb <__alltraps>

c0102b6c <vector89>:
.globl vector89
vector89:
  pushl $0
c0102b6c:	6a 00                	push   $0x0
  pushl $89
c0102b6e:	6a 59                	push   $0x59
  jmp __alltraps
c0102b70:	e9 56 07 00 00       	jmp    c01032cb <__alltraps>

c0102b75 <vector90>:
.globl vector90
vector90:
  pushl $0
c0102b75:	6a 00                	push   $0x0
  pushl $90
c0102b77:	6a 5a                	push   $0x5a
  jmp __alltraps
c0102b79:	e9 4d 07 00 00       	jmp    c01032cb <__alltraps>

c0102b7e <vector91>:
.globl vector91
vector91:
  pushl $0
c0102b7e:	6a 00                	push   $0x0
  pushl $91
c0102b80:	6a 5b                	push   $0x5b
  jmp __alltraps
c0102b82:	e9 44 07 00 00       	jmp    c01032cb <__alltraps>

c0102b87 <vector92>:
.globl vector92
vector92:
  pushl $0
c0102b87:	6a 00                	push   $0x0
  pushl $92
c0102b89:	6a 5c                	push   $0x5c
  jmp __alltraps
c0102b8b:	e9 3b 07 00 00       	jmp    c01032cb <__alltraps>

c0102b90 <vector93>:
.globl vector93
vector93:
  pushl $0
c0102b90:	6a 00                	push   $0x0
  pushl $93
c0102b92:	6a 5d                	push   $0x5d
  jmp __alltraps
c0102b94:	e9 32 07 00 00       	jmp    c01032cb <__alltraps>

c0102b99 <vector94>:
.globl vector94
vector94:
  pushl $0
c0102b99:	6a 00                	push   $0x0
  pushl $94
c0102b9b:	6a 5e                	push   $0x5e
  jmp __alltraps
c0102b9d:	e9 29 07 00 00       	jmp    c01032cb <__alltraps>

c0102ba2 <vector95>:
.globl vector95
vector95:
  pushl $0
c0102ba2:	6a 00                	push   $0x0
  pushl $95
c0102ba4:	6a 5f                	push   $0x5f
  jmp __alltraps
c0102ba6:	e9 20 07 00 00       	jmp    c01032cb <__alltraps>

c0102bab <vector96>:
.globl vector96
vector96:
  pushl $0
c0102bab:	6a 00                	push   $0x0
  pushl $96
c0102bad:	6a 60                	push   $0x60
  jmp __alltraps
c0102baf:	e9 17 07 00 00       	jmp    c01032cb <__alltraps>

c0102bb4 <vector97>:
.globl vector97
vector97:
  pushl $0
c0102bb4:	6a 00                	push   $0x0
  pushl $97
c0102bb6:	6a 61                	push   $0x61
  jmp __alltraps
c0102bb8:	e9 0e 07 00 00       	jmp    c01032cb <__alltraps>

c0102bbd <vector98>:
.globl vector98
vector98:
  pushl $0
c0102bbd:	6a 00                	push   $0x0
  pushl $98
c0102bbf:	6a 62                	push   $0x62
  jmp __alltraps
c0102bc1:	e9 05 07 00 00       	jmp    c01032cb <__alltraps>

c0102bc6 <vector99>:
.globl vector99
vector99:
  pushl $0
c0102bc6:	6a 00                	push   $0x0
  pushl $99
c0102bc8:	6a 63                	push   $0x63
  jmp __alltraps
c0102bca:	e9 fc 06 00 00       	jmp    c01032cb <__alltraps>

c0102bcf <vector100>:
.globl vector100
vector100:
  pushl $0
c0102bcf:	6a 00                	push   $0x0
  pushl $100
c0102bd1:	6a 64                	push   $0x64
  jmp __alltraps
c0102bd3:	e9 f3 06 00 00       	jmp    c01032cb <__alltraps>

c0102bd8 <vector101>:
.globl vector101
vector101:
  pushl $0
c0102bd8:	6a 00                	push   $0x0
  pushl $101
c0102bda:	6a 65                	push   $0x65
  jmp __alltraps
c0102bdc:	e9 ea 06 00 00       	jmp    c01032cb <__alltraps>

c0102be1 <vector102>:
.globl vector102
vector102:
  pushl $0
c0102be1:	6a 00                	push   $0x0
  pushl $102
c0102be3:	6a 66                	push   $0x66
  jmp __alltraps
c0102be5:	e9 e1 06 00 00       	jmp    c01032cb <__alltraps>

c0102bea <vector103>:
.globl vector103
vector103:
  pushl $0
c0102bea:	6a 00                	push   $0x0
  pushl $103
c0102bec:	6a 67                	push   $0x67
  jmp __alltraps
c0102bee:	e9 d8 06 00 00       	jmp    c01032cb <__alltraps>

c0102bf3 <vector104>:
.globl vector104
vector104:
  pushl $0
c0102bf3:	6a 00                	push   $0x0
  pushl $104
c0102bf5:	6a 68                	push   $0x68
  jmp __alltraps
c0102bf7:	e9 cf 06 00 00       	jmp    c01032cb <__alltraps>

c0102bfc <vector105>:
.globl vector105
vector105:
  pushl $0
c0102bfc:	6a 00                	push   $0x0
  pushl $105
c0102bfe:	6a 69                	push   $0x69
  jmp __alltraps
c0102c00:	e9 c6 06 00 00       	jmp    c01032cb <__alltraps>

c0102c05 <vector106>:
.globl vector106
vector106:
  pushl $0
c0102c05:	6a 00                	push   $0x0
  pushl $106
c0102c07:	6a 6a                	push   $0x6a
  jmp __alltraps
c0102c09:	e9 bd 06 00 00       	jmp    c01032cb <__alltraps>

c0102c0e <vector107>:
.globl vector107
vector107:
  pushl $0
c0102c0e:	6a 00                	push   $0x0
  pushl $107
c0102c10:	6a 6b                	push   $0x6b
  jmp __alltraps
c0102c12:	e9 b4 06 00 00       	jmp    c01032cb <__alltraps>

c0102c17 <vector108>:
.globl vector108
vector108:
  pushl $0
c0102c17:	6a 00                	push   $0x0
  pushl $108
c0102c19:	6a 6c                	push   $0x6c
  jmp __alltraps
c0102c1b:	e9 ab 06 00 00       	jmp    c01032cb <__alltraps>

c0102c20 <vector109>:
.globl vector109
vector109:
  pushl $0
c0102c20:	6a 00                	push   $0x0
  pushl $109
c0102c22:	6a 6d                	push   $0x6d
  jmp __alltraps
c0102c24:	e9 a2 06 00 00       	jmp    c01032cb <__alltraps>

c0102c29 <vector110>:
.globl vector110
vector110:
  pushl $0
c0102c29:	6a 00                	push   $0x0
  pushl $110
c0102c2b:	6a 6e                	push   $0x6e
  jmp __alltraps
c0102c2d:	e9 99 06 00 00       	jmp    c01032cb <__alltraps>

c0102c32 <vector111>:
.globl vector111
vector111:
  pushl $0
c0102c32:	6a 00                	push   $0x0
  pushl $111
c0102c34:	6a 6f                	push   $0x6f
  jmp __alltraps
c0102c36:	e9 90 06 00 00       	jmp    c01032cb <__alltraps>

c0102c3b <vector112>:
.globl vector112
vector112:
  pushl $0
c0102c3b:	6a 00                	push   $0x0
  pushl $112
c0102c3d:	6a 70                	push   $0x70
  jmp __alltraps
c0102c3f:	e9 87 06 00 00       	jmp    c01032cb <__alltraps>

c0102c44 <vector113>:
.globl vector113
vector113:
  pushl $0
c0102c44:	6a 00                	push   $0x0
  pushl $113
c0102c46:	6a 71                	push   $0x71
  jmp __alltraps
c0102c48:	e9 7e 06 00 00       	jmp    c01032cb <__alltraps>

c0102c4d <vector114>:
.globl vector114
vector114:
  pushl $0
c0102c4d:	6a 00                	push   $0x0
  pushl $114
c0102c4f:	6a 72                	push   $0x72
  jmp __alltraps
c0102c51:	e9 75 06 00 00       	jmp    c01032cb <__alltraps>

c0102c56 <vector115>:
.globl vector115
vector115:
  pushl $0
c0102c56:	6a 00                	push   $0x0
  pushl $115
c0102c58:	6a 73                	push   $0x73
  jmp __alltraps
c0102c5a:	e9 6c 06 00 00       	jmp    c01032cb <__alltraps>

c0102c5f <vector116>:
.globl vector116
vector116:
  pushl $0
c0102c5f:	6a 00                	push   $0x0
  pushl $116
c0102c61:	6a 74                	push   $0x74
  jmp __alltraps
c0102c63:	e9 63 06 00 00       	jmp    c01032cb <__alltraps>

c0102c68 <vector117>:
.globl vector117
vector117:
  pushl $0
c0102c68:	6a 00                	push   $0x0
  pushl $117
c0102c6a:	6a 75                	push   $0x75
  jmp __alltraps
c0102c6c:	e9 5a 06 00 00       	jmp    c01032cb <__alltraps>

c0102c71 <vector118>:
.globl vector118
vector118:
  pushl $0
c0102c71:	6a 00                	push   $0x0
  pushl $118
c0102c73:	6a 76                	push   $0x76
  jmp __alltraps
c0102c75:	e9 51 06 00 00       	jmp    c01032cb <__alltraps>

c0102c7a <vector119>:
.globl vector119
vector119:
  pushl $0
c0102c7a:	6a 00                	push   $0x0
  pushl $119
c0102c7c:	6a 77                	push   $0x77
  jmp __alltraps
c0102c7e:	e9 48 06 00 00       	jmp    c01032cb <__alltraps>

c0102c83 <vector120>:
.globl vector120
vector120:
  pushl $0
c0102c83:	6a 00                	push   $0x0
  pushl $120
c0102c85:	6a 78                	push   $0x78
  jmp __alltraps
c0102c87:	e9 3f 06 00 00       	jmp    c01032cb <__alltraps>

c0102c8c <vector121>:
.globl vector121
vector121:
  pushl $0
c0102c8c:	6a 00                	push   $0x0
  pushl $121
c0102c8e:	6a 79                	push   $0x79
  jmp __alltraps
c0102c90:	e9 36 06 00 00       	jmp    c01032cb <__alltraps>

c0102c95 <vector122>:
.globl vector122
vector122:
  pushl $0
c0102c95:	6a 00                	push   $0x0
  pushl $122
c0102c97:	6a 7a                	push   $0x7a
  jmp __alltraps
c0102c99:	e9 2d 06 00 00       	jmp    c01032cb <__alltraps>

c0102c9e <vector123>:
.globl vector123
vector123:
  pushl $0
c0102c9e:	6a 00                	push   $0x0
  pushl $123
c0102ca0:	6a 7b                	push   $0x7b
  jmp __alltraps
c0102ca2:	e9 24 06 00 00       	jmp    c01032cb <__alltraps>

c0102ca7 <vector124>:
.globl vector124
vector124:
  pushl $0
c0102ca7:	6a 00                	push   $0x0
  pushl $124
c0102ca9:	6a 7c                	push   $0x7c
  jmp __alltraps
c0102cab:	e9 1b 06 00 00       	jmp    c01032cb <__alltraps>

c0102cb0 <vector125>:
.globl vector125
vector125:
  pushl $0
c0102cb0:	6a 00                	push   $0x0
  pushl $125
c0102cb2:	6a 7d                	push   $0x7d
  jmp __alltraps
c0102cb4:	e9 12 06 00 00       	jmp    c01032cb <__alltraps>

c0102cb9 <vector126>:
.globl vector126
vector126:
  pushl $0
c0102cb9:	6a 00                	push   $0x0
  pushl $126
c0102cbb:	6a 7e                	push   $0x7e
  jmp __alltraps
c0102cbd:	e9 09 06 00 00       	jmp    c01032cb <__alltraps>

c0102cc2 <vector127>:
.globl vector127
vector127:
  pushl $0
c0102cc2:	6a 00                	push   $0x0
  pushl $127
c0102cc4:	6a 7f                	push   $0x7f
  jmp __alltraps
c0102cc6:	e9 00 06 00 00       	jmp    c01032cb <__alltraps>

c0102ccb <vector128>:
.globl vector128
vector128:
  pushl $0
c0102ccb:	6a 00                	push   $0x0
  pushl $128
c0102ccd:	68 80 00 00 00       	push   $0x80
  jmp __alltraps
c0102cd2:	e9 f4 05 00 00       	jmp    c01032cb <__alltraps>

c0102cd7 <vector129>:
.globl vector129
vector129:
  pushl $0
c0102cd7:	6a 00                	push   $0x0
  pushl $129
c0102cd9:	68 81 00 00 00       	push   $0x81
  jmp __alltraps
c0102cde:	e9 e8 05 00 00       	jmp    c01032cb <__alltraps>

c0102ce3 <vector130>:
.globl vector130
vector130:
  pushl $0
c0102ce3:	6a 00                	push   $0x0
  pushl $130
c0102ce5:	68 82 00 00 00       	push   $0x82
  jmp __alltraps
c0102cea:	e9 dc 05 00 00       	jmp    c01032cb <__alltraps>

c0102cef <vector131>:
.globl vector131
vector131:
  pushl $0
c0102cef:	6a 00                	push   $0x0
  pushl $131
c0102cf1:	68 83 00 00 00       	push   $0x83
  jmp __alltraps
c0102cf6:	e9 d0 05 00 00       	jmp    c01032cb <__alltraps>

c0102cfb <vector132>:
.globl vector132
vector132:
  pushl $0
c0102cfb:	6a 00                	push   $0x0
  pushl $132
c0102cfd:	68 84 00 00 00       	push   $0x84
  jmp __alltraps
c0102d02:	e9 c4 05 00 00       	jmp    c01032cb <__alltraps>

c0102d07 <vector133>:
.globl vector133
vector133:
  pushl $0
c0102d07:	6a 00                	push   $0x0
  pushl $133
c0102d09:	68 85 00 00 00       	push   $0x85
  jmp __alltraps
c0102d0e:	e9 b8 05 00 00       	jmp    c01032cb <__alltraps>

c0102d13 <vector134>:
.globl vector134
vector134:
  pushl $0
c0102d13:	6a 00                	push   $0x0
  pushl $134
c0102d15:	68 86 00 00 00       	push   $0x86
  jmp __alltraps
c0102d1a:	e9 ac 05 00 00       	jmp    c01032cb <__alltraps>

c0102d1f <vector135>:
.globl vector135
vector135:
  pushl $0
c0102d1f:	6a 00                	push   $0x0
  pushl $135
c0102d21:	68 87 00 00 00       	push   $0x87
  jmp __alltraps
c0102d26:	e9 a0 05 00 00       	jmp    c01032cb <__alltraps>

c0102d2b <vector136>:
.globl vector136
vector136:
  pushl $0
c0102d2b:	6a 00                	push   $0x0
  pushl $136
c0102d2d:	68 88 00 00 00       	push   $0x88
  jmp __alltraps
c0102d32:	e9 94 05 00 00       	jmp    c01032cb <__alltraps>

c0102d37 <vector137>:
.globl vector137
vector137:
  pushl $0
c0102d37:	6a 00                	push   $0x0
  pushl $137
c0102d39:	68 89 00 00 00       	push   $0x89
  jmp __alltraps
c0102d3e:	e9 88 05 00 00       	jmp    c01032cb <__alltraps>

c0102d43 <vector138>:
.globl vector138
vector138:
  pushl $0
c0102d43:	6a 00                	push   $0x0
  pushl $138
c0102d45:	68 8a 00 00 00       	push   $0x8a
  jmp __alltraps
c0102d4a:	e9 7c 05 00 00       	jmp    c01032cb <__alltraps>

c0102d4f <vector139>:
.globl vector139
vector139:
  pushl $0
c0102d4f:	6a 00                	push   $0x0
  pushl $139
c0102d51:	68 8b 00 00 00       	push   $0x8b
  jmp __alltraps
c0102d56:	e9 70 05 00 00       	jmp    c01032cb <__alltraps>

c0102d5b <vector140>:
.globl vector140
vector140:
  pushl $0
c0102d5b:	6a 00                	push   $0x0
  pushl $140
c0102d5d:	68 8c 00 00 00       	push   $0x8c
  jmp __alltraps
c0102d62:	e9 64 05 00 00       	jmp    c01032cb <__alltraps>

c0102d67 <vector141>:
.globl vector141
vector141:
  pushl $0
c0102d67:	6a 00                	push   $0x0
  pushl $141
c0102d69:	68 8d 00 00 00       	push   $0x8d
  jmp __alltraps
c0102d6e:	e9 58 05 00 00       	jmp    c01032cb <__alltraps>

c0102d73 <vector142>:
.globl vector142
vector142:
  pushl $0
c0102d73:	6a 00                	push   $0x0
  pushl $142
c0102d75:	68 8e 00 00 00       	push   $0x8e
  jmp __alltraps
c0102d7a:	e9 4c 05 00 00       	jmp    c01032cb <__alltraps>

c0102d7f <vector143>:
.globl vector143
vector143:
  pushl $0
c0102d7f:	6a 00                	push   $0x0
  pushl $143
c0102d81:	68 8f 00 00 00       	push   $0x8f
  jmp __alltraps
c0102d86:	e9 40 05 00 00       	jmp    c01032cb <__alltraps>

c0102d8b <vector144>:
.globl vector144
vector144:
  pushl $0
c0102d8b:	6a 00                	push   $0x0
  pushl $144
c0102d8d:	68 90 00 00 00       	push   $0x90
  jmp __alltraps
c0102d92:	e9 34 05 00 00       	jmp    c01032cb <__alltraps>

c0102d97 <vector145>:
.globl vector145
vector145:
  pushl $0
c0102d97:	6a 00                	push   $0x0
  pushl $145
c0102d99:	68 91 00 00 00       	push   $0x91
  jmp __alltraps
c0102d9e:	e9 28 05 00 00       	jmp    c01032cb <__alltraps>

c0102da3 <vector146>:
.globl vector146
vector146:
  pushl $0
c0102da3:	6a 00                	push   $0x0
  pushl $146
c0102da5:	68 92 00 00 00       	push   $0x92
  jmp __alltraps
c0102daa:	e9 1c 05 00 00       	jmp    c01032cb <__alltraps>

c0102daf <vector147>:
.globl vector147
vector147:
  pushl $0
c0102daf:	6a 00                	push   $0x0
  pushl $147
c0102db1:	68 93 00 00 00       	push   $0x93
  jmp __alltraps
c0102db6:	e9 10 05 00 00       	jmp    c01032cb <__alltraps>

c0102dbb <vector148>:
.globl vector148
vector148:
  pushl $0
c0102dbb:	6a 00                	push   $0x0
  pushl $148
c0102dbd:	68 94 00 00 00       	push   $0x94
  jmp __alltraps
c0102dc2:	e9 04 05 00 00       	jmp    c01032cb <__alltraps>

c0102dc7 <vector149>:
.globl vector149
vector149:
  pushl $0
c0102dc7:	6a 00                	push   $0x0
  pushl $149
c0102dc9:	68 95 00 00 00       	push   $0x95
  jmp __alltraps
c0102dce:	e9 f8 04 00 00       	jmp    c01032cb <__alltraps>

c0102dd3 <vector150>:
.globl vector150
vector150:
  pushl $0
c0102dd3:	6a 00                	push   $0x0
  pushl $150
c0102dd5:	68 96 00 00 00       	push   $0x96
  jmp __alltraps
c0102dda:	e9 ec 04 00 00       	jmp    c01032cb <__alltraps>

c0102ddf <vector151>:
.globl vector151
vector151:
  pushl $0
c0102ddf:	6a 00                	push   $0x0
  pushl $151
c0102de1:	68 97 00 00 00       	push   $0x97
  jmp __alltraps
c0102de6:	e9 e0 04 00 00       	jmp    c01032cb <__alltraps>

c0102deb <vector152>:
.globl vector152
vector152:
  pushl $0
c0102deb:	6a 00                	push   $0x0
  pushl $152
c0102ded:	68 98 00 00 00       	push   $0x98
  jmp __alltraps
c0102df2:	e9 d4 04 00 00       	jmp    c01032cb <__alltraps>

c0102df7 <vector153>:
.globl vector153
vector153:
  pushl $0
c0102df7:	6a 00                	push   $0x0
  pushl $153
c0102df9:	68 99 00 00 00       	push   $0x99
  jmp __alltraps
c0102dfe:	e9 c8 04 00 00       	jmp    c01032cb <__alltraps>

c0102e03 <vector154>:
.globl vector154
vector154:
  pushl $0
c0102e03:	6a 00                	push   $0x0
  pushl $154
c0102e05:	68 9a 00 00 00       	push   $0x9a
  jmp __alltraps
c0102e0a:	e9 bc 04 00 00       	jmp    c01032cb <__alltraps>

c0102e0f <vector155>:
.globl vector155
vector155:
  pushl $0
c0102e0f:	6a 00                	push   $0x0
  pushl $155
c0102e11:	68 9b 00 00 00       	push   $0x9b
  jmp __alltraps
c0102e16:	e9 b0 04 00 00       	jmp    c01032cb <__alltraps>

c0102e1b <vector156>:
.globl vector156
vector156:
  pushl $0
c0102e1b:	6a 00                	push   $0x0
  pushl $156
c0102e1d:	68 9c 00 00 00       	push   $0x9c
  jmp __alltraps
c0102e22:	e9 a4 04 00 00       	jmp    c01032cb <__alltraps>

c0102e27 <vector157>:
.globl vector157
vector157:
  pushl $0
c0102e27:	6a 00                	push   $0x0
  pushl $157
c0102e29:	68 9d 00 00 00       	push   $0x9d
  jmp __alltraps
c0102e2e:	e9 98 04 00 00       	jmp    c01032cb <__alltraps>

c0102e33 <vector158>:
.globl vector158
vector158:
  pushl $0
c0102e33:	6a 00                	push   $0x0
  pushl $158
c0102e35:	68 9e 00 00 00       	push   $0x9e
  jmp __alltraps
c0102e3a:	e9 8c 04 00 00       	jmp    c01032cb <__alltraps>

c0102e3f <vector159>:
.globl vector159
vector159:
  pushl $0
c0102e3f:	6a 00                	push   $0x0
  pushl $159
c0102e41:	68 9f 00 00 00       	push   $0x9f
  jmp __alltraps
c0102e46:	e9 80 04 00 00       	jmp    c01032cb <__alltraps>

c0102e4b <vector160>:
.globl vector160
vector160:
  pushl $0
c0102e4b:	6a 00                	push   $0x0
  pushl $160
c0102e4d:	68 a0 00 00 00       	push   $0xa0
  jmp __alltraps
c0102e52:	e9 74 04 00 00       	jmp    c01032cb <__alltraps>

c0102e57 <vector161>:
.globl vector161
vector161:
  pushl $0
c0102e57:	6a 00                	push   $0x0
  pushl $161
c0102e59:	68 a1 00 00 00       	push   $0xa1
  jmp __alltraps
c0102e5e:	e9 68 04 00 00       	jmp    c01032cb <__alltraps>

c0102e63 <vector162>:
.globl vector162
vector162:
  pushl $0
c0102e63:	6a 00                	push   $0x0
  pushl $162
c0102e65:	68 a2 00 00 00       	push   $0xa2
  jmp __alltraps
c0102e6a:	e9 5c 04 00 00       	jmp    c01032cb <__alltraps>

c0102e6f <vector163>:
.globl vector163
vector163:
  pushl $0
c0102e6f:	6a 00                	push   $0x0
  pushl $163
c0102e71:	68 a3 00 00 00       	push   $0xa3
  jmp __alltraps
c0102e76:	e9 50 04 00 00       	jmp    c01032cb <__alltraps>

c0102e7b <vector164>:
.globl vector164
vector164:
  pushl $0
c0102e7b:	6a 00                	push   $0x0
  pushl $164
c0102e7d:	68 a4 00 00 00       	push   $0xa4
  jmp __alltraps
c0102e82:	e9 44 04 00 00       	jmp    c01032cb <__alltraps>

c0102e87 <vector165>:
.globl vector165
vector165:
  pushl $0
c0102e87:	6a 00                	push   $0x0
  pushl $165
c0102e89:	68 a5 00 00 00       	push   $0xa5
  jmp __alltraps
c0102e8e:	e9 38 04 00 00       	jmp    c01032cb <__alltraps>

c0102e93 <vector166>:
.globl vector166
vector166:
  pushl $0
c0102e93:	6a 00                	push   $0x0
  pushl $166
c0102e95:	68 a6 00 00 00       	push   $0xa6
  jmp __alltraps
c0102e9a:	e9 2c 04 00 00       	jmp    c01032cb <__alltraps>

c0102e9f <vector167>:
.globl vector167
vector167:
  pushl $0
c0102e9f:	6a 00                	push   $0x0
  pushl $167
c0102ea1:	68 a7 00 00 00       	push   $0xa7
  jmp __alltraps
c0102ea6:	e9 20 04 00 00       	jmp    c01032cb <__alltraps>

c0102eab <vector168>:
.globl vector168
vector168:
  pushl $0
c0102eab:	6a 00                	push   $0x0
  pushl $168
c0102ead:	68 a8 00 00 00       	push   $0xa8
  jmp __alltraps
c0102eb2:	e9 14 04 00 00       	jmp    c01032cb <__alltraps>

c0102eb7 <vector169>:
.globl vector169
vector169:
  pushl $0
c0102eb7:	6a 00                	push   $0x0
  pushl $169
c0102eb9:	68 a9 00 00 00       	push   $0xa9
  jmp __alltraps
c0102ebe:	e9 08 04 00 00       	jmp    c01032cb <__alltraps>

c0102ec3 <vector170>:
.globl vector170
vector170:
  pushl $0
c0102ec3:	6a 00                	push   $0x0
  pushl $170
c0102ec5:	68 aa 00 00 00       	push   $0xaa
  jmp __alltraps
c0102eca:	e9 fc 03 00 00       	jmp    c01032cb <__alltraps>

c0102ecf <vector171>:
.globl vector171
vector171:
  pushl $0
c0102ecf:	6a 00                	push   $0x0
  pushl $171
c0102ed1:	68 ab 00 00 00       	push   $0xab
  jmp __alltraps
c0102ed6:	e9 f0 03 00 00       	jmp    c01032cb <__alltraps>

c0102edb <vector172>:
.globl vector172
vector172:
  pushl $0
c0102edb:	6a 00                	push   $0x0
  pushl $172
c0102edd:	68 ac 00 00 00       	push   $0xac
  jmp __alltraps
c0102ee2:	e9 e4 03 00 00       	jmp    c01032cb <__alltraps>

c0102ee7 <vector173>:
.globl vector173
vector173:
  pushl $0
c0102ee7:	6a 00                	push   $0x0
  pushl $173
c0102ee9:	68 ad 00 00 00       	push   $0xad
  jmp __alltraps
c0102eee:	e9 d8 03 00 00       	jmp    c01032cb <__alltraps>

c0102ef3 <vector174>:
.globl vector174
vector174:
  pushl $0
c0102ef3:	6a 00                	push   $0x0
  pushl $174
c0102ef5:	68 ae 00 00 00       	push   $0xae
  jmp __alltraps
c0102efa:	e9 cc 03 00 00       	jmp    c01032cb <__alltraps>

c0102eff <vector175>:
.globl vector175
vector175:
  pushl $0
c0102eff:	6a 00                	push   $0x0
  pushl $175
c0102f01:	68 af 00 00 00       	push   $0xaf
  jmp __alltraps
c0102f06:	e9 c0 03 00 00       	jmp    c01032cb <__alltraps>

c0102f0b <vector176>:
.globl vector176
vector176:
  pushl $0
c0102f0b:	6a 00                	push   $0x0
  pushl $176
c0102f0d:	68 b0 00 00 00       	push   $0xb0
  jmp __alltraps
c0102f12:	e9 b4 03 00 00       	jmp    c01032cb <__alltraps>

c0102f17 <vector177>:
.globl vector177
vector177:
  pushl $0
c0102f17:	6a 00                	push   $0x0
  pushl $177
c0102f19:	68 b1 00 00 00       	push   $0xb1
  jmp __alltraps
c0102f1e:	e9 a8 03 00 00       	jmp    c01032cb <__alltraps>

c0102f23 <vector178>:
.globl vector178
vector178:
  pushl $0
c0102f23:	6a 00                	push   $0x0
  pushl $178
c0102f25:	68 b2 00 00 00       	push   $0xb2
  jmp __alltraps
c0102f2a:	e9 9c 03 00 00       	jmp    c01032cb <__alltraps>

c0102f2f <vector179>:
.globl vector179
vector179:
  pushl $0
c0102f2f:	6a 00                	push   $0x0
  pushl $179
c0102f31:	68 b3 00 00 00       	push   $0xb3
  jmp __alltraps
c0102f36:	e9 90 03 00 00       	jmp    c01032cb <__alltraps>

c0102f3b <vector180>:
.globl vector180
vector180:
  pushl $0
c0102f3b:	6a 00                	push   $0x0
  pushl $180
c0102f3d:	68 b4 00 00 00       	push   $0xb4
  jmp __alltraps
c0102f42:	e9 84 03 00 00       	jmp    c01032cb <__alltraps>

c0102f47 <vector181>:
.globl vector181
vector181:
  pushl $0
c0102f47:	6a 00                	push   $0x0
  pushl $181
c0102f49:	68 b5 00 00 00       	push   $0xb5
  jmp __alltraps
c0102f4e:	e9 78 03 00 00       	jmp    c01032cb <__alltraps>

c0102f53 <vector182>:
.globl vector182
vector182:
  pushl $0
c0102f53:	6a 00                	push   $0x0
  pushl $182
c0102f55:	68 b6 00 00 00       	push   $0xb6
  jmp __alltraps
c0102f5a:	e9 6c 03 00 00       	jmp    c01032cb <__alltraps>

c0102f5f <vector183>:
.globl vector183
vector183:
  pushl $0
c0102f5f:	6a 00                	push   $0x0
  pushl $183
c0102f61:	68 b7 00 00 00       	push   $0xb7
  jmp __alltraps
c0102f66:	e9 60 03 00 00       	jmp    c01032cb <__alltraps>

c0102f6b <vector184>:
.globl vector184
vector184:
  pushl $0
c0102f6b:	6a 00                	push   $0x0
  pushl $184
c0102f6d:	68 b8 00 00 00       	push   $0xb8
  jmp __alltraps
c0102f72:	e9 54 03 00 00       	jmp    c01032cb <__alltraps>

c0102f77 <vector185>:
.globl vector185
vector185:
  pushl $0
c0102f77:	6a 00                	push   $0x0
  pushl $185
c0102f79:	68 b9 00 00 00       	push   $0xb9
  jmp __alltraps
c0102f7e:	e9 48 03 00 00       	jmp    c01032cb <__alltraps>

c0102f83 <vector186>:
.globl vector186
vector186:
  pushl $0
c0102f83:	6a 00                	push   $0x0
  pushl $186
c0102f85:	68 ba 00 00 00       	push   $0xba
  jmp __alltraps
c0102f8a:	e9 3c 03 00 00       	jmp    c01032cb <__alltraps>

c0102f8f <vector187>:
.globl vector187
vector187:
  pushl $0
c0102f8f:	6a 00                	push   $0x0
  pushl $187
c0102f91:	68 bb 00 00 00       	push   $0xbb
  jmp __alltraps
c0102f96:	e9 30 03 00 00       	jmp    c01032cb <__alltraps>

c0102f9b <vector188>:
.globl vector188
vector188:
  pushl $0
c0102f9b:	6a 00                	push   $0x0
  pushl $188
c0102f9d:	68 bc 00 00 00       	push   $0xbc
  jmp __alltraps
c0102fa2:	e9 24 03 00 00       	jmp    c01032cb <__alltraps>

c0102fa7 <vector189>:
.globl vector189
vector189:
  pushl $0
c0102fa7:	6a 00                	push   $0x0
  pushl $189
c0102fa9:	68 bd 00 00 00       	push   $0xbd
  jmp __alltraps
c0102fae:	e9 18 03 00 00       	jmp    c01032cb <__alltraps>

c0102fb3 <vector190>:
.globl vector190
vector190:
  pushl $0
c0102fb3:	6a 00                	push   $0x0
  pushl $190
c0102fb5:	68 be 00 00 00       	push   $0xbe
  jmp __alltraps
c0102fba:	e9 0c 03 00 00       	jmp    c01032cb <__alltraps>

c0102fbf <vector191>:
.globl vector191
vector191:
  pushl $0
c0102fbf:	6a 00                	push   $0x0
  pushl $191
c0102fc1:	68 bf 00 00 00       	push   $0xbf
  jmp __alltraps
c0102fc6:	e9 00 03 00 00       	jmp    c01032cb <__alltraps>

c0102fcb <vector192>:
.globl vector192
vector192:
  pushl $0
c0102fcb:	6a 00                	push   $0x0
  pushl $192
c0102fcd:	68 c0 00 00 00       	push   $0xc0
  jmp __alltraps
c0102fd2:	e9 f4 02 00 00       	jmp    c01032cb <__alltraps>

c0102fd7 <vector193>:
.globl vector193
vector193:
  pushl $0
c0102fd7:	6a 00                	push   $0x0
  pushl $193
c0102fd9:	68 c1 00 00 00       	push   $0xc1
  jmp __alltraps
c0102fde:	e9 e8 02 00 00       	jmp    c01032cb <__alltraps>

c0102fe3 <vector194>:
.globl vector194
vector194:
  pushl $0
c0102fe3:	6a 00                	push   $0x0
  pushl $194
c0102fe5:	68 c2 00 00 00       	push   $0xc2
  jmp __alltraps
c0102fea:	e9 dc 02 00 00       	jmp    c01032cb <__alltraps>

c0102fef <vector195>:
.globl vector195
vector195:
  pushl $0
c0102fef:	6a 00                	push   $0x0
  pushl $195
c0102ff1:	68 c3 00 00 00       	push   $0xc3
  jmp __alltraps
c0102ff6:	e9 d0 02 00 00       	jmp    c01032cb <__alltraps>

c0102ffb <vector196>:
.globl vector196
vector196:
  pushl $0
c0102ffb:	6a 00                	push   $0x0
  pushl $196
c0102ffd:	68 c4 00 00 00       	push   $0xc4
  jmp __alltraps
c0103002:	e9 c4 02 00 00       	jmp    c01032cb <__alltraps>

c0103007 <vector197>:
.globl vector197
vector197:
  pushl $0
c0103007:	6a 00                	push   $0x0
  pushl $197
c0103009:	68 c5 00 00 00       	push   $0xc5
  jmp __alltraps
c010300e:	e9 b8 02 00 00       	jmp    c01032cb <__alltraps>

c0103013 <vector198>:
.globl vector198
vector198:
  pushl $0
c0103013:	6a 00                	push   $0x0
  pushl $198
c0103015:	68 c6 00 00 00       	push   $0xc6
  jmp __alltraps
c010301a:	e9 ac 02 00 00       	jmp    c01032cb <__alltraps>

c010301f <vector199>:
.globl vector199
vector199:
  pushl $0
c010301f:	6a 00                	push   $0x0
  pushl $199
c0103021:	68 c7 00 00 00       	push   $0xc7
  jmp __alltraps
c0103026:	e9 a0 02 00 00       	jmp    c01032cb <__alltraps>

c010302b <vector200>:
.globl vector200
vector200:
  pushl $0
c010302b:	6a 00                	push   $0x0
  pushl $200
c010302d:	68 c8 00 00 00       	push   $0xc8
  jmp __alltraps
c0103032:	e9 94 02 00 00       	jmp    c01032cb <__alltraps>

c0103037 <vector201>:
.globl vector201
vector201:
  pushl $0
c0103037:	6a 00                	push   $0x0
  pushl $201
c0103039:	68 c9 00 00 00       	push   $0xc9
  jmp __alltraps
c010303e:	e9 88 02 00 00       	jmp    c01032cb <__alltraps>

c0103043 <vector202>:
.globl vector202
vector202:
  pushl $0
c0103043:	6a 00                	push   $0x0
  pushl $202
c0103045:	68 ca 00 00 00       	push   $0xca
  jmp __alltraps
c010304a:	e9 7c 02 00 00       	jmp    c01032cb <__alltraps>

c010304f <vector203>:
.globl vector203
vector203:
  pushl $0
c010304f:	6a 00                	push   $0x0
  pushl $203
c0103051:	68 cb 00 00 00       	push   $0xcb
  jmp __alltraps
c0103056:	e9 70 02 00 00       	jmp    c01032cb <__alltraps>

c010305b <vector204>:
.globl vector204
vector204:
  pushl $0
c010305b:	6a 00                	push   $0x0
  pushl $204
c010305d:	68 cc 00 00 00       	push   $0xcc
  jmp __alltraps
c0103062:	e9 64 02 00 00       	jmp    c01032cb <__alltraps>

c0103067 <vector205>:
.globl vector205
vector205:
  pushl $0
c0103067:	6a 00                	push   $0x0
  pushl $205
c0103069:	68 cd 00 00 00       	push   $0xcd
  jmp __alltraps
c010306e:	e9 58 02 00 00       	jmp    c01032cb <__alltraps>

c0103073 <vector206>:
.globl vector206
vector206:
  pushl $0
c0103073:	6a 00                	push   $0x0
  pushl $206
c0103075:	68 ce 00 00 00       	push   $0xce
  jmp __alltraps
c010307a:	e9 4c 02 00 00       	jmp    c01032cb <__alltraps>

c010307f <vector207>:
.globl vector207
vector207:
  pushl $0
c010307f:	6a 00                	push   $0x0
  pushl $207
c0103081:	68 cf 00 00 00       	push   $0xcf
  jmp __alltraps
c0103086:	e9 40 02 00 00       	jmp    c01032cb <__alltraps>

c010308b <vector208>:
.globl vector208
vector208:
  pushl $0
c010308b:	6a 00                	push   $0x0
  pushl $208
c010308d:	68 d0 00 00 00       	push   $0xd0
  jmp __alltraps
c0103092:	e9 34 02 00 00       	jmp    c01032cb <__alltraps>

c0103097 <vector209>:
.globl vector209
vector209:
  pushl $0
c0103097:	6a 00                	push   $0x0
  pushl $209
c0103099:	68 d1 00 00 00       	push   $0xd1
  jmp __alltraps
c010309e:	e9 28 02 00 00       	jmp    c01032cb <__alltraps>

c01030a3 <vector210>:
.globl vector210
vector210:
  pushl $0
c01030a3:	6a 00                	push   $0x0
  pushl $210
c01030a5:	68 d2 00 00 00       	push   $0xd2
  jmp __alltraps
c01030aa:	e9 1c 02 00 00       	jmp    c01032cb <__alltraps>

c01030af <vector211>:
.globl vector211
vector211:
  pushl $0
c01030af:	6a 00                	push   $0x0
  pushl $211
c01030b1:	68 d3 00 00 00       	push   $0xd3
  jmp __alltraps
c01030b6:	e9 10 02 00 00       	jmp    c01032cb <__alltraps>

c01030bb <vector212>:
.globl vector212
vector212:
  pushl $0
c01030bb:	6a 00                	push   $0x0
  pushl $212
c01030bd:	68 d4 00 00 00       	push   $0xd4
  jmp __alltraps
c01030c2:	e9 04 02 00 00       	jmp    c01032cb <__alltraps>

c01030c7 <vector213>:
.globl vector213
vector213:
  pushl $0
c01030c7:	6a 00                	push   $0x0
  pushl $213
c01030c9:	68 d5 00 00 00       	push   $0xd5
  jmp __alltraps
c01030ce:	e9 f8 01 00 00       	jmp    c01032cb <__alltraps>

c01030d3 <vector214>:
.globl vector214
vector214:
  pushl $0
c01030d3:	6a 00                	push   $0x0
  pushl $214
c01030d5:	68 d6 00 00 00       	push   $0xd6
  jmp __alltraps
c01030da:	e9 ec 01 00 00       	jmp    c01032cb <__alltraps>

c01030df <vector215>:
.globl vector215
vector215:
  pushl $0
c01030df:	6a 00                	push   $0x0
  pushl $215
c01030e1:	68 d7 00 00 00       	push   $0xd7
  jmp __alltraps
c01030e6:	e9 e0 01 00 00       	jmp    c01032cb <__alltraps>

c01030eb <vector216>:
.globl vector216
vector216:
  pushl $0
c01030eb:	6a 00                	push   $0x0
  pushl $216
c01030ed:	68 d8 00 00 00       	push   $0xd8
  jmp __alltraps
c01030f2:	e9 d4 01 00 00       	jmp    c01032cb <__alltraps>

c01030f7 <vector217>:
.globl vector217
vector217:
  pushl $0
c01030f7:	6a 00                	push   $0x0
  pushl $217
c01030f9:	68 d9 00 00 00       	push   $0xd9
  jmp __alltraps
c01030fe:	e9 c8 01 00 00       	jmp    c01032cb <__alltraps>

c0103103 <vector218>:
.globl vector218
vector218:
  pushl $0
c0103103:	6a 00                	push   $0x0
  pushl $218
c0103105:	68 da 00 00 00       	push   $0xda
  jmp __alltraps
c010310a:	e9 bc 01 00 00       	jmp    c01032cb <__alltraps>

c010310f <vector219>:
.globl vector219
vector219:
  pushl $0
c010310f:	6a 00                	push   $0x0
  pushl $219
c0103111:	68 db 00 00 00       	push   $0xdb
  jmp __alltraps
c0103116:	e9 b0 01 00 00       	jmp    c01032cb <__alltraps>

c010311b <vector220>:
.globl vector220
vector220:
  pushl $0
c010311b:	6a 00                	push   $0x0
  pushl $220
c010311d:	68 dc 00 00 00       	push   $0xdc
  jmp __alltraps
c0103122:	e9 a4 01 00 00       	jmp    c01032cb <__alltraps>

c0103127 <vector221>:
.globl vector221
vector221:
  pushl $0
c0103127:	6a 00                	push   $0x0
  pushl $221
c0103129:	68 dd 00 00 00       	push   $0xdd
  jmp __alltraps
c010312e:	e9 98 01 00 00       	jmp    c01032cb <__alltraps>

c0103133 <vector222>:
.globl vector222
vector222:
  pushl $0
c0103133:	6a 00                	push   $0x0
  pushl $222
c0103135:	68 de 00 00 00       	push   $0xde
  jmp __alltraps
c010313a:	e9 8c 01 00 00       	jmp    c01032cb <__alltraps>

c010313f <vector223>:
.globl vector223
vector223:
  pushl $0
c010313f:	6a 00                	push   $0x0
  pushl $223
c0103141:	68 df 00 00 00       	push   $0xdf
  jmp __alltraps
c0103146:	e9 80 01 00 00       	jmp    c01032cb <__alltraps>

c010314b <vector224>:
.globl vector224
vector224:
  pushl $0
c010314b:	6a 00                	push   $0x0
  pushl $224
c010314d:	68 e0 00 00 00       	push   $0xe0
  jmp __alltraps
c0103152:	e9 74 01 00 00       	jmp    c01032cb <__alltraps>

c0103157 <vector225>:
.globl vector225
vector225:
  pushl $0
c0103157:	6a 00                	push   $0x0
  pushl $225
c0103159:	68 e1 00 00 00       	push   $0xe1
  jmp __alltraps
c010315e:	e9 68 01 00 00       	jmp    c01032cb <__alltraps>

c0103163 <vector226>:
.globl vector226
vector226:
  pushl $0
c0103163:	6a 00                	push   $0x0
  pushl $226
c0103165:	68 e2 00 00 00       	push   $0xe2
  jmp __alltraps
c010316a:	e9 5c 01 00 00       	jmp    c01032cb <__alltraps>

c010316f <vector227>:
.globl vector227
vector227:
  pushl $0
c010316f:	6a 00                	push   $0x0
  pushl $227
c0103171:	68 e3 00 00 00       	push   $0xe3
  jmp __alltraps
c0103176:	e9 50 01 00 00       	jmp    c01032cb <__alltraps>

c010317b <vector228>:
.globl vector228
vector228:
  pushl $0
c010317b:	6a 00                	push   $0x0
  pushl $228
c010317d:	68 e4 00 00 00       	push   $0xe4
  jmp __alltraps
c0103182:	e9 44 01 00 00       	jmp    c01032cb <__alltraps>

c0103187 <vector229>:
.globl vector229
vector229:
  pushl $0
c0103187:	6a 00                	push   $0x0
  pushl $229
c0103189:	68 e5 00 00 00       	push   $0xe5
  jmp __alltraps
c010318e:	e9 38 01 00 00       	jmp    c01032cb <__alltraps>

c0103193 <vector230>:
.globl vector230
vector230:
  pushl $0
c0103193:	6a 00                	push   $0x0
  pushl $230
c0103195:	68 e6 00 00 00       	push   $0xe6
  jmp __alltraps
c010319a:	e9 2c 01 00 00       	jmp    c01032cb <__alltraps>

c010319f <vector231>:
.globl vector231
vector231:
  pushl $0
c010319f:	6a 00                	push   $0x0
  pushl $231
c01031a1:	68 e7 00 00 00       	push   $0xe7
  jmp __alltraps
c01031a6:	e9 20 01 00 00       	jmp    c01032cb <__alltraps>

c01031ab <vector232>:
.globl vector232
vector232:
  pushl $0
c01031ab:	6a 00                	push   $0x0
  pushl $232
c01031ad:	68 e8 00 00 00       	push   $0xe8
  jmp __alltraps
c01031b2:	e9 14 01 00 00       	jmp    c01032cb <__alltraps>

c01031b7 <vector233>:
.globl vector233
vector233:
  pushl $0
c01031b7:	6a 00                	push   $0x0
  pushl $233
c01031b9:	68 e9 00 00 00       	push   $0xe9
  jmp __alltraps
c01031be:	e9 08 01 00 00       	jmp    c01032cb <__alltraps>

c01031c3 <vector234>:
.globl vector234
vector234:
  pushl $0
c01031c3:	6a 00                	push   $0x0
  pushl $234
c01031c5:	68 ea 00 00 00       	push   $0xea
  jmp __alltraps
c01031ca:	e9 fc 00 00 00       	jmp    c01032cb <__alltraps>

c01031cf <vector235>:
.globl vector235
vector235:
  pushl $0
c01031cf:	6a 00                	push   $0x0
  pushl $235
c01031d1:	68 eb 00 00 00       	push   $0xeb
  jmp __alltraps
c01031d6:	e9 f0 00 00 00       	jmp    c01032cb <__alltraps>

c01031db <vector236>:
.globl vector236
vector236:
  pushl $0
c01031db:	6a 00                	push   $0x0
  pushl $236
c01031dd:	68 ec 00 00 00       	push   $0xec
  jmp __alltraps
c01031e2:	e9 e4 00 00 00       	jmp    c01032cb <__alltraps>

c01031e7 <vector237>:
.globl vector237
vector237:
  pushl $0
c01031e7:	6a 00                	push   $0x0
  pushl $237
c01031e9:	68 ed 00 00 00       	push   $0xed
  jmp __alltraps
c01031ee:	e9 d8 00 00 00       	jmp    c01032cb <__alltraps>

c01031f3 <vector238>:
.globl vector238
vector238:
  pushl $0
c01031f3:	6a 00                	push   $0x0
  pushl $238
c01031f5:	68 ee 00 00 00       	push   $0xee
  jmp __alltraps
c01031fa:	e9 cc 00 00 00       	jmp    c01032cb <__alltraps>

c01031ff <vector239>:
.globl vector239
vector239:
  pushl $0
c01031ff:	6a 00                	push   $0x0
  pushl $239
c0103201:	68 ef 00 00 00       	push   $0xef
  jmp __alltraps
c0103206:	e9 c0 00 00 00       	jmp    c01032cb <__alltraps>

c010320b <vector240>:
.globl vector240
vector240:
  pushl $0
c010320b:	6a 00                	push   $0x0
  pushl $240
c010320d:	68 f0 00 00 00       	push   $0xf0
  jmp __alltraps
c0103212:	e9 b4 00 00 00       	jmp    c01032cb <__alltraps>

c0103217 <vector241>:
.globl vector241
vector241:
  pushl $0
c0103217:	6a 00                	push   $0x0
  pushl $241
c0103219:	68 f1 00 00 00       	push   $0xf1
  jmp __alltraps
c010321e:	e9 a8 00 00 00       	jmp    c01032cb <__alltraps>

c0103223 <vector242>:
.globl vector242
vector242:
  pushl $0
c0103223:	6a 00                	push   $0x0
  pushl $242
c0103225:	68 f2 00 00 00       	push   $0xf2
  jmp __alltraps
c010322a:	e9 9c 00 00 00       	jmp    c01032cb <__alltraps>

c010322f <vector243>:
.globl vector243
vector243:
  pushl $0
c010322f:	6a 00                	push   $0x0
  pushl $243
c0103231:	68 f3 00 00 00       	push   $0xf3
  jmp __alltraps
c0103236:	e9 90 00 00 00       	jmp    c01032cb <__alltraps>

c010323b <vector244>:
.globl vector244
vector244:
  pushl $0
c010323b:	6a 00                	push   $0x0
  pushl $244
c010323d:	68 f4 00 00 00       	push   $0xf4
  jmp __alltraps
c0103242:	e9 84 00 00 00       	jmp    c01032cb <__alltraps>

c0103247 <vector245>:
.globl vector245
vector245:
  pushl $0
c0103247:	6a 00                	push   $0x0
  pushl $245
c0103249:	68 f5 00 00 00       	push   $0xf5
  jmp __alltraps
c010324e:	e9 78 00 00 00       	jmp    c01032cb <__alltraps>

c0103253 <vector246>:
.globl vector246
vector246:
  pushl $0
c0103253:	6a 00                	push   $0x0
  pushl $246
c0103255:	68 f6 00 00 00       	push   $0xf6
  jmp __alltraps
c010325a:	e9 6c 00 00 00       	jmp    c01032cb <__alltraps>

c010325f <vector247>:
.globl vector247
vector247:
  pushl $0
c010325f:	6a 00                	push   $0x0
  pushl $247
c0103261:	68 f7 00 00 00       	push   $0xf7
  jmp __alltraps
c0103266:	e9 60 00 00 00       	jmp    c01032cb <__alltraps>

c010326b <vector248>:
.globl vector248
vector248:
  pushl $0
c010326b:	6a 00                	push   $0x0
  pushl $248
c010326d:	68 f8 00 00 00       	push   $0xf8
  jmp __alltraps
c0103272:	e9 54 00 00 00       	jmp    c01032cb <__alltraps>

c0103277 <vector249>:
.globl vector249
vector249:
  pushl $0
c0103277:	6a 00                	push   $0x0
  pushl $249
c0103279:	68 f9 00 00 00       	push   $0xf9
  jmp __alltraps
c010327e:	e9 48 00 00 00       	jmp    c01032cb <__alltraps>

c0103283 <vector250>:
.globl vector250
vector250:
  pushl $0
c0103283:	6a 00                	push   $0x0
  pushl $250
c0103285:	68 fa 00 00 00       	push   $0xfa
  jmp __alltraps
c010328a:	e9 3c 00 00 00       	jmp    c01032cb <__alltraps>

c010328f <vector251>:
.globl vector251
vector251:
  pushl $0
c010328f:	6a 00                	push   $0x0
  pushl $251
c0103291:	68 fb 00 00 00       	push   $0xfb
  jmp __alltraps
c0103296:	e9 30 00 00 00       	jmp    c01032cb <__alltraps>

c010329b <vector252>:
.globl vector252
vector252:
  pushl $0
c010329b:	6a 00                	push   $0x0
  pushl $252
c010329d:	68 fc 00 00 00       	push   $0xfc
  jmp __alltraps
c01032a2:	e9 24 00 00 00       	jmp    c01032cb <__alltraps>

c01032a7 <vector253>:
.globl vector253
vector253:
  pushl $0
c01032a7:	6a 00                	push   $0x0
  pushl $253
c01032a9:	68 fd 00 00 00       	push   $0xfd
  jmp __alltraps
c01032ae:	e9 18 00 00 00       	jmp    c01032cb <__alltraps>

c01032b3 <vector254>:
.globl vector254
vector254:
  pushl $0
c01032b3:	6a 00                	push   $0x0
  pushl $254
c01032b5:	68 fe 00 00 00       	push   $0xfe
  jmp __alltraps
c01032ba:	e9 0c 00 00 00       	jmp    c01032cb <__alltraps>

c01032bf <vector255>:
.globl vector255
vector255:
  pushl $0
c01032bf:	6a 00                	push   $0x0
  pushl $255
c01032c1:	68 ff 00 00 00       	push   $0xff
  jmp __alltraps
c01032c6:	e9 00 00 00 00       	jmp    c01032cb <__alltraps>

c01032cb <__alltraps>:
.text
.globl __alltraps
__alltraps:
    # push registers to build a trap frame
    # therefore make the stack look like a struct trapframe
    pushl %ds
c01032cb:	1e                   	push   %ds
    pushl %es
c01032cc:	06                   	push   %es
    pushl %fs
c01032cd:	0f a0                	push   %fs
    pushl %gs
c01032cf:	0f a8                	push   %gs
    pushal
c01032d1:	60                   	pusha  

    # load GD_KDATA into %ds and %es to set up data segments for kernel
    movl $GD_KDATA, %eax
c01032d2:	b8 10 00 00 00       	mov    $0x10,%eax
    movw %ax, %ds
c01032d7:	8e d8                	mov    %eax,%ds
    movw %ax, %es
c01032d9:	8e c0                	mov    %eax,%es

    # push %esp to pass a pointer to the trapframe as an argument to trap()
    pushl %esp
c01032db:	54                   	push   %esp

    # call trap(tf), where tf=%esp
    call trap
c01032dc:	e8 e3 f4 ff ff       	call   c01027c4 <trap>

    # pop the pushed stack pointer
    popl %esp
c01032e1:	5c                   	pop    %esp

c01032e2 <__trapret>:

    # return falls through to trapret...
.globl __trapret
__trapret:
    # restore registers from stack
    popal
c01032e2:	61                   	popa   

    # restore %ds, %es, %fs and %gs
    popl %gs
c01032e3:	0f a9                	pop    %gs
    popl %fs
c01032e5:	0f a1                	pop    %fs
    popl %es
c01032e7:	07                   	pop    %es
    popl %ds
c01032e8:	1f                   	pop    %ds

    # get rid of the trap number and error code
    addl $0x8, %esp
c01032e9:	83 c4 08             	add    $0x8,%esp
    iret
c01032ec:	cf                   	iret   

c01032ed <forkrets>:

.globl forkrets
forkrets:
    # set stack to this new process's trapframe
    movl 4(%esp), %esp
c01032ed:	8b 64 24 04          	mov    0x4(%esp),%esp
    jmp __trapret
c01032f1:	eb ef                	jmp    c01032e2 <__trapret>

c01032f3 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c01032f3:	55                   	push   %ebp
c01032f4:	89 e5                	mov    %esp,%ebp
    return page - pages;
c01032f6:	8b 45 08             	mov    0x8(%ebp),%eax
c01032f9:	8b 15 0c 21 15 c0    	mov    0xc015210c,%edx
c01032ff:	29 d0                	sub    %edx,%eax
c0103301:	c1 f8 05             	sar    $0x5,%eax
}
c0103304:	5d                   	pop    %ebp
c0103305:	c3                   	ret    

c0103306 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c0103306:	55                   	push   %ebp
c0103307:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c0103309:	ff 75 08             	pushl  0x8(%ebp)
c010330c:	e8 e2 ff ff ff       	call   c01032f3 <page2ppn>
c0103311:	83 c4 04             	add    $0x4,%esp
c0103314:	c1 e0 0c             	shl    $0xc,%eax
}
c0103317:	c9                   	leave  
c0103318:	c3                   	ret    

c0103319 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c0103319:	55                   	push   %ebp
c010331a:	89 e5                	mov    %esp,%ebp
c010331c:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010331f:	8b 45 08             	mov    0x8(%ebp),%eax
c0103322:	c1 e8 0c             	shr    $0xc,%eax
c0103325:	89 c2                	mov    %eax,%edx
c0103327:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010332c:	39 c2                	cmp    %eax,%edx
c010332e:	72 14                	jb     c0103344 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0103330:	83 ec 04             	sub    $0x4,%esp
c0103333:	68 d0 35 11 c0       	push   $0xc01135d0
c0103338:	6a 5e                	push   $0x5e
c010333a:	68 ef 35 11 c0       	push   $0xc01135ef
c010333f:	e8 a1 d1 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0103344:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c0103349:	8b 55 08             	mov    0x8(%ebp),%edx
c010334c:	c1 ea 0c             	shr    $0xc,%edx
c010334f:	c1 e2 05             	shl    $0x5,%edx
c0103352:	01 d0                	add    %edx,%eax
}
c0103354:	c9                   	leave  
c0103355:	c3                   	ret    

c0103356 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c0103356:	55                   	push   %ebp
c0103357:	89 e5                	mov    %esp,%ebp
c0103359:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010335c:	ff 75 08             	pushl  0x8(%ebp)
c010335f:	e8 a2 ff ff ff       	call   c0103306 <page2pa>
c0103364:	83 c4 04             	add    $0x4,%esp
c0103367:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010336a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010336d:	c1 e8 0c             	shr    $0xc,%eax
c0103370:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103373:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0103378:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010337b:	72 14                	jb     c0103391 <page2kva+0x3b>
c010337d:	ff 75 f4             	pushl  -0xc(%ebp)
c0103380:	68 00 36 11 c0       	push   $0xc0113600
c0103385:	6a 65                	push   $0x65
c0103387:	68 ef 35 11 c0       	push   $0xc01135ef
c010338c:	e8 54 d1 ff ff       	call   c01004e5 <__panic>
c0103391:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103394:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c0103399:	c9                   	leave  
c010339a:	c3                   	ret    

c010339b <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c010339b:	55                   	push   %ebp
c010339c:	89 e5                	mov    %esp,%ebp
c010339e:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c01033a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01033a4:	83 e0 01             	and    $0x1,%eax
c01033a7:	85 c0                	test   %eax,%eax
c01033a9:	75 14                	jne    c01033bf <pte2page+0x24>
        panic("pte2page called with invalid pte");
c01033ab:	83 ec 04             	sub    $0x4,%esp
c01033ae:	68 24 36 11 c0       	push   $0xc0113624
c01033b3:	6a 70                	push   $0x70
c01033b5:	68 ef 35 11 c0       	push   $0xc01135ef
c01033ba:	e8 26 d1 ff ff       	call   c01004e5 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c01033bf:	8b 45 08             	mov    0x8(%ebp),%eax
c01033c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01033c7:	83 ec 0c             	sub    $0xc,%esp
c01033ca:	50                   	push   %eax
c01033cb:	e8 49 ff ff ff       	call   c0103319 <pa2page>
c01033d0:	83 c4 10             	add    $0x10,%esp
}
c01033d3:	c9                   	leave  
c01033d4:	c3                   	ret    

c01033d5 <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c01033d5:	55                   	push   %ebp
c01033d6:	89 e5                	mov    %esp,%ebp
c01033d8:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c01033db:	8b 45 08             	mov    0x8(%ebp),%eax
c01033de:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01033e3:	83 ec 0c             	sub    $0xc,%esp
c01033e6:	50                   	push   %eax
c01033e7:	e8 2d ff ff ff       	call   c0103319 <pa2page>
c01033ec:	83 c4 10             	add    $0x10,%esp
}
c01033ef:	c9                   	leave  
c01033f0:	c3                   	ret    

c01033f1 <page_ref>:

static inline int
page_ref(struct Page *page) {
c01033f1:	55                   	push   %ebp
c01033f2:	89 e5                	mov    %esp,%ebp
    return page->ref;
c01033f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01033f7:	8b 00                	mov    (%eax),%eax
}
c01033f9:	5d                   	pop    %ebp
c01033fa:	c3                   	ret    

c01033fb <page_ref_inc>:
set_page_ref(struct Page *page, int val) {
    page->ref = val;
}

static inline int
page_ref_inc(struct Page *page) {
c01033fb:	55                   	push   %ebp
c01033fc:	89 e5                	mov    %esp,%ebp
    page->ref += 1;
c01033fe:	8b 45 08             	mov    0x8(%ebp),%eax
c0103401:	8b 00                	mov    (%eax),%eax
c0103403:	8d 50 01             	lea    0x1(%eax),%edx
c0103406:	8b 45 08             	mov    0x8(%ebp),%eax
c0103409:	89 10                	mov    %edx,(%eax)
    return page->ref;
c010340b:	8b 45 08             	mov    0x8(%ebp),%eax
c010340e:	8b 00                	mov    (%eax),%eax
}
c0103410:	5d                   	pop    %ebp
c0103411:	c3                   	ret    

c0103412 <page_ref_dec>:

static inline int
page_ref_dec(struct Page *page) {
c0103412:	55                   	push   %ebp
c0103413:	89 e5                	mov    %esp,%ebp
    page->ref -= 1;
c0103415:	8b 45 08             	mov    0x8(%ebp),%eax
c0103418:	8b 00                	mov    (%eax),%eax
c010341a:	8d 50 ff             	lea    -0x1(%eax),%edx
c010341d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103420:	89 10                	mov    %edx,(%eax)
    return page->ref;
c0103422:	8b 45 08             	mov    0x8(%ebp),%eax
c0103425:	8b 00                	mov    (%eax),%eax
}
c0103427:	5d                   	pop    %ebp
c0103428:	c3                   	ret    

c0103429 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0103429:	55                   	push   %ebp
c010342a:	89 e5                	mov    %esp,%ebp
c010342c:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010342f:	9c                   	pushf  
c0103430:	58                   	pop    %eax
c0103431:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0103434:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0103437:	25 00 02 00 00       	and    $0x200,%eax
c010343c:	85 c0                	test   %eax,%eax
c010343e:	74 0c                	je     c010344c <__intr_save+0x23>
        intr_disable();
c0103440:	e8 a3 ed ff ff       	call   c01021e8 <intr_disable>
        return 1;
c0103445:	b8 01 00 00 00       	mov    $0x1,%eax
c010344a:	eb 05                	jmp    c0103451 <__intr_save+0x28>
    }
    return 0;
c010344c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103451:	c9                   	leave  
c0103452:	c3                   	ret    

c0103453 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0103453:	55                   	push   %ebp
c0103454:	89 e5                	mov    %esp,%ebp
c0103456:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0103459:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010345d:	74 05                	je     c0103464 <__intr_restore+0x11>
        intr_enable();
c010345f:	e8 7d ed ff ff       	call   c01021e1 <intr_enable>
    }
}
c0103464:	90                   	nop
c0103465:	c9                   	leave  
c0103466:	c3                   	ret    

c0103467 <lgdt>:
/* *
 * lgdt - load the global descriptor table register and reset the
 * data/code segement registers for kernel.
 * */
static inline void
lgdt(struct pseudodesc *pd) {
c0103467:	55                   	push   %ebp
c0103468:	89 e5                	mov    %esp,%ebp
    asm volatile ("lgdt (%0)" :: "r" (pd));
c010346a:	8b 45 08             	mov    0x8(%ebp),%eax
c010346d:	0f 01 10             	lgdtl  (%eax)
    asm volatile ("movw %%ax, %%gs" :: "a" (USER_DS));
c0103470:	b8 23 00 00 00       	mov    $0x23,%eax
c0103475:	8e e8                	mov    %eax,%gs
    asm volatile ("movw %%ax, %%fs" :: "a" (USER_DS));
c0103477:	b8 23 00 00 00       	mov    $0x23,%eax
c010347c:	8e e0                	mov    %eax,%fs
    asm volatile ("movw %%ax, %%es" :: "a" (KERNEL_DS));
c010347e:	b8 10 00 00 00       	mov    $0x10,%eax
c0103483:	8e c0                	mov    %eax,%es
    asm volatile ("movw %%ax, %%ds" :: "a" (KERNEL_DS));
c0103485:	b8 10 00 00 00       	mov    $0x10,%eax
c010348a:	8e d8                	mov    %eax,%ds
    asm volatile ("movw %%ax, %%ss" :: "a" (KERNEL_DS));
c010348c:	b8 10 00 00 00       	mov    $0x10,%eax
c0103491:	8e d0                	mov    %eax,%ss
    // reload cs
    asm volatile ("ljmp %0, $1f\n 1:\n" :: "i" (KERNEL_CS));
c0103493:	ea 9a 34 10 c0 08 00 	ljmp   $0x8,$0xc010349a
}
c010349a:	90                   	nop
c010349b:	5d                   	pop    %ebp
c010349c:	c3                   	ret    

c010349d <load_esp0>:
 * load_esp0 - change the ESP0 in default task state segment,
 * so that we can use different kernel stack when we trap frame
 * user to kernel.
 * */
void
load_esp0(uintptr_t esp0) {
c010349d:	55                   	push   %ebp
c010349e:	89 e5                	mov    %esp,%ebp
    ts.ts_esp0 = esp0;
c01034a0:	8b 45 08             	mov    0x8(%ebp),%eax
c01034a3:	a3 a4 ef 14 c0       	mov    %eax,0xc014efa4
}
c01034a8:	90                   	nop
c01034a9:	5d                   	pop    %ebp
c01034aa:	c3                   	ret    

c01034ab <gdt_init>:

/* gdt_init - initialize the default GDT and TSS */
static void
gdt_init(void) {
c01034ab:	55                   	push   %ebp
c01034ac:	89 e5                	mov    %esp,%ebp
c01034ae:	83 ec 10             	sub    $0x10,%esp
    // set boot kernel stack and default SS0
    load_esp0((uintptr_t)bootstacktop);
c01034b1:	b8 00 b0 14 c0       	mov    $0xc014b000,%eax
c01034b6:	50                   	push   %eax
c01034b7:	e8 e1 ff ff ff       	call   c010349d <load_esp0>
c01034bc:	83 c4 04             	add    $0x4,%esp
    ts.ts_ss0 = KERNEL_DS;
c01034bf:	66 c7 05 a8 ef 14 c0 	movw   $0x10,0xc014efa8
c01034c6:	10 00 

    // initialize the TSS filed of the gdt
    gdt[SEG_TSS] = SEGTSS(STS_T32A, (uintptr_t)&ts, sizeof(ts), DPL_KERNEL);
c01034c8:	66 c7 05 28 ba 14 c0 	movw   $0x68,0xc014ba28
c01034cf:	68 00 
c01034d1:	b8 a0 ef 14 c0       	mov    $0xc014efa0,%eax
c01034d6:	66 a3 2a ba 14 c0    	mov    %ax,0xc014ba2a
c01034dc:	b8 a0 ef 14 c0       	mov    $0xc014efa0,%eax
c01034e1:	c1 e8 10             	shr    $0x10,%eax
c01034e4:	a2 2c ba 14 c0       	mov    %al,0xc014ba2c
c01034e9:	0f b6 05 2d ba 14 c0 	movzbl 0xc014ba2d,%eax
c01034f0:	83 e0 f0             	and    $0xfffffff0,%eax
c01034f3:	83 c8 09             	or     $0x9,%eax
c01034f6:	a2 2d ba 14 c0       	mov    %al,0xc014ba2d
c01034fb:	0f b6 05 2d ba 14 c0 	movzbl 0xc014ba2d,%eax
c0103502:	83 e0 ef             	and    $0xffffffef,%eax
c0103505:	a2 2d ba 14 c0       	mov    %al,0xc014ba2d
c010350a:	0f b6 05 2d ba 14 c0 	movzbl 0xc014ba2d,%eax
c0103511:	83 e0 9f             	and    $0xffffff9f,%eax
c0103514:	a2 2d ba 14 c0       	mov    %al,0xc014ba2d
c0103519:	0f b6 05 2d ba 14 c0 	movzbl 0xc014ba2d,%eax
c0103520:	83 c8 80             	or     $0xffffff80,%eax
c0103523:	a2 2d ba 14 c0       	mov    %al,0xc014ba2d
c0103528:	0f b6 05 2e ba 14 c0 	movzbl 0xc014ba2e,%eax
c010352f:	83 e0 f0             	and    $0xfffffff0,%eax
c0103532:	a2 2e ba 14 c0       	mov    %al,0xc014ba2e
c0103537:	0f b6 05 2e ba 14 c0 	movzbl 0xc014ba2e,%eax
c010353e:	83 e0 ef             	and    $0xffffffef,%eax
c0103541:	a2 2e ba 14 c0       	mov    %al,0xc014ba2e
c0103546:	0f b6 05 2e ba 14 c0 	movzbl 0xc014ba2e,%eax
c010354d:	83 e0 df             	and    $0xffffffdf,%eax
c0103550:	a2 2e ba 14 c0       	mov    %al,0xc014ba2e
c0103555:	0f b6 05 2e ba 14 c0 	movzbl 0xc014ba2e,%eax
c010355c:	83 c8 40             	or     $0x40,%eax
c010355f:	a2 2e ba 14 c0       	mov    %al,0xc014ba2e
c0103564:	0f b6 05 2e ba 14 c0 	movzbl 0xc014ba2e,%eax
c010356b:	83 e0 7f             	and    $0x7f,%eax
c010356e:	a2 2e ba 14 c0       	mov    %al,0xc014ba2e
c0103573:	b8 a0 ef 14 c0       	mov    $0xc014efa0,%eax
c0103578:	c1 e8 18             	shr    $0x18,%eax
c010357b:	a2 2f ba 14 c0       	mov    %al,0xc014ba2f

    // reload all segment registers
    lgdt(&gdt_pd);
c0103580:	68 30 ba 14 c0       	push   $0xc014ba30
c0103585:	e8 dd fe ff ff       	call   c0103467 <lgdt>
c010358a:	83 c4 04             	add    $0x4,%esp
c010358d:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
    asm volatile ("cli" ::: "memory");
}

static inline void
ltr(uint16_t sel) {
    asm volatile ("ltr %0" :: "r" (sel) : "memory");
c0103593:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
c0103597:	0f 00 d8             	ltr    %ax

    // load the TSS
    ltr(GD_TSS);
}
c010359a:	90                   	nop
c010359b:	c9                   	leave  
c010359c:	c3                   	ret    

c010359d <init_pmm_manager>:

//init_pmm_manager - initialize a pmm_manager instance
static void
init_pmm_manager(void) {
c010359d:	55                   	push   %ebp
c010359e:	89 e5                	mov    %esp,%ebp
c01035a0:	83 ec 08             	sub    $0x8,%esp
    pmm_manager = &default_pmm_manager;
c01035a3:	c7 05 04 21 15 c0 60 	movl   $0xc0114b60,0xc0152104
c01035aa:	4b 11 c0 
    cprintf("memory management: %s\n", pmm_manager->name);
c01035ad:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c01035b2:	8b 00                	mov    (%eax),%eax
c01035b4:	83 ec 08             	sub    $0x8,%esp
c01035b7:	50                   	push   %eax
c01035b8:	68 50 36 11 c0       	push   $0xc0113650
c01035bd:	e8 bd cd ff ff       	call   c010037f <cprintf>
c01035c2:	83 c4 10             	add    $0x10,%esp
    pmm_manager->init();
c01035c5:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c01035ca:	8b 40 04             	mov    0x4(%eax),%eax
c01035cd:	ff d0                	call   *%eax
}
c01035cf:	90                   	nop
c01035d0:	c9                   	leave  
c01035d1:	c3                   	ret    

c01035d2 <init_memmap>:

//init_memmap - call pmm->init_memmap to build Page struct for free memory  
static void
init_memmap(struct Page *base, size_t n) {
c01035d2:	55                   	push   %ebp
c01035d3:	89 e5                	mov    %esp,%ebp
c01035d5:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->init_memmap(base, n);
c01035d8:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c01035dd:	8b 40 08             	mov    0x8(%eax),%eax
c01035e0:	83 ec 08             	sub    $0x8,%esp
c01035e3:	ff 75 0c             	pushl  0xc(%ebp)
c01035e6:	ff 75 08             	pushl  0x8(%ebp)
c01035e9:	ff d0                	call   *%eax
c01035eb:	83 c4 10             	add    $0x10,%esp
}
c01035ee:	90                   	nop
c01035ef:	c9                   	leave  
c01035f0:	c3                   	ret    

c01035f1 <alloc_pages>:

//alloc_pages - call pmm->alloc_pages to allocate a continuous n*PAGESIZE memory 
struct Page *
alloc_pages(size_t n) {
c01035f1:	55                   	push   %ebp
c01035f2:	89 e5                	mov    %esp,%ebp
c01035f4:	83 ec 18             	sub    $0x18,%esp
    struct Page *page=NULL;
c01035f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    
    while (1)
    {
         local_intr_save(intr_flag);
c01035fe:	e8 26 fe ff ff       	call   c0103429 <__intr_save>
c0103603:	89 45 f0             	mov    %eax,-0x10(%ebp)
         {
              page = pmm_manager->alloc_pages(n);
c0103606:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c010360b:	8b 40 0c             	mov    0xc(%eax),%eax
c010360e:	83 ec 0c             	sub    $0xc,%esp
c0103611:	ff 75 08             	pushl  0x8(%ebp)
c0103614:	ff d0                	call   *%eax
c0103616:	83 c4 10             	add    $0x10,%esp
c0103619:	89 45 f4             	mov    %eax,-0xc(%ebp)
         }
         local_intr_restore(intr_flag);
c010361c:	83 ec 0c             	sub    $0xc,%esp
c010361f:	ff 75 f0             	pushl  -0x10(%ebp)
c0103622:	e8 2c fe ff ff       	call   c0103453 <__intr_restore>
c0103627:	83 c4 10             	add    $0x10,%esp

         if (page != NULL || n > 1 || swap_init_ok == 0) break;
c010362a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010362e:	75 28                	jne    c0103658 <alloc_pages+0x67>
c0103630:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
c0103634:	77 22                	ja     c0103658 <alloc_pages+0x67>
c0103636:	a1 10 f0 14 c0       	mov    0xc014f010,%eax
c010363b:	85 c0                	test   %eax,%eax
c010363d:	74 19                	je     c0103658 <alloc_pages+0x67>
         
         extern struct mm_struct *check_mm_struct;
         //cprintf("page %x, call swap_out in alloc_pages %d\n",page, n);
         swap_out(check_mm_struct, n, 0);
c010363f:	8b 55 08             	mov    0x8(%ebp),%edx
c0103642:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c0103647:	83 ec 04             	sub    $0x4,%esp
c010364a:	6a 00                	push   $0x0
c010364c:	52                   	push   %edx
c010364d:	50                   	push   %eax
c010364e:	e8 9c 28 00 00       	call   c0105eef <swap_out>
c0103653:	83 c4 10             	add    $0x10,%esp
    }
c0103656:	eb a6                	jmp    c01035fe <alloc_pages+0xd>
    //cprintf("n %d,get page %x, No %d in alloc_pages\n",n,page,(page-pages));
    return page;
c0103658:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010365b:	c9                   	leave  
c010365c:	c3                   	ret    

c010365d <free_pages>:

//free_pages - call pmm->free_pages to free a continuous n*PAGESIZE memory 
void
free_pages(struct Page *base, size_t n) {
c010365d:	55                   	push   %ebp
c010365e:	89 e5                	mov    %esp,%ebp
c0103660:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0103663:	e8 c1 fd ff ff       	call   c0103429 <__intr_save>
c0103668:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        pmm_manager->free_pages(base, n);
c010366b:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c0103670:	8b 40 10             	mov    0x10(%eax),%eax
c0103673:	83 ec 08             	sub    $0x8,%esp
c0103676:	ff 75 0c             	pushl  0xc(%ebp)
c0103679:	ff 75 08             	pushl  0x8(%ebp)
c010367c:	ff d0                	call   *%eax
c010367e:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c0103681:	83 ec 0c             	sub    $0xc,%esp
c0103684:	ff 75 f4             	pushl  -0xc(%ebp)
c0103687:	e8 c7 fd ff ff       	call   c0103453 <__intr_restore>
c010368c:	83 c4 10             	add    $0x10,%esp
}
c010368f:	90                   	nop
c0103690:	c9                   	leave  
c0103691:	c3                   	ret    

c0103692 <nr_free_pages>:

//nr_free_pages - call pmm->nr_free_pages to get the size (nr*PAGESIZE) 
//of current free memory
size_t
nr_free_pages(void) {
c0103692:	55                   	push   %ebp
c0103693:	89 e5                	mov    %esp,%ebp
c0103695:	83 ec 18             	sub    $0x18,%esp
    size_t ret;
    bool intr_flag;
    local_intr_save(intr_flag);
c0103698:	e8 8c fd ff ff       	call   c0103429 <__intr_save>
c010369d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        ret = pmm_manager->nr_free_pages();
c01036a0:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c01036a5:	8b 40 14             	mov    0x14(%eax),%eax
c01036a8:	ff d0                	call   *%eax
c01036aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    local_intr_restore(intr_flag);
c01036ad:	83 ec 0c             	sub    $0xc,%esp
c01036b0:	ff 75 f4             	pushl  -0xc(%ebp)
c01036b3:	e8 9b fd ff ff       	call   c0103453 <__intr_restore>
c01036b8:	83 c4 10             	add    $0x10,%esp
    return ret;
c01036bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01036be:	c9                   	leave  
c01036bf:	c3                   	ret    

c01036c0 <page_init>:

/* pmm_init - initialize the physical memory management */
static void
page_init(void) {
c01036c0:	55                   	push   %ebp
c01036c1:	89 e5                	mov    %esp,%ebp
c01036c3:	57                   	push   %edi
c01036c4:	56                   	push   %esi
c01036c5:	53                   	push   %ebx
c01036c6:	83 ec 7c             	sub    $0x7c,%esp
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
c01036c9:	c7 45 c4 00 80 00 c0 	movl   $0xc0008000,-0x3c(%ebp)
    uint64_t maxpa = 0;
c01036d0:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
c01036d7:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

    cprintf("e820map:\n");
c01036de:	83 ec 0c             	sub    $0xc,%esp
c01036e1:	68 67 36 11 c0       	push   $0xc0113667
c01036e6:	e8 94 cc ff ff       	call   c010037f <cprintf>
c01036eb:	83 c4 10             	add    $0x10,%esp
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01036ee:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01036f5:	e9 fc 00 00 00       	jmp    c01037f6 <page_init+0x136>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01036fa:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01036fd:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103700:	89 d0                	mov    %edx,%eax
c0103702:	c1 e0 02             	shl    $0x2,%eax
c0103705:	01 d0                	add    %edx,%eax
c0103707:	c1 e0 02             	shl    $0x2,%eax
c010370a:	01 c8                	add    %ecx,%eax
c010370c:	8b 50 08             	mov    0x8(%eax),%edx
c010370f:	8b 40 04             	mov    0x4(%eax),%eax
c0103712:	89 45 b8             	mov    %eax,-0x48(%ebp)
c0103715:	89 55 bc             	mov    %edx,-0x44(%ebp)
c0103718:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010371b:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010371e:	89 d0                	mov    %edx,%eax
c0103720:	c1 e0 02             	shl    $0x2,%eax
c0103723:	01 d0                	add    %edx,%eax
c0103725:	c1 e0 02             	shl    $0x2,%eax
c0103728:	01 c8                	add    %ecx,%eax
c010372a:	8b 48 0c             	mov    0xc(%eax),%ecx
c010372d:	8b 58 10             	mov    0x10(%eax),%ebx
c0103730:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0103733:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0103736:	01 c8                	add    %ecx,%eax
c0103738:	11 da                	adc    %ebx,%edx
c010373a:	89 45 b0             	mov    %eax,-0x50(%ebp)
c010373d:	89 55 b4             	mov    %edx,-0x4c(%ebp)
        cprintf("  memory: %08llx, [%08llx, %08llx], type = %d.\n",
c0103740:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0103743:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103746:	89 d0                	mov    %edx,%eax
c0103748:	c1 e0 02             	shl    $0x2,%eax
c010374b:	01 d0                	add    %edx,%eax
c010374d:	c1 e0 02             	shl    $0x2,%eax
c0103750:	01 c8                	add    %ecx,%eax
c0103752:	83 c0 14             	add    $0x14,%eax
c0103755:	8b 00                	mov    (%eax),%eax
c0103757:	89 45 84             	mov    %eax,-0x7c(%ebp)
c010375a:	8b 45 b0             	mov    -0x50(%ebp),%eax
c010375d:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c0103760:	83 c0 ff             	add    $0xffffffff,%eax
c0103763:	83 d2 ff             	adc    $0xffffffff,%edx
c0103766:	89 c1                	mov    %eax,%ecx
c0103768:	89 d3                	mov    %edx,%ebx
c010376a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010376d:	89 55 80             	mov    %edx,-0x80(%ebp)
c0103770:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103773:	89 d0                	mov    %edx,%eax
c0103775:	c1 e0 02             	shl    $0x2,%eax
c0103778:	01 d0                	add    %edx,%eax
c010377a:	c1 e0 02             	shl    $0x2,%eax
c010377d:	03 45 80             	add    -0x80(%ebp),%eax
c0103780:	8b 50 10             	mov    0x10(%eax),%edx
c0103783:	8b 40 0c             	mov    0xc(%eax),%eax
c0103786:	ff 75 84             	pushl  -0x7c(%ebp)
c0103789:	53                   	push   %ebx
c010378a:	51                   	push   %ecx
c010378b:	ff 75 bc             	pushl  -0x44(%ebp)
c010378e:	ff 75 b8             	pushl  -0x48(%ebp)
c0103791:	52                   	push   %edx
c0103792:	50                   	push   %eax
c0103793:	68 74 36 11 c0       	push   $0xc0113674
c0103798:	e8 e2 cb ff ff       	call   c010037f <cprintf>
c010379d:	83 c4 20             	add    $0x20,%esp
                memmap->map[i].size, begin, end - 1, memmap->map[i].type);
        if (memmap->map[i].type == E820_ARM) {
c01037a0:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01037a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01037a6:	89 d0                	mov    %edx,%eax
c01037a8:	c1 e0 02             	shl    $0x2,%eax
c01037ab:	01 d0                	add    %edx,%eax
c01037ad:	c1 e0 02             	shl    $0x2,%eax
c01037b0:	01 c8                	add    %ecx,%eax
c01037b2:	83 c0 14             	add    $0x14,%eax
c01037b5:	8b 00                	mov    (%eax),%eax
c01037b7:	83 f8 01             	cmp    $0x1,%eax
c01037ba:	75 36                	jne    c01037f2 <page_init+0x132>
            if (maxpa < end && begin < KMEMSIZE) {
c01037bc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01037bf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01037c2:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01037c5:	77 2b                	ja     c01037f2 <page_init+0x132>
c01037c7:	3b 55 b4             	cmp    -0x4c(%ebp),%edx
c01037ca:	72 05                	jb     c01037d1 <page_init+0x111>
c01037cc:	3b 45 b0             	cmp    -0x50(%ebp),%eax
c01037cf:	73 21                	jae    c01037f2 <page_init+0x132>
c01037d1:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01037d5:	77 1b                	ja     c01037f2 <page_init+0x132>
c01037d7:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c01037db:	72 09                	jb     c01037e6 <page_init+0x126>
c01037dd:	81 7d b8 ff ff ff 37 	cmpl   $0x37ffffff,-0x48(%ebp)
c01037e4:	77 0c                	ja     c01037f2 <page_init+0x132>
                maxpa = end;
c01037e6:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01037e9:	8b 55 b4             	mov    -0x4c(%ebp),%edx
c01037ec:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01037ef:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    struct e820map *memmap = (struct e820map *)(0x8000 + KERNBASE);
    uint64_t maxpa = 0;

    cprintf("e820map:\n");
    int i;
    for (i = 0; i < memmap->nr_map; i ++) {
c01037f2:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c01037f6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01037f9:	8b 00                	mov    (%eax),%eax
c01037fb:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c01037fe:	0f 8f f6 fe ff ff    	jg     c01036fa <page_init+0x3a>
            if (maxpa < end && begin < KMEMSIZE) {
                maxpa = end;
            }
        }
    }
    if (maxpa > KMEMSIZE) {
c0103804:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103808:	72 1d                	jb     c0103827 <page_init+0x167>
c010380a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010380e:	77 09                	ja     c0103819 <page_init+0x159>
c0103810:	81 7d e0 00 00 00 38 	cmpl   $0x38000000,-0x20(%ebp)
c0103817:	76 0e                	jbe    c0103827 <page_init+0x167>
        maxpa = KMEMSIZE;
c0103819:	c7 45 e0 00 00 00 38 	movl   $0x38000000,-0x20(%ebp)
c0103820:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    }

    extern char end[];

    npage = maxpa / PGSIZE;
c0103827:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010382a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010382d:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0103831:	c1 ea 0c             	shr    $0xc,%edx
c0103834:	a3 80 ef 14 c0       	mov    %eax,0xc014ef80
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);
c0103839:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
c0103840:	b8 e4 22 15 c0       	mov    $0xc01522e4,%eax
c0103845:	8d 50 ff             	lea    -0x1(%eax),%edx
c0103848:	8b 45 ac             	mov    -0x54(%ebp),%eax
c010384b:	01 d0                	add    %edx,%eax
c010384d:	89 45 a8             	mov    %eax,-0x58(%ebp)
c0103850:	8b 45 a8             	mov    -0x58(%ebp),%eax
c0103853:	ba 00 00 00 00       	mov    $0x0,%edx
c0103858:	f7 75 ac             	divl   -0x54(%ebp)
c010385b:	8b 45 a8             	mov    -0x58(%ebp),%eax
c010385e:	29 d0                	sub    %edx,%eax
c0103860:	a3 0c 21 15 c0       	mov    %eax,0xc015210c

    for (i = 0; i < npage; i ++) {
c0103865:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c010386c:	eb 27                	jmp    c0103895 <page_init+0x1d5>
        SetPageReserved(pages + i);
c010386e:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c0103873:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103876:	c1 e2 05             	shl    $0x5,%edx
c0103879:	01 d0                	add    %edx,%eax
c010387b:	83 c0 04             	add    $0x4,%eax
c010387e:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%ebp)
c0103885:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0103888:	8b 45 8c             	mov    -0x74(%ebp),%eax
c010388b:	8b 55 90             	mov    -0x70(%ebp),%edx
c010388e:	0f ab 10             	bts    %edx,(%eax)
    extern char end[];

    npage = maxpa / PGSIZE;
    pages = (struct Page *)ROUNDUP((void *)end, PGSIZE);

    for (i = 0; i < npage; i ++) {
c0103891:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0103895:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103898:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010389d:	39 c2                	cmp    %eax,%edx
c010389f:	72 cd                	jb     c010386e <page_init+0x1ae>
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);
c01038a1:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c01038a6:	c1 e0 05             	shl    $0x5,%eax
c01038a9:	89 c2                	mov    %eax,%edx
c01038ab:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c01038b0:	01 d0                	add    %edx,%eax
c01038b2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
c01038b5:	81 7d a4 ff ff ff bf 	cmpl   $0xbfffffff,-0x5c(%ebp)
c01038bc:	77 17                	ja     c01038d5 <page_init+0x215>
c01038be:	ff 75 a4             	pushl  -0x5c(%ebp)
c01038c1:	68 a4 36 11 c0       	push   $0xc01136a4
c01038c6:	68 ea 00 00 00       	push   $0xea
c01038cb:	68 c8 36 11 c0       	push   $0xc01136c8
c01038d0:	e8 10 cc ff ff       	call   c01004e5 <__panic>
c01038d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01038d8:	05 00 00 00 40       	add    $0x40000000,%eax
c01038dd:	89 45 a0             	mov    %eax,-0x60(%ebp)

    for (i = 0; i < memmap->nr_map; i ++) {
c01038e0:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c01038e7:	e9 69 01 00 00       	jmp    c0103a55 <page_init+0x395>
        uint64_t begin = memmap->map[i].addr, end = begin + memmap->map[i].size;
c01038ec:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c01038ef:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01038f2:	89 d0                	mov    %edx,%eax
c01038f4:	c1 e0 02             	shl    $0x2,%eax
c01038f7:	01 d0                	add    %edx,%eax
c01038f9:	c1 e0 02             	shl    $0x2,%eax
c01038fc:	01 c8                	add    %ecx,%eax
c01038fe:	8b 50 08             	mov    0x8(%eax),%edx
c0103901:	8b 40 04             	mov    0x4(%eax),%eax
c0103904:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0103907:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010390a:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c010390d:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103910:	89 d0                	mov    %edx,%eax
c0103912:	c1 e0 02             	shl    $0x2,%eax
c0103915:	01 d0                	add    %edx,%eax
c0103917:	c1 e0 02             	shl    $0x2,%eax
c010391a:	01 c8                	add    %ecx,%eax
c010391c:	8b 48 0c             	mov    0xc(%eax),%ecx
c010391f:	8b 58 10             	mov    0x10(%eax),%ebx
c0103922:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103925:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103928:	01 c8                	add    %ecx,%eax
c010392a:	11 da                	adc    %ebx,%edx
c010392c:	89 45 c8             	mov    %eax,-0x38(%ebp)
c010392f:	89 55 cc             	mov    %edx,-0x34(%ebp)
        if (memmap->map[i].type == E820_ARM) {
c0103932:	8b 4d c4             	mov    -0x3c(%ebp),%ecx
c0103935:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0103938:	89 d0                	mov    %edx,%eax
c010393a:	c1 e0 02             	shl    $0x2,%eax
c010393d:	01 d0                	add    %edx,%eax
c010393f:	c1 e0 02             	shl    $0x2,%eax
c0103942:	01 c8                	add    %ecx,%eax
c0103944:	83 c0 14             	add    $0x14,%eax
c0103947:	8b 00                	mov    (%eax),%eax
c0103949:	83 f8 01             	cmp    $0x1,%eax
c010394c:	0f 85 ff 00 00 00    	jne    c0103a51 <page_init+0x391>
            if (begin < freemem) {
c0103952:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0103955:	ba 00 00 00 00       	mov    $0x0,%edx
c010395a:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c010395d:	72 17                	jb     c0103976 <page_init+0x2b6>
c010395f:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0103962:	77 05                	ja     c0103969 <page_init+0x2a9>
c0103964:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c0103967:	76 0d                	jbe    c0103976 <page_init+0x2b6>
                begin = freemem;
c0103969:	8b 45 a0             	mov    -0x60(%ebp),%eax
c010396c:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010396f:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
            }
            if (end > KMEMSIZE) {
c0103976:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c010397a:	72 1d                	jb     c0103999 <page_init+0x2d9>
c010397c:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0103980:	77 09                	ja     c010398b <page_init+0x2cb>
c0103982:	81 7d c8 00 00 00 38 	cmpl   $0x38000000,-0x38(%ebp)
c0103989:	76 0e                	jbe    c0103999 <page_init+0x2d9>
                end = KMEMSIZE;
c010398b:	c7 45 c8 00 00 00 38 	movl   $0x38000000,-0x38(%ebp)
c0103992:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
            }
            if (begin < end) {
c0103999:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010399c:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010399f:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01039a2:	0f 87 a9 00 00 00    	ja     c0103a51 <page_init+0x391>
c01039a8:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c01039ab:	72 09                	jb     c01039b6 <page_init+0x2f6>
c01039ad:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c01039b0:	0f 83 9b 00 00 00    	jae    c0103a51 <page_init+0x391>
                begin = ROUNDUP(begin, PGSIZE);
c01039b6:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
c01039bd:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01039c0:	8b 45 9c             	mov    -0x64(%ebp),%eax
c01039c3:	01 d0                	add    %edx,%eax
c01039c5:	83 e8 01             	sub    $0x1,%eax
c01039c8:	89 45 98             	mov    %eax,-0x68(%ebp)
c01039cb:	8b 45 98             	mov    -0x68(%ebp),%eax
c01039ce:	ba 00 00 00 00       	mov    $0x0,%edx
c01039d3:	f7 75 9c             	divl   -0x64(%ebp)
c01039d6:	8b 45 98             	mov    -0x68(%ebp),%eax
c01039d9:	29 d0                	sub    %edx,%eax
c01039db:	ba 00 00 00 00       	mov    $0x0,%edx
c01039e0:	89 45 d0             	mov    %eax,-0x30(%ebp)
c01039e3:	89 55 d4             	mov    %edx,-0x2c(%ebp)
                end = ROUNDDOWN(end, PGSIZE);
c01039e6:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01039e9:	89 45 94             	mov    %eax,-0x6c(%ebp)
c01039ec:	8b 45 94             	mov    -0x6c(%ebp),%eax
c01039ef:	ba 00 00 00 00       	mov    $0x0,%edx
c01039f4:	89 c3                	mov    %eax,%ebx
c01039f6:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
c01039fc:	89 de                	mov    %ebx,%esi
c01039fe:	89 d0                	mov    %edx,%eax
c0103a00:	83 e0 00             	and    $0x0,%eax
c0103a03:	89 c7                	mov    %eax,%edi
c0103a05:	89 75 c8             	mov    %esi,-0x38(%ebp)
c0103a08:	89 7d cc             	mov    %edi,-0x34(%ebp)
                if (begin < end) {
c0103a0b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103a0e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0103a11:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0103a14:	77 3b                	ja     c0103a51 <page_init+0x391>
c0103a16:	3b 55 cc             	cmp    -0x34(%ebp),%edx
c0103a19:	72 05                	jb     c0103a20 <page_init+0x360>
c0103a1b:	3b 45 c8             	cmp    -0x38(%ebp),%eax
c0103a1e:	73 31                	jae    c0103a51 <page_init+0x391>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
c0103a20:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0103a23:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0103a26:	2b 45 d0             	sub    -0x30(%ebp),%eax
c0103a29:	1b 55 d4             	sbb    -0x2c(%ebp),%edx
c0103a2c:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0103a30:	c1 ea 0c             	shr    $0xc,%edx
c0103a33:	89 c3                	mov    %eax,%ebx
c0103a35:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0103a38:	83 ec 0c             	sub    $0xc,%esp
c0103a3b:	50                   	push   %eax
c0103a3c:	e8 d8 f8 ff ff       	call   c0103319 <pa2page>
c0103a41:	83 c4 10             	add    $0x10,%esp
c0103a44:	83 ec 08             	sub    $0x8,%esp
c0103a47:	53                   	push   %ebx
c0103a48:	50                   	push   %eax
c0103a49:	e8 84 fb ff ff       	call   c01035d2 <init_memmap>
c0103a4e:	83 c4 10             	add    $0x10,%esp
        SetPageReserved(pages + i);
    }

    uintptr_t freemem = PADDR((uintptr_t)pages + sizeof(struct Page) * npage);

    for (i = 0; i < memmap->nr_map; i ++) {
c0103a51:	83 45 dc 01          	addl   $0x1,-0x24(%ebp)
c0103a55:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0103a58:	8b 00                	mov    (%eax),%eax
c0103a5a:	3b 45 dc             	cmp    -0x24(%ebp),%eax
c0103a5d:	0f 8f 89 fe ff ff    	jg     c01038ec <page_init+0x22c>
                    init_memmap(pa2page(begin), (end - begin) / PGSIZE);
                }
            }
        }
    }
}
c0103a63:	90                   	nop
c0103a64:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0103a67:	5b                   	pop    %ebx
c0103a68:	5e                   	pop    %esi
c0103a69:	5f                   	pop    %edi
c0103a6a:	5d                   	pop    %ebp
c0103a6b:	c3                   	ret    

c0103a6c <boot_map_segment>:
//  la:   linear address of this memory need to map (after x86 segment map)
//  size: memory size
//  pa:   physical address of this memory
//  perm: permission of this memory  
static void
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
c0103a6c:	55                   	push   %ebp
c0103a6d:	89 e5                	mov    %esp,%ebp
c0103a6f:	83 ec 28             	sub    $0x28,%esp
    assert(PGOFF(la) == PGOFF(pa));
c0103a72:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103a75:	33 45 14             	xor    0x14(%ebp),%eax
c0103a78:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103a7d:	85 c0                	test   %eax,%eax
c0103a7f:	74 19                	je     c0103a9a <boot_map_segment+0x2e>
c0103a81:	68 d6 36 11 c0       	push   $0xc01136d6
c0103a86:	68 ed 36 11 c0       	push   $0xc01136ed
c0103a8b:	68 08 01 00 00       	push   $0x108
c0103a90:	68 c8 36 11 c0       	push   $0xc01136c8
c0103a95:	e8 4b ca ff ff       	call   c01004e5 <__panic>
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
c0103a9a:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
c0103aa1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103aa4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103aa9:	89 c2                	mov    %eax,%edx
c0103aab:	8b 45 10             	mov    0x10(%ebp),%eax
c0103aae:	01 c2                	add    %eax,%edx
c0103ab0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103ab3:	01 d0                	add    %edx,%eax
c0103ab5:	83 e8 01             	sub    $0x1,%eax
c0103ab8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103abb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103abe:	ba 00 00 00 00       	mov    $0x0,%edx
c0103ac3:	f7 75 f0             	divl   -0x10(%ebp)
c0103ac6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0103ac9:	29 d0                	sub    %edx,%eax
c0103acb:	c1 e8 0c             	shr    $0xc,%eax
c0103ace:	89 45 f4             	mov    %eax,-0xc(%ebp)
    la = ROUNDDOWN(la, PGSIZE);
c0103ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103ad4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0103ad7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0103ada:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103adf:	89 45 0c             	mov    %eax,0xc(%ebp)
    pa = ROUNDDOWN(pa, PGSIZE);
c0103ae2:	8b 45 14             	mov    0x14(%ebp),%eax
c0103ae5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0103ae8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0103aeb:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0103af0:	89 45 14             	mov    %eax,0x14(%ebp)
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0103af3:	eb 57                	jmp    c0103b4c <boot_map_segment+0xe0>
        pte_t *ptep = get_pte(pgdir, la, 1);
c0103af5:	83 ec 04             	sub    $0x4,%esp
c0103af8:	6a 01                	push   $0x1
c0103afa:	ff 75 0c             	pushl  0xc(%ebp)
c0103afd:	ff 75 08             	pushl  0x8(%ebp)
c0103b00:	e8 58 01 00 00       	call   c0103c5d <get_pte>
c0103b05:	83 c4 10             	add    $0x10,%esp
c0103b08:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(ptep != NULL);
c0103b0b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103b0f:	75 19                	jne    c0103b2a <boot_map_segment+0xbe>
c0103b11:	68 02 37 11 c0       	push   $0xc0113702
c0103b16:	68 ed 36 11 c0       	push   $0xc01136ed
c0103b1b:	68 0e 01 00 00       	push   $0x10e
c0103b20:	68 c8 36 11 c0       	push   $0xc01136c8
c0103b25:	e8 bb c9 ff ff       	call   c01004e5 <__panic>
        *ptep = pa | PTE_P | perm;
c0103b2a:	8b 45 14             	mov    0x14(%ebp),%eax
c0103b2d:	0b 45 18             	or     0x18(%ebp),%eax
c0103b30:	83 c8 01             	or     $0x1,%eax
c0103b33:	89 c2                	mov    %eax,%edx
c0103b35:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0103b38:	89 10                	mov    %edx,(%eax)
boot_map_segment(pde_t *pgdir, uintptr_t la, size_t size, uintptr_t pa, uint32_t perm) {
    assert(PGOFF(la) == PGOFF(pa));
    size_t n = ROUNDUP(size + PGOFF(la), PGSIZE) / PGSIZE;
    la = ROUNDDOWN(la, PGSIZE);
    pa = ROUNDDOWN(pa, PGSIZE);
    for (; n > 0; n --, la += PGSIZE, pa += PGSIZE) {
c0103b3a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0103b3e:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
c0103b45:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
c0103b4c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b50:	75 a3                	jne    c0103af5 <boot_map_segment+0x89>
        pte_t *ptep = get_pte(pgdir, la, 1);
        assert(ptep != NULL);
        *ptep = pa | PTE_P | perm;
    }
}
c0103b52:	90                   	nop
c0103b53:	c9                   	leave  
c0103b54:	c3                   	ret    

c0103b55 <boot_alloc_page>:

//boot_alloc_page - allocate one page using pmm->alloc_pages(1) 
// return value: the kernel virtual address of this allocated page
//note: this function is used to get the memory for PDT(Page Directory Table)&PT(Page Table)
static void *
boot_alloc_page(void) {
c0103b55:	55                   	push   %ebp
c0103b56:	89 e5                	mov    %esp,%ebp
c0103b58:	83 ec 18             	sub    $0x18,%esp
    struct Page *p = alloc_page();
c0103b5b:	83 ec 0c             	sub    $0xc,%esp
c0103b5e:	6a 01                	push   $0x1
c0103b60:	e8 8c fa ff ff       	call   c01035f1 <alloc_pages>
c0103b65:	83 c4 10             	add    $0x10,%esp
c0103b68:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p == NULL) {
c0103b6b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103b6f:	75 17                	jne    c0103b88 <boot_alloc_page+0x33>
        panic("boot_alloc_page failed.\n");
c0103b71:	83 ec 04             	sub    $0x4,%esp
c0103b74:	68 0f 37 11 c0       	push   $0xc011370f
c0103b79:	68 1a 01 00 00       	push   $0x11a
c0103b7e:	68 c8 36 11 c0       	push   $0xc01136c8
c0103b83:	e8 5d c9 ff ff       	call   c01004e5 <__panic>
    }
    return page2kva(p);
c0103b88:	83 ec 0c             	sub    $0xc,%esp
c0103b8b:	ff 75 f4             	pushl  -0xc(%ebp)
c0103b8e:	e8 c3 f7 ff ff       	call   c0103356 <page2kva>
c0103b93:	83 c4 10             	add    $0x10,%esp
}
c0103b96:	c9                   	leave  
c0103b97:	c3                   	ret    

c0103b98 <pmm_init>:

//pmm_init - setup a pmm to manage physical memory, build PDT&PT to setup paging mechanism 
//         - check the correctness of pmm & paging mechanism, print PDT&PT
void
pmm_init(void) {
c0103b98:	55                   	push   %ebp
c0103b99:	89 e5                	mov    %esp,%ebp
c0103b9b:	83 ec 18             	sub    $0x18,%esp
    // We've already enabled paging
    boot_cr3 = PADDR(boot_pgdir);
c0103b9e:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0103ba3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103ba6:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0103bad:	77 17                	ja     c0103bc6 <pmm_init+0x2e>
c0103baf:	ff 75 f4             	pushl  -0xc(%ebp)
c0103bb2:	68 a4 36 11 c0       	push   $0xc01136a4
c0103bb7:	68 24 01 00 00       	push   $0x124
c0103bbc:	68 c8 36 11 c0       	push   $0xc01136c8
c0103bc1:	e8 1f c9 ff ff       	call   c01004e5 <__panic>
c0103bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103bc9:	05 00 00 00 40       	add    $0x40000000,%eax
c0103bce:	a3 08 21 15 c0       	mov    %eax,0xc0152108
    //We need to alloc/free the physical memory (granularity is 4KB or other size). 
    //So a framework of physical memory manager (struct pmm_manager)is defined in pmm.h
    //First we should init a physical memory manager(pmm) based on the framework.
    //Then pmm can alloc/free the physical memory. 
    //Now the first_fit/best_fit/worst_fit/buddy_system pmm are available.
    init_pmm_manager();
c0103bd3:	e8 c5 f9 ff ff       	call   c010359d <init_pmm_manager>

    // detect physical memory space, reserve already used memory,
    // then use pmm->init_memmap to create free page list
    page_init();
c0103bd8:	e8 e3 fa ff ff       	call   c01036c0 <page_init>

    //use pmm->check to verify the correctness of the alloc/free function in a pmm
    check_alloc_page();
c0103bdd:	e8 12 06 00 00       	call   c01041f4 <check_alloc_page>

    check_pgdir();
c0103be2:	e8 30 06 00 00       	call   c0104217 <check_pgdir>

    static_assert(KERNBASE % PTSIZE == 0 && KERNTOP % PTSIZE == 0);

    // recursively insert boot_pgdir in itself
    // to form a virtual page table at virtual address VPT
    boot_pgdir[PDX(VPT)] = PADDR(boot_pgdir) | PTE_P | PTE_W;
c0103be7:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0103bec:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c0103bf2:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0103bf7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103bfa:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c0103c01:	77 17                	ja     c0103c1a <pmm_init+0x82>
c0103c03:	ff 75 f0             	pushl  -0x10(%ebp)
c0103c06:	68 a4 36 11 c0       	push   $0xc01136a4
c0103c0b:	68 3a 01 00 00       	push   $0x13a
c0103c10:	68 c8 36 11 c0       	push   $0xc01136c8
c0103c15:	e8 cb c8 ff ff       	call   c01004e5 <__panic>
c0103c1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103c1d:	05 00 00 00 40       	add    $0x40000000,%eax
c0103c22:	83 c8 03             	or     $0x3,%eax
c0103c25:	89 02                	mov    %eax,(%edx)

    // map all physical memory to linear memory with base linear addr KERNBASE
    // linear_addr KERNBASE ~ KERNBASE + KMEMSIZE = phy_addr 0 ~ KMEMSIZE
    boot_map_segment(boot_pgdir, KERNBASE, KMEMSIZE, 0, PTE_W);
c0103c27:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0103c2c:	83 ec 0c             	sub    $0xc,%esp
c0103c2f:	6a 02                	push   $0x2
c0103c31:	6a 00                	push   $0x0
c0103c33:	68 00 00 00 38       	push   $0x38000000
c0103c38:	68 00 00 00 c0       	push   $0xc0000000
c0103c3d:	50                   	push   %eax
c0103c3e:	e8 29 fe ff ff       	call   c0103a6c <boot_map_segment>
c0103c43:	83 c4 20             	add    $0x20,%esp

    // Since we are using bootloader's GDT,
    // we should reload gdt (second time, the last time) to get user segments and the TSS
    // map virtual_addr 0 ~ 4G = linear_addr 0 ~ 4G
    // then set kernel stack (ss:esp) in TSS, setup TSS in gdt, load TSS
    gdt_init();
c0103c46:	e8 60 f8 ff ff       	call   c01034ab <gdt_init>

    //now the basic virtual memory map(see memalyout.h) is established.
    //check the correctness of the basic virtual memory map.
    check_boot_pgdir();
c0103c4b:	e8 2d 0b 00 00       	call   c010477d <check_boot_pgdir>

    print_pgdir();
c0103c50:	e8 23 0f 00 00       	call   c0104b78 <print_pgdir>
    
    kmalloc_init();
c0103c55:	e8 a5 30 00 00       	call   c0106cff <kmalloc_init>

}
c0103c5a:	90                   	nop
c0103c5b:	c9                   	leave  
c0103c5c:	c3                   	ret    

c0103c5d <get_pte>:
//  pgdir:  the kernel virtual base address of PDT
//  la:     the linear address need to map
//  create: a logical value to decide if alloc a page for PT
// return vaule: the kernel virtual address of this pte
pte_t *
get_pte(pde_t *pgdir, uintptr_t la, bool create) {
c0103c5d:	55                   	push   %ebp
c0103c5e:	89 e5                	mov    %esp,%ebp
                          // (6) clear page content using memset
                          // (7) set page directory entry's permission
    }
    return NULL;          // (8) return page table entry
#endif
}
c0103c60:	90                   	nop
c0103c61:	5d                   	pop    %ebp
c0103c62:	c3                   	ret    

c0103c63 <get_page>:

//get_page - get related Page struct for linear address la using PDT pgdir
struct Page *
get_page(pde_t *pgdir, uintptr_t la, pte_t **ptep_store) {
c0103c63:	55                   	push   %ebp
c0103c64:	89 e5                	mov    %esp,%ebp
c0103c66:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0103c69:	6a 00                	push   $0x0
c0103c6b:	ff 75 0c             	pushl  0xc(%ebp)
c0103c6e:	ff 75 08             	pushl  0x8(%ebp)
c0103c71:	e8 e7 ff ff ff       	call   c0103c5d <get_pte>
c0103c76:	83 c4 0c             	add    $0xc,%esp
c0103c79:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep_store != NULL) {
c0103c7c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0103c80:	74 08                	je     c0103c8a <get_page+0x27>
        *ptep_store = ptep;
c0103c82:	8b 45 10             	mov    0x10(%ebp),%eax
c0103c85:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0103c88:	89 10                	mov    %edx,(%eax)
    }
    if (ptep != NULL && *ptep & PTE_P) {
c0103c8a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103c8e:	74 1f                	je     c0103caf <get_page+0x4c>
c0103c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c93:	8b 00                	mov    (%eax),%eax
c0103c95:	83 e0 01             	and    $0x1,%eax
c0103c98:	85 c0                	test   %eax,%eax
c0103c9a:	74 13                	je     c0103caf <get_page+0x4c>
        return pte2page(*ptep);
c0103c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103c9f:	8b 00                	mov    (%eax),%eax
c0103ca1:	83 ec 0c             	sub    $0xc,%esp
c0103ca4:	50                   	push   %eax
c0103ca5:	e8 f1 f6 ff ff       	call   c010339b <pte2page>
c0103caa:	83 c4 10             	add    $0x10,%esp
c0103cad:	eb 05                	jmp    c0103cb4 <get_page+0x51>
    }
    return NULL;
c0103caf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0103cb4:	c9                   	leave  
c0103cb5:	c3                   	ret    

c0103cb6 <page_remove_pte>:

//page_remove_pte - free an Page sturct which is related linear address la
//                - and clean(invalidate) pte which is related linear address la
//note: PT is changed, so the TLB need to be invalidate 
static inline void
page_remove_pte(pde_t *pgdir, uintptr_t la, pte_t *ptep) {
c0103cb6:	55                   	push   %ebp
c0103cb7:	89 e5                	mov    %esp,%ebp
                                  //(4) and free this page when page reference reachs 0
                                  //(5) clear second page table entry
                                  //(6) flush tlb
    }
#endif
}
c0103cb9:	90                   	nop
c0103cba:	5d                   	pop    %ebp
c0103cbb:	c3                   	ret    

c0103cbc <unmap_range>:

void
unmap_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0103cbc:	55                   	push   %ebp
c0103cbd:	89 e5                	mov    %esp,%ebp
c0103cbf:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0103cc2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103cc5:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103cca:	85 c0                	test   %eax,%eax
c0103ccc:	75 0c                	jne    c0103cda <unmap_range+0x1e>
c0103cce:	8b 45 10             	mov    0x10(%ebp),%eax
c0103cd1:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103cd6:	85 c0                	test   %eax,%eax
c0103cd8:	74 19                	je     c0103cf3 <unmap_range+0x37>
c0103cda:	68 28 37 11 c0       	push   $0xc0113728
c0103cdf:	68 ed 36 11 c0       	push   $0xc01136ed
c0103ce4:	68 ab 01 00 00       	push   $0x1ab
c0103ce9:	68 c8 36 11 c0       	push   $0xc01136c8
c0103cee:	e8 f2 c7 ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c0103cf3:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0103cfa:	76 11                	jbe    c0103d0d <unmap_range+0x51>
c0103cfc:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103cff:	3b 45 10             	cmp    0x10(%ebp),%eax
c0103d02:	73 09                	jae    c0103d0d <unmap_range+0x51>
c0103d04:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0103d0b:	76 19                	jbe    c0103d26 <unmap_range+0x6a>
c0103d0d:	68 51 37 11 c0       	push   $0xc0113751
c0103d12:	68 ed 36 11 c0       	push   $0xc01136ed
c0103d17:	68 ac 01 00 00       	push   $0x1ac
c0103d1c:	68 c8 36 11 c0       	push   $0xc01136c8
c0103d21:	e8 bf c7 ff ff       	call   c01004e5 <__panic>

    do {
        pte_t *ptep = get_pte(pgdir, start, 0);
c0103d26:	83 ec 04             	sub    $0x4,%esp
c0103d29:	6a 00                	push   $0x0
c0103d2b:	ff 75 0c             	pushl  0xc(%ebp)
c0103d2e:	ff 75 08             	pushl  0x8(%ebp)
c0103d31:	e8 27 ff ff ff       	call   c0103c5d <get_pte>
c0103d36:	83 c4 10             	add    $0x10,%esp
c0103d39:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0103d3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103d40:	75 18                	jne    c0103d5a <unmap_range+0x9e>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0103d42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d45:	05 00 00 40 00       	add    $0x400000,%eax
c0103d4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103d4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103d50:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0103d55:	89 45 0c             	mov    %eax,0xc(%ebp)
            continue ;
c0103d58:	eb 24                	jmp    c0103d7e <unmap_range+0xc2>
        }
        if (*ptep != 0) {
c0103d5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103d5d:	8b 00                	mov    (%eax),%eax
c0103d5f:	85 c0                	test   %eax,%eax
c0103d61:	74 14                	je     c0103d77 <unmap_range+0xbb>
            page_remove_pte(pgdir, start, ptep);
c0103d63:	83 ec 04             	sub    $0x4,%esp
c0103d66:	ff 75 f4             	pushl  -0xc(%ebp)
c0103d69:	ff 75 0c             	pushl  0xc(%ebp)
c0103d6c:	ff 75 08             	pushl  0x8(%ebp)
c0103d6f:	e8 42 ff ff ff       	call   c0103cb6 <page_remove_pte>
c0103d74:	83 c4 10             	add    $0x10,%esp
        }
        start += PGSIZE;
c0103d77:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
    } while (start != 0 && start < end);
c0103d7e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103d82:	74 08                	je     c0103d8c <unmap_range+0xd0>
c0103d84:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d87:	3b 45 10             	cmp    0x10(%ebp),%eax
c0103d8a:	72 9a                	jb     c0103d26 <unmap_range+0x6a>
}
c0103d8c:	90                   	nop
c0103d8d:	c9                   	leave  
c0103d8e:	c3                   	ret    

c0103d8f <exit_range>:

void
exit_range(pde_t *pgdir, uintptr_t start, uintptr_t end) {
c0103d8f:	55                   	push   %ebp
c0103d90:	89 e5                	mov    %esp,%ebp
c0103d92:	83 ec 18             	sub    $0x18,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0103d95:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103d98:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103d9d:	85 c0                	test   %eax,%eax
c0103d9f:	75 0c                	jne    c0103dad <exit_range+0x1e>
c0103da1:	8b 45 10             	mov    0x10(%ebp),%eax
c0103da4:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103da9:	85 c0                	test   %eax,%eax
c0103dab:	74 19                	je     c0103dc6 <exit_range+0x37>
c0103dad:	68 28 37 11 c0       	push   $0xc0113728
c0103db2:	68 ed 36 11 c0       	push   $0xc01136ed
c0103db7:	68 bd 01 00 00       	push   $0x1bd
c0103dbc:	68 c8 36 11 c0       	push   $0xc01136c8
c0103dc1:	e8 1f c7 ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c0103dc6:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0103dcd:	76 11                	jbe    c0103de0 <exit_range+0x51>
c0103dcf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103dd2:	3b 45 10             	cmp    0x10(%ebp),%eax
c0103dd5:	73 09                	jae    c0103de0 <exit_range+0x51>
c0103dd7:	81 7d 10 00 00 00 b0 	cmpl   $0xb0000000,0x10(%ebp)
c0103dde:	76 19                	jbe    c0103df9 <exit_range+0x6a>
c0103de0:	68 51 37 11 c0       	push   $0xc0113751
c0103de5:	68 ed 36 11 c0       	push   $0xc01136ed
c0103dea:	68 be 01 00 00       	push   $0x1be
c0103def:	68 c8 36 11 c0       	push   $0xc01136c8
c0103df4:	e8 ec c6 ff ff       	call   c01004e5 <__panic>

    start = ROUNDDOWN(start, PTSIZE);
c0103df9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103dfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0103dff:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103e02:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0103e07:	89 45 0c             	mov    %eax,0xc(%ebp)
    do {
        int pde_idx = PDX(start);
c0103e0a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103e0d:	c1 e8 16             	shr    $0x16,%eax
c0103e10:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pgdir[pde_idx] & PTE_P) {
c0103e13:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e16:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0103e1d:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e20:	01 d0                	add    %edx,%eax
c0103e22:	8b 00                	mov    (%eax),%eax
c0103e24:	83 e0 01             	and    $0x1,%eax
c0103e27:	85 c0                	test   %eax,%eax
c0103e29:	74 40                	je     c0103e6b <exit_range+0xdc>
            free_page(pde2page(pgdir[pde_idx]));
c0103e2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e2e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0103e35:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e38:	01 d0                	add    %edx,%eax
c0103e3a:	8b 00                	mov    (%eax),%eax
c0103e3c:	83 ec 0c             	sub    $0xc,%esp
c0103e3f:	50                   	push   %eax
c0103e40:	e8 90 f5 ff ff       	call   c01033d5 <pde2page>
c0103e45:	83 c4 10             	add    $0x10,%esp
c0103e48:	83 ec 08             	sub    $0x8,%esp
c0103e4b:	6a 01                	push   $0x1
c0103e4d:	50                   	push   %eax
c0103e4e:	e8 0a f8 ff ff       	call   c010365d <free_pages>
c0103e53:	83 c4 10             	add    $0x10,%esp
            pgdir[pde_idx] = 0;
c0103e56:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103e59:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0103e60:	8b 45 08             	mov    0x8(%ebp),%eax
c0103e63:	01 d0                	add    %edx,%eax
c0103e65:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        }
        start += PTSIZE;
c0103e6b:	81 45 0c 00 00 40 00 	addl   $0x400000,0xc(%ebp)
    } while (start != 0 && start < end);
c0103e72:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0103e76:	74 08                	je     c0103e80 <exit_range+0xf1>
c0103e78:	8b 45 0c             	mov    0xc(%ebp),%eax
c0103e7b:	3b 45 10             	cmp    0x10(%ebp),%eax
c0103e7e:	72 8a                	jb     c0103e0a <exit_range+0x7b>
}
c0103e80:	90                   	nop
c0103e81:	c9                   	leave  
c0103e82:	c3                   	ret    

c0103e83 <copy_range>:
 * @share: flags to indicate to dup OR share. We just use dup method, so it didn't be used.
 *
 * CALL GRAPH: copy_mm-->dup_mmap-->copy_range
 */
int
copy_range(pde_t *to, pde_t *from, uintptr_t start, uintptr_t end, bool share) {
c0103e83:	55                   	push   %ebp
c0103e84:	89 e5                	mov    %esp,%ebp
c0103e86:	83 ec 28             	sub    $0x28,%esp
    assert(start % PGSIZE == 0 && end % PGSIZE == 0);
c0103e89:	8b 45 10             	mov    0x10(%ebp),%eax
c0103e8c:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103e91:	85 c0                	test   %eax,%eax
c0103e93:	75 0c                	jne    c0103ea1 <copy_range+0x1e>
c0103e95:	8b 45 14             	mov    0x14(%ebp),%eax
c0103e98:	25 ff 0f 00 00       	and    $0xfff,%eax
c0103e9d:	85 c0                	test   %eax,%eax
c0103e9f:	74 19                	je     c0103eba <copy_range+0x37>
c0103ea1:	68 28 37 11 c0       	push   $0xc0113728
c0103ea6:	68 ed 36 11 c0       	push   $0xc01136ed
c0103eab:	68 d3 01 00 00       	push   $0x1d3
c0103eb0:	68 c8 36 11 c0       	push   $0xc01136c8
c0103eb5:	e8 2b c6 ff ff       	call   c01004e5 <__panic>
    assert(USER_ACCESS(start, end));
c0103eba:	81 7d 10 ff ff 1f 00 	cmpl   $0x1fffff,0x10(%ebp)
c0103ec1:	76 11                	jbe    c0103ed4 <copy_range+0x51>
c0103ec3:	8b 45 10             	mov    0x10(%ebp),%eax
c0103ec6:	3b 45 14             	cmp    0x14(%ebp),%eax
c0103ec9:	73 09                	jae    c0103ed4 <copy_range+0x51>
c0103ecb:	81 7d 14 00 00 00 b0 	cmpl   $0xb0000000,0x14(%ebp)
c0103ed2:	76 19                	jbe    c0103eed <copy_range+0x6a>
c0103ed4:	68 51 37 11 c0       	push   $0xc0113751
c0103ed9:	68 ed 36 11 c0       	push   $0xc01136ed
c0103ede:	68 d4 01 00 00       	push   $0x1d4
c0103ee3:	68 c8 36 11 c0       	push   $0xc01136c8
c0103ee8:	e8 f8 c5 ff ff       	call   c01004e5 <__panic>
    // copy content by page unit.
    do {
        //call get_pte to find process A's pte according to the addr start
        pte_t *ptep = get_pte(from, start, 0), *nptep;
c0103eed:	83 ec 04             	sub    $0x4,%esp
c0103ef0:	6a 00                	push   $0x0
c0103ef2:	ff 75 10             	pushl  0x10(%ebp)
c0103ef5:	ff 75 0c             	pushl  0xc(%ebp)
c0103ef8:	e8 60 fd ff ff       	call   c0103c5d <get_pte>
c0103efd:	83 c4 10             	add    $0x10,%esp
c0103f00:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (ptep == NULL) {
c0103f03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0103f07:	75 1b                	jne    c0103f24 <copy_range+0xa1>
            start = ROUNDDOWN(start + PTSIZE, PTSIZE);
c0103f09:	8b 45 10             	mov    0x10(%ebp),%eax
c0103f0c:	05 00 00 40 00       	add    $0x400000,%eax
c0103f11:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0103f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0103f17:	25 00 00 c0 ff       	and    $0xffc00000,%eax
c0103f1c:	89 45 10             	mov    %eax,0x10(%ebp)
            continue ;
c0103f1f:	e9 d0 00 00 00       	jmp    c0103ff4 <copy_range+0x171>
        }
        //call get_pte to find process B's pte according to the addr start. If pte is NULL, just alloc a PT
        if (*ptep & PTE_P) {
c0103f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f27:	8b 00                	mov    (%eax),%eax
c0103f29:	83 e0 01             	and    $0x1,%eax
c0103f2c:	85 c0                	test   %eax,%eax
c0103f2e:	0f 84 b9 00 00 00    	je     c0103fed <copy_range+0x16a>
            if ((nptep = get_pte(to, start, 1)) == NULL) {
c0103f34:	83 ec 04             	sub    $0x4,%esp
c0103f37:	6a 01                	push   $0x1
c0103f39:	ff 75 10             	pushl  0x10(%ebp)
c0103f3c:	ff 75 08             	pushl  0x8(%ebp)
c0103f3f:	e8 19 fd ff ff       	call   c0103c5d <get_pte>
c0103f44:	83 c4 10             	add    $0x10,%esp
c0103f47:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0103f4a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0103f4e:	75 0a                	jne    c0103f5a <copy_range+0xd7>
                return -E_NO_MEM;
c0103f50:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0103f55:	e9 b1 00 00 00       	jmp    c010400b <copy_range+0x188>
            }
        uint32_t perm = (*ptep & PTE_USER);
c0103f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f5d:	8b 00                	mov    (%eax),%eax
c0103f5f:	83 e0 07             	and    $0x7,%eax
c0103f62:	89 45 e8             	mov    %eax,-0x18(%ebp)
        //get page from ptep
        struct Page *page = pte2page(*ptep);
c0103f65:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0103f68:	8b 00                	mov    (%eax),%eax
c0103f6a:	83 ec 0c             	sub    $0xc,%esp
c0103f6d:	50                   	push   %eax
c0103f6e:	e8 28 f4 ff ff       	call   c010339b <pte2page>
c0103f73:	83 c4 10             	add    $0x10,%esp
c0103f76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        // alloc a page for process B
        struct Page *npage=alloc_page();
c0103f79:	83 ec 0c             	sub    $0xc,%esp
c0103f7c:	6a 01                	push   $0x1
c0103f7e:	e8 6e f6 ff ff       	call   c01035f1 <alloc_pages>
c0103f83:	83 c4 10             	add    $0x10,%esp
c0103f86:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(page!=NULL);
c0103f89:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0103f8d:	75 19                	jne    c0103fa8 <copy_range+0x125>
c0103f8f:	68 69 37 11 c0       	push   $0xc0113769
c0103f94:	68 ed 36 11 c0       	push   $0xc01136ed
c0103f99:	68 e7 01 00 00       	push   $0x1e7
c0103f9e:	68 c8 36 11 c0       	push   $0xc01136c8
c0103fa3:	e8 3d c5 ff ff       	call   c01004e5 <__panic>
        assert(npage!=NULL);
c0103fa8:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0103fac:	75 19                	jne    c0103fc7 <copy_range+0x144>
c0103fae:	68 74 37 11 c0       	push   $0xc0113774
c0103fb3:	68 ed 36 11 c0       	push   $0xc01136ed
c0103fb8:	68 e8 01 00 00       	push   $0x1e8
c0103fbd:	68 c8 36 11 c0       	push   $0xc01136c8
c0103fc2:	e8 1e c5 ff ff       	call   c01004e5 <__panic>
        int ret=0;
c0103fc7:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
         * (1) find src_kvaddr: the kernel virtual address of page
         * (2) find dst_kvaddr: the kernel virtual address of npage
         * (3) memory copy from src_kvaddr to dst_kvaddr, size is PGSIZE
         * (4) build the map of phy addr of  nage with the linear addr start
         */
        assert(ret == 0);
c0103fce:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0103fd2:	74 19                	je     c0103fed <copy_range+0x16a>
c0103fd4:	68 80 37 11 c0       	push   $0xc0113780
c0103fd9:	68 ed 36 11 c0       	push   $0xc01136ed
c0103fde:	68 f8 01 00 00       	push   $0x1f8
c0103fe3:	68 c8 36 11 c0       	push   $0xc01136c8
c0103fe8:	e8 f8 c4 ff ff       	call   c01004e5 <__panic>
        }
        start += PGSIZE;
c0103fed:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    } while (start != 0 && start < end);
c0103ff4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0103ff8:	74 0c                	je     c0104006 <copy_range+0x183>
c0103ffa:	8b 45 10             	mov    0x10(%ebp),%eax
c0103ffd:	3b 45 14             	cmp    0x14(%ebp),%eax
c0104000:	0f 82 e7 fe ff ff    	jb     c0103eed <copy_range+0x6a>
    return 0;
c0104006:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010400b:	c9                   	leave  
c010400c:	c3                   	ret    

c010400d <page_remove>:

//page_remove - free an Page which is related linear address la and has an validated pte
void
page_remove(pde_t *pgdir, uintptr_t la) {
c010400d:	55                   	push   %ebp
c010400e:	89 e5                	mov    %esp,%ebp
c0104010:	83 ec 10             	sub    $0x10,%esp
    pte_t *ptep = get_pte(pgdir, la, 0);
c0104013:	6a 00                	push   $0x0
c0104015:	ff 75 0c             	pushl  0xc(%ebp)
c0104018:	ff 75 08             	pushl  0x8(%ebp)
c010401b:	e8 3d fc ff ff       	call   c0103c5d <get_pte>
c0104020:	83 c4 0c             	add    $0xc,%esp
c0104023:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (ptep != NULL) {
c0104026:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c010402a:	74 11                	je     c010403d <page_remove+0x30>
        page_remove_pte(pgdir, la, ptep);
c010402c:	ff 75 fc             	pushl  -0x4(%ebp)
c010402f:	ff 75 0c             	pushl  0xc(%ebp)
c0104032:	ff 75 08             	pushl  0x8(%ebp)
c0104035:	e8 7c fc ff ff       	call   c0103cb6 <page_remove_pte>
c010403a:	83 c4 0c             	add    $0xc,%esp
    }
}
c010403d:	90                   	nop
c010403e:	c9                   	leave  
c010403f:	c3                   	ret    

c0104040 <page_insert>:
//  la:    the linear address need to map
//  perm:  the permission of this Page which is setted in related pte
// return value: always 0
//note: PT is changed, so the TLB need to be invalidate 
int
page_insert(pde_t *pgdir, struct Page *page, uintptr_t la, uint32_t perm) {
c0104040:	55                   	push   %ebp
c0104041:	89 e5                	mov    %esp,%ebp
c0104043:	83 ec 18             	sub    $0x18,%esp
    pte_t *ptep = get_pte(pgdir, la, 1);
c0104046:	6a 01                	push   $0x1
c0104048:	ff 75 10             	pushl  0x10(%ebp)
c010404b:	ff 75 08             	pushl  0x8(%ebp)
c010404e:	e8 0a fc ff ff       	call   c0103c5d <get_pte>
c0104053:	83 c4 0c             	add    $0xc,%esp
c0104056:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ptep == NULL) {
c0104059:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010405d:	75 0a                	jne    c0104069 <page_insert+0x29>
        return -E_NO_MEM;
c010405f:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0104064:	e9 88 00 00 00       	jmp    c01040f1 <page_insert+0xb1>
    }
    page_ref_inc(page);
c0104069:	ff 75 0c             	pushl  0xc(%ebp)
c010406c:	e8 8a f3 ff ff       	call   c01033fb <page_ref_inc>
c0104071:	83 c4 04             	add    $0x4,%esp
    if (*ptep & PTE_P) {
c0104074:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104077:	8b 00                	mov    (%eax),%eax
c0104079:	83 e0 01             	and    $0x1,%eax
c010407c:	85 c0                	test   %eax,%eax
c010407e:	74 40                	je     c01040c0 <page_insert+0x80>
        struct Page *p = pte2page(*ptep);
c0104080:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104083:	8b 00                	mov    (%eax),%eax
c0104085:	83 ec 0c             	sub    $0xc,%esp
c0104088:	50                   	push   %eax
c0104089:	e8 0d f3 ff ff       	call   c010339b <pte2page>
c010408e:	83 c4 10             	add    $0x10,%esp
c0104091:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (p == page) {
c0104094:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104097:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010409a:	75 10                	jne    c01040ac <page_insert+0x6c>
            page_ref_dec(page);
c010409c:	83 ec 0c             	sub    $0xc,%esp
c010409f:	ff 75 0c             	pushl  0xc(%ebp)
c01040a2:	e8 6b f3 ff ff       	call   c0103412 <page_ref_dec>
c01040a7:	83 c4 10             	add    $0x10,%esp
c01040aa:	eb 14                	jmp    c01040c0 <page_insert+0x80>
        }
        else {
            page_remove_pte(pgdir, la, ptep);
c01040ac:	83 ec 04             	sub    $0x4,%esp
c01040af:	ff 75 f4             	pushl  -0xc(%ebp)
c01040b2:	ff 75 10             	pushl  0x10(%ebp)
c01040b5:	ff 75 08             	pushl  0x8(%ebp)
c01040b8:	e8 f9 fb ff ff       	call   c0103cb6 <page_remove_pte>
c01040bd:	83 c4 10             	add    $0x10,%esp
        }
    }
    *ptep = page2pa(page) | PTE_P | perm;
c01040c0:	83 ec 0c             	sub    $0xc,%esp
c01040c3:	ff 75 0c             	pushl  0xc(%ebp)
c01040c6:	e8 3b f2 ff ff       	call   c0103306 <page2pa>
c01040cb:	83 c4 10             	add    $0x10,%esp
c01040ce:	0b 45 14             	or     0x14(%ebp),%eax
c01040d1:	83 c8 01             	or     $0x1,%eax
c01040d4:	89 c2                	mov    %eax,%edx
c01040d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01040d9:	89 10                	mov    %edx,(%eax)
    tlb_invalidate(pgdir, la);
c01040db:	83 ec 08             	sub    $0x8,%esp
c01040de:	ff 75 10             	pushl  0x10(%ebp)
c01040e1:	ff 75 08             	pushl  0x8(%ebp)
c01040e4:	e8 0a 00 00 00       	call   c01040f3 <tlb_invalidate>
c01040e9:	83 c4 10             	add    $0x10,%esp
    return 0;
c01040ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01040f1:	c9                   	leave  
c01040f2:	c3                   	ret    

c01040f3 <tlb_invalidate>:

// invalidate a TLB entry, but only if the page tables being
// edited are the ones currently in use by the processor.
void
tlb_invalidate(pde_t *pgdir, uintptr_t la) {
c01040f3:	55                   	push   %ebp
c01040f4:	89 e5                	mov    %esp,%ebp
c01040f6:	83 ec 18             	sub    $0x18,%esp
}

static inline uintptr_t
rcr3(void) {
    uintptr_t cr3;
    asm volatile ("mov %%cr3, %0" : "=r" (cr3) :: "memory");
c01040f9:	0f 20 d8             	mov    %cr3,%eax
c01040fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return cr3;
c01040ff:	8b 55 ec             	mov    -0x14(%ebp),%edx
    if (rcr3() == PADDR(pgdir)) {
c0104102:	8b 45 08             	mov    0x8(%ebp),%eax
c0104105:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104108:	81 7d f0 ff ff ff bf 	cmpl   $0xbfffffff,-0x10(%ebp)
c010410f:	77 17                	ja     c0104128 <tlb_invalidate+0x35>
c0104111:	ff 75 f0             	pushl  -0x10(%ebp)
c0104114:	68 a4 36 11 c0       	push   $0xc01136a4
c0104119:	68 29 02 00 00       	push   $0x229
c010411e:	68 c8 36 11 c0       	push   $0xc01136c8
c0104123:	e8 bd c3 ff ff       	call   c01004e5 <__panic>
c0104128:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010412b:	05 00 00 00 40       	add    $0x40000000,%eax
c0104130:	39 c2                	cmp    %eax,%edx
c0104132:	75 0c                	jne    c0104140 <tlb_invalidate+0x4d>
        invlpg((void *)la);
c0104134:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104137:	89 45 f4             	mov    %eax,-0xc(%ebp)
}

static inline void
invlpg(void *addr) {
    asm volatile ("invlpg (%0)" :: "r" (addr) : "memory");
c010413a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010413d:	0f 01 38             	invlpg (%eax)
    }
}
c0104140:	90                   	nop
c0104141:	c9                   	leave  
c0104142:	c3                   	ret    

c0104143 <pgdir_alloc_page>:

// pgdir_alloc_page - call alloc_page & page_insert functions to 
//                  - allocate a page size memory & setup an addr map
//                  - pa<->la with linear address la and the PDT pgdir
struct Page *
pgdir_alloc_page(pde_t *pgdir, uintptr_t la, uint32_t perm) {
c0104143:	55                   	push   %ebp
c0104144:	89 e5                	mov    %esp,%ebp
c0104146:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_page();
c0104149:	83 ec 0c             	sub    $0xc,%esp
c010414c:	6a 01                	push   $0x1
c010414e:	e8 9e f4 ff ff       	call   c01035f1 <alloc_pages>
c0104153:	83 c4 10             	add    $0x10,%esp
c0104156:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c0104159:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010415d:	0f 84 8c 00 00 00    	je     c01041ef <pgdir_alloc_page+0xac>
        if (page_insert(pgdir, page, la, perm) != 0) {
c0104163:	ff 75 10             	pushl  0x10(%ebp)
c0104166:	ff 75 0c             	pushl  0xc(%ebp)
c0104169:	ff 75 f4             	pushl  -0xc(%ebp)
c010416c:	ff 75 08             	pushl  0x8(%ebp)
c010416f:	e8 cc fe ff ff       	call   c0104040 <page_insert>
c0104174:	83 c4 10             	add    $0x10,%esp
c0104177:	85 c0                	test   %eax,%eax
c0104179:	74 17                	je     c0104192 <pgdir_alloc_page+0x4f>
            free_page(page);
c010417b:	83 ec 08             	sub    $0x8,%esp
c010417e:	6a 01                	push   $0x1
c0104180:	ff 75 f4             	pushl  -0xc(%ebp)
c0104183:	e8 d5 f4 ff ff       	call   c010365d <free_pages>
c0104188:	83 c4 10             	add    $0x10,%esp
            return NULL;
c010418b:	b8 00 00 00 00       	mov    $0x0,%eax
c0104190:	eb 60                	jmp    c01041f2 <pgdir_alloc_page+0xaf>
        }
        if (swap_init_ok){
c0104192:	a1 10 f0 14 c0       	mov    0xc014f010,%eax
c0104197:	85 c0                	test   %eax,%eax
c0104199:	74 54                	je     c01041ef <pgdir_alloc_page+0xac>
            if(check_mm_struct!=NULL) {
c010419b:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c01041a0:	85 c0                	test   %eax,%eax
c01041a2:	74 4b                	je     c01041ef <pgdir_alloc_page+0xac>
                swap_map_swappable(check_mm_struct, la, page, 0);
c01041a4:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c01041a9:	6a 00                	push   $0x0
c01041ab:	ff 75 f4             	pushl  -0xc(%ebp)
c01041ae:	ff 75 0c             	pushl  0xc(%ebp)
c01041b1:	50                   	push   %eax
c01041b2:	e8 f9 1c 00 00       	call   c0105eb0 <swap_map_swappable>
c01041b7:	83 c4 10             	add    $0x10,%esp
                page->pra_vaddr=la;
c01041ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01041bd:	8b 55 0c             	mov    0xc(%ebp),%edx
c01041c0:	89 50 1c             	mov    %edx,0x1c(%eax)
                assert(page_ref(page) == 1);
c01041c3:	83 ec 0c             	sub    $0xc,%esp
c01041c6:	ff 75 f4             	pushl  -0xc(%ebp)
c01041c9:	e8 23 f2 ff ff       	call   c01033f1 <page_ref>
c01041ce:	83 c4 10             	add    $0x10,%esp
c01041d1:	83 f8 01             	cmp    $0x1,%eax
c01041d4:	74 19                	je     c01041ef <pgdir_alloc_page+0xac>
c01041d6:	68 89 37 11 c0       	push   $0xc0113789
c01041db:	68 ed 36 11 c0       	push   $0xc01136ed
c01041e0:	68 3d 02 00 00       	push   $0x23d
c01041e5:	68 c8 36 11 c0       	push   $0xc01136c8
c01041ea:	e8 f6 c2 ff ff       	call   c01004e5 <__panic>
            }
        }

    }

    return page;
c01041ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01041f2:	c9                   	leave  
c01041f3:	c3                   	ret    

c01041f4 <check_alloc_page>:

static void
check_alloc_page(void) {
c01041f4:	55                   	push   %ebp
c01041f5:	89 e5                	mov    %esp,%ebp
c01041f7:	83 ec 08             	sub    $0x8,%esp
    pmm_manager->check();
c01041fa:	a1 04 21 15 c0       	mov    0xc0152104,%eax
c01041ff:	8b 40 18             	mov    0x18(%eax),%eax
c0104202:	ff d0                	call   *%eax
    cprintf("check_alloc_page() succeeded!\n");
c0104204:	83 ec 0c             	sub    $0xc,%esp
c0104207:	68 a0 37 11 c0       	push   $0xc01137a0
c010420c:	e8 6e c1 ff ff       	call   c010037f <cprintf>
c0104211:	83 c4 10             	add    $0x10,%esp
}
c0104214:	90                   	nop
c0104215:	c9                   	leave  
c0104216:	c3                   	ret    

c0104217 <check_pgdir>:

static void
check_pgdir(void) {
c0104217:	55                   	push   %ebp
c0104218:	89 e5                	mov    %esp,%ebp
c010421a:	83 ec 28             	sub    $0x28,%esp
    assert(npage <= KMEMSIZE / PGSIZE);
c010421d:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0104222:	3d 00 80 03 00       	cmp    $0x38000,%eax
c0104227:	76 19                	jbe    c0104242 <check_pgdir+0x2b>
c0104229:	68 bf 37 11 c0       	push   $0xc01137bf
c010422e:	68 ed 36 11 c0       	push   $0xc01136ed
c0104233:	68 55 02 00 00       	push   $0x255
c0104238:	68 c8 36 11 c0       	push   $0xc01136c8
c010423d:	e8 a3 c2 ff ff       	call   c01004e5 <__panic>
    assert(boot_pgdir != NULL && (uint32_t)PGOFF(boot_pgdir) == 0);
c0104242:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104247:	85 c0                	test   %eax,%eax
c0104249:	74 0e                	je     c0104259 <check_pgdir+0x42>
c010424b:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104250:	25 ff 0f 00 00       	and    $0xfff,%eax
c0104255:	85 c0                	test   %eax,%eax
c0104257:	74 19                	je     c0104272 <check_pgdir+0x5b>
c0104259:	68 dc 37 11 c0       	push   $0xc01137dc
c010425e:	68 ed 36 11 c0       	push   $0xc01136ed
c0104263:	68 56 02 00 00       	push   $0x256
c0104268:	68 c8 36 11 c0       	push   $0xc01136c8
c010426d:	e8 73 c2 ff ff       	call   c01004e5 <__panic>
    assert(get_page(boot_pgdir, 0x0, NULL) == NULL);
c0104272:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104277:	83 ec 04             	sub    $0x4,%esp
c010427a:	6a 00                	push   $0x0
c010427c:	6a 00                	push   $0x0
c010427e:	50                   	push   %eax
c010427f:	e8 df f9 ff ff       	call   c0103c63 <get_page>
c0104284:	83 c4 10             	add    $0x10,%esp
c0104287:	85 c0                	test   %eax,%eax
c0104289:	74 19                	je     c01042a4 <check_pgdir+0x8d>
c010428b:	68 14 38 11 c0       	push   $0xc0113814
c0104290:	68 ed 36 11 c0       	push   $0xc01136ed
c0104295:	68 57 02 00 00       	push   $0x257
c010429a:	68 c8 36 11 c0       	push   $0xc01136c8
c010429f:	e8 41 c2 ff ff       	call   c01004e5 <__panic>

    struct Page *p1, *p2;
    p1 = alloc_page();
c01042a4:	83 ec 0c             	sub    $0xc,%esp
c01042a7:	6a 01                	push   $0x1
c01042a9:	e8 43 f3 ff ff       	call   c01035f1 <alloc_pages>
c01042ae:	83 c4 10             	add    $0x10,%esp
c01042b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(page_insert(boot_pgdir, p1, 0x0, 0) == 0);
c01042b4:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01042b9:	6a 00                	push   $0x0
c01042bb:	6a 00                	push   $0x0
c01042bd:	ff 75 f4             	pushl  -0xc(%ebp)
c01042c0:	50                   	push   %eax
c01042c1:	e8 7a fd ff ff       	call   c0104040 <page_insert>
c01042c6:	83 c4 10             	add    $0x10,%esp
c01042c9:	85 c0                	test   %eax,%eax
c01042cb:	74 19                	je     c01042e6 <check_pgdir+0xcf>
c01042cd:	68 3c 38 11 c0       	push   $0xc011383c
c01042d2:	68 ed 36 11 c0       	push   $0xc01136ed
c01042d7:	68 5b 02 00 00       	push   $0x25b
c01042dc:	68 c8 36 11 c0       	push   $0xc01136c8
c01042e1:	e8 ff c1 ff ff       	call   c01004e5 <__panic>

    pte_t *ptep;
    assert((ptep = get_pte(boot_pgdir, 0x0, 0)) != NULL);
c01042e6:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01042eb:	83 ec 04             	sub    $0x4,%esp
c01042ee:	6a 00                	push   $0x0
c01042f0:	6a 00                	push   $0x0
c01042f2:	50                   	push   %eax
c01042f3:	e8 65 f9 ff ff       	call   c0103c5d <get_pte>
c01042f8:	83 c4 10             	add    $0x10,%esp
c01042fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01042fe:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104302:	75 19                	jne    c010431d <check_pgdir+0x106>
c0104304:	68 68 38 11 c0       	push   $0xc0113868
c0104309:	68 ed 36 11 c0       	push   $0xc01136ed
c010430e:	68 5e 02 00 00       	push   $0x25e
c0104313:	68 c8 36 11 c0       	push   $0xc01136c8
c0104318:	e8 c8 c1 ff ff       	call   c01004e5 <__panic>
    assert(pte2page(*ptep) == p1);
c010431d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104320:	8b 00                	mov    (%eax),%eax
c0104322:	83 ec 0c             	sub    $0xc,%esp
c0104325:	50                   	push   %eax
c0104326:	e8 70 f0 ff ff       	call   c010339b <pte2page>
c010432b:	83 c4 10             	add    $0x10,%esp
c010432e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0104331:	74 19                	je     c010434c <check_pgdir+0x135>
c0104333:	68 95 38 11 c0       	push   $0xc0113895
c0104338:	68 ed 36 11 c0       	push   $0xc01136ed
c010433d:	68 5f 02 00 00       	push   $0x25f
c0104342:	68 c8 36 11 c0       	push   $0xc01136c8
c0104347:	e8 99 c1 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p1) == 1);
c010434c:	83 ec 0c             	sub    $0xc,%esp
c010434f:	ff 75 f4             	pushl  -0xc(%ebp)
c0104352:	e8 9a f0 ff ff       	call   c01033f1 <page_ref>
c0104357:	83 c4 10             	add    $0x10,%esp
c010435a:	83 f8 01             	cmp    $0x1,%eax
c010435d:	74 19                	je     c0104378 <check_pgdir+0x161>
c010435f:	68 ab 38 11 c0       	push   $0xc01138ab
c0104364:	68 ed 36 11 c0       	push   $0xc01136ed
c0104369:	68 60 02 00 00       	push   $0x260
c010436e:	68 c8 36 11 c0       	push   $0xc01136c8
c0104373:	e8 6d c1 ff ff       	call   c01004e5 <__panic>

    ptep = &((pte_t *)KADDR(PDE_ADDR(boot_pgdir[0])))[1];
c0104378:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010437d:	8b 00                	mov    (%eax),%eax
c010437f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104384:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0104387:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010438a:	c1 e8 0c             	shr    $0xc,%eax
c010438d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104390:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0104395:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0104398:	72 17                	jb     c01043b1 <check_pgdir+0x19a>
c010439a:	ff 75 ec             	pushl  -0x14(%ebp)
c010439d:	68 00 36 11 c0       	push   $0xc0113600
c01043a2:	68 62 02 00 00       	push   $0x262
c01043a7:	68 c8 36 11 c0       	push   $0xc01136c8
c01043ac:	e8 34 c1 ff ff       	call   c01004e5 <__panic>
c01043b1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01043b4:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01043b9:	83 c0 04             	add    $0x4,%eax
c01043bc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(get_pte(boot_pgdir, PGSIZE, 0) == ptep);
c01043bf:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01043c4:	83 ec 04             	sub    $0x4,%esp
c01043c7:	6a 00                	push   $0x0
c01043c9:	68 00 10 00 00       	push   $0x1000
c01043ce:	50                   	push   %eax
c01043cf:	e8 89 f8 ff ff       	call   c0103c5d <get_pte>
c01043d4:	83 c4 10             	add    $0x10,%esp
c01043d7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01043da:	74 19                	je     c01043f5 <check_pgdir+0x1de>
c01043dc:	68 c0 38 11 c0       	push   $0xc01138c0
c01043e1:	68 ed 36 11 c0       	push   $0xc01136ed
c01043e6:	68 63 02 00 00       	push   $0x263
c01043eb:	68 c8 36 11 c0       	push   $0xc01136c8
c01043f0:	e8 f0 c0 ff ff       	call   c01004e5 <__panic>

    p2 = alloc_page();
c01043f5:	83 ec 0c             	sub    $0xc,%esp
c01043f8:	6a 01                	push   $0x1
c01043fa:	e8 f2 f1 ff ff       	call   c01035f1 <alloc_pages>
c01043ff:	83 c4 10             	add    $0x10,%esp
c0104402:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(page_insert(boot_pgdir, p2, PGSIZE, PTE_U | PTE_W) == 0);
c0104405:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010440a:	6a 06                	push   $0x6
c010440c:	68 00 10 00 00       	push   $0x1000
c0104411:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104414:	50                   	push   %eax
c0104415:	e8 26 fc ff ff       	call   c0104040 <page_insert>
c010441a:	83 c4 10             	add    $0x10,%esp
c010441d:	85 c0                	test   %eax,%eax
c010441f:	74 19                	je     c010443a <check_pgdir+0x223>
c0104421:	68 e8 38 11 c0       	push   $0xc01138e8
c0104426:	68 ed 36 11 c0       	push   $0xc01136ed
c010442b:	68 66 02 00 00       	push   $0x266
c0104430:	68 c8 36 11 c0       	push   $0xc01136c8
c0104435:	e8 ab c0 ff ff       	call   c01004e5 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010443a:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010443f:	83 ec 04             	sub    $0x4,%esp
c0104442:	6a 00                	push   $0x0
c0104444:	68 00 10 00 00       	push   $0x1000
c0104449:	50                   	push   %eax
c010444a:	e8 0e f8 ff ff       	call   c0103c5d <get_pte>
c010444f:	83 c4 10             	add    $0x10,%esp
c0104452:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104455:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0104459:	75 19                	jne    c0104474 <check_pgdir+0x25d>
c010445b:	68 20 39 11 c0       	push   $0xc0113920
c0104460:	68 ed 36 11 c0       	push   $0xc01136ed
c0104465:	68 67 02 00 00       	push   $0x267
c010446a:	68 c8 36 11 c0       	push   $0xc01136c8
c010446f:	e8 71 c0 ff ff       	call   c01004e5 <__panic>
    assert(*ptep & PTE_U);
c0104474:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104477:	8b 00                	mov    (%eax),%eax
c0104479:	83 e0 04             	and    $0x4,%eax
c010447c:	85 c0                	test   %eax,%eax
c010447e:	75 19                	jne    c0104499 <check_pgdir+0x282>
c0104480:	68 50 39 11 c0       	push   $0xc0113950
c0104485:	68 ed 36 11 c0       	push   $0xc01136ed
c010448a:	68 68 02 00 00       	push   $0x268
c010448f:	68 c8 36 11 c0       	push   $0xc01136c8
c0104494:	e8 4c c0 ff ff       	call   c01004e5 <__panic>
    assert(*ptep & PTE_W);
c0104499:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010449c:	8b 00                	mov    (%eax),%eax
c010449e:	83 e0 02             	and    $0x2,%eax
c01044a1:	85 c0                	test   %eax,%eax
c01044a3:	75 19                	jne    c01044be <check_pgdir+0x2a7>
c01044a5:	68 5e 39 11 c0       	push   $0xc011395e
c01044aa:	68 ed 36 11 c0       	push   $0xc01136ed
c01044af:	68 69 02 00 00       	push   $0x269
c01044b4:	68 c8 36 11 c0       	push   $0xc01136c8
c01044b9:	e8 27 c0 ff ff       	call   c01004e5 <__panic>
    assert(boot_pgdir[0] & PTE_U);
c01044be:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01044c3:	8b 00                	mov    (%eax),%eax
c01044c5:	83 e0 04             	and    $0x4,%eax
c01044c8:	85 c0                	test   %eax,%eax
c01044ca:	75 19                	jne    c01044e5 <check_pgdir+0x2ce>
c01044cc:	68 6c 39 11 c0       	push   $0xc011396c
c01044d1:	68 ed 36 11 c0       	push   $0xc01136ed
c01044d6:	68 6a 02 00 00       	push   $0x26a
c01044db:	68 c8 36 11 c0       	push   $0xc01136c8
c01044e0:	e8 00 c0 ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 1);
c01044e5:	83 ec 0c             	sub    $0xc,%esp
c01044e8:	ff 75 e4             	pushl  -0x1c(%ebp)
c01044eb:	e8 01 ef ff ff       	call   c01033f1 <page_ref>
c01044f0:	83 c4 10             	add    $0x10,%esp
c01044f3:	83 f8 01             	cmp    $0x1,%eax
c01044f6:	74 19                	je     c0104511 <check_pgdir+0x2fa>
c01044f8:	68 82 39 11 c0       	push   $0xc0113982
c01044fd:	68 ed 36 11 c0       	push   $0xc01136ed
c0104502:	68 6b 02 00 00       	push   $0x26b
c0104507:	68 c8 36 11 c0       	push   $0xc01136c8
c010450c:	e8 d4 bf ff ff       	call   c01004e5 <__panic>

    assert(page_insert(boot_pgdir, p1, PGSIZE, 0) == 0);
c0104511:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104516:	6a 00                	push   $0x0
c0104518:	68 00 10 00 00       	push   $0x1000
c010451d:	ff 75 f4             	pushl  -0xc(%ebp)
c0104520:	50                   	push   %eax
c0104521:	e8 1a fb ff ff       	call   c0104040 <page_insert>
c0104526:	83 c4 10             	add    $0x10,%esp
c0104529:	85 c0                	test   %eax,%eax
c010452b:	74 19                	je     c0104546 <check_pgdir+0x32f>
c010452d:	68 94 39 11 c0       	push   $0xc0113994
c0104532:	68 ed 36 11 c0       	push   $0xc01136ed
c0104537:	68 6d 02 00 00       	push   $0x26d
c010453c:	68 c8 36 11 c0       	push   $0xc01136c8
c0104541:	e8 9f bf ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p1) == 2);
c0104546:	83 ec 0c             	sub    $0xc,%esp
c0104549:	ff 75 f4             	pushl  -0xc(%ebp)
c010454c:	e8 a0 ee ff ff       	call   c01033f1 <page_ref>
c0104551:	83 c4 10             	add    $0x10,%esp
c0104554:	83 f8 02             	cmp    $0x2,%eax
c0104557:	74 19                	je     c0104572 <check_pgdir+0x35b>
c0104559:	68 c0 39 11 c0       	push   $0xc01139c0
c010455e:	68 ed 36 11 c0       	push   $0xc01136ed
c0104563:	68 6e 02 00 00       	push   $0x26e
c0104568:	68 c8 36 11 c0       	push   $0xc01136c8
c010456d:	e8 73 bf ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c0104572:	83 ec 0c             	sub    $0xc,%esp
c0104575:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104578:	e8 74 ee ff ff       	call   c01033f1 <page_ref>
c010457d:	83 c4 10             	add    $0x10,%esp
c0104580:	85 c0                	test   %eax,%eax
c0104582:	74 19                	je     c010459d <check_pgdir+0x386>
c0104584:	68 d2 39 11 c0       	push   $0xc01139d2
c0104589:	68 ed 36 11 c0       	push   $0xc01136ed
c010458e:	68 6f 02 00 00       	push   $0x26f
c0104593:	68 c8 36 11 c0       	push   $0xc01136c8
c0104598:	e8 48 bf ff ff       	call   c01004e5 <__panic>
    assert((ptep = get_pte(boot_pgdir, PGSIZE, 0)) != NULL);
c010459d:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01045a2:	83 ec 04             	sub    $0x4,%esp
c01045a5:	6a 00                	push   $0x0
c01045a7:	68 00 10 00 00       	push   $0x1000
c01045ac:	50                   	push   %eax
c01045ad:	e8 ab f6 ff ff       	call   c0103c5d <get_pte>
c01045b2:	83 c4 10             	add    $0x10,%esp
c01045b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01045b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01045bc:	75 19                	jne    c01045d7 <check_pgdir+0x3c0>
c01045be:	68 20 39 11 c0       	push   $0xc0113920
c01045c3:	68 ed 36 11 c0       	push   $0xc01136ed
c01045c8:	68 70 02 00 00       	push   $0x270
c01045cd:	68 c8 36 11 c0       	push   $0xc01136c8
c01045d2:	e8 0e bf ff ff       	call   c01004e5 <__panic>
    assert(pte2page(*ptep) == p1);
c01045d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01045da:	8b 00                	mov    (%eax),%eax
c01045dc:	83 ec 0c             	sub    $0xc,%esp
c01045df:	50                   	push   %eax
c01045e0:	e8 b6 ed ff ff       	call   c010339b <pte2page>
c01045e5:	83 c4 10             	add    $0x10,%esp
c01045e8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01045eb:	74 19                	je     c0104606 <check_pgdir+0x3ef>
c01045ed:	68 95 38 11 c0       	push   $0xc0113895
c01045f2:	68 ed 36 11 c0       	push   $0xc01136ed
c01045f7:	68 71 02 00 00       	push   $0x271
c01045fc:	68 c8 36 11 c0       	push   $0xc01136c8
c0104601:	e8 df be ff ff       	call   c01004e5 <__panic>
    assert((*ptep & PTE_U) == 0);
c0104606:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104609:	8b 00                	mov    (%eax),%eax
c010460b:	83 e0 04             	and    $0x4,%eax
c010460e:	85 c0                	test   %eax,%eax
c0104610:	74 19                	je     c010462b <check_pgdir+0x414>
c0104612:	68 e4 39 11 c0       	push   $0xc01139e4
c0104617:	68 ed 36 11 c0       	push   $0xc01136ed
c010461c:	68 72 02 00 00       	push   $0x272
c0104621:	68 c8 36 11 c0       	push   $0xc01136c8
c0104626:	e8 ba be ff ff       	call   c01004e5 <__panic>

    page_remove(boot_pgdir, 0x0);
c010462b:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104630:	83 ec 08             	sub    $0x8,%esp
c0104633:	6a 00                	push   $0x0
c0104635:	50                   	push   %eax
c0104636:	e8 d2 f9 ff ff       	call   c010400d <page_remove>
c010463b:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 1);
c010463e:	83 ec 0c             	sub    $0xc,%esp
c0104641:	ff 75 f4             	pushl  -0xc(%ebp)
c0104644:	e8 a8 ed ff ff       	call   c01033f1 <page_ref>
c0104649:	83 c4 10             	add    $0x10,%esp
c010464c:	83 f8 01             	cmp    $0x1,%eax
c010464f:	74 19                	je     c010466a <check_pgdir+0x453>
c0104651:	68 ab 38 11 c0       	push   $0xc01138ab
c0104656:	68 ed 36 11 c0       	push   $0xc01136ed
c010465b:	68 75 02 00 00       	push   $0x275
c0104660:	68 c8 36 11 c0       	push   $0xc01136c8
c0104665:	e8 7b be ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c010466a:	83 ec 0c             	sub    $0xc,%esp
c010466d:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104670:	e8 7c ed ff ff       	call   c01033f1 <page_ref>
c0104675:	83 c4 10             	add    $0x10,%esp
c0104678:	85 c0                	test   %eax,%eax
c010467a:	74 19                	je     c0104695 <check_pgdir+0x47e>
c010467c:	68 d2 39 11 c0       	push   $0xc01139d2
c0104681:	68 ed 36 11 c0       	push   $0xc01136ed
c0104686:	68 76 02 00 00       	push   $0x276
c010468b:	68 c8 36 11 c0       	push   $0xc01136c8
c0104690:	e8 50 be ff ff       	call   c01004e5 <__panic>

    page_remove(boot_pgdir, PGSIZE);
c0104695:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010469a:	83 ec 08             	sub    $0x8,%esp
c010469d:	68 00 10 00 00       	push   $0x1000
c01046a2:	50                   	push   %eax
c01046a3:	e8 65 f9 ff ff       	call   c010400d <page_remove>
c01046a8:	83 c4 10             	add    $0x10,%esp
    assert(page_ref(p1) == 0);
c01046ab:	83 ec 0c             	sub    $0xc,%esp
c01046ae:	ff 75 f4             	pushl  -0xc(%ebp)
c01046b1:	e8 3b ed ff ff       	call   c01033f1 <page_ref>
c01046b6:	83 c4 10             	add    $0x10,%esp
c01046b9:	85 c0                	test   %eax,%eax
c01046bb:	74 19                	je     c01046d6 <check_pgdir+0x4bf>
c01046bd:	68 f9 39 11 c0       	push   $0xc01139f9
c01046c2:	68 ed 36 11 c0       	push   $0xc01136ed
c01046c7:	68 79 02 00 00       	push   $0x279
c01046cc:	68 c8 36 11 c0       	push   $0xc01136c8
c01046d1:	e8 0f be ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p2) == 0);
c01046d6:	83 ec 0c             	sub    $0xc,%esp
c01046d9:	ff 75 e4             	pushl  -0x1c(%ebp)
c01046dc:	e8 10 ed ff ff       	call   c01033f1 <page_ref>
c01046e1:	83 c4 10             	add    $0x10,%esp
c01046e4:	85 c0                	test   %eax,%eax
c01046e6:	74 19                	je     c0104701 <check_pgdir+0x4ea>
c01046e8:	68 d2 39 11 c0       	push   $0xc01139d2
c01046ed:	68 ed 36 11 c0       	push   $0xc01136ed
c01046f2:	68 7a 02 00 00       	push   $0x27a
c01046f7:	68 c8 36 11 c0       	push   $0xc01136c8
c01046fc:	e8 e4 bd ff ff       	call   c01004e5 <__panic>

    assert(page_ref(pde2page(boot_pgdir[0])) == 1);
c0104701:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104706:	8b 00                	mov    (%eax),%eax
c0104708:	83 ec 0c             	sub    $0xc,%esp
c010470b:	50                   	push   %eax
c010470c:	e8 c4 ec ff ff       	call   c01033d5 <pde2page>
c0104711:	83 c4 10             	add    $0x10,%esp
c0104714:	83 ec 0c             	sub    $0xc,%esp
c0104717:	50                   	push   %eax
c0104718:	e8 d4 ec ff ff       	call   c01033f1 <page_ref>
c010471d:	83 c4 10             	add    $0x10,%esp
c0104720:	83 f8 01             	cmp    $0x1,%eax
c0104723:	74 19                	je     c010473e <check_pgdir+0x527>
c0104725:	68 0c 3a 11 c0       	push   $0xc0113a0c
c010472a:	68 ed 36 11 c0       	push   $0xc01136ed
c010472f:	68 7c 02 00 00       	push   $0x27c
c0104734:	68 c8 36 11 c0       	push   $0xc01136c8
c0104739:	e8 a7 bd ff ff       	call   c01004e5 <__panic>
    free_page(pde2page(boot_pgdir[0]));
c010473e:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104743:	8b 00                	mov    (%eax),%eax
c0104745:	83 ec 0c             	sub    $0xc,%esp
c0104748:	50                   	push   %eax
c0104749:	e8 87 ec ff ff       	call   c01033d5 <pde2page>
c010474e:	83 c4 10             	add    $0x10,%esp
c0104751:	83 ec 08             	sub    $0x8,%esp
c0104754:	6a 01                	push   $0x1
c0104756:	50                   	push   %eax
c0104757:	e8 01 ef ff ff       	call   c010365d <free_pages>
c010475c:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c010475f:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104764:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_pgdir() succeeded!\n");
c010476a:	83 ec 0c             	sub    $0xc,%esp
c010476d:	68 33 3a 11 c0       	push   $0xc0113a33
c0104772:	e8 08 bc ff ff       	call   c010037f <cprintf>
c0104777:	83 c4 10             	add    $0x10,%esp
}
c010477a:	90                   	nop
c010477b:	c9                   	leave  
c010477c:	c3                   	ret    

c010477d <check_boot_pgdir>:

static void
check_boot_pgdir(void) {
c010477d:	55                   	push   %ebp
c010477e:	89 e5                	mov    %esp,%ebp
c0104780:	83 ec 28             	sub    $0x28,%esp
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c0104783:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010478a:	e9 a3 00 00 00       	jmp    c0104832 <check_boot_pgdir+0xb5>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
c010478f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104792:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104795:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104798:	c1 e8 0c             	shr    $0xc,%eax
c010479b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010479e:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c01047a3:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c01047a6:	72 17                	jb     c01047bf <check_boot_pgdir+0x42>
c01047a8:	ff 75 f0             	pushl  -0x10(%ebp)
c01047ab:	68 00 36 11 c0       	push   $0xc0113600
c01047b0:	68 88 02 00 00       	push   $0x288
c01047b5:	68 c8 36 11 c0       	push   $0xc01136c8
c01047ba:	e8 26 bd ff ff       	call   c01004e5 <__panic>
c01047bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01047c2:	2d 00 00 00 40       	sub    $0x40000000,%eax
c01047c7:	89 c2                	mov    %eax,%edx
c01047c9:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01047ce:	83 ec 04             	sub    $0x4,%esp
c01047d1:	6a 00                	push   $0x0
c01047d3:	52                   	push   %edx
c01047d4:	50                   	push   %eax
c01047d5:	e8 83 f4 ff ff       	call   c0103c5d <get_pte>
c01047da:	83 c4 10             	add    $0x10,%esp
c01047dd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01047e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01047e4:	75 19                	jne    c01047ff <check_boot_pgdir+0x82>
c01047e6:	68 50 3a 11 c0       	push   $0xc0113a50
c01047eb:	68 ed 36 11 c0       	push   $0xc01136ed
c01047f0:	68 88 02 00 00       	push   $0x288
c01047f5:	68 c8 36 11 c0       	push   $0xc01136c8
c01047fa:	e8 e6 bc ff ff       	call   c01004e5 <__panic>
        assert(PTE_ADDR(*ptep) == i);
c01047ff:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104802:	8b 00                	mov    (%eax),%eax
c0104804:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104809:	89 c2                	mov    %eax,%edx
c010480b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010480e:	39 c2                	cmp    %eax,%edx
c0104810:	74 19                	je     c010482b <check_boot_pgdir+0xae>
c0104812:	68 8d 3a 11 c0       	push   $0xc0113a8d
c0104817:	68 ed 36 11 c0       	push   $0xc01136ed
c010481c:	68 89 02 00 00       	push   $0x289
c0104821:	68 c8 36 11 c0       	push   $0xc01136c8
c0104826:	e8 ba bc ff ff       	call   c01004e5 <__panic>

static void
check_boot_pgdir(void) {
    pte_t *ptep;
    int i;
    for (i = 0; i < npage; i += PGSIZE) {
c010482b:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
c0104832:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0104835:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010483a:	39 c2                	cmp    %eax,%edx
c010483c:	0f 82 4d ff ff ff    	jb     c010478f <check_boot_pgdir+0x12>
        assert((ptep = get_pte(boot_pgdir, (uintptr_t)KADDR(i), 0)) != NULL);
        assert(PTE_ADDR(*ptep) == i);
    }

    assert(PDE_ADDR(boot_pgdir[PDX(VPT)]) == PADDR(boot_pgdir));
c0104842:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104847:	05 ac 0f 00 00       	add    $0xfac,%eax
c010484c:	8b 00                	mov    (%eax),%eax
c010484e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104853:	89 c2                	mov    %eax,%edx
c0104855:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010485a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010485d:	81 7d e4 ff ff ff bf 	cmpl   $0xbfffffff,-0x1c(%ebp)
c0104864:	77 17                	ja     c010487d <check_boot_pgdir+0x100>
c0104866:	ff 75 e4             	pushl  -0x1c(%ebp)
c0104869:	68 a4 36 11 c0       	push   $0xc01136a4
c010486e:	68 8c 02 00 00       	push   $0x28c
c0104873:	68 c8 36 11 c0       	push   $0xc01136c8
c0104878:	e8 68 bc ff ff       	call   c01004e5 <__panic>
c010487d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104880:	05 00 00 00 40       	add    $0x40000000,%eax
c0104885:	39 c2                	cmp    %eax,%edx
c0104887:	74 19                	je     c01048a2 <check_boot_pgdir+0x125>
c0104889:	68 a4 3a 11 c0       	push   $0xc0113aa4
c010488e:	68 ed 36 11 c0       	push   $0xc01136ed
c0104893:	68 8c 02 00 00       	push   $0x28c
c0104898:	68 c8 36 11 c0       	push   $0xc01136c8
c010489d:	e8 43 bc ff ff       	call   c01004e5 <__panic>

    assert(boot_pgdir[0] == 0);
c01048a2:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01048a7:	8b 00                	mov    (%eax),%eax
c01048a9:	85 c0                	test   %eax,%eax
c01048ab:	74 19                	je     c01048c6 <check_boot_pgdir+0x149>
c01048ad:	68 d8 3a 11 c0       	push   $0xc0113ad8
c01048b2:	68 ed 36 11 c0       	push   $0xc01136ed
c01048b7:	68 8e 02 00 00       	push   $0x28e
c01048bc:	68 c8 36 11 c0       	push   $0xc01136c8
c01048c1:	e8 1f bc ff ff       	call   c01004e5 <__panic>

    struct Page *p;
    p = alloc_page();
c01048c6:	83 ec 0c             	sub    $0xc,%esp
c01048c9:	6a 01                	push   $0x1
c01048cb:	e8 21 ed ff ff       	call   c01035f1 <alloc_pages>
c01048d0:	83 c4 10             	add    $0x10,%esp
c01048d3:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(page_insert(boot_pgdir, p, 0x100, PTE_W) == 0);
c01048d6:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c01048db:	6a 02                	push   $0x2
c01048dd:	68 00 01 00 00       	push   $0x100
c01048e2:	ff 75 e0             	pushl  -0x20(%ebp)
c01048e5:	50                   	push   %eax
c01048e6:	e8 55 f7 ff ff       	call   c0104040 <page_insert>
c01048eb:	83 c4 10             	add    $0x10,%esp
c01048ee:	85 c0                	test   %eax,%eax
c01048f0:	74 19                	je     c010490b <check_boot_pgdir+0x18e>
c01048f2:	68 ec 3a 11 c0       	push   $0xc0113aec
c01048f7:	68 ed 36 11 c0       	push   $0xc01136ed
c01048fc:	68 92 02 00 00       	push   $0x292
c0104901:	68 c8 36 11 c0       	push   $0xc01136c8
c0104906:	e8 da bb ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p) == 1);
c010490b:	83 ec 0c             	sub    $0xc,%esp
c010490e:	ff 75 e0             	pushl  -0x20(%ebp)
c0104911:	e8 db ea ff ff       	call   c01033f1 <page_ref>
c0104916:	83 c4 10             	add    $0x10,%esp
c0104919:	83 f8 01             	cmp    $0x1,%eax
c010491c:	74 19                	je     c0104937 <check_boot_pgdir+0x1ba>
c010491e:	68 1a 3b 11 c0       	push   $0xc0113b1a
c0104923:	68 ed 36 11 c0       	push   $0xc01136ed
c0104928:	68 93 02 00 00       	push   $0x293
c010492d:	68 c8 36 11 c0       	push   $0xc01136c8
c0104932:	e8 ae bb ff ff       	call   c01004e5 <__panic>
    assert(page_insert(boot_pgdir, p, 0x100 + PGSIZE, PTE_W) == 0);
c0104937:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010493c:	6a 02                	push   $0x2
c010493e:	68 00 11 00 00       	push   $0x1100
c0104943:	ff 75 e0             	pushl  -0x20(%ebp)
c0104946:	50                   	push   %eax
c0104947:	e8 f4 f6 ff ff       	call   c0104040 <page_insert>
c010494c:	83 c4 10             	add    $0x10,%esp
c010494f:	85 c0                	test   %eax,%eax
c0104951:	74 19                	je     c010496c <check_boot_pgdir+0x1ef>
c0104953:	68 2c 3b 11 c0       	push   $0xc0113b2c
c0104958:	68 ed 36 11 c0       	push   $0xc01136ed
c010495d:	68 94 02 00 00       	push   $0x294
c0104962:	68 c8 36 11 c0       	push   $0xc01136c8
c0104967:	e8 79 bb ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p) == 2);
c010496c:	83 ec 0c             	sub    $0xc,%esp
c010496f:	ff 75 e0             	pushl  -0x20(%ebp)
c0104972:	e8 7a ea ff ff       	call   c01033f1 <page_ref>
c0104977:	83 c4 10             	add    $0x10,%esp
c010497a:	83 f8 02             	cmp    $0x2,%eax
c010497d:	74 19                	je     c0104998 <check_boot_pgdir+0x21b>
c010497f:	68 63 3b 11 c0       	push   $0xc0113b63
c0104984:	68 ed 36 11 c0       	push   $0xc01136ed
c0104989:	68 95 02 00 00       	push   $0x295
c010498e:	68 c8 36 11 c0       	push   $0xc01136c8
c0104993:	e8 4d bb ff ff       	call   c01004e5 <__panic>

    const char *str = "ucore: Hello world!!";
c0104998:	c7 45 dc 74 3b 11 c0 	movl   $0xc0113b74,-0x24(%ebp)
    strcpy((void *)0x100, str);
c010499f:	83 ec 08             	sub    $0x8,%esp
c01049a2:	ff 75 dc             	pushl  -0x24(%ebp)
c01049a5:	68 00 01 00 00       	push   $0x100
c01049aa:	e8 7d d7 00 00       	call   c011212c <strcpy>
c01049af:	83 c4 10             	add    $0x10,%esp
    assert(strcmp((void *)0x100, (void *)(0x100 + PGSIZE)) == 0);
c01049b2:	83 ec 08             	sub    $0x8,%esp
c01049b5:	68 00 11 00 00       	push   $0x1100
c01049ba:	68 00 01 00 00       	push   $0x100
c01049bf:	e8 e2 d7 00 00       	call   c01121a6 <strcmp>
c01049c4:	83 c4 10             	add    $0x10,%esp
c01049c7:	85 c0                	test   %eax,%eax
c01049c9:	74 19                	je     c01049e4 <check_boot_pgdir+0x267>
c01049cb:	68 8c 3b 11 c0       	push   $0xc0113b8c
c01049d0:	68 ed 36 11 c0       	push   $0xc01136ed
c01049d5:	68 99 02 00 00       	push   $0x299
c01049da:	68 c8 36 11 c0       	push   $0xc01136c8
c01049df:	e8 01 bb ff ff       	call   c01004e5 <__panic>

    *(char *)(page2kva(p) + 0x100) = '\0';
c01049e4:	83 ec 0c             	sub    $0xc,%esp
c01049e7:	ff 75 e0             	pushl  -0x20(%ebp)
c01049ea:	e8 67 e9 ff ff       	call   c0103356 <page2kva>
c01049ef:	83 c4 10             	add    $0x10,%esp
c01049f2:	05 00 01 00 00       	add    $0x100,%eax
c01049f7:	c6 00 00             	movb   $0x0,(%eax)
    assert(strlen((const char *)0x100) == 0);
c01049fa:	83 ec 0c             	sub    $0xc,%esp
c01049fd:	68 00 01 00 00       	push   $0x100
c0104a02:	e8 a4 d6 00 00       	call   c01120ab <strlen>
c0104a07:	83 c4 10             	add    $0x10,%esp
c0104a0a:	85 c0                	test   %eax,%eax
c0104a0c:	74 19                	je     c0104a27 <check_boot_pgdir+0x2aa>
c0104a0e:	68 c4 3b 11 c0       	push   $0xc0113bc4
c0104a13:	68 ed 36 11 c0       	push   $0xc01136ed
c0104a18:	68 9c 02 00 00       	push   $0x29c
c0104a1d:	68 c8 36 11 c0       	push   $0xc01136c8
c0104a22:	e8 be ba ff ff       	call   c01004e5 <__panic>

    free_page(p);
c0104a27:	83 ec 08             	sub    $0x8,%esp
c0104a2a:	6a 01                	push   $0x1
c0104a2c:	ff 75 e0             	pushl  -0x20(%ebp)
c0104a2f:	e8 29 ec ff ff       	call   c010365d <free_pages>
c0104a34:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(boot_pgdir[0]));
c0104a37:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104a3c:	8b 00                	mov    (%eax),%eax
c0104a3e:	83 ec 0c             	sub    $0xc,%esp
c0104a41:	50                   	push   %eax
c0104a42:	e8 8e e9 ff ff       	call   c01033d5 <pde2page>
c0104a47:	83 c4 10             	add    $0x10,%esp
c0104a4a:	83 ec 08             	sub    $0x8,%esp
c0104a4d:	6a 01                	push   $0x1
c0104a4f:	50                   	push   %eax
c0104a50:	e8 08 ec ff ff       	call   c010365d <free_pages>
c0104a55:	83 c4 10             	add    $0x10,%esp
    boot_pgdir[0] = 0;
c0104a58:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c0104a5d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    cprintf("check_boot_pgdir() succeeded!\n");
c0104a63:	83 ec 0c             	sub    $0xc,%esp
c0104a66:	68 e8 3b 11 c0       	push   $0xc0113be8
c0104a6b:	e8 0f b9 ff ff       	call   c010037f <cprintf>
c0104a70:	83 c4 10             	add    $0x10,%esp
}
c0104a73:	90                   	nop
c0104a74:	c9                   	leave  
c0104a75:	c3                   	ret    

c0104a76 <perm2str>:

//perm2str - use string 'u,r,w,-' to present the permission
static const char *
perm2str(int perm) {
c0104a76:	55                   	push   %ebp
c0104a77:	89 e5                	mov    %esp,%ebp
    static char str[4];
    str[0] = (perm & PTE_U) ? 'u' : '-';
c0104a79:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a7c:	83 e0 04             	and    $0x4,%eax
c0104a7f:	85 c0                	test   %eax,%eax
c0104a81:	74 07                	je     c0104a8a <perm2str+0x14>
c0104a83:	b8 75 00 00 00       	mov    $0x75,%eax
c0104a88:	eb 05                	jmp    c0104a8f <perm2str+0x19>
c0104a8a:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0104a8f:	a2 08 f0 14 c0       	mov    %al,0xc014f008
    str[1] = 'r';
c0104a94:	c6 05 09 f0 14 c0 72 	movb   $0x72,0xc014f009
    str[2] = (perm & PTE_W) ? 'w' : '-';
c0104a9b:	8b 45 08             	mov    0x8(%ebp),%eax
c0104a9e:	83 e0 02             	and    $0x2,%eax
c0104aa1:	85 c0                	test   %eax,%eax
c0104aa3:	74 07                	je     c0104aac <perm2str+0x36>
c0104aa5:	b8 77 00 00 00       	mov    $0x77,%eax
c0104aaa:	eb 05                	jmp    c0104ab1 <perm2str+0x3b>
c0104aac:	b8 2d 00 00 00       	mov    $0x2d,%eax
c0104ab1:	a2 0a f0 14 c0       	mov    %al,0xc014f00a
    str[3] = '\0';
c0104ab6:	c6 05 0b f0 14 c0 00 	movb   $0x0,0xc014f00b
    return str;
c0104abd:	b8 08 f0 14 c0       	mov    $0xc014f008,%eax
}
c0104ac2:	5d                   	pop    %ebp
c0104ac3:	c3                   	ret    

c0104ac4 <get_pgtable_items>:
//  table:       the beginning addr of table
//  left_store:  the pointer of the high side of table's next range
//  right_store: the pointer of the low side of table's next range
// return value: 0 - not a invalid item range, perm - a valid item range with perm permission 
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
c0104ac4:	55                   	push   %ebp
c0104ac5:	89 e5                	mov    %esp,%ebp
c0104ac7:	83 ec 10             	sub    $0x10,%esp
    if (start >= right) {
c0104aca:	8b 45 10             	mov    0x10(%ebp),%eax
c0104acd:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104ad0:	72 0e                	jb     c0104ae0 <get_pgtable_items+0x1c>
        return 0;
c0104ad2:	b8 00 00 00 00       	mov    $0x0,%eax
c0104ad7:	e9 9a 00 00 00       	jmp    c0104b76 <get_pgtable_items+0xb2>
    }
    while (start < right && !(table[start] & PTE_P)) {
        start ++;
c0104adc:	83 45 10 01          	addl   $0x1,0x10(%ebp)
static int
get_pgtable_items(size_t left, size_t right, size_t start, uintptr_t *table, size_t *left_store, size_t *right_store) {
    if (start >= right) {
        return 0;
    }
    while (start < right && !(table[start] & PTE_P)) {
c0104ae0:	8b 45 10             	mov    0x10(%ebp),%eax
c0104ae3:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104ae6:	73 18                	jae    c0104b00 <get_pgtable_items+0x3c>
c0104ae8:	8b 45 10             	mov    0x10(%ebp),%eax
c0104aeb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0104af2:	8b 45 14             	mov    0x14(%ebp),%eax
c0104af5:	01 d0                	add    %edx,%eax
c0104af7:	8b 00                	mov    (%eax),%eax
c0104af9:	83 e0 01             	and    $0x1,%eax
c0104afc:	85 c0                	test   %eax,%eax
c0104afe:	74 dc                	je     c0104adc <get_pgtable_items+0x18>
        start ++;
    }
    if (start < right) {
c0104b00:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b03:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104b06:	73 69                	jae    c0104b71 <get_pgtable_items+0xad>
        if (left_store != NULL) {
c0104b08:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0104b0c:	74 08                	je     c0104b16 <get_pgtable_items+0x52>
            *left_store = start;
c0104b0e:	8b 45 18             	mov    0x18(%ebp),%eax
c0104b11:	8b 55 10             	mov    0x10(%ebp),%edx
c0104b14:	89 10                	mov    %edx,(%eax)
        }
        int perm = (table[start ++] & PTE_USER);
c0104b16:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b19:	8d 50 01             	lea    0x1(%eax),%edx
c0104b1c:	89 55 10             	mov    %edx,0x10(%ebp)
c0104b1f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0104b26:	8b 45 14             	mov    0x14(%ebp),%eax
c0104b29:	01 d0                	add    %edx,%eax
c0104b2b:	8b 00                	mov    (%eax),%eax
c0104b2d:	83 e0 07             	and    $0x7,%eax
c0104b30:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while (start < right && (table[start] & PTE_USER) == perm) {
c0104b33:	eb 04                	jmp    c0104b39 <get_pgtable_items+0x75>
            start ++;
c0104b35:	83 45 10 01          	addl   $0x1,0x10(%ebp)
    if (start < right) {
        if (left_store != NULL) {
            *left_store = start;
        }
        int perm = (table[start ++] & PTE_USER);
        while (start < right && (table[start] & PTE_USER) == perm) {
c0104b39:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b3c:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104b3f:	73 1d                	jae    c0104b5e <get_pgtable_items+0x9a>
c0104b41:	8b 45 10             	mov    0x10(%ebp),%eax
c0104b44:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0104b4b:	8b 45 14             	mov    0x14(%ebp),%eax
c0104b4e:	01 d0                	add    %edx,%eax
c0104b50:	8b 00                	mov    (%eax),%eax
c0104b52:	83 e0 07             	and    $0x7,%eax
c0104b55:	89 c2                	mov    %eax,%edx
c0104b57:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104b5a:	39 c2                	cmp    %eax,%edx
c0104b5c:	74 d7                	je     c0104b35 <get_pgtable_items+0x71>
            start ++;
        }
        if (right_store != NULL) {
c0104b5e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c0104b62:	74 08                	je     c0104b6c <get_pgtable_items+0xa8>
            *right_store = start;
c0104b64:	8b 45 1c             	mov    0x1c(%ebp),%eax
c0104b67:	8b 55 10             	mov    0x10(%ebp),%edx
c0104b6a:	89 10                	mov    %edx,(%eax)
        }
        return perm;
c0104b6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104b6f:	eb 05                	jmp    c0104b76 <get_pgtable_items+0xb2>
    }
    return 0;
c0104b71:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0104b76:	c9                   	leave  
c0104b77:	c3                   	ret    

c0104b78 <print_pgdir>:

//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
c0104b78:	55                   	push   %ebp
c0104b79:	89 e5                	mov    %esp,%ebp
c0104b7b:	57                   	push   %edi
c0104b7c:	56                   	push   %esi
c0104b7d:	53                   	push   %ebx
c0104b7e:	83 ec 2c             	sub    $0x2c,%esp
    cprintf("-------------------- BEGIN --------------------\n");
c0104b81:	83 ec 0c             	sub    $0xc,%esp
c0104b84:	68 08 3c 11 c0       	push   $0xc0113c08
c0104b89:	e8 f1 b7 ff ff       	call   c010037f <cprintf>
c0104b8e:	83 c4 10             	add    $0x10,%esp
    size_t left, right = 0, perm;
c0104b91:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0104b98:	e9 e5 00 00 00       	jmp    c0104c82 <print_pgdir+0x10a>
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0104b9d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104ba0:	83 ec 0c             	sub    $0xc,%esp
c0104ba3:	50                   	push   %eax
c0104ba4:	e8 cd fe ff ff       	call   c0104a76 <perm2str>
c0104ba9:	83 c4 10             	add    $0x10,%esp
c0104bac:	89 c7                	mov    %eax,%edi
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
c0104bae:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104bb1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bb4:	29 c2                	sub    %eax,%edx
c0104bb6:	89 d0                	mov    %edx,%eax
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
c0104bb8:	c1 e0 16             	shl    $0x16,%eax
c0104bbb:	89 c3                	mov    %eax,%ebx
c0104bbd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104bc0:	c1 e0 16             	shl    $0x16,%eax
c0104bc3:	89 c1                	mov    %eax,%ecx
c0104bc5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bc8:	c1 e0 16             	shl    $0x16,%eax
c0104bcb:	89 c2                	mov    %eax,%edx
c0104bcd:	8b 75 dc             	mov    -0x24(%ebp),%esi
c0104bd0:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bd3:	29 c6                	sub    %eax,%esi
c0104bd5:	89 f0                	mov    %esi,%eax
c0104bd7:	83 ec 08             	sub    $0x8,%esp
c0104bda:	57                   	push   %edi
c0104bdb:	53                   	push   %ebx
c0104bdc:	51                   	push   %ecx
c0104bdd:	52                   	push   %edx
c0104bde:	50                   	push   %eax
c0104bdf:	68 39 3c 11 c0       	push   $0xc0113c39
c0104be4:	e8 96 b7 ff ff       	call   c010037f <cprintf>
c0104be9:	83 c4 20             	add    $0x20,%esp
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
c0104bec:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0104bef:	c1 e0 0a             	shl    $0xa,%eax
c0104bf2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0104bf5:	eb 4f                	jmp    c0104c46 <print_pgdir+0xce>
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0104bf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104bfa:	83 ec 0c             	sub    $0xc,%esp
c0104bfd:	50                   	push   %eax
c0104bfe:	e8 73 fe ff ff       	call   c0104a76 <perm2str>
c0104c03:	83 c4 10             	add    $0x10,%esp
c0104c06:	89 c7                	mov    %eax,%edi
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
c0104c08:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0104c0b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104c0e:	29 c2                	sub    %eax,%edx
c0104c10:	89 d0                	mov    %edx,%eax
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
c0104c12:	c1 e0 0c             	shl    $0xc,%eax
c0104c15:	89 c3                	mov    %eax,%ebx
c0104c17:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104c1a:	c1 e0 0c             	shl    $0xc,%eax
c0104c1d:	89 c1                	mov    %eax,%ecx
c0104c1f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104c22:	c1 e0 0c             	shl    $0xc,%eax
c0104c25:	89 c2                	mov    %eax,%edx
c0104c27:	8b 75 d4             	mov    -0x2c(%ebp),%esi
c0104c2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104c2d:	29 c6                	sub    %eax,%esi
c0104c2f:	89 f0                	mov    %esi,%eax
c0104c31:	83 ec 08             	sub    $0x8,%esp
c0104c34:	57                   	push   %edi
c0104c35:	53                   	push   %ebx
c0104c36:	51                   	push   %ecx
c0104c37:	52                   	push   %edx
c0104c38:	50                   	push   %eax
c0104c39:	68 58 3c 11 c0       	push   $0xc0113c58
c0104c3e:	e8 3c b7 ff ff       	call   c010037f <cprintf>
c0104c43:	83 c4 20             	add    $0x20,%esp
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
        cprintf("PDE(%03x) %08x-%08x %08x %s\n", right - left,
                left * PTSIZE, right * PTSIZE, (right - left) * PTSIZE, perm2str(perm));
        size_t l, r = left * NPTEENTRY;
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
c0104c46:	be 00 00 c0 fa       	mov    $0xfac00000,%esi
c0104c4b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0104c4e:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0104c51:	89 d3                	mov    %edx,%ebx
c0104c53:	c1 e3 0a             	shl    $0xa,%ebx
c0104c56:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0104c59:	89 d1                	mov    %edx,%ecx
c0104c5b:	c1 e1 0a             	shl    $0xa,%ecx
c0104c5e:	83 ec 08             	sub    $0x8,%esp
c0104c61:	8d 55 d4             	lea    -0x2c(%ebp),%edx
c0104c64:	52                   	push   %edx
c0104c65:	8d 55 d8             	lea    -0x28(%ebp),%edx
c0104c68:	52                   	push   %edx
c0104c69:	56                   	push   %esi
c0104c6a:	50                   	push   %eax
c0104c6b:	53                   	push   %ebx
c0104c6c:	51                   	push   %ecx
c0104c6d:	e8 52 fe ff ff       	call   c0104ac4 <get_pgtable_items>
c0104c72:	83 c4 20             	add    $0x20,%esp
c0104c75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104c78:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104c7c:	0f 85 75 ff ff ff    	jne    c0104bf7 <print_pgdir+0x7f>
//print_pgdir - print the PDT&PT
void
print_pgdir(void) {
    cprintf("-------------------- BEGIN --------------------\n");
    size_t left, right = 0, perm;
    while ((perm = get_pgtable_items(0, NPDEENTRY, right, vpd, &left, &right)) != 0) {
c0104c82:	b9 00 b0 fe fa       	mov    $0xfafeb000,%ecx
c0104c87:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104c8a:	83 ec 08             	sub    $0x8,%esp
c0104c8d:	8d 55 dc             	lea    -0x24(%ebp),%edx
c0104c90:	52                   	push   %edx
c0104c91:	8d 55 e0             	lea    -0x20(%ebp),%edx
c0104c94:	52                   	push   %edx
c0104c95:	51                   	push   %ecx
c0104c96:	50                   	push   %eax
c0104c97:	68 00 04 00 00       	push   $0x400
c0104c9c:	6a 00                	push   $0x0
c0104c9e:	e8 21 fe ff ff       	call   c0104ac4 <get_pgtable_items>
c0104ca3:	83 c4 20             	add    $0x20,%esp
c0104ca6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0104ca9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0104cad:	0f 85 ea fe ff ff    	jne    c0104b9d <print_pgdir+0x25>
        while ((perm = get_pgtable_items(left * NPTEENTRY, right * NPTEENTRY, r, vpt, &l, &r)) != 0) {
            cprintf("  |-- PTE(%05x) %08x-%08x %08x %s\n", r - l,
                    l * PGSIZE, r * PGSIZE, (r - l) * PGSIZE, perm2str(perm));
        }
    }
    cprintf("--------------------- END ---------------------\n");
c0104cb3:	83 ec 0c             	sub    $0xc,%esp
c0104cb6:	68 7c 3c 11 c0       	push   $0xc0113c7c
c0104cbb:	e8 bf b6 ff ff       	call   c010037f <cprintf>
c0104cc0:	83 c4 10             	add    $0x10,%esp
}
c0104cc3:	90                   	nop
c0104cc4:	8d 65 f4             	lea    -0xc(%ebp),%esp
c0104cc7:	5b                   	pop    %ebx
c0104cc8:	5e                   	pop    %esi
c0104cc9:	5f                   	pop    %edi
c0104cca:	5d                   	pop    %ebp
c0104ccb:	c3                   	ret    

c0104ccc <mm_count>:
bool copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable);
bool copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len);
bool copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn);

static inline int
mm_count(struct mm_struct *mm) {
c0104ccc:	55                   	push   %ebp
c0104ccd:	89 e5                	mov    %esp,%ebp
    return mm->mm_count;
c0104ccf:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cd2:	8b 40 18             	mov    0x18(%eax),%eax
}
c0104cd5:	5d                   	pop    %ebp
c0104cd6:	c3                   	ret    

c0104cd7 <set_mm_count>:

static inline void
set_mm_count(struct mm_struct *mm, int val) {
c0104cd7:	55                   	push   %ebp
c0104cd8:	89 e5                	mov    %esp,%ebp
    mm->mm_count = val;
c0104cda:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cdd:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104ce0:	89 50 18             	mov    %edx,0x18(%eax)
}
c0104ce3:	90                   	nop
c0104ce4:	5d                   	pop    %ebp
c0104ce5:	c3                   	ret    

c0104ce6 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0104ce6:	55                   	push   %ebp
c0104ce7:	89 e5                	mov    %esp,%ebp
c0104ce9:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0104cec:	8b 45 08             	mov    0x8(%ebp),%eax
c0104cef:	c1 e8 0c             	shr    $0xc,%eax
c0104cf2:	89 c2                	mov    %eax,%edx
c0104cf4:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0104cf9:	39 c2                	cmp    %eax,%edx
c0104cfb:	72 14                	jb     c0104d11 <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0104cfd:	83 ec 04             	sub    $0x4,%esp
c0104d00:	68 b0 3c 11 c0       	push   $0xc0113cb0
c0104d05:	6a 5e                	push   $0x5e
c0104d07:	68 cf 3c 11 c0       	push   $0xc0113ccf
c0104d0c:	e8 d4 b7 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0104d11:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c0104d16:	8b 55 08             	mov    0x8(%ebp),%edx
c0104d19:	c1 ea 0c             	shr    $0xc,%edx
c0104d1c:	c1 e2 05             	shl    $0x5,%edx
c0104d1f:	01 d0                	add    %edx,%eax
}
c0104d21:	c9                   	leave  
c0104d22:	c3                   	ret    

c0104d23 <pde2page>:
    }
    return pa2page(PTE_ADDR(pte));
}

static inline struct Page *
pde2page(pde_t pde) {
c0104d23:	55                   	push   %ebp
c0104d24:	89 e5                	mov    %esp,%ebp
c0104d26:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0104d29:	8b 45 08             	mov    0x8(%ebp),%eax
c0104d2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0104d31:	83 ec 0c             	sub    $0xc,%esp
c0104d34:	50                   	push   %eax
c0104d35:	e8 ac ff ff ff       	call   c0104ce6 <pa2page>
c0104d3a:	83 c4 10             	add    $0x10,%esp
}
c0104d3d:	c9                   	leave  
c0104d3e:	c3                   	ret    

c0104d3f <mm_create>:
static void check_vma_struct(void);
static void check_pgfault(void);

// mm_create -  alloc a mm_struct & initialize it.
struct mm_struct *
mm_create(void) {
c0104d3f:	55                   	push   %ebp
c0104d40:	89 e5                	mov    %esp,%ebp
c0104d42:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = kmalloc(sizeof(struct mm_struct));
c0104d45:	83 ec 0c             	sub    $0xc,%esp
c0104d48:	6a 2c                	push   $0x2c
c0104d4a:	e8 f5 20 00 00       	call   c0106e44 <kmalloc>
c0104d4f:	83 c4 10             	add    $0x10,%esp
c0104d52:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (mm != NULL) {
c0104d55:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104d59:	74 7f                	je     c0104dda <mm_create+0x9b>
        list_init(&(mm->mmap_list));
c0104d5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0104d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d64:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0104d67:	89 50 04             	mov    %edx,0x4(%eax)
c0104d6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d6d:	8b 50 04             	mov    0x4(%eax),%edx
c0104d70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104d73:	89 10                	mov    %edx,(%eax)
        mm->mmap_cache = NULL;
c0104d75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d78:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        mm->pgdir = NULL;
c0104d7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d82:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        mm->map_count = 0;
c0104d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104d8c:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)

        if (swap_init_ok) swap_init_mm(mm);
c0104d93:	a1 10 f0 14 c0       	mov    0xc014f010,%eax
c0104d98:	85 c0                	test   %eax,%eax
c0104d9a:	74 10                	je     c0104dac <mm_create+0x6d>
c0104d9c:	83 ec 0c             	sub    $0xc,%esp
c0104d9f:	ff 75 f4             	pushl  -0xc(%ebp)
c0104da2:	e8 d3 10 00 00       	call   c0105e7a <swap_init_mm>
c0104da7:	83 c4 10             	add    $0x10,%esp
c0104daa:	eb 0a                	jmp    c0104db6 <mm_create+0x77>
        else mm->sm_priv = NULL;
c0104dac:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104daf:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
        
        set_mm_count(mm, 0);
c0104db6:	83 ec 08             	sub    $0x8,%esp
c0104db9:	6a 00                	push   $0x0
c0104dbb:	ff 75 f4             	pushl  -0xc(%ebp)
c0104dbe:	e8 14 ff ff ff       	call   c0104cd7 <set_mm_count>
c0104dc3:	83 c4 10             	add    $0x10,%esp
        sem_init(&(mm->mm_sem), 1);
c0104dc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dc9:	83 c0 1c             	add    $0x1c,%eax
c0104dcc:	83 ec 08             	sub    $0x8,%esp
c0104dcf:	6a 01                	push   $0x1
c0104dd1:	50                   	push   %eax
c0104dd2:	e8 3b 3f 00 00       	call   c0108d12 <sem_init>
c0104dd7:	83 c4 10             	add    $0x10,%esp
    }    
    return mm;
c0104dda:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104ddd:	c9                   	leave  
c0104dde:	c3                   	ret    

c0104ddf <vma_create>:

// vma_create - alloc a vma_struct & initialize it. (addr range: vm_start~vm_end)
struct vma_struct *
vma_create(uintptr_t vm_start, uintptr_t vm_end, uint32_t vm_flags) {
c0104ddf:	55                   	push   %ebp
c0104de0:	89 e5                	mov    %esp,%ebp
c0104de2:	83 ec 18             	sub    $0x18,%esp
    struct vma_struct *vma = kmalloc(sizeof(struct vma_struct));
c0104de5:	83 ec 0c             	sub    $0xc,%esp
c0104de8:	6a 18                	push   $0x18
c0104dea:	e8 55 20 00 00       	call   c0106e44 <kmalloc>
c0104def:	83 c4 10             	add    $0x10,%esp
c0104df2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (vma != NULL) {
c0104df5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0104df9:	74 1b                	je     c0104e16 <vma_create+0x37>
        vma->vm_start = vm_start;
c0104dfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104dfe:	8b 55 08             	mov    0x8(%ebp),%edx
c0104e01:	89 50 04             	mov    %edx,0x4(%eax)
        vma->vm_end = vm_end;
c0104e04:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e07:	8b 55 0c             	mov    0xc(%ebp),%edx
c0104e0a:	89 50 08             	mov    %edx,0x8(%eax)
        vma->vm_flags = vm_flags;
c0104e0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e10:	8b 55 10             	mov    0x10(%ebp),%edx
c0104e13:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    return vma;
c0104e16:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0104e19:	c9                   	leave  
c0104e1a:	c3                   	ret    

c0104e1b <find_vma>:


// find_vma - find a vma  (vma->vm_start <= addr <= vma_vm_end)
struct vma_struct *
find_vma(struct mm_struct *mm, uintptr_t addr) {
c0104e1b:	55                   	push   %ebp
c0104e1c:	89 e5                	mov    %esp,%ebp
c0104e1e:	83 ec 20             	sub    $0x20,%esp
    struct vma_struct *vma = NULL;
c0104e21:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    if (mm != NULL) {
c0104e28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0104e2c:	0f 84 95 00 00 00    	je     c0104ec7 <find_vma+0xac>
        vma = mm->mmap_cache;
c0104e32:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e35:	8b 40 08             	mov    0x8(%eax),%eax
c0104e38:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
c0104e3b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0104e3f:	74 16                	je     c0104e57 <find_vma+0x3c>
c0104e41:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e44:	8b 40 04             	mov    0x4(%eax),%eax
c0104e47:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104e4a:	77 0b                	ja     c0104e57 <find_vma+0x3c>
c0104e4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e4f:	8b 40 08             	mov    0x8(%eax),%eax
c0104e52:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104e55:	77 61                	ja     c0104eb8 <find_vma+0x9d>
                bool found = 0;
c0104e57:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
                list_entry_t *list = &(mm->mmap_list), *le = list;
c0104e5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0104e61:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104e64:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
                while ((le = list_next(le)) != list) {
c0104e6a:	eb 28                	jmp    c0104e94 <find_vma+0x79>
                    vma = le2vma(le, list_link);
c0104e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e6f:	83 e8 10             	sub    $0x10,%eax
c0104e72:	89 45 fc             	mov    %eax,-0x4(%ebp)
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
c0104e75:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e78:	8b 40 04             	mov    0x4(%eax),%eax
c0104e7b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104e7e:	77 14                	ja     c0104e94 <find_vma+0x79>
c0104e80:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0104e83:	8b 40 08             	mov    0x8(%eax),%eax
c0104e86:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0104e89:	76 09                	jbe    c0104e94 <find_vma+0x79>
                        found = 1;
c0104e8b:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
                        break;
c0104e92:	eb 17                	jmp    c0104eab <find_vma+0x90>
c0104e94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104e97:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0104e9a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104e9d:	8b 40 04             	mov    0x4(%eax),%eax
    if (mm != NULL) {
        vma = mm->mmap_cache;
        if (!(vma != NULL && vma->vm_start <= addr && vma->vm_end > addr)) {
                bool found = 0;
                list_entry_t *list = &(mm->mmap_list), *le = list;
                while ((le = list_next(le)) != list) {
c0104ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104ea3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104ea6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0104ea9:	75 c1                	jne    c0104e6c <find_vma+0x51>
                    if (vma->vm_start<=addr && addr < vma->vm_end) {
                        found = 1;
                        break;
                    }
                }
                if (!found) {
c0104eab:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
c0104eaf:	75 07                	jne    c0104eb8 <find_vma+0x9d>
                    vma = NULL;
c0104eb1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                }
        }
        if (vma != NULL) {
c0104eb8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c0104ebc:	74 09                	je     c0104ec7 <find_vma+0xac>
            mm->mmap_cache = vma;
c0104ebe:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ec1:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0104ec4:	89 50 08             	mov    %edx,0x8(%eax)
        }
    }
    return vma;
c0104ec7:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0104eca:	c9                   	leave  
c0104ecb:	c3                   	ret    

c0104ecc <check_vma_overlap>:


// check_vma_overlap - check if vma1 overlaps vma2 ?
static inline void
check_vma_overlap(struct vma_struct *prev, struct vma_struct *next) {
c0104ecc:	55                   	push   %ebp
c0104ecd:	89 e5                	mov    %esp,%ebp
c0104ecf:	83 ec 08             	sub    $0x8,%esp
    assert(prev->vm_start < prev->vm_end);
c0104ed2:	8b 45 08             	mov    0x8(%ebp),%eax
c0104ed5:	8b 50 04             	mov    0x4(%eax),%edx
c0104ed8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104edb:	8b 40 08             	mov    0x8(%eax),%eax
c0104ede:	39 c2                	cmp    %eax,%edx
c0104ee0:	72 16                	jb     c0104ef8 <check_vma_overlap+0x2c>
c0104ee2:	68 dd 3c 11 c0       	push   $0xc0113cdd
c0104ee7:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0104eec:	6a 6b                	push   $0x6b
c0104eee:	68 10 3d 11 c0       	push   $0xc0113d10
c0104ef3:	e8 ed b5 ff ff       	call   c01004e5 <__panic>
    assert(prev->vm_end <= next->vm_start);
c0104ef8:	8b 45 08             	mov    0x8(%ebp),%eax
c0104efb:	8b 50 08             	mov    0x8(%eax),%edx
c0104efe:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f01:	8b 40 04             	mov    0x4(%eax),%eax
c0104f04:	39 c2                	cmp    %eax,%edx
c0104f06:	76 16                	jbe    c0104f1e <check_vma_overlap+0x52>
c0104f08:	68 20 3d 11 c0       	push   $0xc0113d20
c0104f0d:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0104f12:	6a 6c                	push   $0x6c
c0104f14:	68 10 3d 11 c0       	push   $0xc0113d10
c0104f19:	e8 c7 b5 ff ff       	call   c01004e5 <__panic>
    assert(next->vm_start < next->vm_end);
c0104f1e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f21:	8b 50 04             	mov    0x4(%eax),%edx
c0104f24:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f27:	8b 40 08             	mov    0x8(%eax),%eax
c0104f2a:	39 c2                	cmp    %eax,%edx
c0104f2c:	72 16                	jb     c0104f44 <check_vma_overlap+0x78>
c0104f2e:	68 3f 3d 11 c0       	push   $0xc0113d3f
c0104f33:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0104f38:	6a 6d                	push   $0x6d
c0104f3a:	68 10 3d 11 c0       	push   $0xc0113d10
c0104f3f:	e8 a1 b5 ff ff       	call   c01004e5 <__panic>
}
c0104f44:	90                   	nop
c0104f45:	c9                   	leave  
c0104f46:	c3                   	ret    

c0104f47 <insert_vma_struct>:


// insert_vma_struct -insert vma in mm's list link
void
insert_vma_struct(struct mm_struct *mm, struct vma_struct *vma) {
c0104f47:	55                   	push   %ebp
c0104f48:	89 e5                	mov    %esp,%ebp
c0104f4a:	83 ec 38             	sub    $0x38,%esp
    assert(vma->vm_start < vma->vm_end);
c0104f4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f50:	8b 50 04             	mov    0x4(%eax),%edx
c0104f53:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f56:	8b 40 08             	mov    0x8(%eax),%eax
c0104f59:	39 c2                	cmp    %eax,%edx
c0104f5b:	72 16                	jb     c0104f73 <insert_vma_struct+0x2c>
c0104f5d:	68 5d 3d 11 c0       	push   $0xc0113d5d
c0104f62:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0104f67:	6a 74                	push   $0x74
c0104f69:	68 10 3d 11 c0       	push   $0xc0113d10
c0104f6e:	e8 72 b5 ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &(mm->mmap_list);
c0104f73:	8b 45 08             	mov    0x8(%ebp),%eax
c0104f76:	89 45 ec             	mov    %eax,-0x14(%ebp)
    list_entry_t *le_prev = list, *le_next;
c0104f79:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f7c:	89 45 f4             	mov    %eax,-0xc(%ebp)

        list_entry_t *le = list;
c0104f7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0104f82:	89 45 f0             	mov    %eax,-0x10(%ebp)
        while ((le = list_next(le)) != list) {
c0104f85:	eb 1f                	jmp    c0104fa6 <insert_vma_struct+0x5f>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
c0104f87:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104f8a:	83 e8 10             	sub    $0x10,%eax
c0104f8d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (mmap_prev->vm_start > vma->vm_start) {
c0104f90:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0104f93:	8b 50 04             	mov    0x4(%eax),%edx
c0104f96:	8b 45 0c             	mov    0xc(%ebp),%eax
c0104f99:	8b 40 04             	mov    0x4(%eax),%eax
c0104f9c:	39 c2                	cmp    %eax,%edx
c0104f9e:	77 1f                	ja     c0104fbf <insert_vma_struct+0x78>
                break;
            }
            le_prev = le;
c0104fa0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0104fa6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fa9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0104fac:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0104faf:	8b 40 04             	mov    0x4(%eax),%eax
    assert(vma->vm_start < vma->vm_end);
    list_entry_t *list = &(mm->mmap_list);
    list_entry_t *le_prev = list, *le_next;

        list_entry_t *le = list;
        while ((le = list_next(le)) != list) {
c0104fb2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0104fb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0104fb8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104fbb:	75 ca                	jne    c0104f87 <insert_vma_struct+0x40>
c0104fbd:	eb 01                	jmp    c0104fc0 <insert_vma_struct+0x79>
            struct vma_struct *mmap_prev = le2vma(le, list_link);
            if (mmap_prev->vm_start > vma->vm_start) {
                break;
c0104fbf:	90                   	nop
c0104fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fc3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0104fc6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0104fc9:	8b 40 04             	mov    0x4(%eax),%eax
            }
            le_prev = le;
        }

    le_next = list_next(le_prev);
c0104fcc:	89 45 dc             	mov    %eax,-0x24(%ebp)

    /* check overlap */
    if (le_prev != list) {
c0104fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fd2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104fd5:	74 15                	je     c0104fec <insert_vma_struct+0xa5>
        check_vma_overlap(le2vma(le_prev, list_link), vma);
c0104fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0104fda:	83 e8 10             	sub    $0x10,%eax
c0104fdd:	83 ec 08             	sub    $0x8,%esp
c0104fe0:	ff 75 0c             	pushl  0xc(%ebp)
c0104fe3:	50                   	push   %eax
c0104fe4:	e8 e3 fe ff ff       	call   c0104ecc <check_vma_overlap>
c0104fe9:	83 c4 10             	add    $0x10,%esp
    }
    if (le_next != list) {
c0104fec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104fef:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0104ff2:	74 15                	je     c0105009 <insert_vma_struct+0xc2>
        check_vma_overlap(vma, le2vma(le_next, list_link));
c0104ff4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0104ff7:	83 e8 10             	sub    $0x10,%eax
c0104ffa:	83 ec 08             	sub    $0x8,%esp
c0104ffd:	50                   	push   %eax
c0104ffe:	ff 75 0c             	pushl  0xc(%ebp)
c0105001:	e8 c6 fe ff ff       	call   c0104ecc <check_vma_overlap>
c0105006:	83 c4 10             	add    $0x10,%esp
    }

    vma->vm_mm = mm;
c0105009:	8b 45 0c             	mov    0xc(%ebp),%eax
c010500c:	8b 55 08             	mov    0x8(%ebp),%edx
c010500f:	89 10                	mov    %edx,(%eax)
    list_add_after(le_prev, &(vma->list_link));
c0105011:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105014:	8d 50 10             	lea    0x10(%eax),%edx
c0105017:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010501a:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010501d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0105020:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105023:	8b 40 04             	mov    0x4(%eax),%eax
c0105026:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0105029:	89 55 d0             	mov    %edx,-0x30(%ebp)
c010502c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010502f:	89 55 cc             	mov    %edx,-0x34(%ebp)
c0105032:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0105035:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105038:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010503b:	89 10                	mov    %edx,(%eax)
c010503d:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0105040:	8b 10                	mov    (%eax),%edx
c0105042:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105045:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0105048:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010504b:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010504e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0105051:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105054:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0105057:	89 10                	mov    %edx,(%eax)

    mm->map_count ++;
c0105059:	8b 45 08             	mov    0x8(%ebp),%eax
c010505c:	8b 40 10             	mov    0x10(%eax),%eax
c010505f:	8d 50 01             	lea    0x1(%eax),%edx
c0105062:	8b 45 08             	mov    0x8(%ebp),%eax
c0105065:	89 50 10             	mov    %edx,0x10(%eax)
}
c0105068:	90                   	nop
c0105069:	c9                   	leave  
c010506a:	c3                   	ret    

c010506b <mm_destroy>:

// mm_destroy - free mm and mm internal fields
void
mm_destroy(struct mm_struct *mm) {
c010506b:	55                   	push   %ebp
c010506c:	89 e5                	mov    %esp,%ebp
c010506e:	83 ec 28             	sub    $0x28,%esp
    assert(mm_count(mm) == 0);
c0105071:	ff 75 08             	pushl  0x8(%ebp)
c0105074:	e8 53 fc ff ff       	call   c0104ccc <mm_count>
c0105079:	83 c4 04             	add    $0x4,%esp
c010507c:	85 c0                	test   %eax,%eax
c010507e:	74 19                	je     c0105099 <mm_destroy+0x2e>
c0105080:	68 79 3d 11 c0       	push   $0xc0113d79
c0105085:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010508a:	68 94 00 00 00       	push   $0x94
c010508f:	68 10 3d 11 c0       	push   $0xc0113d10
c0105094:	e8 4c b4 ff ff       	call   c01004e5 <__panic>

    list_entry_t *list = &(mm->mmap_list), *le;
c0105099:	8b 45 08             	mov    0x8(%ebp),%eax
c010509c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(list)) != list) {
c010509f:	eb 3a                	jmp    c01050db <mm_destroy+0x70>
c01050a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01050a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01050aa:	8b 40 04             	mov    0x4(%eax),%eax
c01050ad:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01050b0:	8b 12                	mov    (%edx),%edx
c01050b2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c01050b5:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01050b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01050bb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01050be:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01050c1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01050c4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01050c7:	89 10                	mov    %edx,(%eax)
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
c01050c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050cc:	83 e8 10             	sub    $0x10,%eax
c01050cf:	83 ec 0c             	sub    $0xc,%esp
c01050d2:	50                   	push   %eax
c01050d3:	e8 84 1d 00 00       	call   c0106e5c <kfree>
c01050d8:	83 c4 10             	add    $0x10,%esp
c01050db:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01050de:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c01050e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01050e4:	8b 40 04             	mov    0x4(%eax),%eax
void
mm_destroy(struct mm_struct *mm) {
    assert(mm_count(mm) == 0);

    list_entry_t *list = &(mm->mmap_list), *le;
    while ((le = list_next(list)) != list) {
c01050e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01050ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01050ed:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01050f0:	75 af                	jne    c01050a1 <mm_destroy+0x36>
        list_del(le);
        kfree(le2vma(le, list_link));  //kfree vma        
    }
    kfree(mm); //kfree mm
c01050f2:	83 ec 0c             	sub    $0xc,%esp
c01050f5:	ff 75 08             	pushl  0x8(%ebp)
c01050f8:	e8 5f 1d 00 00       	call   c0106e5c <kfree>
c01050fd:	83 c4 10             	add    $0x10,%esp
    mm=NULL;
c0105100:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
}
c0105107:	90                   	nop
c0105108:	c9                   	leave  
c0105109:	c3                   	ret    

c010510a <mm_map>:

int
mm_map(struct mm_struct *mm, uintptr_t addr, size_t len, uint32_t vm_flags,
       struct vma_struct **vma_store) {
c010510a:	55                   	push   %ebp
c010510b:	89 e5                	mov    %esp,%ebp
c010510d:	83 ec 28             	sub    $0x28,%esp
    uintptr_t start = ROUNDDOWN(addr, PGSIZE), end = ROUNDUP(addr + len, PGSIZE);
c0105110:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105113:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105116:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105119:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c010511e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105121:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
c0105128:	8b 55 0c             	mov    0xc(%ebp),%edx
c010512b:	8b 45 10             	mov    0x10(%ebp),%eax
c010512e:	01 c2                	add    %eax,%edx
c0105130:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105133:	01 d0                	add    %edx,%eax
c0105135:	83 e8 01             	sub    $0x1,%eax
c0105138:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010513b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010513e:	ba 00 00 00 00       	mov    $0x0,%edx
c0105143:	f7 75 e8             	divl   -0x18(%ebp)
c0105146:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105149:	29 d0                	sub    %edx,%eax
c010514b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (!USER_ACCESS(start, end)) {
c010514e:	81 7d ec ff ff 1f 00 	cmpl   $0x1fffff,-0x14(%ebp)
c0105155:	76 11                	jbe    c0105168 <mm_map+0x5e>
c0105157:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010515a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c010515d:	73 09                	jae    c0105168 <mm_map+0x5e>
c010515f:	81 7d e0 00 00 00 b0 	cmpl   $0xb0000000,-0x20(%ebp)
c0105166:	76 0a                	jbe    c0105172 <mm_map+0x68>
        return -E_INVAL;
c0105168:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010516d:	e9 9e 00 00 00       	jmp    c0105210 <mm_map+0x106>
    }

    assert(mm != NULL);
c0105172:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105176:	75 19                	jne    c0105191 <mm_map+0x87>
c0105178:	68 8b 3d 11 c0       	push   $0xc0113d8b
c010517d:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105182:	68 a7 00 00 00       	push   $0xa7
c0105187:	68 10 3d 11 c0       	push   $0xc0113d10
c010518c:	e8 54 b3 ff ff       	call   c01004e5 <__panic>

    int ret = -E_INVAL;
c0105191:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
c0105198:	83 ec 08             	sub    $0x8,%esp
c010519b:	ff 75 ec             	pushl  -0x14(%ebp)
c010519e:	ff 75 08             	pushl  0x8(%ebp)
c01051a1:	e8 75 fc ff ff       	call   c0104e1b <find_vma>
c01051a6:	83 c4 10             	add    $0x10,%esp
c01051a9:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01051ac:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01051b0:	74 0b                	je     c01051bd <mm_map+0xb3>
c01051b2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01051b5:	8b 40 04             	mov    0x4(%eax),%eax
c01051b8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01051bb:	72 4c                	jb     c0105209 <mm_map+0xff>
        goto out;
    }
    ret = -E_NO_MEM;
c01051bd:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
c01051c4:	83 ec 04             	sub    $0x4,%esp
c01051c7:	ff 75 14             	pushl  0x14(%ebp)
c01051ca:	ff 75 e0             	pushl  -0x20(%ebp)
c01051cd:	ff 75 ec             	pushl  -0x14(%ebp)
c01051d0:	e8 0a fc ff ff       	call   c0104ddf <vma_create>
c01051d5:	83 c4 10             	add    $0x10,%esp
c01051d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01051db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01051df:	74 2b                	je     c010520c <mm_map+0x102>
        goto out;
    }
    insert_vma_struct(mm, vma);
c01051e1:	83 ec 08             	sub    $0x8,%esp
c01051e4:	ff 75 dc             	pushl  -0x24(%ebp)
c01051e7:	ff 75 08             	pushl  0x8(%ebp)
c01051ea:	e8 58 fd ff ff       	call   c0104f47 <insert_vma_struct>
c01051ef:	83 c4 10             	add    $0x10,%esp
    if (vma_store != NULL) {
c01051f2:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c01051f6:	74 08                	je     c0105200 <mm_map+0xf6>
        *vma_store = vma;
c01051f8:	8b 45 18             	mov    0x18(%ebp),%eax
c01051fb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01051fe:	89 10                	mov    %edx,(%eax)
    }
    ret = 0;
c0105200:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105207:	eb 04                	jmp    c010520d <mm_map+0x103>

    int ret = -E_INVAL;

    struct vma_struct *vma;
    if ((vma = find_vma(mm, start)) != NULL && end > vma->vm_start) {
        goto out;
c0105209:	90                   	nop
c010520a:	eb 01                	jmp    c010520d <mm_map+0x103>
    }
    ret = -E_NO_MEM;

    if ((vma = vma_create(start, end, vm_flags)) == NULL) {
        goto out;
c010520c:	90                   	nop
        *vma_store = vma;
    }
    ret = 0;

out:
    return ret;
c010520d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105210:	c9                   	leave  
c0105211:	c3                   	ret    

c0105212 <dup_mmap>:

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
c0105212:	55                   	push   %ebp
c0105213:	89 e5                	mov    %esp,%ebp
c0105215:	53                   	push   %ebx
c0105216:	83 ec 24             	sub    $0x24,%esp
    assert(to != NULL && from != NULL);
c0105219:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010521d:	74 06                	je     c0105225 <dup_mmap+0x13>
c010521f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0105223:	75 19                	jne    c010523e <dup_mmap+0x2c>
c0105225:	68 96 3d 11 c0       	push   $0xc0113d96
c010522a:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010522f:	68 c0 00 00 00       	push   $0xc0
c0105234:	68 10 3d 11 c0       	push   $0xc0113d10
c0105239:	e8 a7 b2 ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &(from->mmap_list), *le = list;
c010523e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105241:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105244:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105247:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_prev(le)) != list) {
c010524a:	e9 86 00 00 00       	jmp    c01052d5 <dup_mmap+0xc3>
        struct vma_struct *vma, *nvma;
        vma = le2vma(le, list_link);
c010524f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105252:	83 e8 10             	sub    $0x10,%eax
c0105255:	89 45 ec             	mov    %eax,-0x14(%ebp)
        nvma = vma_create(vma->vm_start, vma->vm_end, vma->vm_flags);
c0105258:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010525b:	8b 48 0c             	mov    0xc(%eax),%ecx
c010525e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105261:	8b 50 08             	mov    0x8(%eax),%edx
c0105264:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105267:	8b 40 04             	mov    0x4(%eax),%eax
c010526a:	83 ec 04             	sub    $0x4,%esp
c010526d:	51                   	push   %ecx
c010526e:	52                   	push   %edx
c010526f:	50                   	push   %eax
c0105270:	e8 6a fb ff ff       	call   c0104ddf <vma_create>
c0105275:	83 c4 10             	add    $0x10,%esp
c0105278:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (nvma == NULL) {
c010527b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010527f:	75 07                	jne    c0105288 <dup_mmap+0x76>
            return -E_NO_MEM;
c0105281:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0105286:	eb 6c                	jmp    c01052f4 <dup_mmap+0xe2>
        }

        insert_vma_struct(to, nvma);
c0105288:	83 ec 08             	sub    $0x8,%esp
c010528b:	ff 75 e8             	pushl  -0x18(%ebp)
c010528e:	ff 75 08             	pushl  0x8(%ebp)
c0105291:	e8 b1 fc ff ff       	call   c0104f47 <insert_vma_struct>
c0105296:	83 c4 10             	add    $0x10,%esp

        bool share = 0;
c0105299:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
c01052a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052a3:	8b 58 08             	mov    0x8(%eax),%ebx
c01052a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01052a9:	8b 48 04             	mov    0x4(%eax),%ecx
c01052ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01052af:	8b 50 0c             	mov    0xc(%eax),%edx
c01052b2:	8b 45 08             	mov    0x8(%ebp),%eax
c01052b5:	8b 40 0c             	mov    0xc(%eax),%eax
c01052b8:	83 ec 0c             	sub    $0xc,%esp
c01052bb:	ff 75 e4             	pushl  -0x1c(%ebp)
c01052be:	53                   	push   %ebx
c01052bf:	51                   	push   %ecx
c01052c0:	52                   	push   %edx
c01052c1:	50                   	push   %eax
c01052c2:	e8 bc eb ff ff       	call   c0103e83 <copy_range>
c01052c7:	83 c4 20             	add    $0x20,%esp
c01052ca:	85 c0                	test   %eax,%eax
c01052cc:	74 07                	je     c01052d5 <dup_mmap+0xc3>
            return -E_NO_MEM;
c01052ce:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01052d3:	eb 1f                	jmp    c01052f4 <dup_mmap+0xe2>
c01052d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052d8:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c01052db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01052de:	8b 00                	mov    (%eax),%eax

int
dup_mmap(struct mm_struct *to, struct mm_struct *from) {
    assert(to != NULL && from != NULL);
    list_entry_t *list = &(from->mmap_list), *le = list;
    while ((le = list_prev(le)) != list) {
c01052e0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01052e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01052e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01052e9:	0f 85 60 ff ff ff    	jne    c010524f <dup_mmap+0x3d>
        bool share = 0;
        if (copy_range(to->pgdir, from->pgdir, vma->vm_start, vma->vm_end, share) != 0) {
            return -E_NO_MEM;
        }
    }
    return 0;
c01052ef:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01052f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01052f7:	c9                   	leave  
c01052f8:	c3                   	ret    

c01052f9 <exit_mmap>:

void
exit_mmap(struct mm_struct *mm) {
c01052f9:	55                   	push   %ebp
c01052fa:	89 e5                	mov    %esp,%ebp
c01052fc:	83 ec 28             	sub    $0x28,%esp
    assert(mm != NULL && mm_count(mm) == 0);
c01052ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105303:	74 0f                	je     c0105314 <exit_mmap+0x1b>
c0105305:	ff 75 08             	pushl  0x8(%ebp)
c0105308:	e8 bf f9 ff ff       	call   c0104ccc <mm_count>
c010530d:	83 c4 04             	add    $0x4,%esp
c0105310:	85 c0                	test   %eax,%eax
c0105312:	74 19                	je     c010532d <exit_mmap+0x34>
c0105314:	68 b4 3d 11 c0       	push   $0xc0113db4
c0105319:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010531e:	68 d6 00 00 00       	push   $0xd6
c0105323:	68 10 3d 11 c0       	push   $0xc0113d10
c0105328:	e8 b8 b1 ff ff       	call   c01004e5 <__panic>
    pde_t *pgdir = mm->pgdir;
c010532d:	8b 45 08             	mov    0x8(%ebp),%eax
c0105330:	8b 40 0c             	mov    0xc(%eax),%eax
c0105333:	89 45 f0             	mov    %eax,-0x10(%ebp)
    list_entry_t *list = &(mm->mmap_list), *le = list;
c0105336:	8b 45 08             	mov    0x8(%ebp),%eax
c0105339:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010533c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010533f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c0105342:	eb 25                	jmp    c0105369 <exit_mmap+0x70>
        struct vma_struct *vma = le2vma(le, list_link);
c0105344:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105347:	83 e8 10             	sub    $0x10,%eax
c010534a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
c010534d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105350:	8b 50 08             	mov    0x8(%eax),%edx
c0105353:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105356:	8b 40 04             	mov    0x4(%eax),%eax
c0105359:	83 ec 04             	sub    $0x4,%esp
c010535c:	52                   	push   %edx
c010535d:	50                   	push   %eax
c010535e:	ff 75 f0             	pushl  -0x10(%ebp)
c0105361:	e8 56 e9 ff ff       	call   c0103cbc <unmap_range>
c0105366:	83 c4 10             	add    $0x10,%esp
c0105369:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010536c:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010536f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105372:	8b 40 04             	mov    0x4(%eax),%eax
void
exit_mmap(struct mm_struct *mm) {
    assert(mm != NULL && mm_count(mm) == 0);
    pde_t *pgdir = mm->pgdir;
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
c0105375:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105378:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010537b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010537e:	75 c4                	jne    c0105344 <exit_mmap+0x4b>
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c0105380:	eb 25                	jmp    c01053a7 <exit_mmap+0xae>
        struct vma_struct *vma = le2vma(le, list_link);
c0105382:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105385:	83 e8 10             	sub    $0x10,%eax
c0105388:	89 45 e0             	mov    %eax,-0x20(%ebp)
        exit_range(pgdir, vma->vm_start, vma->vm_end);
c010538b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010538e:	8b 50 08             	mov    0x8(%eax),%edx
c0105391:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0105394:	8b 40 04             	mov    0x4(%eax),%eax
c0105397:	83 ec 04             	sub    $0x4,%esp
c010539a:	52                   	push   %edx
c010539b:	50                   	push   %eax
c010539c:	ff 75 f0             	pushl  -0x10(%ebp)
c010539f:	e8 eb e9 ff ff       	call   c0103d8f <exit_range>
c01053a4:	83 c4 10             	add    $0x10,%esp
c01053a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053aa:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01053ad:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01053b0:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *list = &(mm->mmap_list), *le = list;
    while ((le = list_next(le)) != list) {
        struct vma_struct *vma = le2vma(le, list_link);
        unmap_range(pgdir, vma->vm_start, vma->vm_end);
    }
    while ((le = list_next(le)) != list) {
c01053b3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01053b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01053b9:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c01053bc:	75 c4                	jne    c0105382 <exit_mmap+0x89>
        struct vma_struct *vma = le2vma(le, list_link);
        exit_range(pgdir, vma->vm_start, vma->vm_end);
    }
}
c01053be:	90                   	nop
c01053bf:	c9                   	leave  
c01053c0:	c3                   	ret    

c01053c1 <copy_from_user>:

bool
copy_from_user(struct mm_struct *mm, void *dst, const void *src, size_t len, bool writable) {
c01053c1:	55                   	push   %ebp
c01053c2:	89 e5                	mov    %esp,%ebp
c01053c4:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)src, len, writable)) {
c01053c7:	8b 45 10             	mov    0x10(%ebp),%eax
c01053ca:	ff 75 18             	pushl  0x18(%ebp)
c01053cd:	ff 75 14             	pushl  0x14(%ebp)
c01053d0:	50                   	push   %eax
c01053d1:	ff 75 08             	pushl  0x8(%ebp)
c01053d4:	e8 9b 07 00 00       	call   c0105b74 <user_mem_check>
c01053d9:	83 c4 10             	add    $0x10,%esp
c01053dc:	85 c0                	test   %eax,%eax
c01053de:	75 07                	jne    c01053e7 <copy_from_user+0x26>
        return 0;
c01053e0:	b8 00 00 00 00       	mov    $0x0,%eax
c01053e5:	eb 19                	jmp    c0105400 <copy_from_user+0x3f>
    }
    memcpy(dst, src, len);
c01053e7:	83 ec 04             	sub    $0x4,%esp
c01053ea:	ff 75 14             	pushl  0x14(%ebp)
c01053ed:	ff 75 10             	pushl  0x10(%ebp)
c01053f0:	ff 75 0c             	pushl  0xc(%ebp)
c01053f3:	e8 f0 d0 00 00       	call   c01124e8 <memcpy>
c01053f8:	83 c4 10             	add    $0x10,%esp
    return 1;
c01053fb:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0105400:	c9                   	leave  
c0105401:	c3                   	ret    

c0105402 <copy_to_user>:

bool
copy_to_user(struct mm_struct *mm, void *dst, const void *src, size_t len) {
c0105402:	55                   	push   %ebp
c0105403:	89 e5                	mov    %esp,%ebp
c0105405:	83 ec 08             	sub    $0x8,%esp
    if (!user_mem_check(mm, (uintptr_t)dst, len, 1)) {
c0105408:	8b 45 0c             	mov    0xc(%ebp),%eax
c010540b:	6a 01                	push   $0x1
c010540d:	ff 75 14             	pushl  0x14(%ebp)
c0105410:	50                   	push   %eax
c0105411:	ff 75 08             	pushl  0x8(%ebp)
c0105414:	e8 5b 07 00 00       	call   c0105b74 <user_mem_check>
c0105419:	83 c4 10             	add    $0x10,%esp
c010541c:	85 c0                	test   %eax,%eax
c010541e:	75 07                	jne    c0105427 <copy_to_user+0x25>
        return 0;
c0105420:	b8 00 00 00 00       	mov    $0x0,%eax
c0105425:	eb 19                	jmp    c0105440 <copy_to_user+0x3e>
    }
    memcpy(dst, src, len);
c0105427:	83 ec 04             	sub    $0x4,%esp
c010542a:	ff 75 14             	pushl  0x14(%ebp)
c010542d:	ff 75 10             	pushl  0x10(%ebp)
c0105430:	ff 75 0c             	pushl  0xc(%ebp)
c0105433:	e8 b0 d0 00 00       	call   c01124e8 <memcpy>
c0105438:	83 c4 10             	add    $0x10,%esp
    return 1;
c010543b:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0105440:	c9                   	leave  
c0105441:	c3                   	ret    

c0105442 <vmm_init>:

// vmm_init - initialize virtual memory management
//          - now just call check_vmm to check correctness of vmm
void
vmm_init(void) {
c0105442:	55                   	push   %ebp
c0105443:	89 e5                	mov    %esp,%ebp
c0105445:	83 ec 08             	sub    $0x8,%esp
    check_vmm();
c0105448:	e8 03 00 00 00       	call   c0105450 <check_vmm>
}
c010544d:	90                   	nop
c010544e:	c9                   	leave  
c010544f:	c3                   	ret    

c0105450 <check_vmm>:

// check_vmm - check correctness of vmm
static void
check_vmm(void) {
c0105450:	55                   	push   %ebp
c0105451:	89 e5                	mov    %esp,%ebp
c0105453:	83 ec 18             	sub    $0x18,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0105456:	e8 37 e2 ff ff       	call   c0103692 <nr_free_pages>
c010545b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    check_vma_struct();
c010545e:	e8 18 00 00 00       	call   c010547b <check_vma_struct>
    check_pgfault();
c0105463:	e8 10 04 00 00       	call   c0105878 <check_pgfault>

    cprintf("check_vmm() succeeded.\n");
c0105468:	83 ec 0c             	sub    $0xc,%esp
c010546b:	68 d4 3d 11 c0       	push   $0xc0113dd4
c0105470:	e8 0a af ff ff       	call   c010037f <cprintf>
c0105475:	83 c4 10             	add    $0x10,%esp
}
c0105478:	90                   	nop
c0105479:	c9                   	leave  
c010547a:	c3                   	ret    

c010547b <check_vma_struct>:

static void
check_vma_struct(void) {
c010547b:	55                   	push   %ebp
c010547c:	89 e5                	mov    %esp,%ebp
c010547e:	83 ec 58             	sub    $0x58,%esp
    size_t nr_free_pages_store = nr_free_pages();
c0105481:	e8 0c e2 ff ff       	call   c0103692 <nr_free_pages>
c0105486:	89 45 ec             	mov    %eax,-0x14(%ebp)

    struct mm_struct *mm = mm_create();
c0105489:	e8 b1 f8 ff ff       	call   c0104d3f <mm_create>
c010548e:	89 45 e8             	mov    %eax,-0x18(%ebp)
    assert(mm != NULL);
c0105491:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0105495:	75 19                	jne    c01054b0 <check_vma_struct+0x35>
c0105497:	68 8b 3d 11 c0       	push   $0xc0113d8b
c010549c:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01054a1:	68 0c 01 00 00       	push   $0x10c
c01054a6:	68 10 3d 11 c0       	push   $0xc0113d10
c01054ab:	e8 35 b0 ff ff       	call   c01004e5 <__panic>

    int step1 = 10, step2 = step1 * 10;
c01054b0:	c7 45 e4 0a 00 00 00 	movl   $0xa,-0x1c(%ebp)
c01054b7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01054ba:	89 d0                	mov    %edx,%eax
c01054bc:	c1 e0 02             	shl    $0x2,%eax
c01054bf:	01 d0                	add    %edx,%eax
c01054c1:	01 c0                	add    %eax,%eax
c01054c3:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int i;
    for (i = step1; i >= 1; i --) {
c01054c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01054c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01054cc:	eb 5f                	jmp    c010552d <check_vma_struct+0xb2>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c01054ce:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01054d1:	89 d0                	mov    %edx,%eax
c01054d3:	c1 e0 02             	shl    $0x2,%eax
c01054d6:	01 d0                	add    %edx,%eax
c01054d8:	83 c0 02             	add    $0x2,%eax
c01054db:	89 c1                	mov    %eax,%ecx
c01054dd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01054e0:	89 d0                	mov    %edx,%eax
c01054e2:	c1 e0 02             	shl    $0x2,%eax
c01054e5:	01 d0                	add    %edx,%eax
c01054e7:	83 ec 04             	sub    $0x4,%esp
c01054ea:	6a 00                	push   $0x0
c01054ec:	51                   	push   %ecx
c01054ed:	50                   	push   %eax
c01054ee:	e8 ec f8 ff ff       	call   c0104ddf <vma_create>
c01054f3:	83 c4 10             	add    $0x10,%esp
c01054f6:	89 45 dc             	mov    %eax,-0x24(%ebp)
        assert(vma != NULL);
c01054f9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01054fd:	75 19                	jne    c0105518 <check_vma_struct+0x9d>
c01054ff:	68 ec 3d 11 c0       	push   $0xc0113dec
c0105504:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105509:	68 13 01 00 00       	push   $0x113
c010550e:	68 10 3d 11 c0       	push   $0xc0113d10
c0105513:	e8 cd af ff ff       	call   c01004e5 <__panic>
        insert_vma_struct(mm, vma);
c0105518:	83 ec 08             	sub    $0x8,%esp
c010551b:	ff 75 dc             	pushl  -0x24(%ebp)
c010551e:	ff 75 e8             	pushl  -0x18(%ebp)
c0105521:	e8 21 fa ff ff       	call   c0104f47 <insert_vma_struct>
c0105526:	83 c4 10             	add    $0x10,%esp
    assert(mm != NULL);

    int step1 = 10, step2 = step1 * 10;

    int i;
    for (i = step1; i >= 1; i --) {
c0105529:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010552d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105531:	7f 9b                	jg     c01054ce <check_vma_struct+0x53>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0105533:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105536:	83 c0 01             	add    $0x1,%eax
c0105539:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010553c:	eb 5f                	jmp    c010559d <check_vma_struct+0x122>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
c010553e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105541:	89 d0                	mov    %edx,%eax
c0105543:	c1 e0 02             	shl    $0x2,%eax
c0105546:	01 d0                	add    %edx,%eax
c0105548:	83 c0 02             	add    $0x2,%eax
c010554b:	89 c1                	mov    %eax,%ecx
c010554d:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105550:	89 d0                	mov    %edx,%eax
c0105552:	c1 e0 02             	shl    $0x2,%eax
c0105555:	01 d0                	add    %edx,%eax
c0105557:	83 ec 04             	sub    $0x4,%esp
c010555a:	6a 00                	push   $0x0
c010555c:	51                   	push   %ecx
c010555d:	50                   	push   %eax
c010555e:	e8 7c f8 ff ff       	call   c0104ddf <vma_create>
c0105563:	83 c4 10             	add    $0x10,%esp
c0105566:	89 45 d8             	mov    %eax,-0x28(%ebp)
        assert(vma != NULL);
c0105569:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010556d:	75 19                	jne    c0105588 <check_vma_struct+0x10d>
c010556f:	68 ec 3d 11 c0       	push   $0xc0113dec
c0105574:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105579:	68 19 01 00 00       	push   $0x119
c010557e:	68 10 3d 11 c0       	push   $0xc0113d10
c0105583:	e8 5d af ff ff       	call   c01004e5 <__panic>
        insert_vma_struct(mm, vma);
c0105588:	83 ec 08             	sub    $0x8,%esp
c010558b:	ff 75 d8             	pushl  -0x28(%ebp)
c010558e:	ff 75 e8             	pushl  -0x18(%ebp)
c0105591:	e8 b1 f9 ff ff       	call   c0104f47 <insert_vma_struct>
c0105596:	83 c4 10             	add    $0x10,%esp
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    for (i = step1 + 1; i <= step2; i ++) {
c0105599:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010559d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01055a0:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c01055a3:	7e 99                	jle    c010553e <check_vma_struct+0xc3>
        struct vma_struct *vma = vma_create(i * 5, i * 5 + 2, 0);
        assert(vma != NULL);
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));
c01055a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055a8:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01055ab:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01055ae:	8b 40 04             	mov    0x4(%eax),%eax
c01055b1:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (i = 1; i <= step2; i ++) {
c01055b4:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c01055bb:	e9 81 00 00 00       	jmp    c0105641 <check_vma_struct+0x1c6>
        assert(le != &(mm->mmap_list));
c01055c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01055c3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c01055c6:	75 19                	jne    c01055e1 <check_vma_struct+0x166>
c01055c8:	68 f8 3d 11 c0       	push   $0xc0113df8
c01055cd:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01055d2:	68 20 01 00 00       	push   $0x120
c01055d7:	68 10 3d 11 c0       	push   $0xc0113d10
c01055dc:	e8 04 af ff ff       	call   c01004e5 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
c01055e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01055e4:	83 e8 10             	sub    $0x10,%eax
c01055e7:	89 45 d0             	mov    %eax,-0x30(%ebp)
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
c01055ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01055ed:	8b 48 04             	mov    0x4(%eax),%ecx
c01055f0:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01055f3:	89 d0                	mov    %edx,%eax
c01055f5:	c1 e0 02             	shl    $0x2,%eax
c01055f8:	01 d0                	add    %edx,%eax
c01055fa:	39 c1                	cmp    %eax,%ecx
c01055fc:	75 17                	jne    c0105615 <check_vma_struct+0x19a>
c01055fe:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0105601:	8b 48 08             	mov    0x8(%eax),%ecx
c0105604:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105607:	89 d0                	mov    %edx,%eax
c0105609:	c1 e0 02             	shl    $0x2,%eax
c010560c:	01 d0                	add    %edx,%eax
c010560e:	83 c0 02             	add    $0x2,%eax
c0105611:	39 c1                	cmp    %eax,%ecx
c0105613:	74 19                	je     c010562e <check_vma_struct+0x1b3>
c0105615:	68 10 3e 11 c0       	push   $0xc0113e10
c010561a:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010561f:	68 22 01 00 00       	push   $0x122
c0105624:	68 10 3d 11 c0       	push   $0xc0113d10
c0105629:	e8 b7 ae ff ff       	call   c01004e5 <__panic>
c010562e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105631:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c0105634:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0105637:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c010563a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        insert_vma_struct(mm, vma);
    }

    list_entry_t *le = list_next(&(mm->mmap_list));

    for (i = 1; i <= step2; i ++) {
c010563d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105641:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105644:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105647:	0f 8e 73 ff ff ff    	jle    c01055c0 <check_vma_struct+0x145>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c010564d:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
c0105654:	e9 80 01 00 00       	jmp    c01057d9 <check_vma_struct+0x35e>
        struct vma_struct *vma1 = find_vma(mm, i);
c0105659:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010565c:	83 ec 08             	sub    $0x8,%esp
c010565f:	50                   	push   %eax
c0105660:	ff 75 e8             	pushl  -0x18(%ebp)
c0105663:	e8 b3 f7 ff ff       	call   c0104e1b <find_vma>
c0105668:	83 c4 10             	add    $0x10,%esp
c010566b:	89 45 cc             	mov    %eax,-0x34(%ebp)
        assert(vma1 != NULL);
c010566e:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0105672:	75 19                	jne    c010568d <check_vma_struct+0x212>
c0105674:	68 45 3e 11 c0       	push   $0xc0113e45
c0105679:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010567e:	68 28 01 00 00       	push   $0x128
c0105683:	68 10 3d 11 c0       	push   $0xc0113d10
c0105688:	e8 58 ae ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma2 = find_vma(mm, i+1);
c010568d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105690:	83 c0 01             	add    $0x1,%eax
c0105693:	83 ec 08             	sub    $0x8,%esp
c0105696:	50                   	push   %eax
c0105697:	ff 75 e8             	pushl  -0x18(%ebp)
c010569a:	e8 7c f7 ff ff       	call   c0104e1b <find_vma>
c010569f:	83 c4 10             	add    $0x10,%esp
c01056a2:	89 45 c8             	mov    %eax,-0x38(%ebp)
        assert(vma2 != NULL);
c01056a5:	83 7d c8 00          	cmpl   $0x0,-0x38(%ebp)
c01056a9:	75 19                	jne    c01056c4 <check_vma_struct+0x249>
c01056ab:	68 52 3e 11 c0       	push   $0xc0113e52
c01056b0:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01056b5:	68 2a 01 00 00       	push   $0x12a
c01056ba:	68 10 3d 11 c0       	push   $0xc0113d10
c01056bf:	e8 21 ae ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma3 = find_vma(mm, i+2);
c01056c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056c7:	83 c0 02             	add    $0x2,%eax
c01056ca:	83 ec 08             	sub    $0x8,%esp
c01056cd:	50                   	push   %eax
c01056ce:	ff 75 e8             	pushl  -0x18(%ebp)
c01056d1:	e8 45 f7 ff ff       	call   c0104e1b <find_vma>
c01056d6:	83 c4 10             	add    $0x10,%esp
c01056d9:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        assert(vma3 == NULL);
c01056dc:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c01056e0:	74 19                	je     c01056fb <check_vma_struct+0x280>
c01056e2:	68 5f 3e 11 c0       	push   $0xc0113e5f
c01056e7:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01056ec:	68 2c 01 00 00       	push   $0x12c
c01056f1:	68 10 3d 11 c0       	push   $0xc0113d10
c01056f6:	e8 ea ad ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma4 = find_vma(mm, i+3);
c01056fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01056fe:	83 c0 03             	add    $0x3,%eax
c0105701:	83 ec 08             	sub    $0x8,%esp
c0105704:	50                   	push   %eax
c0105705:	ff 75 e8             	pushl  -0x18(%ebp)
c0105708:	e8 0e f7 ff ff       	call   c0104e1b <find_vma>
c010570d:	83 c4 10             	add    $0x10,%esp
c0105710:	89 45 c0             	mov    %eax,-0x40(%ebp)
        assert(vma4 == NULL);
c0105713:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c0105717:	74 19                	je     c0105732 <check_vma_struct+0x2b7>
c0105719:	68 6c 3e 11 c0       	push   $0xc0113e6c
c010571e:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105723:	68 2e 01 00 00       	push   $0x12e
c0105728:	68 10 3d 11 c0       	push   $0xc0113d10
c010572d:	e8 b3 ad ff ff       	call   c01004e5 <__panic>
        struct vma_struct *vma5 = find_vma(mm, i+4);
c0105732:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105735:	83 c0 04             	add    $0x4,%eax
c0105738:	83 ec 08             	sub    $0x8,%esp
c010573b:	50                   	push   %eax
c010573c:	ff 75 e8             	pushl  -0x18(%ebp)
c010573f:	e8 d7 f6 ff ff       	call   c0104e1b <find_vma>
c0105744:	83 c4 10             	add    $0x10,%esp
c0105747:	89 45 bc             	mov    %eax,-0x44(%ebp)
        assert(vma5 == NULL);
c010574a:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
c010574e:	74 19                	je     c0105769 <check_vma_struct+0x2ee>
c0105750:	68 79 3e 11 c0       	push   $0xc0113e79
c0105755:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010575a:	68 30 01 00 00       	push   $0x130
c010575f:	68 10 3d 11 c0       	push   $0xc0113d10
c0105764:	e8 7c ad ff ff       	call   c01004e5 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
c0105769:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010576c:	8b 50 04             	mov    0x4(%eax),%edx
c010576f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105772:	39 c2                	cmp    %eax,%edx
c0105774:	75 10                	jne    c0105786 <check_vma_struct+0x30b>
c0105776:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0105779:	8b 40 08             	mov    0x8(%eax),%eax
c010577c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010577f:	83 c2 02             	add    $0x2,%edx
c0105782:	39 d0                	cmp    %edx,%eax
c0105784:	74 19                	je     c010579f <check_vma_struct+0x324>
c0105786:	68 88 3e 11 c0       	push   $0xc0113e88
c010578b:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105790:	68 32 01 00 00       	push   $0x132
c0105795:	68 10 3d 11 c0       	push   $0xc0113d10
c010579a:	e8 46 ad ff ff       	call   c01004e5 <__panic>
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
c010579f:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01057a2:	8b 50 04             	mov    0x4(%eax),%edx
c01057a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057a8:	39 c2                	cmp    %eax,%edx
c01057aa:	75 10                	jne    c01057bc <check_vma_struct+0x341>
c01057ac:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01057af:	8b 40 08             	mov    0x8(%eax),%eax
c01057b2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01057b5:	83 c2 02             	add    $0x2,%edx
c01057b8:	39 d0                	cmp    %edx,%eax
c01057ba:	74 19                	je     c01057d5 <check_vma_struct+0x35a>
c01057bc:	68 b8 3e 11 c0       	push   $0xc0113eb8
c01057c1:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01057c6:	68 33 01 00 00       	push   $0x133
c01057cb:	68 10 3d 11 c0       	push   $0xc0113d10
c01057d0:	e8 10 ad ff ff       	call   c01004e5 <__panic>
        struct vma_struct *mmap = le2vma(le, list_link);
        assert(mmap->vm_start == i * 5 && mmap->vm_end == i * 5 + 2);
        le = list_next(le);
    }

    for (i = 5; i <= 5 * step2; i +=5) {
c01057d5:	83 45 f4 05          	addl   $0x5,-0xc(%ebp)
c01057d9:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01057dc:	89 d0                	mov    %edx,%eax
c01057de:	c1 e0 02             	shl    $0x2,%eax
c01057e1:	01 d0                	add    %edx,%eax
c01057e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01057e6:	0f 8d 6d fe ff ff    	jge    c0105659 <check_vma_struct+0x1de>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c01057ec:	c7 45 f4 04 00 00 00 	movl   $0x4,-0xc(%ebp)
c01057f3:	eb 5c                	jmp    c0105851 <check_vma_struct+0x3d6>
        struct vma_struct *vma_below_5= find_vma(mm,i);
c01057f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01057f8:	83 ec 08             	sub    $0x8,%esp
c01057fb:	50                   	push   %eax
c01057fc:	ff 75 e8             	pushl  -0x18(%ebp)
c01057ff:	e8 17 f6 ff ff       	call   c0104e1b <find_vma>
c0105804:	83 c4 10             	add    $0x10,%esp
c0105807:	89 45 b8             	mov    %eax,-0x48(%ebp)
        if (vma_below_5 != NULL ) {
c010580a:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010580e:	74 1e                	je     c010582e <check_vma_struct+0x3b3>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
c0105810:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105813:	8b 50 08             	mov    0x8(%eax),%edx
c0105816:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0105819:	8b 40 04             	mov    0x4(%eax),%eax
c010581c:	52                   	push   %edx
c010581d:	50                   	push   %eax
c010581e:	ff 75 f4             	pushl  -0xc(%ebp)
c0105821:	68 e8 3e 11 c0       	push   $0xc0113ee8
c0105826:	e8 54 ab ff ff       	call   c010037f <cprintf>
c010582b:	83 c4 10             	add    $0x10,%esp
        }
        assert(vma_below_5 == NULL);
c010582e:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c0105832:	74 19                	je     c010584d <check_vma_struct+0x3d2>
c0105834:	68 0d 3f 11 c0       	push   $0xc0113f0d
c0105839:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010583e:	68 3b 01 00 00       	push   $0x13b
c0105843:	68 10 3d 11 c0       	push   $0xc0113d10
c0105848:	e8 98 ac ff ff       	call   c01004e5 <__panic>

        assert(vma1->vm_start == i  && vma1->vm_end == i  + 2);
        assert(vma2->vm_start == i  && vma2->vm_end == i  + 2);
    }

    for (i =4; i>=0; i--) {
c010584d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c0105851:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105855:	79 9e                	jns    c01057f5 <check_vma_struct+0x37a>
           cprintf("vma_below_5: i %x, start %x, end %x\n",i, vma_below_5->vm_start, vma_below_5->vm_end); 
        }
        assert(vma_below_5 == NULL);
    }

    mm_destroy(mm);
c0105857:	83 ec 0c             	sub    $0xc,%esp
c010585a:	ff 75 e8             	pushl  -0x18(%ebp)
c010585d:	e8 09 f8 ff ff       	call   c010506b <mm_destroy>
c0105862:	83 c4 10             	add    $0x10,%esp

    cprintf("check_vma_struct() succeeded!\n");
c0105865:	83 ec 0c             	sub    $0xc,%esp
c0105868:	68 24 3f 11 c0       	push   $0xc0113f24
c010586d:	e8 0d ab ff ff       	call   c010037f <cprintf>
c0105872:	83 c4 10             	add    $0x10,%esp
}
c0105875:	90                   	nop
c0105876:	c9                   	leave  
c0105877:	c3                   	ret    

c0105878 <check_pgfault>:

struct mm_struct *check_mm_struct;

// check_pgfault - check correctness of pgfault handler
static void
check_pgfault(void) {
c0105878:	55                   	push   %ebp
c0105879:	89 e5                	mov    %esp,%ebp
c010587b:	83 ec 28             	sub    $0x28,%esp
    size_t nr_free_pages_store = nr_free_pages();
c010587e:	e8 0f de ff ff       	call   c0103692 <nr_free_pages>
c0105883:	89 45 ec             	mov    %eax,-0x14(%ebp)

    check_mm_struct = mm_create();
c0105886:	e8 b4 f4 ff ff       	call   c0104d3f <mm_create>
c010588b:	a3 10 21 15 c0       	mov    %eax,0xc0152110
    assert(check_mm_struct != NULL);
c0105890:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c0105895:	85 c0                	test   %eax,%eax
c0105897:	75 19                	jne    c01058b2 <check_pgfault+0x3a>
c0105899:	68 43 3f 11 c0       	push   $0xc0113f43
c010589e:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01058a3:	68 4b 01 00 00       	push   $0x14b
c01058a8:	68 10 3d 11 c0       	push   $0xc0113d10
c01058ad:	e8 33 ac ff ff       	call   c01004e5 <__panic>

    struct mm_struct *mm = check_mm_struct;
c01058b2:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c01058b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    pde_t *pgdir = mm->pgdir = boot_pgdir;
c01058ba:	8b 15 e0 b9 14 c0    	mov    0xc014b9e0,%edx
c01058c0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058c3:	89 50 0c             	mov    %edx,0xc(%eax)
c01058c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01058c9:	8b 40 0c             	mov    0xc(%eax),%eax
c01058cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    assert(pgdir[0] == 0);
c01058cf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01058d2:	8b 00                	mov    (%eax),%eax
c01058d4:	85 c0                	test   %eax,%eax
c01058d6:	74 19                	je     c01058f1 <check_pgfault+0x79>
c01058d8:	68 5b 3f 11 c0       	push   $0xc0113f5b
c01058dd:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01058e2:	68 4f 01 00 00       	push   $0x14f
c01058e7:	68 10 3d 11 c0       	push   $0xc0113d10
c01058ec:	e8 f4 ab ff ff       	call   c01004e5 <__panic>

    struct vma_struct *vma = vma_create(0, PTSIZE, VM_WRITE);
c01058f1:	83 ec 04             	sub    $0x4,%esp
c01058f4:	6a 02                	push   $0x2
c01058f6:	68 00 00 40 00       	push   $0x400000
c01058fb:	6a 00                	push   $0x0
c01058fd:	e8 dd f4 ff ff       	call   c0104ddf <vma_create>
c0105902:	83 c4 10             	add    $0x10,%esp
c0105905:	89 45 e0             	mov    %eax,-0x20(%ebp)
    assert(vma != NULL);
c0105908:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010590c:	75 19                	jne    c0105927 <check_pgfault+0xaf>
c010590e:	68 ec 3d 11 c0       	push   $0xc0113dec
c0105913:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105918:	68 52 01 00 00       	push   $0x152
c010591d:	68 10 3d 11 c0       	push   $0xc0113d10
c0105922:	e8 be ab ff ff       	call   c01004e5 <__panic>

    insert_vma_struct(mm, vma);
c0105927:	83 ec 08             	sub    $0x8,%esp
c010592a:	ff 75 e0             	pushl  -0x20(%ebp)
c010592d:	ff 75 e8             	pushl  -0x18(%ebp)
c0105930:	e8 12 f6 ff ff       	call   c0104f47 <insert_vma_struct>
c0105935:	83 c4 10             	add    $0x10,%esp

    uintptr_t addr = 0x100;
c0105938:	c7 45 dc 00 01 00 00 	movl   $0x100,-0x24(%ebp)
    assert(find_vma(mm, addr) == vma);
c010593f:	83 ec 08             	sub    $0x8,%esp
c0105942:	ff 75 dc             	pushl  -0x24(%ebp)
c0105945:	ff 75 e8             	pushl  -0x18(%ebp)
c0105948:	e8 ce f4 ff ff       	call   c0104e1b <find_vma>
c010594d:	83 c4 10             	add    $0x10,%esp
c0105950:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0105953:	74 19                	je     c010596e <check_pgfault+0xf6>
c0105955:	68 69 3f 11 c0       	push   $0xc0113f69
c010595a:	68 fb 3c 11 c0       	push   $0xc0113cfb
c010595f:	68 57 01 00 00       	push   $0x157
c0105964:	68 10 3d 11 c0       	push   $0xc0113d10
c0105969:	e8 77 ab ff ff       	call   c01004e5 <__panic>

    int i, sum = 0;
c010596e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    for (i = 0; i < 100; i ++) {
c0105975:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010597c:	eb 19                	jmp    c0105997 <check_pgfault+0x11f>
        *(char *)(addr + i) = i;
c010597e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0105981:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0105984:	01 d0                	add    %edx,%eax
c0105986:	89 c2                	mov    %eax,%edx
c0105988:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010598b:	88 02                	mov    %al,(%edx)
        sum += i;
c010598d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105990:	01 45 f0             	add    %eax,-0x10(%ebp)

    uintptr_t addr = 0x100;
    assert(find_vma(mm, addr) == vma);

    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
c0105993:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0105997:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c010599b:	7e e1                	jle    c010597e <check_pgfault+0x106>
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c010599d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01059a4:	eb 15                	jmp    c01059bb <check_pgfault+0x143>
        sum -= *(char *)(addr + i);
c01059a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01059a9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01059ac:	01 d0                	add    %edx,%eax
c01059ae:	0f b6 00             	movzbl (%eax),%eax
c01059b1:	0f be c0             	movsbl %al,%eax
c01059b4:	29 45 f0             	sub    %eax,-0x10(%ebp)
    int i, sum = 0;
    for (i = 0; i < 100; i ++) {
        *(char *)(addr + i) = i;
        sum += i;
    }
    for (i = 0; i < 100; i ++) {
c01059b7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01059bb:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
c01059bf:	7e e5                	jle    c01059a6 <check_pgfault+0x12e>
        sum -= *(char *)(addr + i);
    }
    assert(sum == 0);
c01059c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01059c5:	74 19                	je     c01059e0 <check_pgfault+0x168>
c01059c7:	68 83 3f 11 c0       	push   $0xc0113f83
c01059cc:	68 fb 3c 11 c0       	push   $0xc0113cfb
c01059d1:	68 61 01 00 00       	push   $0x161
c01059d6:	68 10 3d 11 c0       	push   $0xc0113d10
c01059db:	e8 05 ab ff ff       	call   c01004e5 <__panic>

    page_remove(pgdir, ROUNDDOWN(addr, PGSIZE));
c01059e0:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01059e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01059e6:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01059e9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c01059ee:	83 ec 08             	sub    $0x8,%esp
c01059f1:	50                   	push   %eax
c01059f2:	ff 75 e4             	pushl  -0x1c(%ebp)
c01059f5:	e8 13 e6 ff ff       	call   c010400d <page_remove>
c01059fa:	83 c4 10             	add    $0x10,%esp
    free_page(pde2page(pgdir[0]));
c01059fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a00:	8b 00                	mov    (%eax),%eax
c0105a02:	83 ec 0c             	sub    $0xc,%esp
c0105a05:	50                   	push   %eax
c0105a06:	e8 18 f3 ff ff       	call   c0104d23 <pde2page>
c0105a0b:	83 c4 10             	add    $0x10,%esp
c0105a0e:	83 ec 08             	sub    $0x8,%esp
c0105a11:	6a 01                	push   $0x1
c0105a13:	50                   	push   %eax
c0105a14:	e8 44 dc ff ff       	call   c010365d <free_pages>
c0105a19:	83 c4 10             	add    $0x10,%esp
    pgdir[0] = 0;
c0105a1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105a1f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    mm->pgdir = NULL;
c0105a25:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105a28:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    mm_destroy(mm);
c0105a2f:	83 ec 0c             	sub    $0xc,%esp
c0105a32:	ff 75 e8             	pushl  -0x18(%ebp)
c0105a35:	e8 31 f6 ff ff       	call   c010506b <mm_destroy>
c0105a3a:	83 c4 10             	add    $0x10,%esp
    check_mm_struct = NULL;
c0105a3d:	c7 05 10 21 15 c0 00 	movl   $0x0,0xc0152110
c0105a44:	00 00 00 

    assert(nr_free_pages_store == nr_free_pages());
c0105a47:	e8 46 dc ff ff       	call   c0103692 <nr_free_pages>
c0105a4c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0105a4f:	74 19                	je     c0105a6a <check_pgfault+0x1f2>
c0105a51:	68 8c 3f 11 c0       	push   $0xc0113f8c
c0105a56:	68 fb 3c 11 c0       	push   $0xc0113cfb
c0105a5b:	68 6b 01 00 00       	push   $0x16b
c0105a60:	68 10 3d 11 c0       	push   $0xc0113d10
c0105a65:	e8 7b aa ff ff       	call   c01004e5 <__panic>

    cprintf("check_pgfault() succeeded!\n");
c0105a6a:	83 ec 0c             	sub    $0xc,%esp
c0105a6d:	68 b3 3f 11 c0       	push   $0xc0113fb3
c0105a72:	e8 08 a9 ff ff       	call   c010037f <cprintf>
c0105a77:	83 c4 10             	add    $0x10,%esp
}
c0105a7a:	90                   	nop
c0105a7b:	c9                   	leave  
c0105a7c:	c3                   	ret    

c0105a7d <do_pgfault>:
 *            was a read (0) or write (1).
 *         -- The U/S flag (bit 2) indicates whether the processor was executing at user mode (1)
 *            or supervisor mode (0) at the time of the exception.
 */
int
do_pgfault(struct mm_struct *mm, uint32_t error_code, uintptr_t addr) {
c0105a7d:	55                   	push   %ebp
c0105a7e:	89 e5                	mov    %esp,%ebp
c0105a80:	83 ec 28             	sub    $0x28,%esp
    int ret = -E_INVAL;
c0105a83:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    //try to find a vma which include addr
    struct vma_struct *vma = find_vma(mm, addr);
c0105a8a:	ff 75 10             	pushl  0x10(%ebp)
c0105a8d:	ff 75 08             	pushl  0x8(%ebp)
c0105a90:	e8 86 f3 ff ff       	call   c0104e1b <find_vma>
c0105a95:	83 c4 08             	add    $0x8,%esp
c0105a98:	89 45 f0             	mov    %eax,-0x10(%ebp)

    pgfault_num++;
c0105a9b:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0105aa0:	83 c0 01             	add    $0x1,%eax
c0105aa3:	a3 0c f0 14 c0       	mov    %eax,0xc014f00c
    //If the addr is in the range of a mm's vma?
    if (vma == NULL || vma->vm_start > addr) {
c0105aa8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105aac:	74 0b                	je     c0105ab9 <do_pgfault+0x3c>
c0105aae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ab1:	8b 40 04             	mov    0x4(%eax),%eax
c0105ab4:	3b 45 10             	cmp    0x10(%ebp),%eax
c0105ab7:	76 18                	jbe    c0105ad1 <do_pgfault+0x54>
        cprintf("not valid addr %x, and  can not find it in vma\n", addr);
c0105ab9:	83 ec 08             	sub    $0x8,%esp
c0105abc:	ff 75 10             	pushl  0x10(%ebp)
c0105abf:	68 d0 3f 11 c0       	push   $0xc0113fd0
c0105ac4:	e8 b6 a8 ff ff       	call   c010037f <cprintf>
c0105ac9:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0105acc:	e9 9e 00 00 00       	jmp    c0105b6f <do_pgfault+0xf2>
    }
    //check the error_code
    switch (error_code & 3) {
c0105ad1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105ad4:	83 e0 03             	and    $0x3,%eax
c0105ad7:	85 c0                	test   %eax,%eax
c0105ad9:	74 36                	je     c0105b11 <do_pgfault+0x94>
c0105adb:	83 f8 01             	cmp    $0x1,%eax
c0105ade:	74 1f                	je     c0105aff <do_pgfault+0x82>
    default:
            /* error code flag : default is 3 ( W/R=1, P=1): write, present */
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
c0105ae0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ae3:	8b 40 0c             	mov    0xc(%eax),%eax
c0105ae6:	83 e0 02             	and    $0x2,%eax
c0105ae9:	85 c0                	test   %eax,%eax
c0105aeb:	75 43                	jne    c0105b30 <do_pgfault+0xb3>
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
c0105aed:	83 ec 0c             	sub    $0xc,%esp
c0105af0:	68 00 40 11 c0       	push   $0xc0114000
c0105af5:	e8 85 a8 ff ff       	call   c010037f <cprintf>
c0105afa:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0105afd:	eb 70                	jmp    c0105b6f <do_pgfault+0xf2>
        }
        break;
    case 1: /* error code flag : (W/R=0, P=1): read, present */
        cprintf("do_pgfault failed: error code flag = read AND present\n");
c0105aff:	83 ec 0c             	sub    $0xc,%esp
c0105b02:	68 60 40 11 c0       	push   $0xc0114060
c0105b07:	e8 73 a8 ff ff       	call   c010037f <cprintf>
c0105b0c:	83 c4 10             	add    $0x10,%esp
        goto failed;
c0105b0f:	eb 5e                	jmp    c0105b6f <do_pgfault+0xf2>
    case 0: /* error code flag : (W/R=0, P=0): read, not present */
        if (!(vma->vm_flags & (VM_READ | VM_EXEC))) {
c0105b11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b14:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b17:	83 e0 05             	and    $0x5,%eax
c0105b1a:	85 c0                	test   %eax,%eax
c0105b1c:	75 13                	jne    c0105b31 <do_pgfault+0xb4>
            cprintf("do_pgfault failed: error code flag = read AND not present, but the addr's vma cannot read or exec\n");
c0105b1e:	83 ec 0c             	sub    $0xc,%esp
c0105b21:	68 98 40 11 c0       	push   $0xc0114098
c0105b26:	e8 54 a8 ff ff       	call   c010037f <cprintf>
c0105b2b:	83 c4 10             	add    $0x10,%esp
            goto failed;
c0105b2e:	eb 3f                	jmp    c0105b6f <do_pgfault+0xf2>
    case 2: /* error code flag : (W/R=1, P=0): write, not present */
        if (!(vma->vm_flags & VM_WRITE)) {
            cprintf("do_pgfault failed: error code flag = write AND not present, but the addr's vma cannot write\n");
            goto failed;
        }
        break;
c0105b30:	90                   	nop
     *    (write an non_existed addr && addr is writable) OR
     *    (read  an non_existed addr && addr is readable)
     * THEN
     *    continue process
     */
    uint32_t perm = PTE_U;
c0105b31:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    if (vma->vm_flags & VM_WRITE) {
c0105b38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105b3b:	8b 40 0c             	mov    0xc(%eax),%eax
c0105b3e:	83 e0 02             	and    $0x2,%eax
c0105b41:	85 c0                	test   %eax,%eax
c0105b43:	74 04                	je     c0105b49 <do_pgfault+0xcc>
        perm |= PTE_W;
c0105b45:	83 4d ec 02          	orl    $0x2,-0x14(%ebp)
    }
    addr = ROUNDDOWN(addr, PGSIZE);
c0105b49:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0105b4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105b52:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105b57:	89 45 10             	mov    %eax,0x10(%ebp)

    ret = -E_NO_MEM;
c0105b5a:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    pte_t *ptep=NULL;
c0105b61:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
            cprintf("no swap_init_ok but ptep is %x, failed\n",*ptep);
            goto failed;
        }
   }
#endif
   ret = 0;
c0105b68:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
failed:
    return ret;
c0105b6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105b72:	c9                   	leave  
c0105b73:	c3                   	ret    

c0105b74 <user_mem_check>:

bool
user_mem_check(struct mm_struct *mm, uintptr_t addr, size_t len, bool write) {
c0105b74:	55                   	push   %ebp
c0105b75:	89 e5                	mov    %esp,%ebp
c0105b77:	83 ec 10             	sub    $0x10,%esp
    if (mm != NULL) {
c0105b7a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0105b7e:	0f 84 dc 00 00 00    	je     c0105c60 <user_mem_check+0xec>
        if (!USER_ACCESS(addr, addr + len)) {
c0105b84:	81 7d 0c ff ff 1f 00 	cmpl   $0x1fffff,0xc(%ebp)
c0105b8b:	76 1c                	jbe    c0105ba9 <user_mem_check+0x35>
c0105b8d:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105b90:	8b 45 10             	mov    0x10(%ebp),%eax
c0105b93:	01 d0                	add    %edx,%eax
c0105b95:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105b98:	76 0f                	jbe    c0105ba9 <user_mem_check+0x35>
c0105b9a:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105b9d:	8b 45 10             	mov    0x10(%ebp),%eax
c0105ba0:	01 d0                	add    %edx,%eax
c0105ba2:	3d 00 00 00 b0       	cmp    $0xb0000000,%eax
c0105ba7:	76 0a                	jbe    c0105bb3 <user_mem_check+0x3f>
            return 0;
c0105ba9:	b8 00 00 00 00       	mov    $0x0,%eax
c0105bae:	e9 df 00 00 00       	jmp    c0105c92 <user_mem_check+0x11e>
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
c0105bb3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0105bb6:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0105bb9:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105bbc:	8b 45 10             	mov    0x10(%ebp),%eax
c0105bbf:	01 d0                	add    %edx,%eax
c0105bc1:	89 45 f8             	mov    %eax,-0x8(%ebp)
        while (start < end) {
c0105bc4:	e9 84 00 00 00       	jmp    c0105c4d <user_mem_check+0xd9>
            if ((vma = find_vma(mm, start)) == NULL || start < vma->vm_start) {
c0105bc9:	ff 75 fc             	pushl  -0x4(%ebp)
c0105bcc:	ff 75 08             	pushl  0x8(%ebp)
c0105bcf:	e8 47 f2 ff ff       	call   c0104e1b <find_vma>
c0105bd4:	83 c4 08             	add    $0x8,%esp
c0105bd7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0105bda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105bde:	74 0b                	je     c0105beb <user_mem_check+0x77>
c0105be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105be3:	8b 40 04             	mov    0x4(%eax),%eax
c0105be6:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0105be9:	76 0a                	jbe    c0105bf5 <user_mem_check+0x81>
                return 0;
c0105beb:	b8 00 00 00 00       	mov    $0x0,%eax
c0105bf0:	e9 9d 00 00 00       	jmp    c0105c92 <user_mem_check+0x11e>
            }
            if (!(vma->vm_flags & ((write) ? VM_WRITE : VM_READ))) {
c0105bf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105bf8:	8b 40 0c             	mov    0xc(%eax),%eax
c0105bfb:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0105bff:	74 07                	je     c0105c08 <user_mem_check+0x94>
c0105c01:	ba 02 00 00 00       	mov    $0x2,%edx
c0105c06:	eb 05                	jmp    c0105c0d <user_mem_check+0x99>
c0105c08:	ba 01 00 00 00       	mov    $0x1,%edx
c0105c0d:	21 d0                	and    %edx,%eax
c0105c0f:	85 c0                	test   %eax,%eax
c0105c11:	75 07                	jne    c0105c1a <user_mem_check+0xa6>
                return 0;
c0105c13:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c18:	eb 78                	jmp    c0105c92 <user_mem_check+0x11e>
            }
            if (write && (vma->vm_flags & VM_STACK)) {
c0105c1a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0105c1e:	74 24                	je     c0105c44 <user_mem_check+0xd0>
c0105c20:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c23:	8b 40 0c             	mov    0xc(%eax),%eax
c0105c26:	83 e0 08             	and    $0x8,%eax
c0105c29:	85 c0                	test   %eax,%eax
c0105c2b:	74 17                	je     c0105c44 <user_mem_check+0xd0>
                if (start < vma->vm_start + PGSIZE) { //check stack start & size
c0105c2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c30:	8b 40 04             	mov    0x4(%eax),%eax
c0105c33:	05 00 10 00 00       	add    $0x1000,%eax
c0105c38:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0105c3b:	76 07                	jbe    c0105c44 <user_mem_check+0xd0>
                    return 0;
c0105c3d:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c42:	eb 4e                	jmp    c0105c92 <user_mem_check+0x11e>
                }
            }
            start = vma->vm_end;
c0105c44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105c47:	8b 40 08             	mov    0x8(%eax),%eax
c0105c4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
        if (!USER_ACCESS(addr, addr + len)) {
            return 0;
        }
        struct vma_struct *vma;
        uintptr_t start = addr, end = addr + len;
        while (start < end) {
c0105c4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0105c50:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c0105c53:	0f 82 70 ff ff ff    	jb     c0105bc9 <user_mem_check+0x55>
                    return 0;
                }
            }
            start = vma->vm_end;
        }
        return 1;
c0105c59:	b8 01 00 00 00       	mov    $0x1,%eax
c0105c5e:	eb 32                	jmp    c0105c92 <user_mem_check+0x11e>
    }
    return KERN_ACCESS(addr, addr + len);
c0105c60:	81 7d 0c ff ff ff bf 	cmpl   $0xbfffffff,0xc(%ebp)
c0105c67:	76 23                	jbe    c0105c8c <user_mem_check+0x118>
c0105c69:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105c6c:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c6f:	01 d0                	add    %edx,%eax
c0105c71:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0105c74:	76 16                	jbe    c0105c8c <user_mem_check+0x118>
c0105c76:	8b 55 0c             	mov    0xc(%ebp),%edx
c0105c79:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c7c:	01 d0                	add    %edx,%eax
c0105c7e:	3d 00 00 00 f8       	cmp    $0xf8000000,%eax
c0105c83:	77 07                	ja     c0105c8c <user_mem_check+0x118>
c0105c85:	b8 01 00 00 00       	mov    $0x1,%eax
c0105c8a:	eb 05                	jmp    c0105c91 <user_mem_check+0x11d>
c0105c8c:	b8 00 00 00 00       	mov    $0x0,%eax
c0105c91:	90                   	nop
}
c0105c92:	c9                   	leave  
c0105c93:	c3                   	ret    

c0105c94 <copy_string>:

bool
copy_string(struct mm_struct *mm, char *dst, const char *src, size_t maxn) {
c0105c94:	55                   	push   %ebp
c0105c95:	89 e5                	mov    %esp,%ebp
c0105c97:	83 ec 18             	sub    $0x18,%esp
    size_t alen, part = ROUNDDOWN((uintptr_t)src + PGSIZE, PGSIZE) - (uintptr_t)src;
c0105c9a:	8b 45 10             	mov    0x10(%ebp),%eax
c0105c9d:	05 00 10 00 00       	add    $0x1000,%eax
c0105ca2:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0105ca5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0105ca8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105cad:	89 c2                	mov    %eax,%edx
c0105caf:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cb2:	29 c2                	sub    %eax,%edx
c0105cb4:	89 d0                	mov    %edx,%eax
c0105cb6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (1) {
        if (part > maxn) {
c0105cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105cbc:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105cbf:	76 06                	jbe    c0105cc7 <copy_string+0x33>
            part = maxn;
c0105cc1:	8b 45 14             	mov    0x14(%ebp),%eax
c0105cc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        if (!user_mem_check(mm, (uintptr_t)src, part, 0)) {
c0105cc7:	8b 45 10             	mov    0x10(%ebp),%eax
c0105cca:	6a 00                	push   $0x0
c0105ccc:	ff 75 f4             	pushl  -0xc(%ebp)
c0105ccf:	50                   	push   %eax
c0105cd0:	ff 75 08             	pushl  0x8(%ebp)
c0105cd3:	e8 9c fe ff ff       	call   c0105b74 <user_mem_check>
c0105cd8:	83 c4 10             	add    $0x10,%esp
c0105cdb:	85 c0                	test   %eax,%eax
c0105cdd:	75 07                	jne    c0105ce6 <copy_string+0x52>
            return 0;
c0105cdf:	b8 00 00 00 00       	mov    $0x0,%eax
c0105ce4:	eb 7c                	jmp    c0105d62 <copy_string+0xce>
        }
        if ((alen = strnlen(src, part)) < part) {
c0105ce6:	83 ec 08             	sub    $0x8,%esp
c0105ce9:	ff 75 f4             	pushl  -0xc(%ebp)
c0105cec:	ff 75 10             	pushl  0x10(%ebp)
c0105cef:	e8 df c3 00 00       	call   c01120d3 <strnlen>
c0105cf4:	83 c4 10             	add    $0x10,%esp
c0105cf7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0105cfa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105cfd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0105d00:	73 1f                	jae    c0105d21 <copy_string+0x8d>
            memcpy(dst, src, alen + 1);
c0105d02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0105d05:	83 c0 01             	add    $0x1,%eax
c0105d08:	83 ec 04             	sub    $0x4,%esp
c0105d0b:	50                   	push   %eax
c0105d0c:	ff 75 10             	pushl  0x10(%ebp)
c0105d0f:	ff 75 0c             	pushl  0xc(%ebp)
c0105d12:	e8 d1 c7 00 00       	call   c01124e8 <memcpy>
c0105d17:	83 c4 10             	add    $0x10,%esp
            return 1;
c0105d1a:	b8 01 00 00 00       	mov    $0x1,%eax
c0105d1f:	eb 41                	jmp    c0105d62 <copy_string+0xce>
        }
        if (part == maxn) {
c0105d21:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d24:	3b 45 14             	cmp    0x14(%ebp),%eax
c0105d27:	75 07                	jne    c0105d30 <copy_string+0x9c>
            return 0;
c0105d29:	b8 00 00 00 00       	mov    $0x0,%eax
c0105d2e:	eb 32                	jmp    c0105d62 <copy_string+0xce>
        }
        memcpy(dst, src, part);
c0105d30:	83 ec 04             	sub    $0x4,%esp
c0105d33:	ff 75 f4             	pushl  -0xc(%ebp)
c0105d36:	ff 75 10             	pushl  0x10(%ebp)
c0105d39:	ff 75 0c             	pushl  0xc(%ebp)
c0105d3c:	e8 a7 c7 00 00       	call   c01124e8 <memcpy>
c0105d41:	83 c4 10             	add    $0x10,%esp
        dst += part, src += part, maxn -= part;
c0105d44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d47:	01 45 0c             	add    %eax,0xc(%ebp)
c0105d4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d4d:	01 45 10             	add    %eax,0x10(%ebp)
c0105d50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0105d53:	29 45 14             	sub    %eax,0x14(%ebp)
        part = PGSIZE;
c0105d56:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
    }
c0105d5d:	e9 57 ff ff ff       	jmp    c0105cb9 <copy_string+0x25>
}
c0105d62:	c9                   	leave  
c0105d63:	c3                   	ret    

c0105d64 <pa2page>:
page2pa(struct Page *page) {
    return page2ppn(page) << PGSHIFT;
}

static inline struct Page *
pa2page(uintptr_t pa) {
c0105d64:	55                   	push   %ebp
c0105d65:	89 e5                	mov    %esp,%ebp
c0105d67:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c0105d6a:	8b 45 08             	mov    0x8(%ebp),%eax
c0105d6d:	c1 e8 0c             	shr    $0xc,%eax
c0105d70:	89 c2                	mov    %eax,%edx
c0105d72:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0105d77:	39 c2                	cmp    %eax,%edx
c0105d79:	72 14                	jb     c0105d8f <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c0105d7b:	83 ec 04             	sub    $0x4,%esp
c0105d7e:	68 fc 40 11 c0       	push   $0xc01140fc
c0105d83:	6a 5e                	push   $0x5e
c0105d85:	68 1b 41 11 c0       	push   $0xc011411b
c0105d8a:	e8 56 a7 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c0105d8f:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c0105d94:	8b 55 08             	mov    0x8(%ebp),%edx
c0105d97:	c1 ea 0c             	shr    $0xc,%edx
c0105d9a:	c1 e2 05             	shl    $0x5,%edx
c0105d9d:	01 d0                	add    %edx,%eax
}
c0105d9f:	c9                   	leave  
c0105da0:	c3                   	ret    

c0105da1 <pte2page>:
kva2page(void *kva) {
    return pa2page(PADDR(kva));
}

static inline struct Page *
pte2page(pte_t pte) {
c0105da1:	55                   	push   %ebp
c0105da2:	89 e5                	mov    %esp,%ebp
c0105da4:	83 ec 08             	sub    $0x8,%esp
    if (!(pte & PTE_P)) {
c0105da7:	8b 45 08             	mov    0x8(%ebp),%eax
c0105daa:	83 e0 01             	and    $0x1,%eax
c0105dad:	85 c0                	test   %eax,%eax
c0105daf:	75 14                	jne    c0105dc5 <pte2page+0x24>
        panic("pte2page called with invalid pte");
c0105db1:	83 ec 04             	sub    $0x4,%esp
c0105db4:	68 2c 41 11 c0       	push   $0xc011412c
c0105db9:	6a 70                	push   $0x70
c0105dbb:	68 1b 41 11 c0       	push   $0xc011411b
c0105dc0:	e8 20 a7 ff ff       	call   c01004e5 <__panic>
    }
    return pa2page(PTE_ADDR(pte));
c0105dc5:	8b 45 08             	mov    0x8(%ebp),%eax
c0105dc8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105dcd:	83 ec 0c             	sub    $0xc,%esp
c0105dd0:	50                   	push   %eax
c0105dd1:	e8 8e ff ff ff       	call   c0105d64 <pa2page>
c0105dd6:	83 c4 10             	add    $0x10,%esp
}
c0105dd9:	c9                   	leave  
c0105dda:	c3                   	ret    

c0105ddb <pde2page>:

static inline struct Page *
pde2page(pde_t pde) {
c0105ddb:	55                   	push   %ebp
c0105ddc:	89 e5                	mov    %esp,%ebp
c0105dde:	83 ec 08             	sub    $0x8,%esp
    return pa2page(PDE_ADDR(pde));
c0105de1:	8b 45 08             	mov    0x8(%ebp),%eax
c0105de4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
c0105de9:	83 ec 0c             	sub    $0xc,%esp
c0105dec:	50                   	push   %eax
c0105ded:	e8 72 ff ff ff       	call   c0105d64 <pa2page>
c0105df2:	83 c4 10             	add    $0x10,%esp
}
c0105df5:	c9                   	leave  
c0105df6:	c3                   	ret    

c0105df7 <swap_init>:

static void check_swap(void);

int
swap_init(void)
{
c0105df7:	55                   	push   %ebp
c0105df8:	89 e5                	mov    %esp,%ebp
c0105dfa:	83 ec 18             	sub    $0x18,%esp
     swapfs_init();
c0105dfd:	e8 d6 70 00 00       	call   c010ced8 <swapfs_init>

     if (!(1024 <= max_swap_offset && max_swap_offset < MAX_SWAP_OFFSET_LIMIT))
c0105e02:	a1 bc 21 15 c0       	mov    0xc01521bc,%eax
c0105e07:	3d ff 03 00 00       	cmp    $0x3ff,%eax
c0105e0c:	76 0c                	jbe    c0105e1a <swap_init+0x23>
c0105e0e:	a1 bc 21 15 c0       	mov    0xc01521bc,%eax
c0105e13:	3d ff ff ff 00       	cmp    $0xffffff,%eax
c0105e18:	76 17                	jbe    c0105e31 <swap_init+0x3a>
     {
          panic("bad max_swap_offset %08x.\n", max_swap_offset);
c0105e1a:	a1 bc 21 15 c0       	mov    0xc01521bc,%eax
c0105e1f:	50                   	push   %eax
c0105e20:	68 4d 41 11 c0       	push   $0xc011414d
c0105e25:	6a 27                	push   $0x27
c0105e27:	68 68 41 11 c0       	push   $0xc0114168
c0105e2c:	e8 b4 a6 ff ff       	call   c01004e5 <__panic>
     }
     

     sm = &swap_manager_fifo;
c0105e31:	c7 05 18 f0 14 c0 60 	movl   $0xc014ba60,0xc014f018
c0105e38:	ba 14 c0 
     int r = sm->init();
c0105e3b:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105e40:	8b 40 04             	mov    0x4(%eax),%eax
c0105e43:	ff d0                	call   *%eax
c0105e45:	89 45 f4             	mov    %eax,-0xc(%ebp)
     
     if (r == 0)
c0105e48:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0105e4c:	75 27                	jne    c0105e75 <swap_init+0x7e>
     {
          swap_init_ok = 1;
c0105e4e:	c7 05 10 f0 14 c0 01 	movl   $0x1,0xc014f010
c0105e55:	00 00 00 
          cprintf("SWAP: manager = %s\n", sm->name);
c0105e58:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105e5d:	8b 00                	mov    (%eax),%eax
c0105e5f:	83 ec 08             	sub    $0x8,%esp
c0105e62:	50                   	push   %eax
c0105e63:	68 77 41 11 c0       	push   $0xc0114177
c0105e68:	e8 12 a5 ff ff       	call   c010037f <cprintf>
c0105e6d:	83 c4 10             	add    $0x10,%esp
          check_swap();
c0105e70:	e8 f7 03 00 00       	call   c010626c <check_swap>
     }

     return r;
c0105e75:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0105e78:	c9                   	leave  
c0105e79:	c3                   	ret    

c0105e7a <swap_init_mm>:

int
swap_init_mm(struct mm_struct *mm)
{
c0105e7a:	55                   	push   %ebp
c0105e7b:	89 e5                	mov    %esp,%ebp
c0105e7d:	83 ec 08             	sub    $0x8,%esp
     return sm->init_mm(mm);
c0105e80:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105e85:	8b 40 08             	mov    0x8(%eax),%eax
c0105e88:	83 ec 0c             	sub    $0xc,%esp
c0105e8b:	ff 75 08             	pushl  0x8(%ebp)
c0105e8e:	ff d0                	call   *%eax
c0105e90:	83 c4 10             	add    $0x10,%esp
}
c0105e93:	c9                   	leave  
c0105e94:	c3                   	ret    

c0105e95 <swap_tick_event>:

int
swap_tick_event(struct mm_struct *mm)
{
c0105e95:	55                   	push   %ebp
c0105e96:	89 e5                	mov    %esp,%ebp
c0105e98:	83 ec 08             	sub    $0x8,%esp
     return sm->tick_event(mm);
c0105e9b:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105ea0:	8b 40 0c             	mov    0xc(%eax),%eax
c0105ea3:	83 ec 0c             	sub    $0xc,%esp
c0105ea6:	ff 75 08             	pushl  0x8(%ebp)
c0105ea9:	ff d0                	call   *%eax
c0105eab:	83 c4 10             	add    $0x10,%esp
}
c0105eae:	c9                   	leave  
c0105eaf:	c3                   	ret    

c0105eb0 <swap_map_swappable>:

int
swap_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0105eb0:	55                   	push   %ebp
c0105eb1:	89 e5                	mov    %esp,%ebp
c0105eb3:	83 ec 08             	sub    $0x8,%esp
     return sm->map_swappable(mm, addr, page, swap_in);
c0105eb6:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105ebb:	8b 40 10             	mov    0x10(%eax),%eax
c0105ebe:	ff 75 14             	pushl  0x14(%ebp)
c0105ec1:	ff 75 10             	pushl  0x10(%ebp)
c0105ec4:	ff 75 0c             	pushl  0xc(%ebp)
c0105ec7:	ff 75 08             	pushl  0x8(%ebp)
c0105eca:	ff d0                	call   *%eax
c0105ecc:	83 c4 10             	add    $0x10,%esp
}
c0105ecf:	c9                   	leave  
c0105ed0:	c3                   	ret    

c0105ed1 <swap_set_unswappable>:

int
swap_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0105ed1:	55                   	push   %ebp
c0105ed2:	89 e5                	mov    %esp,%ebp
c0105ed4:	83 ec 08             	sub    $0x8,%esp
     return sm->set_unswappable(mm, addr);
c0105ed7:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105edc:	8b 40 14             	mov    0x14(%eax),%eax
c0105edf:	83 ec 08             	sub    $0x8,%esp
c0105ee2:	ff 75 0c             	pushl  0xc(%ebp)
c0105ee5:	ff 75 08             	pushl  0x8(%ebp)
c0105ee8:	ff d0                	call   *%eax
c0105eea:	83 c4 10             	add    $0x10,%esp
}
c0105eed:	c9                   	leave  
c0105eee:	c3                   	ret    

c0105eef <swap_out>:

volatile unsigned int swap_out_num=0;

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
c0105eef:	55                   	push   %ebp
c0105ef0:	89 e5                	mov    %esp,%ebp
c0105ef2:	83 ec 28             	sub    $0x28,%esp
     int i;
     for (i = 0; i != n; ++ i)
c0105ef5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0105efc:	e9 2e 01 00 00       	jmp    c010602f <swap_out+0x140>
     {
          uintptr_t v;
          //struct Page **ptr_page=NULL;
          struct Page *page;
          // cprintf("i %d, SWAP: call swap_out_victim\n",i);
          int r = sm->swap_out_victim(mm, &page, in_tick);
c0105f01:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105f06:	8b 40 18             	mov    0x18(%eax),%eax
c0105f09:	83 ec 04             	sub    $0x4,%esp
c0105f0c:	ff 75 10             	pushl  0x10(%ebp)
c0105f0f:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0105f12:	52                   	push   %edx
c0105f13:	ff 75 08             	pushl  0x8(%ebp)
c0105f16:	ff d0                	call   *%eax
c0105f18:	83 c4 10             	add    $0x10,%esp
c0105f1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          if (r != 0) {
c0105f1e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0105f22:	74 18                	je     c0105f3c <swap_out+0x4d>
                    cprintf("i %d, swap_out: call swap_out_victim failed\n",i);
c0105f24:	83 ec 08             	sub    $0x8,%esp
c0105f27:	ff 75 f4             	pushl  -0xc(%ebp)
c0105f2a:	68 8c 41 11 c0       	push   $0xc011418c
c0105f2f:	e8 4b a4 ff ff       	call   c010037f <cprintf>
c0105f34:	83 c4 10             	add    $0x10,%esp
c0105f37:	e9 ff 00 00 00       	jmp    c010603b <swap_out+0x14c>
          }          
          //assert(!PageReserved(page));

          //cprintf("SWAP: choose victim page 0x%08x\n", page);
          
          v=page->pra_vaddr; 
c0105f3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f3f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105f42:	89 45 ec             	mov    %eax,-0x14(%ebp)
          pte_t *ptep = get_pte(mm->pgdir, v, 0);
c0105f45:	8b 45 08             	mov    0x8(%ebp),%eax
c0105f48:	8b 40 0c             	mov    0xc(%eax),%eax
c0105f4b:	83 ec 04             	sub    $0x4,%esp
c0105f4e:	6a 00                	push   $0x0
c0105f50:	ff 75 ec             	pushl  -0x14(%ebp)
c0105f53:	50                   	push   %eax
c0105f54:	e8 04 dd ff ff       	call   c0103c5d <get_pte>
c0105f59:	83 c4 10             	add    $0x10,%esp
c0105f5c:	89 45 e8             	mov    %eax,-0x18(%ebp)
          assert((*ptep & PTE_P) != 0);
c0105f5f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0105f62:	8b 00                	mov    (%eax),%eax
c0105f64:	83 e0 01             	and    $0x1,%eax
c0105f67:	85 c0                	test   %eax,%eax
c0105f69:	75 16                	jne    c0105f81 <swap_out+0x92>
c0105f6b:	68 b9 41 11 c0       	push   $0xc01141b9
c0105f70:	68 ce 41 11 c0       	push   $0xc01141ce
c0105f75:	6a 67                	push   $0x67
c0105f77:	68 68 41 11 c0       	push   $0xc0114168
c0105f7c:	e8 64 a5 ff ff       	call   c01004e5 <__panic>

          if (swapfs_write( (page->pra_vaddr/PGSIZE+1)<<8, page) != 0) {
c0105f81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105f84:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105f87:	8b 52 1c             	mov    0x1c(%edx),%edx
c0105f8a:	c1 ea 0c             	shr    $0xc,%edx
c0105f8d:	83 c2 01             	add    $0x1,%edx
c0105f90:	c1 e2 08             	shl    $0x8,%edx
c0105f93:	83 ec 08             	sub    $0x8,%esp
c0105f96:	50                   	push   %eax
c0105f97:	52                   	push   %edx
c0105f98:	e8 d7 6f 00 00       	call   c010cf74 <swapfs_write>
c0105f9d:	83 c4 10             	add    $0x10,%esp
c0105fa0:	85 c0                	test   %eax,%eax
c0105fa2:	74 2b                	je     c0105fcf <swap_out+0xe0>
                    cprintf("SWAP: failed to save\n");
c0105fa4:	83 ec 0c             	sub    $0xc,%esp
c0105fa7:	68 e3 41 11 c0       	push   $0xc01141e3
c0105fac:	e8 ce a3 ff ff       	call   c010037f <cprintf>
c0105fb1:	83 c4 10             	add    $0x10,%esp
                    sm->map_swappable(mm, v, page, 0);
c0105fb4:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c0105fb9:	8b 40 10             	mov    0x10(%eax),%eax
c0105fbc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0105fbf:	6a 00                	push   $0x0
c0105fc1:	52                   	push   %edx
c0105fc2:	ff 75 ec             	pushl  -0x14(%ebp)
c0105fc5:	ff 75 08             	pushl  0x8(%ebp)
c0105fc8:	ff d0                	call   *%eax
c0105fca:	83 c4 10             	add    $0x10,%esp
c0105fcd:	eb 5c                	jmp    c010602b <swap_out+0x13c>
                    continue;
          }
          else {
                    cprintf("swap_out: i %d, store page in vaddr 0x%x to disk swap entry %d\n", i, v, page->pra_vaddr/PGSIZE+1);
c0105fcf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105fd2:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105fd5:	c1 e8 0c             	shr    $0xc,%eax
c0105fd8:	83 c0 01             	add    $0x1,%eax
c0105fdb:	50                   	push   %eax
c0105fdc:	ff 75 ec             	pushl  -0x14(%ebp)
c0105fdf:	ff 75 f4             	pushl  -0xc(%ebp)
c0105fe2:	68 fc 41 11 c0       	push   $0xc01141fc
c0105fe7:	e8 93 a3 ff ff       	call   c010037f <cprintf>
c0105fec:	83 c4 10             	add    $0x10,%esp
                    *ptep = (page->pra_vaddr/PGSIZE+1)<<8;
c0105fef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0105ff2:	8b 40 1c             	mov    0x1c(%eax),%eax
c0105ff5:	c1 e8 0c             	shr    $0xc,%eax
c0105ff8:	83 c0 01             	add    $0x1,%eax
c0105ffb:	c1 e0 08             	shl    $0x8,%eax
c0105ffe:	89 c2                	mov    %eax,%edx
c0106000:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106003:	89 10                	mov    %edx,(%eax)
                    free_page(page);
c0106005:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106008:	83 ec 08             	sub    $0x8,%esp
c010600b:	6a 01                	push   $0x1
c010600d:	50                   	push   %eax
c010600e:	e8 4a d6 ff ff       	call   c010365d <free_pages>
c0106013:	83 c4 10             	add    $0x10,%esp
          }
          
          tlb_invalidate(mm->pgdir, v);
c0106016:	8b 45 08             	mov    0x8(%ebp),%eax
c0106019:	8b 40 0c             	mov    0xc(%eax),%eax
c010601c:	83 ec 08             	sub    $0x8,%esp
c010601f:	ff 75 ec             	pushl  -0x14(%ebp)
c0106022:	50                   	push   %eax
c0106023:	e8 cb e0 ff ff       	call   c01040f3 <tlb_invalidate>
c0106028:	83 c4 10             	add    $0x10,%esp

int
swap_out(struct mm_struct *mm, int n, int in_tick)
{
     int i;
     for (i = 0; i != n; ++ i)
c010602b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010602f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106032:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0106035:	0f 85 c6 fe ff ff    	jne    c0105f01 <swap_out+0x12>
                    free_page(page);
          }
          
          tlb_invalidate(mm->pgdir, v);
     }
     return i;
c010603b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010603e:	c9                   	leave  
c010603f:	c3                   	ret    

c0106040 <swap_in>:

int
swap_in(struct mm_struct *mm, uintptr_t addr, struct Page **ptr_result)
{
c0106040:	55                   	push   %ebp
c0106041:	89 e5                	mov    %esp,%ebp
c0106043:	83 ec 18             	sub    $0x18,%esp
     struct Page *result = alloc_page();
c0106046:	83 ec 0c             	sub    $0xc,%esp
c0106049:	6a 01                	push   $0x1
c010604b:	e8 a1 d5 ff ff       	call   c01035f1 <alloc_pages>
c0106050:	83 c4 10             	add    $0x10,%esp
c0106053:	89 45 f4             	mov    %eax,-0xc(%ebp)
     assert(result!=NULL);
c0106056:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010605a:	75 16                	jne    c0106072 <swap_in+0x32>
c010605c:	68 3c 42 11 c0       	push   $0xc011423c
c0106061:	68 ce 41 11 c0       	push   $0xc01141ce
c0106066:	6a 7d                	push   $0x7d
c0106068:	68 68 41 11 c0       	push   $0xc0114168
c010606d:	e8 73 a4 ff ff       	call   c01004e5 <__panic>

     pte_t *ptep = get_pte(mm->pgdir, addr, 0);
c0106072:	8b 45 08             	mov    0x8(%ebp),%eax
c0106075:	8b 40 0c             	mov    0xc(%eax),%eax
c0106078:	83 ec 04             	sub    $0x4,%esp
c010607b:	6a 00                	push   $0x0
c010607d:	ff 75 0c             	pushl  0xc(%ebp)
c0106080:	50                   	push   %eax
c0106081:	e8 d7 db ff ff       	call   c0103c5d <get_pte>
c0106086:	83 c4 10             	add    $0x10,%esp
c0106089:	89 45 f0             	mov    %eax,-0x10(%ebp)
     // cprintf("SWAP: load ptep %x swap entry %d to vaddr 0x%08x, page %x, No %d\n", ptep, (*ptep)>>8, addr, result, (result-pages));
    
     int r;
     if ((r = swapfs_read((*ptep), result)) != 0)
c010608c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010608f:	8b 00                	mov    (%eax),%eax
c0106091:	83 ec 08             	sub    $0x8,%esp
c0106094:	ff 75 f4             	pushl  -0xc(%ebp)
c0106097:	50                   	push   %eax
c0106098:	e8 7e 6e 00 00       	call   c010cf1b <swapfs_read>
c010609d:	83 c4 10             	add    $0x10,%esp
c01060a0:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01060a3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01060a7:	74 1f                	je     c01060c8 <swap_in+0x88>
     {
        assert(r!=0);
c01060a9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01060ad:	75 19                	jne    c01060c8 <swap_in+0x88>
c01060af:	68 49 42 11 c0       	push   $0xc0114249
c01060b4:	68 ce 41 11 c0       	push   $0xc01141ce
c01060b9:	68 85 00 00 00       	push   $0x85
c01060be:	68 68 41 11 c0       	push   $0xc0114168
c01060c3:	e8 1d a4 ff ff       	call   c01004e5 <__panic>
     }
     cprintf("swap_in: load disk swap entry %d with swap_page in vadr 0x%x\n", (*ptep)>>8, addr);
c01060c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01060cb:	8b 00                	mov    (%eax),%eax
c01060cd:	c1 e8 08             	shr    $0x8,%eax
c01060d0:	83 ec 04             	sub    $0x4,%esp
c01060d3:	ff 75 0c             	pushl  0xc(%ebp)
c01060d6:	50                   	push   %eax
c01060d7:	68 50 42 11 c0       	push   $0xc0114250
c01060dc:	e8 9e a2 ff ff       	call   c010037f <cprintf>
c01060e1:	83 c4 10             	add    $0x10,%esp
     *ptr_result=result;
c01060e4:	8b 45 10             	mov    0x10(%ebp),%eax
c01060e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01060ea:	89 10                	mov    %edx,(%eax)
     return 0;
c01060ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01060f1:	c9                   	leave  
c01060f2:	c3                   	ret    

c01060f3 <check_content_set>:



static inline void
check_content_set(void)
{
c01060f3:	55                   	push   %ebp
c01060f4:	89 e5                	mov    %esp,%ebp
c01060f6:	83 ec 08             	sub    $0x8,%esp
     *(unsigned char *)0x1000 = 0x0a;
c01060f9:	b8 00 10 00 00       	mov    $0x1000,%eax
c01060fe:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c0106101:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0106106:	83 f8 01             	cmp    $0x1,%eax
c0106109:	74 19                	je     c0106124 <check_content_set+0x31>
c010610b:	68 8e 42 11 c0       	push   $0xc011428e
c0106110:	68 ce 41 11 c0       	push   $0xc01141ce
c0106115:	68 92 00 00 00       	push   $0x92
c010611a:	68 68 41 11 c0       	push   $0xc0114168
c010611f:	e8 c1 a3 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x1010 = 0x0a;
c0106124:	b8 10 10 00 00       	mov    $0x1010,%eax
c0106129:	c6 00 0a             	movb   $0xa,(%eax)
     assert(pgfault_num==1);
c010612c:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0106131:	83 f8 01             	cmp    $0x1,%eax
c0106134:	74 19                	je     c010614f <check_content_set+0x5c>
c0106136:	68 8e 42 11 c0       	push   $0xc011428e
c010613b:	68 ce 41 11 c0       	push   $0xc01141ce
c0106140:	68 94 00 00 00       	push   $0x94
c0106145:	68 68 41 11 c0       	push   $0xc0114168
c010614a:	e8 96 a3 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x2000 = 0x0b;
c010614f:	b8 00 20 00 00       	mov    $0x2000,%eax
c0106154:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106157:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c010615c:	83 f8 02             	cmp    $0x2,%eax
c010615f:	74 19                	je     c010617a <check_content_set+0x87>
c0106161:	68 9d 42 11 c0       	push   $0xc011429d
c0106166:	68 ce 41 11 c0       	push   $0xc01141ce
c010616b:	68 96 00 00 00       	push   $0x96
c0106170:	68 68 41 11 c0       	push   $0xc0114168
c0106175:	e8 6b a3 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x2010 = 0x0b;
c010617a:	b8 10 20 00 00       	mov    $0x2010,%eax
c010617f:	c6 00 0b             	movb   $0xb,(%eax)
     assert(pgfault_num==2);
c0106182:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0106187:	83 f8 02             	cmp    $0x2,%eax
c010618a:	74 19                	je     c01061a5 <check_content_set+0xb2>
c010618c:	68 9d 42 11 c0       	push   $0xc011429d
c0106191:	68 ce 41 11 c0       	push   $0xc01141ce
c0106196:	68 98 00 00 00       	push   $0x98
c010619b:	68 68 41 11 c0       	push   $0xc0114168
c01061a0:	e8 40 a3 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x3000 = 0x0c;
c01061a5:	b8 00 30 00 00       	mov    $0x3000,%eax
c01061aa:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01061ad:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01061b2:	83 f8 03             	cmp    $0x3,%eax
c01061b5:	74 19                	je     c01061d0 <check_content_set+0xdd>
c01061b7:	68 ac 42 11 c0       	push   $0xc01142ac
c01061bc:	68 ce 41 11 c0       	push   $0xc01141ce
c01061c1:	68 9a 00 00 00       	push   $0x9a
c01061c6:	68 68 41 11 c0       	push   $0xc0114168
c01061cb:	e8 15 a3 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x3010 = 0x0c;
c01061d0:	b8 10 30 00 00       	mov    $0x3010,%eax
c01061d5:	c6 00 0c             	movb   $0xc,(%eax)
     assert(pgfault_num==3);
c01061d8:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01061dd:	83 f8 03             	cmp    $0x3,%eax
c01061e0:	74 19                	je     c01061fb <check_content_set+0x108>
c01061e2:	68 ac 42 11 c0       	push   $0xc01142ac
c01061e7:	68 ce 41 11 c0       	push   $0xc01141ce
c01061ec:	68 9c 00 00 00       	push   $0x9c
c01061f1:	68 68 41 11 c0       	push   $0xc0114168
c01061f6:	e8 ea a2 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x4000 = 0x0d;
c01061fb:	b8 00 40 00 00       	mov    $0x4000,%eax
c0106200:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c0106203:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0106208:	83 f8 04             	cmp    $0x4,%eax
c010620b:	74 19                	je     c0106226 <check_content_set+0x133>
c010620d:	68 bb 42 11 c0       	push   $0xc01142bb
c0106212:	68 ce 41 11 c0       	push   $0xc01141ce
c0106217:	68 9e 00 00 00       	push   $0x9e
c010621c:	68 68 41 11 c0       	push   $0xc0114168
c0106221:	e8 bf a2 ff ff       	call   c01004e5 <__panic>
     *(unsigned char *)0x4010 = 0x0d;
c0106226:	b8 10 40 00 00       	mov    $0x4010,%eax
c010622b:	c6 00 0d             	movb   $0xd,(%eax)
     assert(pgfault_num==4);
c010622e:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0106233:	83 f8 04             	cmp    $0x4,%eax
c0106236:	74 19                	je     c0106251 <check_content_set+0x15e>
c0106238:	68 bb 42 11 c0       	push   $0xc01142bb
c010623d:	68 ce 41 11 c0       	push   $0xc01141ce
c0106242:	68 a0 00 00 00       	push   $0xa0
c0106247:	68 68 41 11 c0       	push   $0xc0114168
c010624c:	e8 94 a2 ff ff       	call   c01004e5 <__panic>
}
c0106251:	90                   	nop
c0106252:	c9                   	leave  
c0106253:	c3                   	ret    

c0106254 <check_content_access>:

static inline int
check_content_access(void)
{
c0106254:	55                   	push   %ebp
c0106255:	89 e5                	mov    %esp,%ebp
c0106257:	83 ec 18             	sub    $0x18,%esp
    int ret = sm->check_swap();
c010625a:	a1 18 f0 14 c0       	mov    0xc014f018,%eax
c010625f:	8b 40 1c             	mov    0x1c(%eax),%eax
c0106262:	ff d0                	call   *%eax
c0106264:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return ret;
c0106267:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010626a:	c9                   	leave  
c010626b:	c3                   	ret    

c010626c <check_swap>:
#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
check_swap(void)
{
c010626c:	55                   	push   %ebp
c010626d:	89 e5                	mov    %esp,%ebp
c010626f:	83 ec 68             	sub    $0x68,%esp
    //backup mem env
     int ret, count = 0, total = 0, i;
c0106272:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0106279:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
     list_entry_t *le = &free_list;
c0106280:	c7 45 e8 ec 21 15 c0 	movl   $0xc01521ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c0106287:	eb 60                	jmp    c01062e9 <check_swap+0x7d>
        struct Page *p = le2page(le, page_link);
c0106289:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010628c:	83 e8 0c             	sub    $0xc,%eax
c010628f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        assert(PageProperty(p));
c0106292:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106295:	83 c0 04             	add    $0x4,%eax
c0106298:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c010629f:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01062a2:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01062a5:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01062a8:	0f a3 10             	bt     %edx,(%eax)
c01062ab:	19 c0                	sbb    %eax,%eax
c01062ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c01062b0:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c01062b4:	0f 95 c0             	setne  %al
c01062b7:	0f b6 c0             	movzbl %al,%eax
c01062ba:	85 c0                	test   %eax,%eax
c01062bc:	75 19                	jne    c01062d7 <check_swap+0x6b>
c01062be:	68 ca 42 11 c0       	push   $0xc01142ca
c01062c3:	68 ce 41 11 c0       	push   $0xc01141ce
c01062c8:	68 bb 00 00 00       	push   $0xbb
c01062cd:	68 68 41 11 c0       	push   $0xc0114168
c01062d2:	e8 0e a2 ff ff       	call   c01004e5 <__panic>
        count ++, total += p->property;
c01062d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01062db:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01062de:	8b 50 08             	mov    0x8(%eax),%edx
c01062e1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01062e4:	01 d0                	add    %edx,%eax
c01062e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01062e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01062ec:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01062ef:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01062f2:	8b 40 04             	mov    0x4(%eax),%eax
check_swap(void)
{
    //backup mem env
     int ret, count = 0, total = 0, i;
     list_entry_t *le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c01062f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01062f8:	81 7d e8 ec 21 15 c0 	cmpl   $0xc01521ec,-0x18(%ebp)
c01062ff:	75 88                	jne    c0106289 <check_swap+0x1d>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
     }
     assert(total == nr_free_pages());
c0106301:	e8 8c d3 ff ff       	call   c0103692 <nr_free_pages>
c0106306:	89 c2                	mov    %eax,%edx
c0106308:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010630b:	39 c2                	cmp    %eax,%edx
c010630d:	74 19                	je     c0106328 <check_swap+0xbc>
c010630f:	68 da 42 11 c0       	push   $0xc01142da
c0106314:	68 ce 41 11 c0       	push   $0xc01141ce
c0106319:	68 be 00 00 00       	push   $0xbe
c010631e:	68 68 41 11 c0       	push   $0xc0114168
c0106323:	e8 bd a1 ff ff       	call   c01004e5 <__panic>
     cprintf("BEGIN check_swap: count %d, total %d\n",count,total);
c0106328:	83 ec 04             	sub    $0x4,%esp
c010632b:	ff 75 f0             	pushl  -0x10(%ebp)
c010632e:	ff 75 f4             	pushl  -0xc(%ebp)
c0106331:	68 f4 42 11 c0       	push   $0xc01142f4
c0106336:	e8 44 a0 ff ff       	call   c010037f <cprintf>
c010633b:	83 c4 10             	add    $0x10,%esp
     
     //now we set the phy pages env     
     struct mm_struct *mm = mm_create();
c010633e:	e8 fc e9 ff ff       	call   c0104d3f <mm_create>
c0106343:	89 45 d8             	mov    %eax,-0x28(%ebp)
     assert(mm != NULL);
c0106346:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c010634a:	75 19                	jne    c0106365 <check_swap+0xf9>
c010634c:	68 1a 43 11 c0       	push   $0xc011431a
c0106351:	68 ce 41 11 c0       	push   $0xc01141ce
c0106356:	68 c3 00 00 00       	push   $0xc3
c010635b:	68 68 41 11 c0       	push   $0xc0114168
c0106360:	e8 80 a1 ff ff       	call   c01004e5 <__panic>

     extern struct mm_struct *check_mm_struct;
     assert(check_mm_struct == NULL);
c0106365:	a1 10 21 15 c0       	mov    0xc0152110,%eax
c010636a:	85 c0                	test   %eax,%eax
c010636c:	74 19                	je     c0106387 <check_swap+0x11b>
c010636e:	68 25 43 11 c0       	push   $0xc0114325
c0106373:	68 ce 41 11 c0       	push   $0xc01141ce
c0106378:	68 c6 00 00 00       	push   $0xc6
c010637d:	68 68 41 11 c0       	push   $0xc0114168
c0106382:	e8 5e a1 ff ff       	call   c01004e5 <__panic>

     check_mm_struct = mm;
c0106387:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010638a:	a3 10 21 15 c0       	mov    %eax,0xc0152110

     pde_t *pgdir = mm->pgdir = boot_pgdir;
c010638f:	8b 15 e0 b9 14 c0    	mov    0xc014b9e0,%edx
c0106395:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0106398:	89 50 0c             	mov    %edx,0xc(%eax)
c010639b:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010639e:	8b 40 0c             	mov    0xc(%eax),%eax
c01063a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
     assert(pgdir[0] == 0);
c01063a4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01063a7:	8b 00                	mov    (%eax),%eax
c01063a9:	85 c0                	test   %eax,%eax
c01063ab:	74 19                	je     c01063c6 <check_swap+0x15a>
c01063ad:	68 3d 43 11 c0       	push   $0xc011433d
c01063b2:	68 ce 41 11 c0       	push   $0xc01141ce
c01063b7:	68 cb 00 00 00       	push   $0xcb
c01063bc:	68 68 41 11 c0       	push   $0xc0114168
c01063c1:	e8 1f a1 ff ff       	call   c01004e5 <__panic>

     struct vma_struct *vma = vma_create(BEING_CHECK_VALID_VADDR, CHECK_VALID_VADDR, VM_WRITE | VM_READ);
c01063c6:	83 ec 04             	sub    $0x4,%esp
c01063c9:	6a 03                	push   $0x3
c01063cb:	68 00 60 00 00       	push   $0x6000
c01063d0:	68 00 10 00 00       	push   $0x1000
c01063d5:	e8 05 ea ff ff       	call   c0104ddf <vma_create>
c01063da:	83 c4 10             	add    $0x10,%esp
c01063dd:	89 45 d0             	mov    %eax,-0x30(%ebp)
     assert(vma != NULL);
c01063e0:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c01063e4:	75 19                	jne    c01063ff <check_swap+0x193>
c01063e6:	68 4b 43 11 c0       	push   $0xc011434b
c01063eb:	68 ce 41 11 c0       	push   $0xc01141ce
c01063f0:	68 ce 00 00 00       	push   $0xce
c01063f5:	68 68 41 11 c0       	push   $0xc0114168
c01063fa:	e8 e6 a0 ff ff       	call   c01004e5 <__panic>

     insert_vma_struct(mm, vma);
c01063ff:	83 ec 08             	sub    $0x8,%esp
c0106402:	ff 75 d0             	pushl  -0x30(%ebp)
c0106405:	ff 75 d8             	pushl  -0x28(%ebp)
c0106408:	e8 3a eb ff ff       	call   c0104f47 <insert_vma_struct>
c010640d:	83 c4 10             	add    $0x10,%esp

     //setup the temp Page Table vaddr 0~4MB
     cprintf("setup Page Table for vaddr 0X1000, so alloc a page\n");
c0106410:	83 ec 0c             	sub    $0xc,%esp
c0106413:	68 58 43 11 c0       	push   $0xc0114358
c0106418:	e8 62 9f ff ff       	call   c010037f <cprintf>
c010641d:	83 c4 10             	add    $0x10,%esp
     pte_t *temp_ptep=NULL;
c0106420:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
c0106427:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010642a:	8b 40 0c             	mov    0xc(%eax),%eax
c010642d:	83 ec 04             	sub    $0x4,%esp
c0106430:	6a 01                	push   $0x1
c0106432:	68 00 10 00 00       	push   $0x1000
c0106437:	50                   	push   %eax
c0106438:	e8 20 d8 ff ff       	call   c0103c5d <get_pte>
c010643d:	83 c4 10             	add    $0x10,%esp
c0106440:	89 45 cc             	mov    %eax,-0x34(%ebp)
     assert(temp_ptep!= NULL);
c0106443:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
c0106447:	75 19                	jne    c0106462 <check_swap+0x1f6>
c0106449:	68 8c 43 11 c0       	push   $0xc011438c
c010644e:	68 ce 41 11 c0       	push   $0xc01141ce
c0106453:	68 d6 00 00 00       	push   $0xd6
c0106458:	68 68 41 11 c0       	push   $0xc0114168
c010645d:	e8 83 a0 ff ff       	call   c01004e5 <__panic>
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
c0106462:	83 ec 0c             	sub    $0xc,%esp
c0106465:	68 a0 43 11 c0       	push   $0xc01143a0
c010646a:	e8 10 9f ff ff       	call   c010037f <cprintf>
c010646f:	83 c4 10             	add    $0x10,%esp
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106472:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106479:	e9 90 00 00 00       	jmp    c010650e <check_swap+0x2a2>
          check_rp[i] = alloc_page();
c010647e:	83 ec 0c             	sub    $0xc,%esp
c0106481:	6a 01                	push   $0x1
c0106483:	e8 69 d1 ff ff       	call   c01035f1 <alloc_pages>
c0106488:	83 c4 10             	add    $0x10,%esp
c010648b:	89 c2                	mov    %eax,%edx
c010648d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106490:	89 14 85 20 21 15 c0 	mov    %edx,-0x3feadee0(,%eax,4)
          assert(check_rp[i] != NULL );
c0106497:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010649a:	8b 04 85 20 21 15 c0 	mov    -0x3feadee0(,%eax,4),%eax
c01064a1:	85 c0                	test   %eax,%eax
c01064a3:	75 19                	jne    c01064be <check_swap+0x252>
c01064a5:	68 c4 43 11 c0       	push   $0xc01143c4
c01064aa:	68 ce 41 11 c0       	push   $0xc01141ce
c01064af:	68 db 00 00 00       	push   $0xdb
c01064b4:	68 68 41 11 c0       	push   $0xc0114168
c01064b9:	e8 27 a0 ff ff       	call   c01004e5 <__panic>
          assert(!PageProperty(check_rp[i]));
c01064be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01064c1:	8b 04 85 20 21 15 c0 	mov    -0x3feadee0(,%eax,4),%eax
c01064c8:	83 c0 04             	add    $0x4,%eax
c01064cb:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
c01064d2:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01064d5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c01064d8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01064db:	0f a3 10             	bt     %edx,(%eax)
c01064de:	19 c0                	sbb    %eax,%eax
c01064e0:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c01064e3:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c01064e7:	0f 95 c0             	setne  %al
c01064ea:	0f b6 c0             	movzbl %al,%eax
c01064ed:	85 c0                	test   %eax,%eax
c01064ef:	74 19                	je     c010650a <check_swap+0x29e>
c01064f1:	68 d8 43 11 c0       	push   $0xc01143d8
c01064f6:	68 ce 41 11 c0       	push   $0xc01141ce
c01064fb:	68 dc 00 00 00       	push   $0xdc
c0106500:	68 68 41 11 c0       	push   $0xc0114168
c0106505:	e8 db 9f ff ff       	call   c01004e5 <__panic>
     pte_t *temp_ptep=NULL;
     temp_ptep = get_pte(mm->pgdir, BEING_CHECK_VALID_VADDR, 1);
     assert(temp_ptep!= NULL);
     cprintf("setup Page Table vaddr 0~4MB OVER!\n");
     
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010650a:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010650e:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0106512:	0f 8e 66 ff ff ff    	jle    c010647e <check_swap+0x212>
          check_rp[i] = alloc_page();
          assert(check_rp[i] != NULL );
          assert(!PageProperty(check_rp[i]));
     }
     list_entry_t free_list_store = free_list;
c0106518:	a1 ec 21 15 c0       	mov    0xc01521ec,%eax
c010651d:	8b 15 f0 21 15 c0    	mov    0xc01521f0,%edx
c0106523:	89 45 98             	mov    %eax,-0x68(%ebp)
c0106526:	89 55 9c             	mov    %edx,-0x64(%ebp)
c0106529:	c7 45 c0 ec 21 15 c0 	movl   $0xc01521ec,-0x40(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106530:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106533:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0106536:	89 50 04             	mov    %edx,0x4(%eax)
c0106539:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010653c:	8b 50 04             	mov    0x4(%eax),%edx
c010653f:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0106542:	89 10                	mov    %edx,(%eax)
c0106544:	c7 45 c8 ec 21 15 c0 	movl   $0xc01521ec,-0x38(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010654b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010654e:	8b 40 04             	mov    0x4(%eax),%eax
c0106551:	39 45 c8             	cmp    %eax,-0x38(%ebp)
c0106554:	0f 94 c0             	sete   %al
c0106557:	0f b6 c0             	movzbl %al,%eax
     list_init(&free_list);
     assert(list_empty(&free_list));
c010655a:	85 c0                	test   %eax,%eax
c010655c:	75 19                	jne    c0106577 <check_swap+0x30b>
c010655e:	68 f3 43 11 c0       	push   $0xc01143f3
c0106563:	68 ce 41 11 c0       	push   $0xc01141ce
c0106568:	68 e0 00 00 00       	push   $0xe0
c010656d:	68 68 41 11 c0       	push   $0xc0114168
c0106572:	e8 6e 9f ff ff       	call   c01004e5 <__panic>
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
c0106577:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c010657c:	89 45 bc             	mov    %eax,-0x44(%ebp)
     nr_free = 0;
c010657f:	c7 05 f4 21 15 c0 00 	movl   $0x0,0xc01521f4
c0106586:	00 00 00 
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106589:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106590:	eb 1c                	jmp    c01065ae <check_swap+0x342>
        free_pages(check_rp[i],1);
c0106592:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106595:	8b 04 85 20 21 15 c0 	mov    -0x3feadee0(,%eax,4),%eax
c010659c:	83 ec 08             	sub    $0x8,%esp
c010659f:	6a 01                	push   $0x1
c01065a1:	50                   	push   %eax
c01065a2:	e8 b6 d0 ff ff       	call   c010365d <free_pages>
c01065a7:	83 c4 10             	add    $0x10,%esp
     
     //assert(alloc_page() == NULL);
     
     unsigned int nr_free_store = nr_free;
     nr_free = 0;
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c01065aa:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c01065ae:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c01065b2:	7e de                	jle    c0106592 <check_swap+0x326>
        free_pages(check_rp[i],1);
     }
     assert(nr_free==CHECK_VALID_PHY_PAGE_NUM);
c01065b4:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c01065b9:	83 f8 04             	cmp    $0x4,%eax
c01065bc:	74 19                	je     c01065d7 <check_swap+0x36b>
c01065be:	68 0c 44 11 c0       	push   $0xc011440c
c01065c3:	68 ce 41 11 c0       	push   $0xc01141ce
c01065c8:	68 e9 00 00 00       	push   $0xe9
c01065cd:	68 68 41 11 c0       	push   $0xc0114168
c01065d2:	e8 0e 9f ff ff       	call   c01004e5 <__panic>
     
     cprintf("set up init env for check_swap begin!\n");
c01065d7:	83 ec 0c             	sub    $0xc,%esp
c01065da:	68 30 44 11 c0       	push   $0xc0114430
c01065df:	e8 9b 9d ff ff       	call   c010037f <cprintf>
c01065e4:	83 c4 10             	add    $0x10,%esp
     //setup initial vir_page<->phy_page environment for page relpacement algorithm 

     
     pgfault_num=0;
c01065e7:	c7 05 0c f0 14 c0 00 	movl   $0x0,0xc014f00c
c01065ee:	00 00 00 
     
     check_content_set();
c01065f1:	e8 fd fa ff ff       	call   c01060f3 <check_content_set>
     assert( nr_free == 0);         
c01065f6:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c01065fb:	85 c0                	test   %eax,%eax
c01065fd:	74 19                	je     c0106618 <check_swap+0x3ac>
c01065ff:	68 57 44 11 c0       	push   $0xc0114457
c0106604:	68 ce 41 11 c0       	push   $0xc01141ce
c0106609:	68 f2 00 00 00       	push   $0xf2
c010660e:	68 68 41 11 c0       	push   $0xc0114168
c0106613:	e8 cd 9e ff ff       	call   c01004e5 <__panic>
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0106618:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010661f:	eb 26                	jmp    c0106647 <check_swap+0x3db>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
c0106621:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106624:	c7 04 85 40 21 15 c0 	movl   $0xffffffff,-0x3feadec0(,%eax,4)
c010662b:	ff ff ff ff 
c010662f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106632:	8b 14 85 40 21 15 c0 	mov    -0x3feadec0(,%eax,4),%edx
c0106639:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010663c:	89 14 85 80 21 15 c0 	mov    %edx,-0x3feade80(,%eax,4)
     
     pgfault_num=0;
     
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
c0106643:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106647:	83 7d ec 09          	cmpl   $0x9,-0x14(%ebp)
c010664b:	7e d4                	jle    c0106621 <check_swap+0x3b5>
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c010664d:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c0106654:	e9 cc 00 00 00       	jmp    c0106725 <check_swap+0x4b9>
         check_ptep[i]=0;
c0106659:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010665c:	c7 04 85 d4 21 15 c0 	movl   $0x0,-0x3feade2c(,%eax,4)
c0106663:	00 00 00 00 
         check_ptep[i] = get_pte(pgdir, (i+1)*0x1000, 0);
c0106667:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010666a:	83 c0 01             	add    $0x1,%eax
c010666d:	c1 e0 0c             	shl    $0xc,%eax
c0106670:	83 ec 04             	sub    $0x4,%esp
c0106673:	6a 00                	push   $0x0
c0106675:	50                   	push   %eax
c0106676:	ff 75 d4             	pushl  -0x2c(%ebp)
c0106679:	e8 df d5 ff ff       	call   c0103c5d <get_pte>
c010667e:	83 c4 10             	add    $0x10,%esp
c0106681:	89 c2                	mov    %eax,%edx
c0106683:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106686:	89 14 85 d4 21 15 c0 	mov    %edx,-0x3feade2c(,%eax,4)
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
c010668d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106690:	8b 04 85 d4 21 15 c0 	mov    -0x3feade2c(,%eax,4),%eax
c0106697:	85 c0                	test   %eax,%eax
c0106699:	75 19                	jne    c01066b4 <check_swap+0x448>
c010669b:	68 64 44 11 c0       	push   $0xc0114464
c01066a0:	68 ce 41 11 c0       	push   $0xc01141ce
c01066a5:	68 fa 00 00 00       	push   $0xfa
c01066aa:	68 68 41 11 c0       	push   $0xc0114168
c01066af:	e8 31 9e ff ff       	call   c01004e5 <__panic>
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
c01066b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066b7:	8b 04 85 d4 21 15 c0 	mov    -0x3feade2c(,%eax,4),%eax
c01066be:	8b 00                	mov    (%eax),%eax
c01066c0:	83 ec 0c             	sub    $0xc,%esp
c01066c3:	50                   	push   %eax
c01066c4:	e8 d8 f6 ff ff       	call   c0105da1 <pte2page>
c01066c9:	83 c4 10             	add    $0x10,%esp
c01066cc:	89 c2                	mov    %eax,%edx
c01066ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066d1:	8b 04 85 20 21 15 c0 	mov    -0x3feadee0(,%eax,4),%eax
c01066d8:	39 c2                	cmp    %eax,%edx
c01066da:	74 19                	je     c01066f5 <check_swap+0x489>
c01066dc:	68 7c 44 11 c0       	push   $0xc011447c
c01066e1:	68 ce 41 11 c0       	push   $0xc01141ce
c01066e6:	68 fb 00 00 00       	push   $0xfb
c01066eb:	68 68 41 11 c0       	push   $0xc0114168
c01066f0:	e8 f0 9d ff ff       	call   c01004e5 <__panic>
         assert((*check_ptep[i] & PTE_P));          
c01066f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01066f8:	8b 04 85 d4 21 15 c0 	mov    -0x3feade2c(,%eax,4),%eax
c01066ff:	8b 00                	mov    (%eax),%eax
c0106701:	83 e0 01             	and    $0x1,%eax
c0106704:	85 c0                	test   %eax,%eax
c0106706:	75 19                	jne    c0106721 <check_swap+0x4b5>
c0106708:	68 a4 44 11 c0       	push   $0xc01144a4
c010670d:	68 ce 41 11 c0       	push   $0xc01141ce
c0106712:	68 fc 00 00 00       	push   $0xfc
c0106717:	68 68 41 11 c0       	push   $0xc0114168
c010671c:	e8 c4 9d ff ff       	call   c01004e5 <__panic>
     check_content_set();
     assert( nr_free == 0);         
     for(i = 0; i<MAX_SEQ_NO ; i++) 
         swap_out_seq_no[i]=swap_in_seq_no[i]=-1;
     
     for (i= 0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106721:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c0106725:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c0106729:	0f 8e 2a ff ff ff    	jle    c0106659 <check_swap+0x3ed>
         //cprintf("i %d, check_ptep addr %x, value %x\n", i, check_ptep[i], *check_ptep[i]);
         assert(check_ptep[i] != NULL);
         assert(pte2page(*check_ptep[i]) == check_rp[i]);
         assert((*check_ptep[i] & PTE_P));          
     }
     cprintf("set up init env for check_swap over!\n");
c010672f:	83 ec 0c             	sub    $0xc,%esp
c0106732:	68 c0 44 11 c0       	push   $0xc01144c0
c0106737:	e8 43 9c ff ff       	call   c010037f <cprintf>
c010673c:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
c010673f:	e8 10 fb ff ff       	call   c0106254 <check_content_access>
c0106744:	89 45 b8             	mov    %eax,-0x48(%ebp)
     assert(ret==0);
c0106747:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c010674b:	74 19                	je     c0106766 <check_swap+0x4fa>
c010674d:	68 e6 44 11 c0       	push   $0xc01144e6
c0106752:	68 ce 41 11 c0       	push   $0xc01141ce
c0106757:	68 01 01 00 00       	push   $0x101
c010675c:	68 68 41 11 c0       	push   $0xc0114168
c0106761:	e8 7f 9d ff ff       	call   c01004e5 <__panic>
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106766:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
c010676d:	eb 1c                	jmp    c010678b <check_swap+0x51f>
         free_pages(check_rp[i],1);
c010676f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106772:	8b 04 85 20 21 15 c0 	mov    -0x3feadee0(,%eax,4),%eax
c0106779:	83 ec 08             	sub    $0x8,%esp
c010677c:	6a 01                	push   $0x1
c010677e:	50                   	push   %eax
c010677f:	e8 d9 ce ff ff       	call   c010365d <free_pages>
c0106784:	83 c4 10             	add    $0x10,%esp
     // now access the virt pages to test  page relpacement algorithm 
     ret=check_content_access();
     assert(ret==0);
     
     //restore kernel mem env
     for (i=0;i<CHECK_VALID_PHY_PAGE_NUM;i++) {
c0106787:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010678b:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
c010678f:	7e de                	jle    c010676f <check_swap+0x503>
         free_pages(check_rp[i],1);
     } 

     //free_page(pte2page(*temp_ptep));
    free_page(pde2page(pgdir[0]));
c0106791:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0106794:	8b 00                	mov    (%eax),%eax
c0106796:	83 ec 0c             	sub    $0xc,%esp
c0106799:	50                   	push   %eax
c010679a:	e8 3c f6 ff ff       	call   c0105ddb <pde2page>
c010679f:	83 c4 10             	add    $0x10,%esp
c01067a2:	83 ec 08             	sub    $0x8,%esp
c01067a5:	6a 01                	push   $0x1
c01067a7:	50                   	push   %eax
c01067a8:	e8 b0 ce ff ff       	call   c010365d <free_pages>
c01067ad:	83 c4 10             	add    $0x10,%esp
     pgdir[0] = 0;
c01067b0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c01067b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
     mm->pgdir = NULL;
c01067b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01067bc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
     mm_destroy(mm);
c01067c3:	83 ec 0c             	sub    $0xc,%esp
c01067c6:	ff 75 d8             	pushl  -0x28(%ebp)
c01067c9:	e8 9d e8 ff ff       	call   c010506b <mm_destroy>
c01067ce:	83 c4 10             	add    $0x10,%esp
     check_mm_struct = NULL;
c01067d1:	c7 05 10 21 15 c0 00 	movl   $0x0,0xc0152110
c01067d8:	00 00 00 
     
     nr_free = nr_free_store;
c01067db:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01067de:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4
     free_list = free_list_store;
c01067e3:	8b 45 98             	mov    -0x68(%ebp),%eax
c01067e6:	8b 55 9c             	mov    -0x64(%ebp),%edx
c01067e9:	a3 ec 21 15 c0       	mov    %eax,0xc01521ec
c01067ee:	89 15 f0 21 15 c0    	mov    %edx,0xc01521f0

     
     le = &free_list;
c01067f4:	c7 45 e8 ec 21 15 c0 	movl   $0xc01521ec,-0x18(%ebp)
     while ((le = list_next(le)) != &free_list) {
c01067fb:	eb 1d                	jmp    c010681a <check_swap+0x5ae>
         struct Page *p = le2page(le, page_link);
c01067fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0106800:	83 e8 0c             	sub    $0xc,%eax
c0106803:	89 45 b4             	mov    %eax,-0x4c(%ebp)
         count --, total -= p->property;
c0106806:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010680a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010680d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0106810:	8b 40 08             	mov    0x8(%eax),%eax
c0106813:	29 c2                	sub    %eax,%edx
c0106815:	89 d0                	mov    %edx,%eax
c0106817:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010681a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010681d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0106820:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0106823:	8b 40 04             	mov    0x4(%eax),%eax
     nr_free = nr_free_store;
     free_list = free_list_store;

     
     le = &free_list;
     while ((le = list_next(le)) != &free_list) {
c0106826:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0106829:	81 7d e8 ec 21 15 c0 	cmpl   $0xc01521ec,-0x18(%ebp)
c0106830:	75 cb                	jne    c01067fd <check_swap+0x591>
         struct Page *p = le2page(le, page_link);
         count --, total -= p->property;
     }
     cprintf("count is %d, total is %d\n",count,total);
c0106832:	83 ec 04             	sub    $0x4,%esp
c0106835:	ff 75 f0             	pushl  -0x10(%ebp)
c0106838:	ff 75 f4             	pushl  -0xc(%ebp)
c010683b:	68 ed 44 11 c0       	push   $0xc01144ed
c0106840:	e8 3a 9b ff ff       	call   c010037f <cprintf>
c0106845:	83 c4 10             	add    $0x10,%esp
     //assert(count == 0);
     
     cprintf("check_swap() succeeded!\n");
c0106848:	83 ec 0c             	sub    $0xc,%esp
c010684b:	68 07 45 11 c0       	push   $0xc0114507
c0106850:	e8 2a 9b ff ff       	call   c010037f <cprintf>
c0106855:	83 c4 10             	add    $0x10,%esp
}
c0106858:	90                   	nop
c0106859:	c9                   	leave  
c010685a:	c3                   	ret    

c010685b <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010685b:	55                   	push   %ebp
c010685c:	89 e5                	mov    %esp,%ebp
c010685e:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0106861:	9c                   	pushf  
c0106862:	58                   	pop    %eax
c0106863:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0106866:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0106869:	25 00 02 00 00       	and    $0x200,%eax
c010686e:	85 c0                	test   %eax,%eax
c0106870:	74 0c                	je     c010687e <__intr_save+0x23>
        intr_disable();
c0106872:	e8 71 b9 ff ff       	call   c01021e8 <intr_disable>
        return 1;
c0106877:	b8 01 00 00 00       	mov    $0x1,%eax
c010687c:	eb 05                	jmp    c0106883 <__intr_save+0x28>
    }
    return 0;
c010687e:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106883:	c9                   	leave  
c0106884:	c3                   	ret    

c0106885 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0106885:	55                   	push   %ebp
c0106886:	89 e5                	mov    %esp,%ebp
c0106888:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010688b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010688f:	74 05                	je     c0106896 <__intr_restore+0x11>
        intr_enable();
c0106891:	e8 4b b9 ff ff       	call   c01021e1 <intr_enable>
    }
}
c0106896:	90                   	nop
c0106897:	c9                   	leave  
c0106898:	c3                   	ret    

c0106899 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0106899:	55                   	push   %ebp
c010689a:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010689c:	8b 45 08             	mov    0x8(%ebp),%eax
c010689f:	8b 15 0c 21 15 c0    	mov    0xc015210c,%edx
c01068a5:	29 d0                	sub    %edx,%eax
c01068a7:	c1 f8 05             	sar    $0x5,%eax
}
c01068aa:	5d                   	pop    %ebp
c01068ab:	c3                   	ret    

c01068ac <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c01068ac:	55                   	push   %ebp
c01068ad:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c01068af:	ff 75 08             	pushl  0x8(%ebp)
c01068b2:	e8 e2 ff ff ff       	call   c0106899 <page2ppn>
c01068b7:	83 c4 04             	add    $0x4,%esp
c01068ba:	c1 e0 0c             	shl    $0xc,%eax
}
c01068bd:	c9                   	leave  
c01068be:	c3                   	ret    

c01068bf <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c01068bf:	55                   	push   %ebp
c01068c0:	89 e5                	mov    %esp,%ebp
c01068c2:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c01068c5:	8b 45 08             	mov    0x8(%ebp),%eax
c01068c8:	c1 e8 0c             	shr    $0xc,%eax
c01068cb:	89 c2                	mov    %eax,%edx
c01068cd:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c01068d2:	39 c2                	cmp    %eax,%edx
c01068d4:	72 14                	jb     c01068ea <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c01068d6:	83 ec 04             	sub    $0x4,%esp
c01068d9:	68 20 45 11 c0       	push   $0xc0114520
c01068de:	6a 5e                	push   $0x5e
c01068e0:	68 3f 45 11 c0       	push   $0xc011453f
c01068e5:	e8 fb 9b ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c01068ea:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c01068ef:	8b 55 08             	mov    0x8(%ebp),%edx
c01068f2:	c1 ea 0c             	shr    $0xc,%edx
c01068f5:	c1 e2 05             	shl    $0x5,%edx
c01068f8:	01 d0                	add    %edx,%eax
}
c01068fa:	c9                   	leave  
c01068fb:	c3                   	ret    

c01068fc <page2kva>:

static inline void *
page2kva(struct Page *page) {
c01068fc:	55                   	push   %ebp
c01068fd:	89 e5                	mov    %esp,%ebp
c01068ff:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c0106902:	ff 75 08             	pushl  0x8(%ebp)
c0106905:	e8 a2 ff ff ff       	call   c01068ac <page2pa>
c010690a:	83 c4 04             	add    $0x4,%esp
c010690d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106910:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106913:	c1 e8 0c             	shr    $0xc,%eax
c0106916:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106919:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010691e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106921:	72 14                	jb     c0106937 <page2kva+0x3b>
c0106923:	ff 75 f4             	pushl  -0xc(%ebp)
c0106926:	68 50 45 11 c0       	push   $0xc0114550
c010692b:	6a 65                	push   $0x65
c010692d:	68 3f 45 11 c0       	push   $0xc011453f
c0106932:	e8 ae 9b ff ff       	call   c01004e5 <__panic>
c0106937:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010693a:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010693f:	c9                   	leave  
c0106940:	c3                   	ret    

c0106941 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c0106941:	55                   	push   %ebp
c0106942:	89 e5                	mov    %esp,%ebp
c0106944:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c0106947:	8b 45 08             	mov    0x8(%ebp),%eax
c010694a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010694d:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c0106954:	77 14                	ja     c010696a <kva2page+0x29>
c0106956:	ff 75 f4             	pushl  -0xc(%ebp)
c0106959:	68 74 45 11 c0       	push   $0xc0114574
c010695e:	6a 6a                	push   $0x6a
c0106960:	68 3f 45 11 c0       	push   $0xc011453f
c0106965:	e8 7b 9b ff ff       	call   c01004e5 <__panic>
c010696a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010696d:	05 00 00 00 40       	add    $0x40000000,%eax
c0106972:	83 ec 0c             	sub    $0xc,%esp
c0106975:	50                   	push   %eax
c0106976:	e8 44 ff ff ff       	call   c01068bf <pa2page>
c010697b:	83 c4 10             	add    $0x10,%esp
}
c010697e:	c9                   	leave  
c010697f:	c3                   	ret    

c0106980 <__slob_get_free_pages>:
static slob_t *slobfree = &arena;
static bigblock_t *bigblocks;


static void* __slob_get_free_pages(gfp_t gfp, int order)
{
c0106980:	55                   	push   %ebp
c0106981:	89 e5                	mov    %esp,%ebp
c0106983:	83 ec 18             	sub    $0x18,%esp
  struct Page * page = alloc_pages(1 << order);
c0106986:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106989:	ba 01 00 00 00       	mov    $0x1,%edx
c010698e:	89 c1                	mov    %eax,%ecx
c0106990:	d3 e2                	shl    %cl,%edx
c0106992:	89 d0                	mov    %edx,%eax
c0106994:	83 ec 0c             	sub    $0xc,%esp
c0106997:	50                   	push   %eax
c0106998:	e8 54 cc ff ff       	call   c01035f1 <alloc_pages>
c010699d:	83 c4 10             	add    $0x10,%esp
c01069a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
  if(!page)
c01069a3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01069a7:	75 07                	jne    c01069b0 <__slob_get_free_pages+0x30>
    return NULL;
c01069a9:	b8 00 00 00 00       	mov    $0x0,%eax
c01069ae:	eb 0e                	jmp    c01069be <__slob_get_free_pages+0x3e>
  return page2kva(page);
c01069b0:	83 ec 0c             	sub    $0xc,%esp
c01069b3:	ff 75 f4             	pushl  -0xc(%ebp)
c01069b6:	e8 41 ff ff ff       	call   c01068fc <page2kva>
c01069bb:	83 c4 10             	add    $0x10,%esp
}
c01069be:	c9                   	leave  
c01069bf:	c3                   	ret    

c01069c0 <__slob_free_pages>:

#define __slob_get_free_page(gfp) __slob_get_free_pages(gfp, 0)

static inline void __slob_free_pages(unsigned long kva, int order)
{
c01069c0:	55                   	push   %ebp
c01069c1:	89 e5                	mov    %esp,%ebp
c01069c3:	53                   	push   %ebx
c01069c4:	83 ec 04             	sub    $0x4,%esp
  free_pages(kva2page(kva), 1 << order);
c01069c7:	8b 45 0c             	mov    0xc(%ebp),%eax
c01069ca:	ba 01 00 00 00       	mov    $0x1,%edx
c01069cf:	89 c1                	mov    %eax,%ecx
c01069d1:	d3 e2                	shl    %cl,%edx
c01069d3:	89 d0                	mov    %edx,%eax
c01069d5:	89 c3                	mov    %eax,%ebx
c01069d7:	8b 45 08             	mov    0x8(%ebp),%eax
c01069da:	83 ec 0c             	sub    $0xc,%esp
c01069dd:	50                   	push   %eax
c01069de:	e8 5e ff ff ff       	call   c0106941 <kva2page>
c01069e3:	83 c4 10             	add    $0x10,%esp
c01069e6:	83 ec 08             	sub    $0x8,%esp
c01069e9:	53                   	push   %ebx
c01069ea:	50                   	push   %eax
c01069eb:	e8 6d cc ff ff       	call   c010365d <free_pages>
c01069f0:	83 c4 10             	add    $0x10,%esp
}
c01069f3:	90                   	nop
c01069f4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c01069f7:	c9                   	leave  
c01069f8:	c3                   	ret    

c01069f9 <slob_alloc>:

static void slob_free(void *b, int size);

static void *slob_alloc(size_t size, gfp_t gfp, int align)
{
c01069f9:	55                   	push   %ebp
c01069fa:	89 e5                	mov    %esp,%ebp
c01069fc:	83 ec 28             	sub    $0x28,%esp
  assert( (size + SLOB_UNIT) < PAGE_SIZE );
c01069ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a02:	83 c0 08             	add    $0x8,%eax
c0106a05:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c0106a0a:	76 16                	jbe    c0106a22 <slob_alloc+0x29>
c0106a0c:	68 98 45 11 c0       	push   $0xc0114598
c0106a11:	68 b7 45 11 c0       	push   $0xc01145b7
c0106a16:	6a 64                	push   $0x64
c0106a18:	68 cc 45 11 c0       	push   $0xc01145cc
c0106a1d:	e8 c3 9a ff ff       	call   c01004e5 <__panic>

	slob_t *prev, *cur, *aligned = 0;
c0106a22:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
c0106a29:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c0106a30:	8b 45 08             	mov    0x8(%ebp),%eax
c0106a33:	83 c0 07             	add    $0x7,%eax
c0106a36:	c1 e8 03             	shr    $0x3,%eax
c0106a39:	89 45 e0             	mov    %eax,-0x20(%ebp)
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
c0106a3c:	e8 1a fe ff ff       	call   c010685b <__intr_save>
c0106a41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	prev = slobfree;
c0106a44:	a1 40 ba 14 c0       	mov    0xc014ba40,%eax
c0106a49:	89 45 f4             	mov    %eax,-0xc(%ebp)
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0106a4c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106a4f:	8b 40 04             	mov    0x4(%eax),%eax
c0106a52:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (align) {
c0106a55:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0106a59:	74 25                	je     c0106a80 <slob_alloc+0x87>
			aligned = (slob_t *)ALIGN((unsigned long)cur, align);
c0106a5b:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106a5e:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a61:	01 d0                	add    %edx,%eax
c0106a63:	8d 50 ff             	lea    -0x1(%eax),%edx
c0106a66:	8b 45 10             	mov    0x10(%ebp),%eax
c0106a69:	f7 d8                	neg    %eax
c0106a6b:	21 d0                	and    %edx,%eax
c0106a6d:	89 45 ec             	mov    %eax,-0x14(%ebp)
			delta = aligned - cur;
c0106a70:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106a73:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a76:	29 c2                	sub    %eax,%edx
c0106a78:	89 d0                	mov    %edx,%eax
c0106a7a:	c1 f8 03             	sar    $0x3,%eax
c0106a7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
		}
		if (cur->units >= units + delta) { /* room enough? */
c0106a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a83:	8b 00                	mov    (%eax),%eax
c0106a85:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0106a88:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106a8b:	01 ca                	add    %ecx,%edx
c0106a8d:	39 d0                	cmp    %edx,%eax
c0106a8f:	0f 8c b1 00 00 00    	jl     c0106b46 <slob_alloc+0x14d>
			if (delta) { /* need to fragment head to align? */
c0106a95:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0106a99:	74 38                	je     c0106ad3 <slob_alloc+0xda>
				aligned->units = cur->units - delta;
c0106a9b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106a9e:	8b 00                	mov    (%eax),%eax
c0106aa0:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0106aa3:	89 c2                	mov    %eax,%edx
c0106aa5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106aa8:	89 10                	mov    %edx,(%eax)
				aligned->next = cur->next;
c0106aaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aad:	8b 50 04             	mov    0x4(%eax),%edx
c0106ab0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ab3:	89 50 04             	mov    %edx,0x4(%eax)
				cur->next = aligned;
c0106ab6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ab9:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0106abc:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = delta;
c0106abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ac2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0106ac5:	89 10                	mov    %edx,(%eax)
				prev = cur;
c0106ac7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106aca:	89 45 f4             	mov    %eax,-0xc(%ebp)
				cur = aligned;
c0106acd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106ad0:	89 45 f0             	mov    %eax,-0x10(%ebp)
			}

			if (cur->units == units) /* exact fit? */
c0106ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ad6:	8b 00                	mov    (%eax),%eax
c0106ad8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0106adb:	75 0e                	jne    c0106aeb <slob_alloc+0xf2>
				prev->next = cur->next; /* unlink */
c0106add:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ae0:	8b 50 04             	mov    0x4(%eax),%edx
c0106ae3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ae6:	89 50 04             	mov    %edx,0x4(%eax)
c0106ae9:	eb 3c                	jmp    c0106b27 <slob_alloc+0x12e>
			else { /* fragment */
				prev->next = cur + units;
c0106aeb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0106aee:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0106af5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106af8:	01 c2                	add    %eax,%edx
c0106afa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106afd:	89 50 04             	mov    %edx,0x4(%eax)
				prev->next->units = cur->units - units;
c0106b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b03:	8b 40 04             	mov    0x4(%eax),%eax
c0106b06:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106b09:	8b 12                	mov    (%edx),%edx
c0106b0b:	2b 55 e0             	sub    -0x20(%ebp),%edx
c0106b0e:	89 10                	mov    %edx,(%eax)
				prev->next->next = cur->next;
c0106b10:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b13:	8b 40 04             	mov    0x4(%eax),%eax
c0106b16:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106b19:	8b 52 04             	mov    0x4(%edx),%edx
c0106b1c:	89 50 04             	mov    %edx,0x4(%eax)
				cur->units = units;
c0106b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b22:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0106b25:	89 10                	mov    %edx,(%eax)
			}

			slobfree = prev;
c0106b27:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106b2a:	a3 40 ba 14 c0       	mov    %eax,0xc014ba40
			spin_unlock_irqrestore(&slob_lock, flags);
c0106b2f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b32:	83 ec 0c             	sub    $0xc,%esp
c0106b35:	50                   	push   %eax
c0106b36:	e8 4a fd ff ff       	call   c0106885 <__intr_restore>
c0106b3b:	83 c4 10             	add    $0x10,%esp
			return cur;
c0106b3e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106b41:	e9 80 00 00 00       	jmp    c0106bc6 <slob_alloc+0x1cd>
		}
		if (cur == slobfree) {
c0106b46:	a1 40 ba 14 c0       	mov    0xc014ba40,%eax
c0106b4b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0106b4e:	75 62                	jne    c0106bb2 <slob_alloc+0x1b9>
			spin_unlock_irqrestore(&slob_lock, flags);
c0106b50:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0106b53:	83 ec 0c             	sub    $0xc,%esp
c0106b56:	50                   	push   %eax
c0106b57:	e8 29 fd ff ff       	call   c0106885 <__intr_restore>
c0106b5c:	83 c4 10             	add    $0x10,%esp

			if (size == PAGE_SIZE) /* trying to shrink arena? */
c0106b5f:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0106b66:	75 07                	jne    c0106b6f <slob_alloc+0x176>
				return 0;
c0106b68:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b6d:	eb 57                	jmp    c0106bc6 <slob_alloc+0x1cd>

			cur = (slob_t *)__slob_get_free_page(gfp);
c0106b6f:	83 ec 08             	sub    $0x8,%esp
c0106b72:	6a 00                	push   $0x0
c0106b74:	ff 75 0c             	pushl  0xc(%ebp)
c0106b77:	e8 04 fe ff ff       	call   c0106980 <__slob_get_free_pages>
c0106b7c:	83 c4 10             	add    $0x10,%esp
c0106b7f:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (!cur)
c0106b82:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106b86:	75 07                	jne    c0106b8f <slob_alloc+0x196>
				return 0;
c0106b88:	b8 00 00 00 00       	mov    $0x0,%eax
c0106b8d:	eb 37                	jmp    c0106bc6 <slob_alloc+0x1cd>

			slob_free(cur, PAGE_SIZE);
c0106b8f:	83 ec 08             	sub    $0x8,%esp
c0106b92:	68 00 10 00 00       	push   $0x1000
c0106b97:	ff 75 f0             	pushl  -0x10(%ebp)
c0106b9a:	e8 29 00 00 00       	call   c0106bc8 <slob_free>
c0106b9f:	83 c4 10             	add    $0x10,%esp
			spin_lock_irqsave(&slob_lock, flags);
c0106ba2:	e8 b4 fc ff ff       	call   c010685b <__intr_save>
c0106ba7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
			cur = slobfree;
c0106baa:	a1 40 ba 14 c0       	mov    0xc014ba40,%eax
c0106baf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int delta = 0, units = SLOB_UNITS(size);
	unsigned long flags;

	spin_lock_irqsave(&slob_lock, flags);
	prev = slobfree;
	for (cur = prev->next; ; prev = cur, cur = cur->next) {
c0106bb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bb5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106bb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bbb:	8b 40 04             	mov    0x4(%eax),%eax
c0106bbe:	89 45 f0             	mov    %eax,-0x10(%ebp)

			slob_free(cur, PAGE_SIZE);
			spin_lock_irqsave(&slob_lock, flags);
			cur = slobfree;
		}
	}
c0106bc1:	e9 8f fe ff ff       	jmp    c0106a55 <slob_alloc+0x5c>
}
c0106bc6:	c9                   	leave  
c0106bc7:	c3                   	ret    

c0106bc8 <slob_free>:

static void slob_free(void *block, int size)
{
c0106bc8:	55                   	push   %ebp
c0106bc9:	89 e5                	mov    %esp,%ebp
c0106bcb:	83 ec 18             	sub    $0x18,%esp
	slob_t *cur, *b = (slob_t *)block;
c0106bce:	8b 45 08             	mov    0x8(%ebp),%eax
c0106bd1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0106bd4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106bd8:	0f 84 05 01 00 00    	je     c0106ce3 <slob_free+0x11b>
		return;

	if (size)
c0106bde:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0106be2:	74 10                	je     c0106bf4 <slob_free+0x2c>
		b->units = SLOB_UNITS(size);
c0106be4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0106be7:	83 c0 07             	add    $0x7,%eax
c0106bea:	c1 e8 03             	shr    $0x3,%eax
c0106bed:	89 c2                	mov    %eax,%edx
c0106bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106bf2:	89 10                	mov    %edx,(%eax)

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
c0106bf4:	e8 62 fc ff ff       	call   c010685b <__intr_save>
c0106bf9:	89 45 ec             	mov    %eax,-0x14(%ebp)
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0106bfc:	a1 40 ba 14 c0       	mov    0xc014ba40,%eax
c0106c01:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c04:	eb 27                	jmp    c0106c2d <slob_free+0x65>
		if (cur >= cur->next && (b > cur || b < cur->next))
c0106c06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c09:	8b 40 04             	mov    0x4(%eax),%eax
c0106c0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106c0f:	77 13                	ja     c0106c24 <slob_free+0x5c>
c0106c11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c14:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106c17:	77 27                	ja     c0106c40 <slob_free+0x78>
c0106c19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c1c:	8b 40 04             	mov    0x4(%eax),%eax
c0106c1f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106c22:	77 1c                	ja     c0106c40 <slob_free+0x78>
	if (size)
		b->units = SLOB_UNITS(size);

	/* Find reinsertion point */
	spin_lock_irqsave(&slob_lock, flags);
	for (cur = slobfree; !(b > cur && b < cur->next); cur = cur->next)
c0106c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c27:	8b 40 04             	mov    0x4(%eax),%eax
c0106c2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106c2d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c30:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0106c33:	76 d1                	jbe    c0106c06 <slob_free+0x3e>
c0106c35:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c38:	8b 40 04             	mov    0x4(%eax),%eax
c0106c3b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106c3e:	76 c6                	jbe    c0106c06 <slob_free+0x3e>
		if (cur >= cur->next && (b > cur || b < cur->next))
			break;

	if (b + b->units == cur->next) {
c0106c40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c43:	8b 00                	mov    (%eax),%eax
c0106c45:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0106c4c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c4f:	01 c2                	add    %eax,%edx
c0106c51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c54:	8b 40 04             	mov    0x4(%eax),%eax
c0106c57:	39 c2                	cmp    %eax,%edx
c0106c59:	75 25                	jne    c0106c80 <slob_free+0xb8>
		b->units += cur->next->units;
c0106c5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c5e:	8b 10                	mov    (%eax),%edx
c0106c60:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c63:	8b 40 04             	mov    0x4(%eax),%eax
c0106c66:	8b 00                	mov    (%eax),%eax
c0106c68:	01 c2                	add    %eax,%edx
c0106c6a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c6d:	89 10                	mov    %edx,(%eax)
		b->next = cur->next->next;
c0106c6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c72:	8b 40 04             	mov    0x4(%eax),%eax
c0106c75:	8b 50 04             	mov    0x4(%eax),%edx
c0106c78:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c7b:	89 50 04             	mov    %edx,0x4(%eax)
c0106c7e:	eb 0c                	jmp    c0106c8c <slob_free+0xc4>
	} else
		b->next = cur->next;
c0106c80:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c83:	8b 50 04             	mov    0x4(%eax),%edx
c0106c86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106c89:	89 50 04             	mov    %edx,0x4(%eax)

	if (cur + cur->units == b) {
c0106c8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c8f:	8b 00                	mov    (%eax),%eax
c0106c91:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0106c98:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106c9b:	01 d0                	add    %edx,%eax
c0106c9d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0106ca0:	75 1f                	jne    c0106cc1 <slob_free+0xf9>
		cur->units += b->units;
c0106ca2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ca5:	8b 10                	mov    (%eax),%edx
c0106ca7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106caa:	8b 00                	mov    (%eax),%eax
c0106cac:	01 c2                	add    %eax,%edx
c0106cae:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cb1:	89 10                	mov    %edx,(%eax)
		cur->next = b->next;
c0106cb3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106cb6:	8b 50 04             	mov    0x4(%eax),%edx
c0106cb9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cbc:	89 50 04             	mov    %edx,0x4(%eax)
c0106cbf:	eb 09                	jmp    c0106cca <slob_free+0x102>
	} else
		cur->next = b;
c0106cc1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106cc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0106cc7:	89 50 04             	mov    %edx,0x4(%eax)

	slobfree = cur;
c0106cca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ccd:	a3 40 ba 14 c0       	mov    %eax,0xc014ba40

	spin_unlock_irqrestore(&slob_lock, flags);
c0106cd2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106cd5:	83 ec 0c             	sub    $0xc,%esp
c0106cd8:	50                   	push   %eax
c0106cd9:	e8 a7 fb ff ff       	call   c0106885 <__intr_restore>
c0106cde:	83 c4 10             	add    $0x10,%esp
c0106ce1:	eb 01                	jmp    c0106ce4 <slob_free+0x11c>
{
	slob_t *cur, *b = (slob_t *)block;
	unsigned long flags;

	if (!block)
		return;
c0106ce3:	90                   	nop
		cur->next = b;

	slobfree = cur;

	spin_unlock_irqrestore(&slob_lock, flags);
}
c0106ce4:	c9                   	leave  
c0106ce5:	c3                   	ret    

c0106ce6 <slob_init>:



void
slob_init(void) {
c0106ce6:	55                   	push   %ebp
c0106ce7:	89 e5                	mov    %esp,%ebp
c0106ce9:	83 ec 08             	sub    $0x8,%esp
  cprintf("use SLOB allocator\n");
c0106cec:	83 ec 0c             	sub    $0xc,%esp
c0106cef:	68 de 45 11 c0       	push   $0xc01145de
c0106cf4:	e8 86 96 ff ff       	call   c010037f <cprintf>
c0106cf9:	83 c4 10             	add    $0x10,%esp
}
c0106cfc:	90                   	nop
c0106cfd:	c9                   	leave  
c0106cfe:	c3                   	ret    

c0106cff <kmalloc_init>:

inline void 
kmalloc_init(void) {
c0106cff:	55                   	push   %ebp
c0106d00:	89 e5                	mov    %esp,%ebp
c0106d02:	83 ec 08             	sub    $0x8,%esp
    slob_init();
c0106d05:	e8 dc ff ff ff       	call   c0106ce6 <slob_init>
    cprintf("kmalloc_init() succeeded!\n");
c0106d0a:	83 ec 0c             	sub    $0xc,%esp
c0106d0d:	68 f2 45 11 c0       	push   $0xc01145f2
c0106d12:	e8 68 96 ff ff       	call   c010037f <cprintf>
c0106d17:	83 c4 10             	add    $0x10,%esp
}
c0106d1a:	90                   	nop
c0106d1b:	c9                   	leave  
c0106d1c:	c3                   	ret    

c0106d1d <slob_allocated>:

size_t
slob_allocated(void) {
c0106d1d:	55                   	push   %ebp
c0106d1e:	89 e5                	mov    %esp,%ebp
  return 0;
c0106d20:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106d25:	5d                   	pop    %ebp
c0106d26:	c3                   	ret    

c0106d27 <kallocated>:

size_t
kallocated(void) {
c0106d27:	55                   	push   %ebp
c0106d28:	89 e5                	mov    %esp,%ebp
   return slob_allocated();
c0106d2a:	e8 ee ff ff ff       	call   c0106d1d <slob_allocated>
}
c0106d2f:	5d                   	pop    %ebp
c0106d30:	c3                   	ret    

c0106d31 <find_order>:

static int find_order(int size)
{
c0106d31:	55                   	push   %ebp
c0106d32:	89 e5                	mov    %esp,%ebp
c0106d34:	83 ec 10             	sub    $0x10,%esp
	int order = 0;
c0106d37:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for ( ; size > 4096 ; size >>=1)
c0106d3e:	eb 07                	jmp    c0106d47 <find_order+0x16>
		order++;
c0106d40:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
}

static int find_order(int size)
{
	int order = 0;
	for ( ; size > 4096 ; size >>=1)
c0106d44:	d1 7d 08             	sarl   0x8(%ebp)
c0106d47:	81 7d 08 00 10 00 00 	cmpl   $0x1000,0x8(%ebp)
c0106d4e:	7f f0                	jg     c0106d40 <find_order+0xf>
		order++;
	return order;
c0106d50:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0106d53:	c9                   	leave  
c0106d54:	c3                   	ret    

c0106d55 <__kmalloc>:

static void *__kmalloc(size_t size, gfp_t gfp)
{
c0106d55:	55                   	push   %ebp
c0106d56:	89 e5                	mov    %esp,%ebp
c0106d58:	83 ec 18             	sub    $0x18,%esp
	slob_t *m;
	bigblock_t *bb;
	unsigned long flags;

	if (size < PAGE_SIZE - SLOB_UNIT) {
c0106d5b:	81 7d 08 f7 0f 00 00 	cmpl   $0xff7,0x8(%ebp)
c0106d62:	77 35                	ja     c0106d99 <__kmalloc+0x44>
		m = slob_alloc(size + SLOB_UNIT, gfp, 0);
c0106d64:	8b 45 08             	mov    0x8(%ebp),%eax
c0106d67:	83 c0 08             	add    $0x8,%eax
c0106d6a:	83 ec 04             	sub    $0x4,%esp
c0106d6d:	6a 00                	push   $0x0
c0106d6f:	ff 75 0c             	pushl  0xc(%ebp)
c0106d72:	50                   	push   %eax
c0106d73:	e8 81 fc ff ff       	call   c01069f9 <slob_alloc>
c0106d78:	83 c4 10             	add    $0x10,%esp
c0106d7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		return m ? (void *)(m + 1) : 0;
c0106d7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106d82:	74 0b                	je     c0106d8f <__kmalloc+0x3a>
c0106d84:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106d87:	83 c0 08             	add    $0x8,%eax
c0106d8a:	e9 b3 00 00 00       	jmp    c0106e42 <__kmalloc+0xed>
c0106d8f:	b8 00 00 00 00       	mov    $0x0,%eax
c0106d94:	e9 a9 00 00 00       	jmp    c0106e42 <__kmalloc+0xed>
	}

	bb = slob_alloc(sizeof(bigblock_t), gfp, 0);
c0106d99:	83 ec 04             	sub    $0x4,%esp
c0106d9c:	6a 00                	push   $0x0
c0106d9e:	ff 75 0c             	pushl  0xc(%ebp)
c0106da1:	6a 0c                	push   $0xc
c0106da3:	e8 51 fc ff ff       	call   c01069f9 <slob_alloc>
c0106da8:	83 c4 10             	add    $0x10,%esp
c0106dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!bb)
c0106dae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106db2:	75 0a                	jne    c0106dbe <__kmalloc+0x69>
		return 0;
c0106db4:	b8 00 00 00 00       	mov    $0x0,%eax
c0106db9:	e9 84 00 00 00       	jmp    c0106e42 <__kmalloc+0xed>

	bb->order = find_order(size);
c0106dbe:	8b 45 08             	mov    0x8(%ebp),%eax
c0106dc1:	83 ec 0c             	sub    $0xc,%esp
c0106dc4:	50                   	push   %eax
c0106dc5:	e8 67 ff ff ff       	call   c0106d31 <find_order>
c0106dca:	83 c4 10             	add    $0x10,%esp
c0106dcd:	89 c2                	mov    %eax,%edx
c0106dcf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106dd2:	89 10                	mov    %edx,(%eax)
	bb->pages = (void *)__slob_get_free_pages(gfp, bb->order);
c0106dd4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106dd7:	8b 00                	mov    (%eax),%eax
c0106dd9:	83 ec 08             	sub    $0x8,%esp
c0106ddc:	50                   	push   %eax
c0106ddd:	ff 75 0c             	pushl  0xc(%ebp)
c0106de0:	e8 9b fb ff ff       	call   c0106980 <__slob_get_free_pages>
c0106de5:	83 c4 10             	add    $0x10,%esp
c0106de8:	89 c2                	mov    %eax,%edx
c0106dea:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ded:	89 50 04             	mov    %edx,0x4(%eax)

	if (bb->pages) {
c0106df0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106df3:	8b 40 04             	mov    0x4(%eax),%eax
c0106df6:	85 c0                	test   %eax,%eax
c0106df8:	74 33                	je     c0106e2d <__kmalloc+0xd8>
		spin_lock_irqsave(&block_lock, flags);
c0106dfa:	e8 5c fa ff ff       	call   c010685b <__intr_save>
c0106dff:	89 45 ec             	mov    %eax,-0x14(%ebp)
		bb->next = bigblocks;
c0106e02:	8b 15 1c f0 14 c0    	mov    0xc014f01c,%edx
c0106e08:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e0b:	89 50 08             	mov    %edx,0x8(%eax)
		bigblocks = bb;
c0106e0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e11:	a3 1c f0 14 c0       	mov    %eax,0xc014f01c
		spin_unlock_irqrestore(&block_lock, flags);
c0106e16:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106e19:	83 ec 0c             	sub    $0xc,%esp
c0106e1c:	50                   	push   %eax
c0106e1d:	e8 63 fa ff ff       	call   c0106885 <__intr_restore>
c0106e22:	83 c4 10             	add    $0x10,%esp
		return bb->pages;
c0106e25:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106e28:	8b 40 04             	mov    0x4(%eax),%eax
c0106e2b:	eb 15                	jmp    c0106e42 <__kmalloc+0xed>
	}

	slob_free(bb, sizeof(bigblock_t));
c0106e2d:	83 ec 08             	sub    $0x8,%esp
c0106e30:	6a 0c                	push   $0xc
c0106e32:	ff 75 f0             	pushl  -0x10(%ebp)
c0106e35:	e8 8e fd ff ff       	call   c0106bc8 <slob_free>
c0106e3a:	83 c4 10             	add    $0x10,%esp
	return 0;
c0106e3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106e42:	c9                   	leave  
c0106e43:	c3                   	ret    

c0106e44 <kmalloc>:

void *
kmalloc(size_t size)
{
c0106e44:	55                   	push   %ebp
c0106e45:	89 e5                	mov    %esp,%ebp
c0106e47:	83 ec 08             	sub    $0x8,%esp
  return __kmalloc(size, 0);
c0106e4a:	83 ec 08             	sub    $0x8,%esp
c0106e4d:	6a 00                	push   $0x0
c0106e4f:	ff 75 08             	pushl  0x8(%ebp)
c0106e52:	e8 fe fe ff ff       	call   c0106d55 <__kmalloc>
c0106e57:	83 c4 10             	add    $0x10,%esp
}
c0106e5a:	c9                   	leave  
c0106e5b:	c3                   	ret    

c0106e5c <kfree>:


void kfree(void *block)
{
c0106e5c:	55                   	push   %ebp
c0106e5d:	89 e5                	mov    %esp,%ebp
c0106e5f:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb, **last = &bigblocks;
c0106e62:	c7 45 f0 1c f0 14 c0 	movl   $0xc014f01c,-0x10(%ebp)
	unsigned long flags;

	if (!block)
c0106e69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106e6d:	0f 84 ac 00 00 00    	je     c0106f1f <kfree+0xc3>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0106e73:	8b 45 08             	mov    0x8(%ebp),%eax
c0106e76:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106e7b:	85 c0                	test   %eax,%eax
c0106e7d:	0f 85 85 00 00 00    	jne    c0106f08 <kfree+0xac>
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
c0106e83:	e8 d3 f9 ff ff       	call   c010685b <__intr_save>
c0106e88:	89 45 ec             	mov    %eax,-0x14(%ebp)
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106e8b:	a1 1c f0 14 c0       	mov    0xc014f01c,%eax
c0106e90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106e93:	eb 5e                	jmp    c0106ef3 <kfree+0x97>
			if (bb->pages == block) {
c0106e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106e98:	8b 40 04             	mov    0x4(%eax),%eax
c0106e9b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106e9e:	75 41                	jne    c0106ee1 <kfree+0x85>
				*last = bb->next;
c0106ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ea3:	8b 50 08             	mov    0x8(%eax),%edx
c0106ea6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106ea9:	89 10                	mov    %edx,(%eax)
				spin_unlock_irqrestore(&block_lock, flags);
c0106eab:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106eae:	83 ec 0c             	sub    $0xc,%esp
c0106eb1:	50                   	push   %eax
c0106eb2:	e8 ce f9 ff ff       	call   c0106885 <__intr_restore>
c0106eb7:	83 c4 10             	add    $0x10,%esp
				__slob_free_pages((unsigned long)block, bb->order);
c0106eba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ebd:	8b 10                	mov    (%eax),%edx
c0106ebf:	8b 45 08             	mov    0x8(%ebp),%eax
c0106ec2:	83 ec 08             	sub    $0x8,%esp
c0106ec5:	52                   	push   %edx
c0106ec6:	50                   	push   %eax
c0106ec7:	e8 f4 fa ff ff       	call   c01069c0 <__slob_free_pages>
c0106ecc:	83 c4 10             	add    $0x10,%esp
				slob_free(bb, sizeof(bigblock_t));
c0106ecf:	83 ec 08             	sub    $0x8,%esp
c0106ed2:	6a 0c                	push   $0xc
c0106ed4:	ff 75 f4             	pushl  -0xc(%ebp)
c0106ed7:	e8 ec fc ff ff       	call   c0106bc8 <slob_free>
c0106edc:	83 c4 10             	add    $0x10,%esp
				return;
c0106edf:	eb 3f                	jmp    c0106f20 <kfree+0xc4>
		return;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		/* might be on the big block list */
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; last = &bb->next, bb = bb->next) {
c0106ee1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106ee4:	83 c0 08             	add    $0x8,%eax
c0106ee7:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0106eea:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106eed:	8b 40 08             	mov    0x8(%eax),%eax
c0106ef0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106ef3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ef7:	75 9c                	jne    c0106e95 <kfree+0x39>
				__slob_free_pages((unsigned long)block, bb->order);
				slob_free(bb, sizeof(bigblock_t));
				return;
			}
		}
		spin_unlock_irqrestore(&block_lock, flags);
c0106ef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0106efc:	83 ec 0c             	sub    $0xc,%esp
c0106eff:	50                   	push   %eax
c0106f00:	e8 80 f9 ff ff       	call   c0106885 <__intr_restore>
c0106f05:	83 c4 10             	add    $0x10,%esp
	}

	slob_free((slob_t *)block - 1, 0);
c0106f08:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f0b:	83 e8 08             	sub    $0x8,%eax
c0106f0e:	83 ec 08             	sub    $0x8,%esp
c0106f11:	6a 00                	push   $0x0
c0106f13:	50                   	push   %eax
c0106f14:	e8 af fc ff ff       	call   c0106bc8 <slob_free>
c0106f19:	83 c4 10             	add    $0x10,%esp
	return;
c0106f1c:	90                   	nop
c0106f1d:	eb 01                	jmp    c0106f20 <kfree+0xc4>
{
	bigblock_t *bb, **last = &bigblocks;
	unsigned long flags;

	if (!block)
		return;
c0106f1f:	90                   	nop
		spin_unlock_irqrestore(&block_lock, flags);
	}

	slob_free((slob_t *)block - 1, 0);
	return;
}
c0106f20:	c9                   	leave  
c0106f21:	c3                   	ret    

c0106f22 <ksize>:


unsigned int ksize(const void *block)
{
c0106f22:	55                   	push   %ebp
c0106f23:	89 e5                	mov    %esp,%ebp
c0106f25:	83 ec 18             	sub    $0x18,%esp
	bigblock_t *bb;
	unsigned long flags;

	if (!block)
c0106f28:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0106f2c:	75 07                	jne    c0106f35 <ksize+0x13>
		return 0;
c0106f2e:	b8 00 00 00 00       	mov    $0x0,%eax
c0106f33:	eb 73                	jmp    c0106fa8 <ksize+0x86>

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
c0106f35:	8b 45 08             	mov    0x8(%ebp),%eax
c0106f38:	25 ff 0f 00 00       	and    $0xfff,%eax
c0106f3d:	85 c0                	test   %eax,%eax
c0106f3f:	75 5c                	jne    c0106f9d <ksize+0x7b>
		spin_lock_irqsave(&block_lock, flags);
c0106f41:	e8 15 f9 ff ff       	call   c010685b <__intr_save>
c0106f46:	89 45 f0             	mov    %eax,-0x10(%ebp)
		for (bb = bigblocks; bb; bb = bb->next)
c0106f49:	a1 1c f0 14 c0       	mov    0xc014f01c,%eax
c0106f4e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106f51:	eb 35                	jmp    c0106f88 <ksize+0x66>
			if (bb->pages == block) {
c0106f53:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f56:	8b 40 04             	mov    0x4(%eax),%eax
c0106f59:	3b 45 08             	cmp    0x8(%ebp),%eax
c0106f5c:	75 21                	jne    c0106f7f <ksize+0x5d>
				spin_unlock_irqrestore(&slob_lock, flags);
c0106f5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f61:	83 ec 0c             	sub    $0xc,%esp
c0106f64:	50                   	push   %eax
c0106f65:	e8 1b f9 ff ff       	call   c0106885 <__intr_restore>
c0106f6a:	83 c4 10             	add    $0x10,%esp
				return PAGE_SIZE << bb->order;
c0106f6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f70:	8b 00                	mov    (%eax),%eax
c0106f72:	ba 00 10 00 00       	mov    $0x1000,%edx
c0106f77:	89 c1                	mov    %eax,%ecx
c0106f79:	d3 e2                	shl    %cl,%edx
c0106f7b:	89 d0                	mov    %edx,%eax
c0106f7d:	eb 29                	jmp    c0106fa8 <ksize+0x86>
	if (!block)
		return 0;

	if (!((unsigned long)block & (PAGE_SIZE-1))) {
		spin_lock_irqsave(&block_lock, flags);
		for (bb = bigblocks; bb; bb = bb->next)
c0106f7f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0106f82:	8b 40 08             	mov    0x8(%eax),%eax
c0106f85:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0106f88:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106f8c:	75 c5                	jne    c0106f53 <ksize+0x31>
			if (bb->pages == block) {
				spin_unlock_irqrestore(&slob_lock, flags);
				return PAGE_SIZE << bb->order;
			}
		spin_unlock_irqrestore(&block_lock, flags);
c0106f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0106f91:	83 ec 0c             	sub    $0xc,%esp
c0106f94:	50                   	push   %eax
c0106f95:	e8 eb f8 ff ff       	call   c0106885 <__intr_restore>
c0106f9a:	83 c4 10             	add    $0x10,%esp
	}

	return ((slob_t *)block - 1)->units * SLOB_UNIT;
c0106f9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fa0:	83 e8 08             	sub    $0x8,%eax
c0106fa3:	8b 00                	mov    (%eax),%eax
c0106fa5:	c1 e0 03             	shl    $0x3,%eax
}
c0106fa8:	c9                   	leave  
c0106fa9:	c3                   	ret    

c0106faa <_fifo_init_mm>:
 * (2) _fifo_init_mm: init pra_list_head and let  mm->sm_priv point to the addr of pra_list_head.
 *              Now, From the memory control struct mm_struct, we can access FIFO PRA
 */
static int
_fifo_init_mm(struct mm_struct *mm)
{     
c0106faa:	55                   	push   %ebp
c0106fab:	89 e5                	mov    %esp,%ebp
c0106fad:	83 ec 10             	sub    $0x10,%esp
c0106fb0:	c7 45 fc e4 21 15 c0 	movl   $0xc01521e4,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0106fb7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fba:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0106fbd:	89 50 04             	mov    %edx,0x4(%eax)
c0106fc0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fc3:	8b 50 04             	mov    0x4(%eax),%edx
c0106fc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0106fc9:	89 10                	mov    %edx,(%eax)
     list_init(&pra_list_head);
     mm->sm_priv = &pra_list_head;
c0106fcb:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fce:	c7 40 14 e4 21 15 c0 	movl   $0xc01521e4,0x14(%eax)
     //cprintf(" mm->sm_priv %x in fifo_init_mm\n",mm->sm_priv);
     return 0;
c0106fd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0106fda:	c9                   	leave  
c0106fdb:	c3                   	ret    

c0106fdc <_fifo_map_swappable>:
/*
 * (3)_fifo_map_swappable: According FIFO PRA, we should link the most recent arrival page at the back of pra_list_head qeueue
 */
static int
_fifo_map_swappable(struct mm_struct *mm, uintptr_t addr, struct Page *page, int swap_in)
{
c0106fdc:	55                   	push   %ebp
c0106fdd:	89 e5                	mov    %esp,%ebp
c0106fdf:	83 ec 18             	sub    $0x18,%esp
    list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0106fe2:	8b 45 08             	mov    0x8(%ebp),%eax
c0106fe5:	8b 40 14             	mov    0x14(%eax),%eax
c0106fe8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    list_entry_t *entry=&(page->pra_page_link);
c0106feb:	8b 45 10             	mov    0x10(%ebp),%eax
c0106fee:	83 c0 14             	add    $0x14,%eax
c0106ff1:	89 45 f0             	mov    %eax,-0x10(%ebp)
 
    assert(entry != NULL && head != NULL);
c0106ff4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0106ff8:	74 06                	je     c0107000 <_fifo_map_swappable+0x24>
c0106ffa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0106ffe:	75 16                	jne    c0107016 <_fifo_map_swappable+0x3a>
c0107000:	68 10 46 11 c0       	push   $0xc0114610
c0107005:	68 2e 46 11 c0       	push   $0xc011462e
c010700a:	6a 32                	push   $0x32
c010700c:	68 43 46 11 c0       	push   $0xc0114643
c0107011:	e8 cf 94 ff ff       	call   c01004e5 <__panic>
    //record the page access situlation
    /*LAB3 EXERCISE 2: YOUR CODE*/ 
    //(1)link the most recent arrival page at the back of the pra_list_head qeueue.
    return 0;
c0107016:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010701b:	c9                   	leave  
c010701c:	c3                   	ret    

c010701d <_fifo_swap_out_victim>:
 *  (4)_fifo_swap_out_victim: According FIFO PRA, we should unlink the  earliest arrival page in front of pra_list_head qeueue,
 *                            then assign the value of *ptr_page to the addr of this page.
 */
static int
_fifo_swap_out_victim(struct mm_struct *mm, struct Page ** ptr_page, int in_tick)
{
c010701d:	55                   	push   %ebp
c010701e:	89 e5                	mov    %esp,%ebp
c0107020:	83 ec 18             	sub    $0x18,%esp
     list_entry_t *head=(list_entry_t*) mm->sm_priv;
c0107023:	8b 45 08             	mov    0x8(%ebp),%eax
c0107026:	8b 40 14             	mov    0x14(%eax),%eax
c0107029:	89 45 f4             	mov    %eax,-0xc(%ebp)
         assert(head != NULL);
c010702c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107030:	75 16                	jne    c0107048 <_fifo_swap_out_victim+0x2b>
c0107032:	68 57 46 11 c0       	push   $0xc0114657
c0107037:	68 2e 46 11 c0       	push   $0xc011462e
c010703c:	6a 40                	push   $0x40
c010703e:	68 43 46 11 c0       	push   $0xc0114643
c0107043:	e8 9d 94 ff ff       	call   c01004e5 <__panic>
     assert(in_tick==0);
c0107048:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010704c:	74 16                	je     c0107064 <_fifo_swap_out_victim+0x47>
c010704e:	68 64 46 11 c0       	push   $0xc0114664
c0107053:	68 2e 46 11 c0       	push   $0xc011462e
c0107058:	6a 41                	push   $0x41
c010705a:	68 43 46 11 c0       	push   $0xc0114643
c010705f:	e8 81 94 ff ff       	call   c01004e5 <__panic>
     /* Select the victim */
     /*LAB3 EXERCISE 2: YOUR CODE*/ 
     //(1)  unlink the  earliest arrival page in front of pra_list_head qeueue
     //(2)  assign the value of *ptr_page to the addr of this page
     return 0;
c0107064:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107069:	c9                   	leave  
c010706a:	c3                   	ret    

c010706b <_fifo_check_swap>:

static int
_fifo_check_swap(void) {
c010706b:	55                   	push   %ebp
c010706c:	89 e5                	mov    %esp,%ebp
c010706e:	83 ec 08             	sub    $0x8,%esp
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107071:	83 ec 0c             	sub    $0xc,%esp
c0107074:	68 70 46 11 c0       	push   $0xc0114670
c0107079:	e8 01 93 ff ff       	call   c010037f <cprintf>
c010707e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0107081:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107086:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==4);
c0107089:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c010708e:	83 f8 04             	cmp    $0x4,%eax
c0107091:	74 16                	je     c01070a9 <_fifo_check_swap+0x3e>
c0107093:	68 96 46 11 c0       	push   $0xc0114696
c0107098:	68 2e 46 11 c0       	push   $0xc011462e
c010709d:	6a 4d                	push   $0x4d
c010709f:	68 43 46 11 c0       	push   $0xc0114643
c01070a4:	e8 3c 94 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01070a9:	83 ec 0c             	sub    $0xc,%esp
c01070ac:	68 a8 46 11 c0       	push   $0xc01146a8
c01070b1:	e8 c9 92 ff ff       	call   c010037f <cprintf>
c01070b6:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01070b9:	b8 00 10 00 00       	mov    $0x1000,%eax
c01070be:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==4);
c01070c1:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01070c6:	83 f8 04             	cmp    $0x4,%eax
c01070c9:	74 16                	je     c01070e1 <_fifo_check_swap+0x76>
c01070cb:	68 96 46 11 c0       	push   $0xc0114696
c01070d0:	68 2e 46 11 c0       	push   $0xc011462e
c01070d5:	6a 50                	push   $0x50
c01070d7:	68 43 46 11 c0       	push   $0xc0114643
c01070dc:	e8 04 94 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c01070e1:	83 ec 0c             	sub    $0xc,%esp
c01070e4:	68 d0 46 11 c0       	push   $0xc01146d0
c01070e9:	e8 91 92 ff ff       	call   c010037f <cprintf>
c01070ee:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c01070f1:	b8 00 40 00 00       	mov    $0x4000,%eax
c01070f6:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==4);
c01070f9:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01070fe:	83 f8 04             	cmp    $0x4,%eax
c0107101:	74 16                	je     c0107119 <_fifo_check_swap+0xae>
c0107103:	68 96 46 11 c0       	push   $0xc0114696
c0107108:	68 2e 46 11 c0       	push   $0xc011462e
c010710d:	6a 53                	push   $0x53
c010710f:	68 43 46 11 c0       	push   $0xc0114643
c0107114:	e8 cc 93 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107119:	83 ec 0c             	sub    $0xc,%esp
c010711c:	68 f8 46 11 c0       	push   $0xc01146f8
c0107121:	e8 59 92 ff ff       	call   c010037f <cprintf>
c0107126:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0107129:	b8 00 20 00 00       	mov    $0x2000,%eax
c010712e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==4);
c0107131:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0107136:	83 f8 04             	cmp    $0x4,%eax
c0107139:	74 16                	je     c0107151 <_fifo_check_swap+0xe6>
c010713b:	68 96 46 11 c0       	push   $0xc0114696
c0107140:	68 2e 46 11 c0       	push   $0xc011462e
c0107145:	6a 56                	push   $0x56
c0107147:	68 43 46 11 c0       	push   $0xc0114643
c010714c:	e8 94 93 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c0107151:	83 ec 0c             	sub    $0xc,%esp
c0107154:	68 20 47 11 c0       	push   $0xc0114720
c0107159:	e8 21 92 ff ff       	call   c010037f <cprintf>
c010715e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c0107161:	b8 00 50 00 00       	mov    $0x5000,%eax
c0107166:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==5);
c0107169:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c010716e:	83 f8 05             	cmp    $0x5,%eax
c0107171:	74 16                	je     c0107189 <_fifo_check_swap+0x11e>
c0107173:	68 46 47 11 c0       	push   $0xc0114746
c0107178:	68 2e 46 11 c0       	push   $0xc011462e
c010717d:	6a 59                	push   $0x59
c010717f:	68 43 46 11 c0       	push   $0xc0114643
c0107184:	e8 5c 93 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c0107189:	83 ec 0c             	sub    $0xc,%esp
c010718c:	68 f8 46 11 c0       	push   $0xc01146f8
c0107191:	e8 e9 91 ff ff       	call   c010037f <cprintf>
c0107196:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0107199:	b8 00 20 00 00       	mov    $0x2000,%eax
c010719e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==5);
c01071a1:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01071a6:	83 f8 05             	cmp    $0x5,%eax
c01071a9:	74 16                	je     c01071c1 <_fifo_check_swap+0x156>
c01071ab:	68 46 47 11 c0       	push   $0xc0114746
c01071b0:	68 2e 46 11 c0       	push   $0xc011462e
c01071b5:	6a 5c                	push   $0x5c
c01071b7:	68 43 46 11 c0       	push   $0xc0114643
c01071bc:	e8 24 93 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01071c1:	83 ec 0c             	sub    $0xc,%esp
c01071c4:	68 a8 46 11 c0       	push   $0xc01146a8
c01071c9:	e8 b1 91 ff ff       	call   c010037f <cprintf>
c01071ce:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x1000 = 0x0a;
c01071d1:	b8 00 10 00 00       	mov    $0x1000,%eax
c01071d6:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==6);
c01071d9:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01071de:	83 f8 06             	cmp    $0x6,%eax
c01071e1:	74 16                	je     c01071f9 <_fifo_check_swap+0x18e>
c01071e3:	68 55 47 11 c0       	push   $0xc0114755
c01071e8:	68 2e 46 11 c0       	push   $0xc011462e
c01071ed:	6a 5f                	push   $0x5f
c01071ef:	68 43 46 11 c0       	push   $0xc0114643
c01071f4:	e8 ec 92 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page b in fifo_check_swap\n");
c01071f9:	83 ec 0c             	sub    $0xc,%esp
c01071fc:	68 f8 46 11 c0       	push   $0xc01146f8
c0107201:	e8 79 91 ff ff       	call   c010037f <cprintf>
c0107206:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x2000 = 0x0b;
c0107209:	b8 00 20 00 00       	mov    $0x2000,%eax
c010720e:	c6 00 0b             	movb   $0xb,(%eax)
    assert(pgfault_num==7);
c0107211:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0107216:	83 f8 07             	cmp    $0x7,%eax
c0107219:	74 16                	je     c0107231 <_fifo_check_swap+0x1c6>
c010721b:	68 64 47 11 c0       	push   $0xc0114764
c0107220:	68 2e 46 11 c0       	push   $0xc011462e
c0107225:	6a 62                	push   $0x62
c0107227:	68 43 46 11 c0       	push   $0xc0114643
c010722c:	e8 b4 92 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page c in fifo_check_swap\n");
c0107231:	83 ec 0c             	sub    $0xc,%esp
c0107234:	68 70 46 11 c0       	push   $0xc0114670
c0107239:	e8 41 91 ff ff       	call   c010037f <cprintf>
c010723e:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x3000 = 0x0c;
c0107241:	b8 00 30 00 00       	mov    $0x3000,%eax
c0107246:	c6 00 0c             	movb   $0xc,(%eax)
    assert(pgfault_num==8);
c0107249:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c010724e:	83 f8 08             	cmp    $0x8,%eax
c0107251:	74 16                	je     c0107269 <_fifo_check_swap+0x1fe>
c0107253:	68 73 47 11 c0       	push   $0xc0114773
c0107258:	68 2e 46 11 c0       	push   $0xc011462e
c010725d:	6a 65                	push   $0x65
c010725f:	68 43 46 11 c0       	push   $0xc0114643
c0107264:	e8 7c 92 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page d in fifo_check_swap\n");
c0107269:	83 ec 0c             	sub    $0xc,%esp
c010726c:	68 d0 46 11 c0       	push   $0xc01146d0
c0107271:	e8 09 91 ff ff       	call   c010037f <cprintf>
c0107276:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x4000 = 0x0d;
c0107279:	b8 00 40 00 00       	mov    $0x4000,%eax
c010727e:	c6 00 0d             	movb   $0xd,(%eax)
    assert(pgfault_num==9);
c0107281:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0107286:	83 f8 09             	cmp    $0x9,%eax
c0107289:	74 16                	je     c01072a1 <_fifo_check_swap+0x236>
c010728b:	68 82 47 11 c0       	push   $0xc0114782
c0107290:	68 2e 46 11 c0       	push   $0xc011462e
c0107295:	6a 68                	push   $0x68
c0107297:	68 43 46 11 c0       	push   $0xc0114643
c010729c:	e8 44 92 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page e in fifo_check_swap\n");
c01072a1:	83 ec 0c             	sub    $0xc,%esp
c01072a4:	68 20 47 11 c0       	push   $0xc0114720
c01072a9:	e8 d1 90 ff ff       	call   c010037f <cprintf>
c01072ae:	83 c4 10             	add    $0x10,%esp
    *(unsigned char *)0x5000 = 0x0e;
c01072b1:	b8 00 50 00 00       	mov    $0x5000,%eax
c01072b6:	c6 00 0e             	movb   $0xe,(%eax)
    assert(pgfault_num==10);
c01072b9:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c01072be:	83 f8 0a             	cmp    $0xa,%eax
c01072c1:	74 16                	je     c01072d9 <_fifo_check_swap+0x26e>
c01072c3:	68 91 47 11 c0       	push   $0xc0114791
c01072c8:	68 2e 46 11 c0       	push   $0xc011462e
c01072cd:	6a 6b                	push   $0x6b
c01072cf:	68 43 46 11 c0       	push   $0xc0114643
c01072d4:	e8 0c 92 ff ff       	call   c01004e5 <__panic>
    cprintf("write Virt Page a in fifo_check_swap\n");
c01072d9:	83 ec 0c             	sub    $0xc,%esp
c01072dc:	68 a8 46 11 c0       	push   $0xc01146a8
c01072e1:	e8 99 90 ff ff       	call   c010037f <cprintf>
c01072e6:	83 c4 10             	add    $0x10,%esp
    assert(*(unsigned char *)0x1000 == 0x0a);
c01072e9:	b8 00 10 00 00       	mov    $0x1000,%eax
c01072ee:	0f b6 00             	movzbl (%eax),%eax
c01072f1:	3c 0a                	cmp    $0xa,%al
c01072f3:	74 16                	je     c010730b <_fifo_check_swap+0x2a0>
c01072f5:	68 a4 47 11 c0       	push   $0xc01147a4
c01072fa:	68 2e 46 11 c0       	push   $0xc011462e
c01072ff:	6a 6d                	push   $0x6d
c0107301:	68 43 46 11 c0       	push   $0xc0114643
c0107306:	e8 da 91 ff ff       	call   c01004e5 <__panic>
    *(unsigned char *)0x1000 = 0x0a;
c010730b:	b8 00 10 00 00       	mov    $0x1000,%eax
c0107310:	c6 00 0a             	movb   $0xa,(%eax)
    assert(pgfault_num==11);
c0107313:	a1 0c f0 14 c0       	mov    0xc014f00c,%eax
c0107318:	83 f8 0b             	cmp    $0xb,%eax
c010731b:	74 16                	je     c0107333 <_fifo_check_swap+0x2c8>
c010731d:	68 c5 47 11 c0       	push   $0xc01147c5
c0107322:	68 2e 46 11 c0       	push   $0xc011462e
c0107327:	6a 6f                	push   $0x6f
c0107329:	68 43 46 11 c0       	push   $0xc0114643
c010732e:	e8 b2 91 ff ff       	call   c01004e5 <__panic>
    return 0;
c0107333:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107338:	c9                   	leave  
c0107339:	c3                   	ret    

c010733a <_fifo_init>:


static int
_fifo_init(void)
{
c010733a:	55                   	push   %ebp
c010733b:	89 e5                	mov    %esp,%ebp
    return 0;
c010733d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0107342:	5d                   	pop    %ebp
c0107343:	c3                   	ret    

c0107344 <_fifo_set_unswappable>:

static int
_fifo_set_unswappable(struct mm_struct *mm, uintptr_t addr)
{
c0107344:	55                   	push   %ebp
c0107345:	89 e5                	mov    %esp,%ebp
    return 0;
c0107347:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010734c:	5d                   	pop    %ebp
c010734d:	c3                   	ret    

c010734e <_fifo_tick_event>:

static int
_fifo_tick_event(struct mm_struct *mm)
{ return 0; }
c010734e:	55                   	push   %ebp
c010734f:	89 e5                	mov    %esp,%ebp
c0107351:	b8 00 00 00 00       	mov    $0x0,%eax
c0107356:	5d                   	pop    %ebp
c0107357:	c3                   	ret    

c0107358 <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c0107358:	55                   	push   %ebp
c0107359:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010735b:	8b 45 08             	mov    0x8(%ebp),%eax
c010735e:	8b 15 0c 21 15 c0    	mov    0xc015210c,%edx
c0107364:	29 d0                	sub    %edx,%eax
c0107366:	c1 f8 05             	sar    $0x5,%eax
}
c0107369:	5d                   	pop    %ebp
c010736a:	c3                   	ret    

c010736b <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010736b:	55                   	push   %ebp
c010736c:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010736e:	ff 75 08             	pushl  0x8(%ebp)
c0107371:	e8 e2 ff ff ff       	call   c0107358 <page2ppn>
c0107376:	83 c4 04             	add    $0x4,%esp
c0107379:	c1 e0 0c             	shl    $0xc,%eax
}
c010737c:	c9                   	leave  
c010737d:	c3                   	ret    

c010737e <page_ref>:
pde2page(pde_t pde) {
    return pa2page(PDE_ADDR(pde));
}

static inline int
page_ref(struct Page *page) {
c010737e:	55                   	push   %ebp
c010737f:	89 e5                	mov    %esp,%ebp
    return page->ref;
c0107381:	8b 45 08             	mov    0x8(%ebp),%eax
c0107384:	8b 00                	mov    (%eax),%eax
}
c0107386:	5d                   	pop    %ebp
c0107387:	c3                   	ret    

c0107388 <set_page_ref>:

static inline void
set_page_ref(struct Page *page, int val) {
c0107388:	55                   	push   %ebp
c0107389:	89 e5                	mov    %esp,%ebp
    page->ref = val;
c010738b:	8b 45 08             	mov    0x8(%ebp),%eax
c010738e:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107391:	89 10                	mov    %edx,(%eax)
}
c0107393:	90                   	nop
c0107394:	5d                   	pop    %ebp
c0107395:	c3                   	ret    

c0107396 <default_init>:

#define free_list (free_area.free_list)
#define nr_free (free_area.nr_free)

static void
default_init(void) {
c0107396:	55                   	push   %ebp
c0107397:	89 e5                	mov    %esp,%ebp
c0107399:	83 ec 10             	sub    $0x10,%esp
c010739c:	c7 45 fc ec 21 15 c0 	movl   $0xc01521ec,-0x4(%ebp)
c01073a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073a6:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01073a9:	89 50 04             	mov    %edx,0x4(%eax)
c01073ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073af:	8b 50 04             	mov    0x4(%eax),%edx
c01073b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01073b5:	89 10                	mov    %edx,(%eax)
    list_init(&free_list);
    nr_free = 0;
c01073b7:	c7 05 f4 21 15 c0 00 	movl   $0x0,0xc01521f4
c01073be:	00 00 00 
}
c01073c1:	90                   	nop
c01073c2:	c9                   	leave  
c01073c3:	c3                   	ret    

c01073c4 <default_init_memmap>:

static void
default_init_memmap(struct Page *base, size_t n) {
c01073c4:	55                   	push   %ebp
c01073c5:	89 e5                	mov    %esp,%ebp
c01073c7:	83 ec 48             	sub    $0x48,%esp
    assert(n > 0);
c01073ca:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01073ce:	75 16                	jne    c01073e6 <default_init_memmap+0x22>
c01073d0:	68 e8 47 11 c0       	push   $0xc01147e8
c01073d5:	68 ee 47 11 c0       	push   $0xc01147ee
c01073da:	6a 6d                	push   $0x6d
c01073dc:	68 03 48 11 c0       	push   $0xc0114803
c01073e1:	e8 ff 90 ff ff       	call   c01004e5 <__panic>
    struct Page *p = base;
c01073e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01073e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c01073ec:	eb 6c                	jmp    c010745a <default_init_memmap+0x96>
        assert(PageReserved(p));
c01073ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01073f1:	83 c0 04             	add    $0x4,%eax
c01073f4:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
c01073fb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01073fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107401:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107404:	0f a3 10             	bt     %edx,(%eax)
c0107407:	19 c0                	sbb    %eax,%eax
c0107409:	89 45 e0             	mov    %eax,-0x20(%ebp)
    return oldbit != 0;
c010740c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0107410:	0f 95 c0             	setne  %al
c0107413:	0f b6 c0             	movzbl %al,%eax
c0107416:	85 c0                	test   %eax,%eax
c0107418:	75 16                	jne    c0107430 <default_init_memmap+0x6c>
c010741a:	68 19 48 11 c0       	push   $0xc0114819
c010741f:	68 ee 47 11 c0       	push   $0xc01147ee
c0107424:	6a 70                	push   $0x70
c0107426:	68 03 48 11 c0       	push   $0xc0114803
c010742b:	e8 b5 90 ff ff       	call   c01004e5 <__panic>
        p->flags = p->property = 0;
c0107430:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107433:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010743a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010743d:	8b 50 08             	mov    0x8(%eax),%edx
c0107440:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107443:	89 50 04             	mov    %edx,0x4(%eax)
        set_page_ref(p, 0);
c0107446:	83 ec 08             	sub    $0x8,%esp
c0107449:	6a 00                	push   $0x0
c010744b:	ff 75 f4             	pushl  -0xc(%ebp)
c010744e:	e8 35 ff ff ff       	call   c0107388 <set_page_ref>
c0107453:	83 c4 10             	add    $0x10,%esp

static void
default_init_memmap(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c0107456:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c010745a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010745d:	c1 e0 05             	shl    $0x5,%eax
c0107460:	89 c2                	mov    %eax,%edx
c0107462:	8b 45 08             	mov    0x8(%ebp),%eax
c0107465:	01 d0                	add    %edx,%eax
c0107467:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010746a:	75 82                	jne    c01073ee <default_init_memmap+0x2a>
        assert(PageReserved(p));
        p->flags = p->property = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c010746c:	8b 45 08             	mov    0x8(%ebp),%eax
c010746f:	8b 55 0c             	mov    0xc(%ebp),%edx
c0107472:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0107475:	8b 45 08             	mov    0x8(%ebp),%eax
c0107478:	83 c0 04             	add    $0x4,%eax
c010747b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c0107482:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107485:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107488:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010748b:	0f ab 10             	bts    %edx,(%eax)
    nr_free += n;
c010748e:	8b 15 f4 21 15 c0    	mov    0xc01521f4,%edx
c0107494:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107497:	01 d0                	add    %edx,%eax
c0107499:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4
    list_add(&free_list, &(base->page_link));
c010749e:	8b 45 08             	mov    0x8(%ebp),%eax
c01074a1:	83 c0 0c             	add    $0xc,%eax
c01074a4:	c7 45 f0 ec 21 15 c0 	movl   $0xc01521ec,-0x10(%ebp)
c01074ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01074ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01074b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01074b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01074b7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01074ba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01074bd:	8b 40 04             	mov    0x4(%eax),%eax
c01074c0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01074c3:	89 55 d0             	mov    %edx,-0x30(%ebp)
c01074c6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01074c9:	89 55 cc             	mov    %edx,-0x34(%ebp)
c01074cc:	89 45 c8             	mov    %eax,-0x38(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01074cf:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074d2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01074d5:	89 10                	mov    %edx,(%eax)
c01074d7:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01074da:	8b 10                	mov    (%eax),%edx
c01074dc:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01074df:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01074e2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074e5:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01074e8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01074eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01074ee:	8b 55 cc             	mov    -0x34(%ebp),%edx
c01074f1:	89 10                	mov    %edx,(%eax)
}
c01074f3:	90                   	nop
c01074f4:	c9                   	leave  
c01074f5:	c3                   	ret    

c01074f6 <default_alloc_pages>:

static struct Page *
default_alloc_pages(size_t n) {
c01074f6:	55                   	push   %ebp
c01074f7:	89 e5                	mov    %esp,%ebp
c01074f9:	83 ec 58             	sub    $0x58,%esp
    assert(n > 0);
c01074fc:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0107500:	75 16                	jne    c0107518 <default_alloc_pages+0x22>
c0107502:	68 e8 47 11 c0       	push   $0xc01147e8
c0107507:	68 ee 47 11 c0       	push   $0xc01147ee
c010750c:	6a 7c                	push   $0x7c
c010750e:	68 03 48 11 c0       	push   $0xc0114803
c0107513:	e8 cd 8f ff ff       	call   c01004e5 <__panic>
    if (n > nr_free) {
c0107518:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c010751d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0107520:	73 0a                	jae    c010752c <default_alloc_pages+0x36>
        return NULL;
c0107522:	b8 00 00 00 00       	mov    $0x0,%eax
c0107527:	e9 23 01 00 00       	jmp    c010764f <default_alloc_pages+0x159>
    }
    struct Page *page = NULL;
c010752c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_entry_t *le = &free_list;
c0107533:	c7 45 f0 ec 21 15 c0 	movl   $0xc01521ec,-0x10(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010753a:	eb 1c                	jmp    c0107558 <default_alloc_pages+0x62>
        struct Page *p = le2page(le, page_link);
c010753c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010753f:	83 e8 0c             	sub    $0xc,%eax
c0107542:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (p->property >= n) {
c0107545:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107548:	8b 40 08             	mov    0x8(%eax),%eax
c010754b:	3b 45 08             	cmp    0x8(%ebp),%eax
c010754e:	72 08                	jb     c0107558 <default_alloc_pages+0x62>
            page = p;
c0107550:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107553:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
c0107556:	eb 18                	jmp    c0107570 <default_alloc_pages+0x7a>
c0107558:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010755b:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010755e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107561:	8b 40 04             	mov    0x4(%eax),%eax
    if (n > nr_free) {
        return NULL;
    }
    struct Page *page = NULL;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0107564:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107567:	81 7d f0 ec 21 15 c0 	cmpl   $0xc01521ec,-0x10(%ebp)
c010756e:	75 cc                	jne    c010753c <default_alloc_pages+0x46>
        if (p->property >= n) {
            page = p;
            break;
        }
    }
    if (page != NULL) {
c0107570:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107574:	0f 84 d2 00 00 00    	je     c010764c <default_alloc_pages+0x156>
        list_del(&(page->page_link));
c010757a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010757d:	83 c0 0c             	add    $0xc,%eax
c0107580:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107583:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107586:	8b 40 04             	mov    0x4(%eax),%eax
c0107589:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010758c:	8b 12                	mov    (%edx),%edx
c010758e:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107591:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107594:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0107597:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010759a:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010759d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01075a0:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01075a3:	89 10                	mov    %edx,(%eax)
        if (page->property > n) {
c01075a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075a8:	8b 40 08             	mov    0x8(%eax),%eax
c01075ab:	3b 45 08             	cmp    0x8(%ebp),%eax
c01075ae:	76 76                	jbe    c0107626 <default_alloc_pages+0x130>
            struct Page *p = page + n;
c01075b0:	8b 45 08             	mov    0x8(%ebp),%eax
c01075b3:	c1 e0 05             	shl    $0x5,%eax
c01075b6:	89 c2                	mov    %eax,%edx
c01075b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075bb:	01 d0                	add    %edx,%eax
c01075bd:	89 45 e0             	mov    %eax,-0x20(%ebp)
            p->property = page->property - n;
c01075c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01075c3:	8b 40 08             	mov    0x8(%eax),%eax
c01075c6:	2b 45 08             	sub    0x8(%ebp),%eax
c01075c9:	89 c2                	mov    %eax,%edx
c01075cb:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075ce:	89 50 08             	mov    %edx,0x8(%eax)
            list_add(&free_list, &(p->page_link));
c01075d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01075d4:	83 c0 0c             	add    $0xc,%eax
c01075d7:	c7 45 e4 ec 21 15 c0 	movl   $0xc01521ec,-0x1c(%ebp)
c01075de:	89 45 cc             	mov    %eax,-0x34(%ebp)
c01075e1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01075e4:	89 45 c8             	mov    %eax,-0x38(%ebp)
c01075e7:	8b 45 cc             	mov    -0x34(%ebp),%eax
c01075ea:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c01075ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01075f0:	8b 40 04             	mov    0x4(%eax),%eax
c01075f3:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c01075f6:	89 55 c0             	mov    %edx,-0x40(%ebp)
c01075f9:	8b 55 c8             	mov    -0x38(%ebp),%edx
c01075fc:	89 55 bc             	mov    %edx,-0x44(%ebp)
c01075ff:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c0107602:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0107605:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0107608:	89 10                	mov    %edx,(%eax)
c010760a:	8b 45 b8             	mov    -0x48(%ebp),%eax
c010760d:	8b 10                	mov    (%eax),%edx
c010760f:	8b 45 bc             	mov    -0x44(%ebp),%eax
c0107612:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c0107615:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107618:	8b 55 b8             	mov    -0x48(%ebp),%edx
c010761b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010761e:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0107621:	8b 55 bc             	mov    -0x44(%ebp),%edx
c0107624:	89 10                	mov    %edx,(%eax)
    }
        nr_free -= n;
c0107626:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c010762b:	2b 45 08             	sub    0x8(%ebp),%eax
c010762e:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4
        ClearPageProperty(page);
c0107633:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107636:	83 c0 04             	add    $0x4,%eax
c0107639:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
c0107640:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107643:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0107646:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0107649:	0f b3 10             	btr    %edx,(%eax)
    }
    return page;
c010764c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010764f:	c9                   	leave  
c0107650:	c3                   	ret    

c0107651 <default_free_pages>:

static void
default_free_pages(struct Page *base, size_t n) {
c0107651:	55                   	push   %ebp
c0107652:	89 e5                	mov    %esp,%ebp
c0107654:	81 ec 88 00 00 00    	sub    $0x88,%esp
    assert(n > 0);
c010765a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010765e:	75 19                	jne    c0107679 <default_free_pages+0x28>
c0107660:	68 e8 47 11 c0       	push   $0xc01147e8
c0107665:	68 ee 47 11 c0       	push   $0xc01147ee
c010766a:	68 98 00 00 00       	push   $0x98
c010766f:	68 03 48 11 c0       	push   $0xc0114803
c0107674:	e8 6c 8e ff ff       	call   c01004e5 <__panic>
    struct Page *p = base;
c0107679:	8b 45 08             	mov    0x8(%ebp),%eax
c010767c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (; p != base + n; p ++) {
c010767f:	e9 8f 00 00 00       	jmp    c0107713 <default_free_pages+0xc2>
        assert(!PageReserved(p) && !PageProperty(p));
c0107684:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107687:	83 c0 04             	add    $0x4,%eax
c010768a:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
c0107691:	89 45 c4             	mov    %eax,-0x3c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107694:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c0107697:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010769a:	0f a3 10             	bt     %edx,(%eax)
c010769d:	19 c0                	sbb    %eax,%eax
c010769f:	89 45 c0             	mov    %eax,-0x40(%ebp)
    return oldbit != 0;
c01076a2:	83 7d c0 00          	cmpl   $0x0,-0x40(%ebp)
c01076a6:	0f 95 c0             	setne  %al
c01076a9:	0f b6 c0             	movzbl %al,%eax
c01076ac:	85 c0                	test   %eax,%eax
c01076ae:	75 2c                	jne    c01076dc <default_free_pages+0x8b>
c01076b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076b3:	83 c0 04             	add    $0x4,%eax
c01076b6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
c01076bd:	89 45 bc             	mov    %eax,-0x44(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01076c0:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01076c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01076c6:	0f a3 10             	bt     %edx,(%eax)
c01076c9:	19 c0                	sbb    %eax,%eax
c01076cb:	89 45 b8             	mov    %eax,-0x48(%ebp)
    return oldbit != 0;
c01076ce:	83 7d b8 00          	cmpl   $0x0,-0x48(%ebp)
c01076d2:	0f 95 c0             	setne  %al
c01076d5:	0f b6 c0             	movzbl %al,%eax
c01076d8:	85 c0                	test   %eax,%eax
c01076da:	74 19                	je     c01076f5 <default_free_pages+0xa4>
c01076dc:	68 2c 48 11 c0       	push   $0xc011482c
c01076e1:	68 ee 47 11 c0       	push   $0xc01147ee
c01076e6:	68 9b 00 00 00       	push   $0x9b
c01076eb:	68 03 48 11 c0       	push   $0xc0114803
c01076f0:	e8 f0 8d ff ff       	call   c01004e5 <__panic>
        p->flags = 0;
c01076f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01076f8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        set_page_ref(p, 0);
c01076ff:	83 ec 08             	sub    $0x8,%esp
c0107702:	6a 00                	push   $0x0
c0107704:	ff 75 f4             	pushl  -0xc(%ebp)
c0107707:	e8 7c fc ff ff       	call   c0107388 <set_page_ref>
c010770c:	83 c4 10             	add    $0x10,%esp

static void
default_free_pages(struct Page *base, size_t n) {
    assert(n > 0);
    struct Page *p = base;
    for (; p != base + n; p ++) {
c010770f:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
c0107713:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107716:	c1 e0 05             	shl    $0x5,%eax
c0107719:	89 c2                	mov    %eax,%edx
c010771b:	8b 45 08             	mov    0x8(%ebp),%eax
c010771e:	01 d0                	add    %edx,%eax
c0107720:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107723:	0f 85 5b ff ff ff    	jne    c0107684 <default_free_pages+0x33>
        assert(!PageReserved(p) && !PageProperty(p));
        p->flags = 0;
        set_page_ref(p, 0);
    }
    base->property = n;
c0107729:	8b 45 08             	mov    0x8(%ebp),%eax
c010772c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010772f:	89 50 08             	mov    %edx,0x8(%eax)
    SetPageProperty(base);
c0107732:	8b 45 08             	mov    0x8(%ebp),%eax
c0107735:	83 c0 04             	add    $0x4,%eax
c0107738:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
c010773f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
 * Note that @nr may be almost arbitrarily large; this function is not
 * restricted to acting on a single-word quantity.
 * */
static inline void
set_bit(int nr, volatile void *addr) {
    asm volatile ("btsl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c0107742:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0107745:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0107748:	0f ab 10             	bts    %edx,(%eax)
c010774b:	c7 45 e8 ec 21 15 c0 	movl   $0xc01521ec,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107752:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107755:	8b 40 04             	mov    0x4(%eax),%eax
    list_entry_t *le = list_next(&free_list);
c0107758:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (le != &free_list) {
c010775b:	e9 fa 00 00 00       	jmp    c010785a <default_free_pages+0x209>
        p = le2page(le, page_link);
c0107760:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107763:	83 e8 0c             	sub    $0xc,%eax
c0107766:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107769:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010776c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010776f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107772:	8b 40 04             	mov    0x4(%eax),%eax
        le = list_next(le);
c0107775:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (base + base->property == p) {
c0107778:	8b 45 08             	mov    0x8(%ebp),%eax
c010777b:	8b 40 08             	mov    0x8(%eax),%eax
c010777e:	c1 e0 05             	shl    $0x5,%eax
c0107781:	89 c2                	mov    %eax,%edx
c0107783:	8b 45 08             	mov    0x8(%ebp),%eax
c0107786:	01 d0                	add    %edx,%eax
c0107788:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010778b:	75 5a                	jne    c01077e7 <default_free_pages+0x196>
            base->property += p->property;
c010778d:	8b 45 08             	mov    0x8(%ebp),%eax
c0107790:	8b 50 08             	mov    0x8(%eax),%edx
c0107793:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107796:	8b 40 08             	mov    0x8(%eax),%eax
c0107799:	01 c2                	add    %eax,%edx
c010779b:	8b 45 08             	mov    0x8(%ebp),%eax
c010779e:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(p);
c01077a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077a4:	83 c0 04             	add    $0x4,%eax
c01077a7:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c01077ae:	89 45 a8             	mov    %eax,-0x58(%ebp)
 * @nr:     the bit to clear
 * @addr:   the address to start counting from
 * */
static inline void
clear_bit(int nr, volatile void *addr) {
    asm volatile ("btrl %1, %0" :"=m" (*(volatile long *)addr) : "Ir" (nr));
c01077b1:	8b 45 a8             	mov    -0x58(%ebp),%eax
c01077b4:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01077b7:	0f b3 10             	btr    %edx,(%eax)
            list_del(&(p->page_link));
c01077ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077bd:	83 c0 0c             	add    $0xc,%eax
c01077c0:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01077c3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01077c6:	8b 40 04             	mov    0x4(%eax),%eax
c01077c9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01077cc:	8b 12                	mov    (%edx),%edx
c01077ce:	89 55 b0             	mov    %edx,-0x50(%ebp)
c01077d1:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01077d4:	8b 45 b0             	mov    -0x50(%ebp),%eax
c01077d7:	8b 55 ac             	mov    -0x54(%ebp),%edx
c01077da:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01077dd:	8b 45 ac             	mov    -0x54(%ebp),%eax
c01077e0:	8b 55 b0             	mov    -0x50(%ebp),%edx
c01077e3:	89 10                	mov    %edx,(%eax)
c01077e5:	eb 73                	jmp    c010785a <default_free_pages+0x209>
        }
        else if (p + p->property == base) {
c01077e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077ea:	8b 40 08             	mov    0x8(%eax),%eax
c01077ed:	c1 e0 05             	shl    $0x5,%eax
c01077f0:	89 c2                	mov    %eax,%edx
c01077f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077f5:	01 d0                	add    %edx,%eax
c01077f7:	3b 45 08             	cmp    0x8(%ebp),%eax
c01077fa:	75 5e                	jne    c010785a <default_free_pages+0x209>
            p->property += base->property;
c01077fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01077ff:	8b 50 08             	mov    0x8(%eax),%edx
c0107802:	8b 45 08             	mov    0x8(%ebp),%eax
c0107805:	8b 40 08             	mov    0x8(%eax),%eax
c0107808:	01 c2                	add    %eax,%edx
c010780a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010780d:	89 50 08             	mov    %edx,0x8(%eax)
            ClearPageProperty(base);
c0107810:	8b 45 08             	mov    0x8(%ebp),%eax
c0107813:	83 c0 04             	add    $0x4,%eax
c0107816:	c7 45 cc 01 00 00 00 	movl   $0x1,-0x34(%ebp)
c010781d:	89 45 9c             	mov    %eax,-0x64(%ebp)
c0107820:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107823:	8b 55 cc             	mov    -0x34(%ebp),%edx
c0107826:	0f b3 10             	btr    %edx,(%eax)
            base = p;
c0107829:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010782c:	89 45 08             	mov    %eax,0x8(%ebp)
            list_del(&(p->page_link));
c010782f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0107832:	83 c0 0c             	add    $0xc,%eax
c0107835:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c0107838:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010783b:	8b 40 04             	mov    0x4(%eax),%eax
c010783e:	8b 55 d8             	mov    -0x28(%ebp),%edx
c0107841:	8b 12                	mov    (%edx),%edx
c0107843:	89 55 a4             	mov    %edx,-0x5c(%ebp)
c0107846:	89 45 a0             	mov    %eax,-0x60(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c0107849:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c010784c:	8b 55 a0             	mov    -0x60(%ebp),%edx
c010784f:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c0107852:	8b 45 a0             	mov    -0x60(%ebp),%eax
c0107855:	8b 55 a4             	mov    -0x5c(%ebp),%edx
c0107858:	89 10                	mov    %edx,(%eax)
        set_page_ref(p, 0);
    }
    base->property = n;
    SetPageProperty(base);
    list_entry_t *le = list_next(&free_list);
    while (le != &free_list) {
c010785a:	81 7d f0 ec 21 15 c0 	cmpl   $0xc01521ec,-0x10(%ebp)
c0107861:	0f 85 f9 fe ff ff    	jne    c0107760 <default_free_pages+0x10f>
            ClearPageProperty(base);
            base = p;
            list_del(&(p->page_link));
        }
    }
    nr_free += n;
c0107867:	8b 15 f4 21 15 c0    	mov    0xc01521f4,%edx
c010786d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0107870:	01 d0                	add    %edx,%eax
c0107872:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4
    list_add(&free_list, &(base->page_link));
c0107877:	8b 45 08             	mov    0x8(%ebp),%eax
c010787a:	83 c0 0c             	add    $0xc,%eax
c010787d:	c7 45 d0 ec 21 15 c0 	movl   $0xc01521ec,-0x30(%ebp)
c0107884:	89 45 98             	mov    %eax,-0x68(%ebp)
c0107887:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010788a:	89 45 94             	mov    %eax,-0x6c(%ebp)
c010788d:	8b 45 98             	mov    -0x68(%ebp),%eax
c0107890:	89 45 90             	mov    %eax,-0x70(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c0107893:	8b 45 94             	mov    -0x6c(%ebp),%eax
c0107896:	8b 40 04             	mov    0x4(%eax),%eax
c0107899:	8b 55 90             	mov    -0x70(%ebp),%edx
c010789c:	89 55 8c             	mov    %edx,-0x74(%ebp)
c010789f:	8b 55 94             	mov    -0x6c(%ebp),%edx
c01078a2:	89 55 88             	mov    %edx,-0x78(%ebp)
c01078a5:	89 45 84             	mov    %eax,-0x7c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c01078a8:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01078ab:	8b 55 8c             	mov    -0x74(%ebp),%edx
c01078ae:	89 10                	mov    %edx,(%eax)
c01078b0:	8b 45 84             	mov    -0x7c(%ebp),%eax
c01078b3:	8b 10                	mov    (%eax),%edx
c01078b5:	8b 45 88             	mov    -0x78(%ebp),%eax
c01078b8:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c01078bb:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01078be:	8b 55 84             	mov    -0x7c(%ebp),%edx
c01078c1:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c01078c4:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01078c7:	8b 55 88             	mov    -0x78(%ebp),%edx
c01078ca:	89 10                	mov    %edx,(%eax)
}
c01078cc:	90                   	nop
c01078cd:	c9                   	leave  
c01078ce:	c3                   	ret    

c01078cf <default_nr_free_pages>:

static size_t
default_nr_free_pages(void) {
c01078cf:	55                   	push   %ebp
c01078d0:	89 e5                	mov    %esp,%ebp
    return nr_free;
c01078d2:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
}
c01078d7:	5d                   	pop    %ebp
c01078d8:	c3                   	ret    

c01078d9 <basic_check>:

static void
basic_check(void) {
c01078d9:	55                   	push   %ebp
c01078da:	89 e5                	mov    %esp,%ebp
c01078dc:	83 ec 38             	sub    $0x38,%esp
    struct Page *p0, *p1, *p2;
    p0 = p1 = p2 = NULL;
c01078df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01078e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01078e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01078ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01078ef:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert((p0 = alloc_page()) != NULL);
c01078f2:	83 ec 0c             	sub    $0xc,%esp
c01078f5:	6a 01                	push   $0x1
c01078f7:	e8 f5 bc ff ff       	call   c01035f1 <alloc_pages>
c01078fc:	83 c4 10             	add    $0x10,%esp
c01078ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107902:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107906:	75 19                	jne    c0107921 <basic_check+0x48>
c0107908:	68 51 48 11 c0       	push   $0xc0114851
c010790d:	68 ee 47 11 c0       	push   $0xc01147ee
c0107912:	68 be 00 00 00       	push   $0xbe
c0107917:	68 03 48 11 c0       	push   $0xc0114803
c010791c:	e8 c4 8b ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0107921:	83 ec 0c             	sub    $0xc,%esp
c0107924:	6a 01                	push   $0x1
c0107926:	e8 c6 bc ff ff       	call   c01035f1 <alloc_pages>
c010792b:	83 c4 10             	add    $0x10,%esp
c010792e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107931:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107935:	75 19                	jne    c0107950 <basic_check+0x77>
c0107937:	68 6d 48 11 c0       	push   $0xc011486d
c010793c:	68 ee 47 11 c0       	push   $0xc01147ee
c0107941:	68 bf 00 00 00       	push   $0xbf
c0107946:	68 03 48 11 c0       	push   $0xc0114803
c010794b:	e8 95 8b ff ff       	call   c01004e5 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0107950:	83 ec 0c             	sub    $0xc,%esp
c0107953:	6a 01                	push   $0x1
c0107955:	e8 97 bc ff ff       	call   c01035f1 <alloc_pages>
c010795a:	83 c4 10             	add    $0x10,%esp
c010795d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107960:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107964:	75 19                	jne    c010797f <basic_check+0xa6>
c0107966:	68 89 48 11 c0       	push   $0xc0114889
c010796b:	68 ee 47 11 c0       	push   $0xc01147ee
c0107970:	68 c0 00 00 00       	push   $0xc0
c0107975:	68 03 48 11 c0       	push   $0xc0114803
c010797a:	e8 66 8b ff ff       	call   c01004e5 <__panic>

    assert(p0 != p1 && p0 != p2 && p1 != p2);
c010797f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107982:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0107985:	74 10                	je     c0107997 <basic_check+0xbe>
c0107987:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010798a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010798d:	74 08                	je     c0107997 <basic_check+0xbe>
c010798f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107992:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c0107995:	75 19                	jne    c01079b0 <basic_check+0xd7>
c0107997:	68 a8 48 11 c0       	push   $0xc01148a8
c010799c:	68 ee 47 11 c0       	push   $0xc01147ee
c01079a1:	68 c2 00 00 00       	push   $0xc2
c01079a6:	68 03 48 11 c0       	push   $0xc0114803
c01079ab:	e8 35 8b ff ff       	call   c01004e5 <__panic>
    assert(page_ref(p0) == 0 && page_ref(p1) == 0 && page_ref(p2) == 0);
c01079b0:	83 ec 0c             	sub    $0xc,%esp
c01079b3:	ff 75 ec             	pushl  -0x14(%ebp)
c01079b6:	e8 c3 f9 ff ff       	call   c010737e <page_ref>
c01079bb:	83 c4 10             	add    $0x10,%esp
c01079be:	85 c0                	test   %eax,%eax
c01079c0:	75 24                	jne    c01079e6 <basic_check+0x10d>
c01079c2:	83 ec 0c             	sub    $0xc,%esp
c01079c5:	ff 75 f0             	pushl  -0x10(%ebp)
c01079c8:	e8 b1 f9 ff ff       	call   c010737e <page_ref>
c01079cd:	83 c4 10             	add    $0x10,%esp
c01079d0:	85 c0                	test   %eax,%eax
c01079d2:	75 12                	jne    c01079e6 <basic_check+0x10d>
c01079d4:	83 ec 0c             	sub    $0xc,%esp
c01079d7:	ff 75 f4             	pushl  -0xc(%ebp)
c01079da:	e8 9f f9 ff ff       	call   c010737e <page_ref>
c01079df:	83 c4 10             	add    $0x10,%esp
c01079e2:	85 c0                	test   %eax,%eax
c01079e4:	74 19                	je     c01079ff <basic_check+0x126>
c01079e6:	68 cc 48 11 c0       	push   $0xc01148cc
c01079eb:	68 ee 47 11 c0       	push   $0xc01147ee
c01079f0:	68 c3 00 00 00       	push   $0xc3
c01079f5:	68 03 48 11 c0       	push   $0xc0114803
c01079fa:	e8 e6 8a ff ff       	call   c01004e5 <__panic>

    assert(page2pa(p0) < npage * PGSIZE);
c01079ff:	83 ec 0c             	sub    $0xc,%esp
c0107a02:	ff 75 ec             	pushl  -0x14(%ebp)
c0107a05:	e8 61 f9 ff ff       	call   c010736b <page2pa>
c0107a0a:	83 c4 10             	add    $0x10,%esp
c0107a0d:	89 c2                	mov    %eax,%edx
c0107a0f:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0107a14:	c1 e0 0c             	shl    $0xc,%eax
c0107a17:	39 c2                	cmp    %eax,%edx
c0107a19:	72 19                	jb     c0107a34 <basic_check+0x15b>
c0107a1b:	68 08 49 11 c0       	push   $0xc0114908
c0107a20:	68 ee 47 11 c0       	push   $0xc01147ee
c0107a25:	68 c5 00 00 00       	push   $0xc5
c0107a2a:	68 03 48 11 c0       	push   $0xc0114803
c0107a2f:	e8 b1 8a ff ff       	call   c01004e5 <__panic>
    assert(page2pa(p1) < npage * PGSIZE);
c0107a34:	83 ec 0c             	sub    $0xc,%esp
c0107a37:	ff 75 f0             	pushl  -0x10(%ebp)
c0107a3a:	e8 2c f9 ff ff       	call   c010736b <page2pa>
c0107a3f:	83 c4 10             	add    $0x10,%esp
c0107a42:	89 c2                	mov    %eax,%edx
c0107a44:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0107a49:	c1 e0 0c             	shl    $0xc,%eax
c0107a4c:	39 c2                	cmp    %eax,%edx
c0107a4e:	72 19                	jb     c0107a69 <basic_check+0x190>
c0107a50:	68 25 49 11 c0       	push   $0xc0114925
c0107a55:	68 ee 47 11 c0       	push   $0xc01147ee
c0107a5a:	68 c6 00 00 00       	push   $0xc6
c0107a5f:	68 03 48 11 c0       	push   $0xc0114803
c0107a64:	e8 7c 8a ff ff       	call   c01004e5 <__panic>
    assert(page2pa(p2) < npage * PGSIZE);
c0107a69:	83 ec 0c             	sub    $0xc,%esp
c0107a6c:	ff 75 f4             	pushl  -0xc(%ebp)
c0107a6f:	e8 f7 f8 ff ff       	call   c010736b <page2pa>
c0107a74:	83 c4 10             	add    $0x10,%esp
c0107a77:	89 c2                	mov    %eax,%edx
c0107a79:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c0107a7e:	c1 e0 0c             	shl    $0xc,%eax
c0107a81:	39 c2                	cmp    %eax,%edx
c0107a83:	72 19                	jb     c0107a9e <basic_check+0x1c5>
c0107a85:	68 42 49 11 c0       	push   $0xc0114942
c0107a8a:	68 ee 47 11 c0       	push   $0xc01147ee
c0107a8f:	68 c7 00 00 00       	push   $0xc7
c0107a94:	68 03 48 11 c0       	push   $0xc0114803
c0107a99:	e8 47 8a ff ff       	call   c01004e5 <__panic>

    list_entry_t free_list_store = free_list;
c0107a9e:	a1 ec 21 15 c0       	mov    0xc01521ec,%eax
c0107aa3:	8b 15 f0 21 15 c0    	mov    0xc01521f0,%edx
c0107aa9:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0107aac:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0107aaf:	c7 45 e4 ec 21 15 c0 	movl   $0xc01521ec,-0x1c(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107ab6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ab9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0107abc:	89 50 04             	mov    %edx,0x4(%eax)
c0107abf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac2:	8b 50 04             	mov    0x4(%eax),%edx
c0107ac5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107ac8:	89 10                	mov    %edx,(%eax)
c0107aca:	c7 45 d8 ec 21 15 c0 	movl   $0xc01521ec,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107ad1:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ad4:	8b 40 04             	mov    0x4(%eax),%eax
c0107ad7:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0107ada:	0f 94 c0             	sete   %al
c0107add:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0107ae0:	85 c0                	test   %eax,%eax
c0107ae2:	75 19                	jne    c0107afd <basic_check+0x224>
c0107ae4:	68 5f 49 11 c0       	push   $0xc011495f
c0107ae9:	68 ee 47 11 c0       	push   $0xc01147ee
c0107aee:	68 cb 00 00 00       	push   $0xcb
c0107af3:	68 03 48 11 c0       	push   $0xc0114803
c0107af8:	e8 e8 89 ff ff       	call   c01004e5 <__panic>

    unsigned int nr_free_store = nr_free;
c0107afd:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c0107b02:	89 45 e0             	mov    %eax,-0x20(%ebp)
    nr_free = 0;
c0107b05:	c7 05 f4 21 15 c0 00 	movl   $0x0,0xc01521f4
c0107b0c:	00 00 00 

    assert(alloc_page() == NULL);
c0107b0f:	83 ec 0c             	sub    $0xc,%esp
c0107b12:	6a 01                	push   $0x1
c0107b14:	e8 d8 ba ff ff       	call   c01035f1 <alloc_pages>
c0107b19:	83 c4 10             	add    $0x10,%esp
c0107b1c:	85 c0                	test   %eax,%eax
c0107b1e:	74 19                	je     c0107b39 <basic_check+0x260>
c0107b20:	68 76 49 11 c0       	push   $0xc0114976
c0107b25:	68 ee 47 11 c0       	push   $0xc01147ee
c0107b2a:	68 d0 00 00 00       	push   $0xd0
c0107b2f:	68 03 48 11 c0       	push   $0xc0114803
c0107b34:	e8 ac 89 ff ff       	call   c01004e5 <__panic>

    free_page(p0);
c0107b39:	83 ec 08             	sub    $0x8,%esp
c0107b3c:	6a 01                	push   $0x1
c0107b3e:	ff 75 ec             	pushl  -0x14(%ebp)
c0107b41:	e8 17 bb ff ff       	call   c010365d <free_pages>
c0107b46:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0107b49:	83 ec 08             	sub    $0x8,%esp
c0107b4c:	6a 01                	push   $0x1
c0107b4e:	ff 75 f0             	pushl  -0x10(%ebp)
c0107b51:	e8 07 bb ff ff       	call   c010365d <free_pages>
c0107b56:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0107b59:	83 ec 08             	sub    $0x8,%esp
c0107b5c:	6a 01                	push   $0x1
c0107b5e:	ff 75 f4             	pushl  -0xc(%ebp)
c0107b61:	e8 f7 ba ff ff       	call   c010365d <free_pages>
c0107b66:	83 c4 10             	add    $0x10,%esp
    assert(nr_free == 3);
c0107b69:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c0107b6e:	83 f8 03             	cmp    $0x3,%eax
c0107b71:	74 19                	je     c0107b8c <basic_check+0x2b3>
c0107b73:	68 8b 49 11 c0       	push   $0xc011498b
c0107b78:	68 ee 47 11 c0       	push   $0xc01147ee
c0107b7d:	68 d5 00 00 00       	push   $0xd5
c0107b82:	68 03 48 11 c0       	push   $0xc0114803
c0107b87:	e8 59 89 ff ff       	call   c01004e5 <__panic>

    assert((p0 = alloc_page()) != NULL);
c0107b8c:	83 ec 0c             	sub    $0xc,%esp
c0107b8f:	6a 01                	push   $0x1
c0107b91:	e8 5b ba ff ff       	call   c01035f1 <alloc_pages>
c0107b96:	83 c4 10             	add    $0x10,%esp
c0107b99:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107b9c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0107ba0:	75 19                	jne    c0107bbb <basic_check+0x2e2>
c0107ba2:	68 51 48 11 c0       	push   $0xc0114851
c0107ba7:	68 ee 47 11 c0       	push   $0xc01147ee
c0107bac:	68 d7 00 00 00       	push   $0xd7
c0107bb1:	68 03 48 11 c0       	push   $0xc0114803
c0107bb6:	e8 2a 89 ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_page()) != NULL);
c0107bbb:	83 ec 0c             	sub    $0xc,%esp
c0107bbe:	6a 01                	push   $0x1
c0107bc0:	e8 2c ba ff ff       	call   c01035f1 <alloc_pages>
c0107bc5:	83 c4 10             	add    $0x10,%esp
c0107bc8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107bcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0107bcf:	75 19                	jne    c0107bea <basic_check+0x311>
c0107bd1:	68 6d 48 11 c0       	push   $0xc011486d
c0107bd6:	68 ee 47 11 c0       	push   $0xc01147ee
c0107bdb:	68 d8 00 00 00       	push   $0xd8
c0107be0:	68 03 48 11 c0       	push   $0xc0114803
c0107be5:	e8 fb 88 ff ff       	call   c01004e5 <__panic>
    assert((p2 = alloc_page()) != NULL);
c0107bea:	83 ec 0c             	sub    $0xc,%esp
c0107bed:	6a 01                	push   $0x1
c0107bef:	e8 fd b9 ff ff       	call   c01035f1 <alloc_pages>
c0107bf4:	83 c4 10             	add    $0x10,%esp
c0107bf7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0107bfa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0107bfe:	75 19                	jne    c0107c19 <basic_check+0x340>
c0107c00:	68 89 48 11 c0       	push   $0xc0114889
c0107c05:	68 ee 47 11 c0       	push   $0xc01147ee
c0107c0a:	68 d9 00 00 00       	push   $0xd9
c0107c0f:	68 03 48 11 c0       	push   $0xc0114803
c0107c14:	e8 cc 88 ff ff       	call   c01004e5 <__panic>

    assert(alloc_page() == NULL);
c0107c19:	83 ec 0c             	sub    $0xc,%esp
c0107c1c:	6a 01                	push   $0x1
c0107c1e:	e8 ce b9 ff ff       	call   c01035f1 <alloc_pages>
c0107c23:	83 c4 10             	add    $0x10,%esp
c0107c26:	85 c0                	test   %eax,%eax
c0107c28:	74 19                	je     c0107c43 <basic_check+0x36a>
c0107c2a:	68 76 49 11 c0       	push   $0xc0114976
c0107c2f:	68 ee 47 11 c0       	push   $0xc01147ee
c0107c34:	68 db 00 00 00       	push   $0xdb
c0107c39:	68 03 48 11 c0       	push   $0xc0114803
c0107c3e:	e8 a2 88 ff ff       	call   c01004e5 <__panic>

    free_page(p0);
c0107c43:	83 ec 08             	sub    $0x8,%esp
c0107c46:	6a 01                	push   $0x1
c0107c48:	ff 75 ec             	pushl  -0x14(%ebp)
c0107c4b:	e8 0d ba ff ff       	call   c010365d <free_pages>
c0107c50:	83 c4 10             	add    $0x10,%esp
c0107c53:	c7 45 e8 ec 21 15 c0 	movl   $0xc01521ec,-0x18(%ebp)
c0107c5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0107c5d:	8b 40 04             	mov    0x4(%eax),%eax
c0107c60:	39 45 e8             	cmp    %eax,-0x18(%ebp)
c0107c63:	0f 94 c0             	sete   %al
c0107c66:	0f b6 c0             	movzbl %al,%eax
    assert(!list_empty(&free_list));
c0107c69:	85 c0                	test   %eax,%eax
c0107c6b:	74 19                	je     c0107c86 <basic_check+0x3ad>
c0107c6d:	68 98 49 11 c0       	push   $0xc0114998
c0107c72:	68 ee 47 11 c0       	push   $0xc01147ee
c0107c77:	68 de 00 00 00       	push   $0xde
c0107c7c:	68 03 48 11 c0       	push   $0xc0114803
c0107c81:	e8 5f 88 ff ff       	call   c01004e5 <__panic>

    struct Page *p;
    assert((p = alloc_page()) == p0);
c0107c86:	83 ec 0c             	sub    $0xc,%esp
c0107c89:	6a 01                	push   $0x1
c0107c8b:	e8 61 b9 ff ff       	call   c01035f1 <alloc_pages>
c0107c90:	83 c4 10             	add    $0x10,%esp
c0107c93:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0107c96:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107c99:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0107c9c:	74 19                	je     c0107cb7 <basic_check+0x3de>
c0107c9e:	68 b0 49 11 c0       	push   $0xc01149b0
c0107ca3:	68 ee 47 11 c0       	push   $0xc01147ee
c0107ca8:	68 e1 00 00 00       	push   $0xe1
c0107cad:	68 03 48 11 c0       	push   $0xc0114803
c0107cb2:	e8 2e 88 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0107cb7:	83 ec 0c             	sub    $0xc,%esp
c0107cba:	6a 01                	push   $0x1
c0107cbc:	e8 30 b9 ff ff       	call   c01035f1 <alloc_pages>
c0107cc1:	83 c4 10             	add    $0x10,%esp
c0107cc4:	85 c0                	test   %eax,%eax
c0107cc6:	74 19                	je     c0107ce1 <basic_check+0x408>
c0107cc8:	68 76 49 11 c0       	push   $0xc0114976
c0107ccd:	68 ee 47 11 c0       	push   $0xc01147ee
c0107cd2:	68 e2 00 00 00       	push   $0xe2
c0107cd7:	68 03 48 11 c0       	push   $0xc0114803
c0107cdc:	e8 04 88 ff ff       	call   c01004e5 <__panic>

    assert(nr_free == 0);
c0107ce1:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c0107ce6:	85 c0                	test   %eax,%eax
c0107ce8:	74 19                	je     c0107d03 <basic_check+0x42a>
c0107cea:	68 c9 49 11 c0       	push   $0xc01149c9
c0107cef:	68 ee 47 11 c0       	push   $0xc01147ee
c0107cf4:	68 e4 00 00 00       	push   $0xe4
c0107cf9:	68 03 48 11 c0       	push   $0xc0114803
c0107cfe:	e8 e2 87 ff ff       	call   c01004e5 <__panic>
    free_list = free_list_store;
c0107d03:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107d06:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107d09:	a3 ec 21 15 c0       	mov    %eax,0xc01521ec
c0107d0e:	89 15 f0 21 15 c0    	mov    %edx,0xc01521f0
    nr_free = nr_free_store;
c0107d14:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107d17:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4

    free_page(p);
c0107d1c:	83 ec 08             	sub    $0x8,%esp
c0107d1f:	6a 01                	push   $0x1
c0107d21:	ff 75 dc             	pushl  -0x24(%ebp)
c0107d24:	e8 34 b9 ff ff       	call   c010365d <free_pages>
c0107d29:	83 c4 10             	add    $0x10,%esp
    free_page(p1);
c0107d2c:	83 ec 08             	sub    $0x8,%esp
c0107d2f:	6a 01                	push   $0x1
c0107d31:	ff 75 f0             	pushl  -0x10(%ebp)
c0107d34:	e8 24 b9 ff ff       	call   c010365d <free_pages>
c0107d39:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0107d3c:	83 ec 08             	sub    $0x8,%esp
c0107d3f:	6a 01                	push   $0x1
c0107d41:	ff 75 f4             	pushl  -0xc(%ebp)
c0107d44:	e8 14 b9 ff ff       	call   c010365d <free_pages>
c0107d49:	83 c4 10             	add    $0x10,%esp
}
c0107d4c:	90                   	nop
c0107d4d:	c9                   	leave  
c0107d4e:	c3                   	ret    

c0107d4f <default_check>:

// LAB2: below code is used to check the first fit allocation algorithm (your EXERCISE 1) 
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
c0107d4f:	55                   	push   %ebp
c0107d50:	89 e5                	mov    %esp,%ebp
c0107d52:	81 ec 88 00 00 00    	sub    $0x88,%esp
    int count = 0, total = 0;
c0107d58:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0107d5f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    list_entry_t *le = &free_list;
c0107d66:	c7 45 ec ec 21 15 c0 	movl   $0xc01521ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c0107d6d:	eb 60                	jmp    c0107dcf <default_check+0x80>
        struct Page *p = le2page(le, page_link);
c0107d6f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107d72:	83 e8 0c             	sub    $0xc,%eax
c0107d75:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        assert(PageProperty(p));
c0107d78:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107d7b:	83 c0 04             	add    $0x4,%eax
c0107d7e:	c7 45 b0 01 00 00 00 	movl   $0x1,-0x50(%ebp)
c0107d85:	89 45 ac             	mov    %eax,-0x54(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107d88:	8b 45 ac             	mov    -0x54(%ebp),%eax
c0107d8b:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0107d8e:	0f a3 10             	bt     %edx,(%eax)
c0107d91:	19 c0                	sbb    %eax,%eax
c0107d93:	89 45 a8             	mov    %eax,-0x58(%ebp)
    return oldbit != 0;
c0107d96:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
c0107d9a:	0f 95 c0             	setne  %al
c0107d9d:	0f b6 c0             	movzbl %al,%eax
c0107da0:	85 c0                	test   %eax,%eax
c0107da2:	75 19                	jne    c0107dbd <default_check+0x6e>
c0107da4:	68 d6 49 11 c0       	push   $0xc01149d6
c0107da9:	68 ee 47 11 c0       	push   $0xc01147ee
c0107dae:	68 f5 00 00 00       	push   $0xf5
c0107db3:	68 03 48 11 c0       	push   $0xc0114803
c0107db8:	e8 28 87 ff ff       	call   c01004e5 <__panic>
        count ++, total += p->property;
c0107dbd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0107dc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0107dc4:	8b 50 08             	mov    0x8(%eax),%edx
c0107dc7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107dca:	01 d0                	add    %edx,%eax
c0107dcc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0107dcf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0107dd2:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0107dd5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0107dd8:	8b 40 04             	mov    0x4(%eax),%eax
// NOTICE: You SHOULD NOT CHANGE basic_check, default_check functions!
static void
default_check(void) {
    int count = 0, total = 0;
    list_entry_t *le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c0107ddb:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0107dde:	81 7d ec ec 21 15 c0 	cmpl   $0xc01521ec,-0x14(%ebp)
c0107de5:	75 88                	jne    c0107d6f <default_check+0x20>
        struct Page *p = le2page(le, page_link);
        assert(PageProperty(p));
        count ++, total += p->property;
    }
    assert(total == nr_free_pages());
c0107de7:	e8 a6 b8 ff ff       	call   c0103692 <nr_free_pages>
c0107dec:	89 c2                	mov    %eax,%edx
c0107dee:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0107df1:	39 c2                	cmp    %eax,%edx
c0107df3:	74 19                	je     c0107e0e <default_check+0xbf>
c0107df5:	68 e6 49 11 c0       	push   $0xc01149e6
c0107dfa:	68 ee 47 11 c0       	push   $0xc01147ee
c0107dff:	68 f8 00 00 00       	push   $0xf8
c0107e04:	68 03 48 11 c0       	push   $0xc0114803
c0107e09:	e8 d7 86 ff ff       	call   c01004e5 <__panic>

    basic_check();
c0107e0e:	e8 c6 fa ff ff       	call   c01078d9 <basic_check>

    struct Page *p0 = alloc_pages(5), *p1, *p2;
c0107e13:	83 ec 0c             	sub    $0xc,%esp
c0107e16:	6a 05                	push   $0x5
c0107e18:	e8 d4 b7 ff ff       	call   c01035f1 <alloc_pages>
c0107e1d:	83 c4 10             	add    $0x10,%esp
c0107e20:	89 45 dc             	mov    %eax,-0x24(%ebp)
    assert(p0 != NULL);
c0107e23:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0107e27:	75 19                	jne    c0107e42 <default_check+0xf3>
c0107e29:	68 ff 49 11 c0       	push   $0xc01149ff
c0107e2e:	68 ee 47 11 c0       	push   $0xc01147ee
c0107e33:	68 fd 00 00 00       	push   $0xfd
c0107e38:	68 03 48 11 c0       	push   $0xc0114803
c0107e3d:	e8 a3 86 ff ff       	call   c01004e5 <__panic>
    assert(!PageProperty(p0));
c0107e42:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107e45:	83 c0 04             	add    $0x4,%eax
c0107e48:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)
c0107e4f:	89 45 a4             	mov    %eax,-0x5c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107e52:	8b 45 a4             	mov    -0x5c(%ebp),%eax
c0107e55:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0107e58:	0f a3 10             	bt     %edx,(%eax)
c0107e5b:	19 c0                	sbb    %eax,%eax
c0107e5d:	89 45 a0             	mov    %eax,-0x60(%ebp)
    return oldbit != 0;
c0107e60:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
c0107e64:	0f 95 c0             	setne  %al
c0107e67:	0f b6 c0             	movzbl %al,%eax
c0107e6a:	85 c0                	test   %eax,%eax
c0107e6c:	74 19                	je     c0107e87 <default_check+0x138>
c0107e6e:	68 0a 4a 11 c0       	push   $0xc0114a0a
c0107e73:	68 ee 47 11 c0       	push   $0xc01147ee
c0107e78:	68 fe 00 00 00       	push   $0xfe
c0107e7d:	68 03 48 11 c0       	push   $0xc0114803
c0107e82:	e8 5e 86 ff ff       	call   c01004e5 <__panic>

    list_entry_t free_list_store = free_list;
c0107e87:	a1 ec 21 15 c0       	mov    0xc01521ec,%eax
c0107e8c:	8b 15 f0 21 15 c0    	mov    0xc01521f0,%edx
c0107e92:	89 45 80             	mov    %eax,-0x80(%ebp)
c0107e95:	89 55 84             	mov    %edx,-0x7c(%ebp)
c0107e98:	c7 45 d0 ec 21 15 c0 	movl   $0xc01521ec,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0107e9f:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107ea2:	8b 55 d0             	mov    -0x30(%ebp),%edx
c0107ea5:	89 50 04             	mov    %edx,0x4(%eax)
c0107ea8:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107eab:	8b 50 04             	mov    0x4(%eax),%edx
c0107eae:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0107eb1:	89 10                	mov    %edx,(%eax)
c0107eb3:	c7 45 d8 ec 21 15 c0 	movl   $0xc01521ec,-0x28(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0107eba:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0107ebd:	8b 40 04             	mov    0x4(%eax),%eax
c0107ec0:	39 45 d8             	cmp    %eax,-0x28(%ebp)
c0107ec3:	0f 94 c0             	sete   %al
c0107ec6:	0f b6 c0             	movzbl %al,%eax
    list_init(&free_list);
    assert(list_empty(&free_list));
c0107ec9:	85 c0                	test   %eax,%eax
c0107ecb:	75 19                	jne    c0107ee6 <default_check+0x197>
c0107ecd:	68 5f 49 11 c0       	push   $0xc011495f
c0107ed2:	68 ee 47 11 c0       	push   $0xc01147ee
c0107ed7:	68 02 01 00 00       	push   $0x102
c0107edc:	68 03 48 11 c0       	push   $0xc0114803
c0107ee1:	e8 ff 85 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0107ee6:	83 ec 0c             	sub    $0xc,%esp
c0107ee9:	6a 01                	push   $0x1
c0107eeb:	e8 01 b7 ff ff       	call   c01035f1 <alloc_pages>
c0107ef0:	83 c4 10             	add    $0x10,%esp
c0107ef3:	85 c0                	test   %eax,%eax
c0107ef5:	74 19                	je     c0107f10 <default_check+0x1c1>
c0107ef7:	68 76 49 11 c0       	push   $0xc0114976
c0107efc:	68 ee 47 11 c0       	push   $0xc01147ee
c0107f01:	68 03 01 00 00       	push   $0x103
c0107f06:	68 03 48 11 c0       	push   $0xc0114803
c0107f0b:	e8 d5 85 ff ff       	call   c01004e5 <__panic>

    unsigned int nr_free_store = nr_free;
c0107f10:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c0107f15:	89 45 cc             	mov    %eax,-0x34(%ebp)
    nr_free = 0;
c0107f18:	c7 05 f4 21 15 c0 00 	movl   $0x0,0xc01521f4
c0107f1f:	00 00 00 

    free_pages(p0 + 2, 3);
c0107f22:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107f25:	83 c0 40             	add    $0x40,%eax
c0107f28:	83 ec 08             	sub    $0x8,%esp
c0107f2b:	6a 03                	push   $0x3
c0107f2d:	50                   	push   %eax
c0107f2e:	e8 2a b7 ff ff       	call   c010365d <free_pages>
c0107f33:	83 c4 10             	add    $0x10,%esp
    assert(alloc_pages(4) == NULL);
c0107f36:	83 ec 0c             	sub    $0xc,%esp
c0107f39:	6a 04                	push   $0x4
c0107f3b:	e8 b1 b6 ff ff       	call   c01035f1 <alloc_pages>
c0107f40:	83 c4 10             	add    $0x10,%esp
c0107f43:	85 c0                	test   %eax,%eax
c0107f45:	74 19                	je     c0107f60 <default_check+0x211>
c0107f47:	68 1c 4a 11 c0       	push   $0xc0114a1c
c0107f4c:	68 ee 47 11 c0       	push   $0xc01147ee
c0107f51:	68 09 01 00 00       	push   $0x109
c0107f56:	68 03 48 11 c0       	push   $0xc0114803
c0107f5b:	e8 85 85 ff ff       	call   c01004e5 <__panic>
    assert(PageProperty(p0 + 2) && p0[2].property == 3);
c0107f60:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107f63:	83 c0 40             	add    $0x40,%eax
c0107f66:	83 c0 04             	add    $0x4,%eax
c0107f69:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
c0107f70:	89 45 9c             	mov    %eax,-0x64(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c0107f73:	8b 45 9c             	mov    -0x64(%ebp),%eax
c0107f76:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0107f79:	0f a3 10             	bt     %edx,(%eax)
c0107f7c:	19 c0                	sbb    %eax,%eax
c0107f7e:	89 45 98             	mov    %eax,-0x68(%ebp)
    return oldbit != 0;
c0107f81:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
c0107f85:	0f 95 c0             	setne  %al
c0107f88:	0f b6 c0             	movzbl %al,%eax
c0107f8b:	85 c0                	test   %eax,%eax
c0107f8d:	74 0e                	je     c0107f9d <default_check+0x24e>
c0107f8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0107f92:	83 c0 40             	add    $0x40,%eax
c0107f95:	8b 40 08             	mov    0x8(%eax),%eax
c0107f98:	83 f8 03             	cmp    $0x3,%eax
c0107f9b:	74 19                	je     c0107fb6 <default_check+0x267>
c0107f9d:	68 34 4a 11 c0       	push   $0xc0114a34
c0107fa2:	68 ee 47 11 c0       	push   $0xc01147ee
c0107fa7:	68 0a 01 00 00       	push   $0x10a
c0107fac:	68 03 48 11 c0       	push   $0xc0114803
c0107fb1:	e8 2f 85 ff ff       	call   c01004e5 <__panic>
    assert((p1 = alloc_pages(3)) != NULL);
c0107fb6:	83 ec 0c             	sub    $0xc,%esp
c0107fb9:	6a 03                	push   $0x3
c0107fbb:	e8 31 b6 ff ff       	call   c01035f1 <alloc_pages>
c0107fc0:	83 c4 10             	add    $0x10,%esp
c0107fc3:	89 45 c4             	mov    %eax,-0x3c(%ebp)
c0107fc6:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
c0107fca:	75 19                	jne    c0107fe5 <default_check+0x296>
c0107fcc:	68 60 4a 11 c0       	push   $0xc0114a60
c0107fd1:	68 ee 47 11 c0       	push   $0xc01147ee
c0107fd6:	68 0b 01 00 00       	push   $0x10b
c0107fdb:	68 03 48 11 c0       	push   $0xc0114803
c0107fe0:	e8 00 85 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c0107fe5:	83 ec 0c             	sub    $0xc,%esp
c0107fe8:	6a 01                	push   $0x1
c0107fea:	e8 02 b6 ff ff       	call   c01035f1 <alloc_pages>
c0107fef:	83 c4 10             	add    $0x10,%esp
c0107ff2:	85 c0                	test   %eax,%eax
c0107ff4:	74 19                	je     c010800f <default_check+0x2c0>
c0107ff6:	68 76 49 11 c0       	push   $0xc0114976
c0107ffb:	68 ee 47 11 c0       	push   $0xc01147ee
c0108000:	68 0c 01 00 00       	push   $0x10c
c0108005:	68 03 48 11 c0       	push   $0xc0114803
c010800a:	e8 d6 84 ff ff       	call   c01004e5 <__panic>
    assert(p0 + 2 == p1);
c010800f:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108012:	83 c0 40             	add    $0x40,%eax
c0108015:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0108018:	74 19                	je     c0108033 <default_check+0x2e4>
c010801a:	68 7e 4a 11 c0       	push   $0xc0114a7e
c010801f:	68 ee 47 11 c0       	push   $0xc01147ee
c0108024:	68 0d 01 00 00       	push   $0x10d
c0108029:	68 03 48 11 c0       	push   $0xc0114803
c010802e:	e8 b2 84 ff ff       	call   c01004e5 <__panic>

    p2 = p0 + 1;
c0108033:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0108036:	83 c0 20             	add    $0x20,%eax
c0108039:	89 45 c0             	mov    %eax,-0x40(%ebp)
    free_page(p0);
c010803c:	83 ec 08             	sub    $0x8,%esp
c010803f:	6a 01                	push   $0x1
c0108041:	ff 75 dc             	pushl  -0x24(%ebp)
c0108044:	e8 14 b6 ff ff       	call   c010365d <free_pages>
c0108049:	83 c4 10             	add    $0x10,%esp
    free_pages(p1, 3);
c010804c:	83 ec 08             	sub    $0x8,%esp
c010804f:	6a 03                	push   $0x3
c0108051:	ff 75 c4             	pushl  -0x3c(%ebp)
c0108054:	e8 04 b6 ff ff       	call   c010365d <free_pages>
c0108059:	83 c4 10             	add    $0x10,%esp
    assert(PageProperty(p0) && p0->property == 1);
c010805c:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010805f:	83 c0 04             	add    $0x4,%eax
c0108062:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
c0108069:	89 45 94             	mov    %eax,-0x6c(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c010806c:	8b 45 94             	mov    -0x6c(%ebp),%eax
c010806f:	8b 55 c8             	mov    -0x38(%ebp),%edx
c0108072:	0f a3 10             	bt     %edx,(%eax)
c0108075:	19 c0                	sbb    %eax,%eax
c0108077:	89 45 90             	mov    %eax,-0x70(%ebp)
    return oldbit != 0;
c010807a:	83 7d 90 00          	cmpl   $0x0,-0x70(%ebp)
c010807e:	0f 95 c0             	setne  %al
c0108081:	0f b6 c0             	movzbl %al,%eax
c0108084:	85 c0                	test   %eax,%eax
c0108086:	74 0b                	je     c0108093 <default_check+0x344>
c0108088:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010808b:	8b 40 08             	mov    0x8(%eax),%eax
c010808e:	83 f8 01             	cmp    $0x1,%eax
c0108091:	74 19                	je     c01080ac <default_check+0x35d>
c0108093:	68 8c 4a 11 c0       	push   $0xc0114a8c
c0108098:	68 ee 47 11 c0       	push   $0xc01147ee
c010809d:	68 12 01 00 00       	push   $0x112
c01080a2:	68 03 48 11 c0       	push   $0xc0114803
c01080a7:	e8 39 84 ff ff       	call   c01004e5 <__panic>
    assert(PageProperty(p1) && p1->property == 3);
c01080ac:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01080af:	83 c0 04             	add    $0x4,%eax
c01080b2:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
c01080b9:	89 45 8c             	mov    %eax,-0x74(%ebp)
 * @addr:   the address to count from
 * */
static inline bool
test_bit(int nr, volatile void *addr) {
    int oldbit;
    asm volatile ("btl %2, %1; sbbl %0,%0" : "=r" (oldbit) : "m" (*(volatile long *)addr), "Ir" (nr));
c01080bc:	8b 45 8c             	mov    -0x74(%ebp),%eax
c01080bf:	8b 55 bc             	mov    -0x44(%ebp),%edx
c01080c2:	0f a3 10             	bt     %edx,(%eax)
c01080c5:	19 c0                	sbb    %eax,%eax
c01080c7:	89 45 88             	mov    %eax,-0x78(%ebp)
    return oldbit != 0;
c01080ca:	83 7d 88 00          	cmpl   $0x0,-0x78(%ebp)
c01080ce:	0f 95 c0             	setne  %al
c01080d1:	0f b6 c0             	movzbl %al,%eax
c01080d4:	85 c0                	test   %eax,%eax
c01080d6:	74 0b                	je     c01080e3 <default_check+0x394>
c01080d8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c01080db:	8b 40 08             	mov    0x8(%eax),%eax
c01080de:	83 f8 03             	cmp    $0x3,%eax
c01080e1:	74 19                	je     c01080fc <default_check+0x3ad>
c01080e3:	68 b4 4a 11 c0       	push   $0xc0114ab4
c01080e8:	68 ee 47 11 c0       	push   $0xc01147ee
c01080ed:	68 13 01 00 00       	push   $0x113
c01080f2:	68 03 48 11 c0       	push   $0xc0114803
c01080f7:	e8 e9 83 ff ff       	call   c01004e5 <__panic>

    assert((p0 = alloc_page()) == p2 - 1);
c01080fc:	83 ec 0c             	sub    $0xc,%esp
c01080ff:	6a 01                	push   $0x1
c0108101:	e8 eb b4 ff ff       	call   c01035f1 <alloc_pages>
c0108106:	83 c4 10             	add    $0x10,%esp
c0108109:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010810c:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010810f:	83 e8 20             	sub    $0x20,%eax
c0108112:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0108115:	74 19                	je     c0108130 <default_check+0x3e1>
c0108117:	68 da 4a 11 c0       	push   $0xc0114ada
c010811c:	68 ee 47 11 c0       	push   $0xc01147ee
c0108121:	68 15 01 00 00       	push   $0x115
c0108126:	68 03 48 11 c0       	push   $0xc0114803
c010812b:	e8 b5 83 ff ff       	call   c01004e5 <__panic>
    free_page(p0);
c0108130:	83 ec 08             	sub    $0x8,%esp
c0108133:	6a 01                	push   $0x1
c0108135:	ff 75 dc             	pushl  -0x24(%ebp)
c0108138:	e8 20 b5 ff ff       	call   c010365d <free_pages>
c010813d:	83 c4 10             	add    $0x10,%esp
    assert((p0 = alloc_pages(2)) == p2 + 1);
c0108140:	83 ec 0c             	sub    $0xc,%esp
c0108143:	6a 02                	push   $0x2
c0108145:	e8 a7 b4 ff ff       	call   c01035f1 <alloc_pages>
c010814a:	83 c4 10             	add    $0x10,%esp
c010814d:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0108150:	8b 45 c0             	mov    -0x40(%ebp),%eax
c0108153:	83 c0 20             	add    $0x20,%eax
c0108156:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c0108159:	74 19                	je     c0108174 <default_check+0x425>
c010815b:	68 f8 4a 11 c0       	push   $0xc0114af8
c0108160:	68 ee 47 11 c0       	push   $0xc01147ee
c0108165:	68 17 01 00 00       	push   $0x117
c010816a:	68 03 48 11 c0       	push   $0xc0114803
c010816f:	e8 71 83 ff ff       	call   c01004e5 <__panic>

    free_pages(p0, 2);
c0108174:	83 ec 08             	sub    $0x8,%esp
c0108177:	6a 02                	push   $0x2
c0108179:	ff 75 dc             	pushl  -0x24(%ebp)
c010817c:	e8 dc b4 ff ff       	call   c010365d <free_pages>
c0108181:	83 c4 10             	add    $0x10,%esp
    free_page(p2);
c0108184:	83 ec 08             	sub    $0x8,%esp
c0108187:	6a 01                	push   $0x1
c0108189:	ff 75 c0             	pushl  -0x40(%ebp)
c010818c:	e8 cc b4 ff ff       	call   c010365d <free_pages>
c0108191:	83 c4 10             	add    $0x10,%esp

    assert((p0 = alloc_pages(5)) != NULL);
c0108194:	83 ec 0c             	sub    $0xc,%esp
c0108197:	6a 05                	push   $0x5
c0108199:	e8 53 b4 ff ff       	call   c01035f1 <alloc_pages>
c010819e:	83 c4 10             	add    $0x10,%esp
c01081a1:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01081a4:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01081a8:	75 19                	jne    c01081c3 <default_check+0x474>
c01081aa:	68 18 4b 11 c0       	push   $0xc0114b18
c01081af:	68 ee 47 11 c0       	push   $0xc01147ee
c01081b4:	68 1c 01 00 00       	push   $0x11c
c01081b9:	68 03 48 11 c0       	push   $0xc0114803
c01081be:	e8 22 83 ff ff       	call   c01004e5 <__panic>
    assert(alloc_page() == NULL);
c01081c3:	83 ec 0c             	sub    $0xc,%esp
c01081c6:	6a 01                	push   $0x1
c01081c8:	e8 24 b4 ff ff       	call   c01035f1 <alloc_pages>
c01081cd:	83 c4 10             	add    $0x10,%esp
c01081d0:	85 c0                	test   %eax,%eax
c01081d2:	74 19                	je     c01081ed <default_check+0x49e>
c01081d4:	68 76 49 11 c0       	push   $0xc0114976
c01081d9:	68 ee 47 11 c0       	push   $0xc01147ee
c01081de:	68 1d 01 00 00       	push   $0x11d
c01081e3:	68 03 48 11 c0       	push   $0xc0114803
c01081e8:	e8 f8 82 ff ff       	call   c01004e5 <__panic>

    assert(nr_free == 0);
c01081ed:	a1 f4 21 15 c0       	mov    0xc01521f4,%eax
c01081f2:	85 c0                	test   %eax,%eax
c01081f4:	74 19                	je     c010820f <default_check+0x4c0>
c01081f6:	68 c9 49 11 c0       	push   $0xc01149c9
c01081fb:	68 ee 47 11 c0       	push   $0xc01147ee
c0108200:	68 1f 01 00 00       	push   $0x11f
c0108205:	68 03 48 11 c0       	push   $0xc0114803
c010820a:	e8 d6 82 ff ff       	call   c01004e5 <__panic>
    nr_free = nr_free_store;
c010820f:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0108212:	a3 f4 21 15 c0       	mov    %eax,0xc01521f4

    free_list = free_list_store;
c0108217:	8b 45 80             	mov    -0x80(%ebp),%eax
c010821a:	8b 55 84             	mov    -0x7c(%ebp),%edx
c010821d:	a3 ec 21 15 c0       	mov    %eax,0xc01521ec
c0108222:	89 15 f0 21 15 c0    	mov    %edx,0xc01521f0
    free_pages(p0, 5);
c0108228:	83 ec 08             	sub    $0x8,%esp
c010822b:	6a 05                	push   $0x5
c010822d:	ff 75 dc             	pushl  -0x24(%ebp)
c0108230:	e8 28 b4 ff ff       	call   c010365d <free_pages>
c0108235:	83 c4 10             	add    $0x10,%esp

    le = &free_list;
c0108238:	c7 45 ec ec 21 15 c0 	movl   $0xc01521ec,-0x14(%ebp)
    while ((le = list_next(le)) != &free_list) {
c010823f:	eb 1d                	jmp    c010825e <default_check+0x50f>
        struct Page *p = le2page(le, page_link);
c0108241:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108244:	83 e8 0c             	sub    $0xc,%eax
c0108247:	89 45 b4             	mov    %eax,-0x4c(%ebp)
        count --, total -= p->property;
c010824a:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
c010824e:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0108251:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c0108254:	8b 40 08             	mov    0x8(%eax),%eax
c0108257:	29 c2                	sub    %eax,%edx
c0108259:	89 d0                	mov    %edx,%eax
c010825b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010825e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108261:	89 45 b8             	mov    %eax,-0x48(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108264:	8b 45 b8             	mov    -0x48(%ebp),%eax
c0108267:	8b 40 04             	mov    0x4(%eax),%eax

    free_list = free_list_store;
    free_pages(p0, 5);

    le = &free_list;
    while ((le = list_next(le)) != &free_list) {
c010826a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010826d:	81 7d ec ec 21 15 c0 	cmpl   $0xc01521ec,-0x14(%ebp)
c0108274:	75 cb                	jne    c0108241 <default_check+0x4f2>
        struct Page *p = le2page(le, page_link);
        count --, total -= p->property;
    }
    assert(count == 0);
c0108276:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010827a:	74 19                	je     c0108295 <default_check+0x546>
c010827c:	68 36 4b 11 c0       	push   $0xc0114b36
c0108281:	68 ee 47 11 c0       	push   $0xc01147ee
c0108286:	68 2a 01 00 00       	push   $0x12a
c010828b:	68 03 48 11 c0       	push   $0xc0114803
c0108290:	e8 50 82 ff ff       	call   c01004e5 <__panic>
    assert(total == 0);
c0108295:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108299:	74 19                	je     c01082b4 <default_check+0x565>
c010829b:	68 41 4b 11 c0       	push   $0xc0114b41
c01082a0:	68 ee 47 11 c0       	push   $0xc01147ee
c01082a5:	68 2b 01 00 00       	push   $0x12b
c01082aa:	68 03 48 11 c0       	push   $0xc0114803
c01082af:	e8 31 82 ff ff       	call   c01004e5 <__panic>
}
c01082b4:	90                   	nop
c01082b5:	c9                   	leave  
c01082b6:	c3                   	ret    

c01082b7 <phi_test_sema>:
semaphore_t s[N]; /* 每个哲学家一个信号量 */

struct proc_struct *philosopher_proc_sema[N];

void phi_test_sema(i) /* i：哲学家号码从0到N-1 */
{ 
c01082b7:	55                   	push   %ebp
c01082b8:	89 e5                	mov    %esp,%ebp
c01082ba:	83 ec 08             	sub    $0x8,%esp
    if(state_sema[i]==HUNGRY&&state_sema[LEFT]!=EATING
c01082bd:	8b 45 08             	mov    0x8(%ebp),%eax
c01082c0:	8b 04 85 00 22 15 c0 	mov    -0x3feade00(,%eax,4),%eax
c01082c7:	83 f8 01             	cmp    $0x1,%eax
c01082ca:	0f 85 8d 00 00 00    	jne    c010835d <phi_test_sema+0xa6>
c01082d0:	8b 45 08             	mov    0x8(%ebp),%eax
c01082d3:	8d 48 04             	lea    0x4(%eax),%ecx
c01082d6:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01082db:	89 c8                	mov    %ecx,%eax
c01082dd:	f7 ea                	imul   %edx
c01082df:	d1 fa                	sar    %edx
c01082e1:	89 c8                	mov    %ecx,%eax
c01082e3:	c1 f8 1f             	sar    $0x1f,%eax
c01082e6:	29 c2                	sub    %eax,%edx
c01082e8:	89 d0                	mov    %edx,%eax
c01082ea:	89 c2                	mov    %eax,%edx
c01082ec:	c1 e2 02             	shl    $0x2,%edx
c01082ef:	01 c2                	add    %eax,%edx
c01082f1:	89 c8                	mov    %ecx,%eax
c01082f3:	29 d0                	sub    %edx,%eax
c01082f5:	8b 04 85 00 22 15 c0 	mov    -0x3feade00(,%eax,4),%eax
c01082fc:	83 f8 02             	cmp    $0x2,%eax
c01082ff:	74 5c                	je     c010835d <phi_test_sema+0xa6>
            &&state_sema[RIGHT]!=EATING)
c0108301:	8b 45 08             	mov    0x8(%ebp),%eax
c0108304:	8d 48 01             	lea    0x1(%eax),%ecx
c0108307:	ba 67 66 66 66       	mov    $0x66666667,%edx
c010830c:	89 c8                	mov    %ecx,%eax
c010830e:	f7 ea                	imul   %edx
c0108310:	d1 fa                	sar    %edx
c0108312:	89 c8                	mov    %ecx,%eax
c0108314:	c1 f8 1f             	sar    $0x1f,%eax
c0108317:	29 c2                	sub    %eax,%edx
c0108319:	89 d0                	mov    %edx,%eax
c010831b:	89 c2                	mov    %eax,%edx
c010831d:	c1 e2 02             	shl    $0x2,%edx
c0108320:	01 c2                	add    %eax,%edx
c0108322:	89 c8                	mov    %ecx,%eax
c0108324:	29 d0                	sub    %edx,%eax
c0108326:	8b 04 85 00 22 15 c0 	mov    -0x3feade00(,%eax,4),%eax
c010832d:	83 f8 02             	cmp    $0x2,%eax
c0108330:	74 2b                	je     c010835d <phi_test_sema+0xa6>
    {
        state_sema[i]=EATING;
c0108332:	8b 45 08             	mov    0x8(%ebp),%eax
c0108335:	c7 04 85 00 22 15 c0 	movl   $0x2,-0x3feade00(,%eax,4)
c010833c:	02 00 00 00 
        up(&s[i]);
c0108340:	8b 55 08             	mov    0x8(%ebp),%edx
c0108343:	89 d0                	mov    %edx,%eax
c0108345:	01 c0                	add    %eax,%eax
c0108347:	01 d0                	add    %edx,%eax
c0108349:	c1 e0 02             	shl    $0x2,%eax
c010834c:	05 a0 22 15 c0       	add    $0xc01522a0,%eax
c0108351:	83 ec 0c             	sub    $0xc,%esp
c0108354:	50                   	push   %eax
c0108355:	e8 25 0b 00 00       	call   c0108e7f <up>
c010835a:	83 c4 10             	add    $0x10,%esp
    }
}
c010835d:	90                   	nop
c010835e:	c9                   	leave  
c010835f:	c3                   	ret    

c0108360 <phi_take_forks_sema>:

void phi_take_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c0108360:	55                   	push   %ebp
c0108361:	89 e5                	mov    %esp,%ebp
c0108363:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c0108366:	83 ec 0c             	sub    $0xc,%esp
c0108369:	68 28 22 15 c0       	push   $0xc0152228
c010836e:	e8 28 0b 00 00       	call   c0108e9b <down>
c0108373:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=HUNGRY; /* 记录下哲学家i饥饿的事实 */
c0108376:	8b 45 08             	mov    0x8(%ebp),%eax
c0108379:	c7 04 85 00 22 15 c0 	movl   $0x1,-0x3feade00(,%eax,4)
c0108380:	01 00 00 00 
        phi_test_sema(i); /* 试图得到两只叉子 */
c0108384:	83 ec 0c             	sub    $0xc,%esp
c0108387:	ff 75 08             	pushl  0x8(%ebp)
c010838a:	e8 28 ff ff ff       	call   c01082b7 <phi_test_sema>
c010838f:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108392:	83 ec 0c             	sub    $0xc,%esp
c0108395:	68 28 22 15 c0       	push   $0xc0152228
c010839a:	e8 e0 0a 00 00       	call   c0108e7f <up>
c010839f:	83 c4 10             	add    $0x10,%esp
        down(&s[i]); /* 如果得不到叉子就阻塞 */
c01083a2:	8b 55 08             	mov    0x8(%ebp),%edx
c01083a5:	89 d0                	mov    %edx,%eax
c01083a7:	01 c0                	add    %eax,%eax
c01083a9:	01 d0                	add    %edx,%eax
c01083ab:	c1 e0 02             	shl    $0x2,%eax
c01083ae:	05 a0 22 15 c0       	add    $0xc01522a0,%eax
c01083b3:	83 ec 0c             	sub    $0xc,%esp
c01083b6:	50                   	push   %eax
c01083b7:	e8 df 0a 00 00       	call   c0108e9b <down>
c01083bc:	83 c4 10             	add    $0x10,%esp
}
c01083bf:	90                   	nop
c01083c0:	c9                   	leave  
c01083c1:	c3                   	ret    

c01083c2 <phi_put_forks_sema>:

void phi_put_forks_sema(int i) /* i：哲学家号码从0到N-1 */
{ 
c01083c2:	55                   	push   %ebp
c01083c3:	89 e5                	mov    %esp,%ebp
c01083c5:	83 ec 08             	sub    $0x8,%esp
        down(&mutex); /* 进入临界区 */
c01083c8:	83 ec 0c             	sub    $0xc,%esp
c01083cb:	68 28 22 15 c0       	push   $0xc0152228
c01083d0:	e8 c6 0a 00 00       	call   c0108e9b <down>
c01083d5:	83 c4 10             	add    $0x10,%esp
        state_sema[i]=THINKING; /* 哲学家进餐结束 */
c01083d8:	8b 45 08             	mov    0x8(%ebp),%eax
c01083db:	c7 04 85 00 22 15 c0 	movl   $0x0,-0x3feade00(,%eax,4)
c01083e2:	00 00 00 00 
        phi_test_sema(LEFT); /* 看一下左邻居现在是否能进餐 */
c01083e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01083e9:	8d 48 04             	lea    0x4(%eax),%ecx
c01083ec:	ba 67 66 66 66       	mov    $0x66666667,%edx
c01083f1:	89 c8                	mov    %ecx,%eax
c01083f3:	f7 ea                	imul   %edx
c01083f5:	d1 fa                	sar    %edx
c01083f7:	89 c8                	mov    %ecx,%eax
c01083f9:	c1 f8 1f             	sar    $0x1f,%eax
c01083fc:	29 c2                	sub    %eax,%edx
c01083fe:	89 d0                	mov    %edx,%eax
c0108400:	89 c2                	mov    %eax,%edx
c0108402:	c1 e2 02             	shl    $0x2,%edx
c0108405:	01 c2                	add    %eax,%edx
c0108407:	89 c8                	mov    %ecx,%eax
c0108409:	29 d0                	sub    %edx,%eax
c010840b:	83 ec 0c             	sub    $0xc,%esp
c010840e:	50                   	push   %eax
c010840f:	e8 a3 fe ff ff       	call   c01082b7 <phi_test_sema>
c0108414:	83 c4 10             	add    $0x10,%esp
        phi_test_sema(RIGHT); /* 看一下右邻居现在是否能进餐 */
c0108417:	8b 45 08             	mov    0x8(%ebp),%eax
c010841a:	8d 48 01             	lea    0x1(%eax),%ecx
c010841d:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108422:	89 c8                	mov    %ecx,%eax
c0108424:	f7 ea                	imul   %edx
c0108426:	d1 fa                	sar    %edx
c0108428:	89 c8                	mov    %ecx,%eax
c010842a:	c1 f8 1f             	sar    $0x1f,%eax
c010842d:	29 c2                	sub    %eax,%edx
c010842f:	89 d0                	mov    %edx,%eax
c0108431:	89 c2                	mov    %eax,%edx
c0108433:	c1 e2 02             	shl    $0x2,%edx
c0108436:	01 c2                	add    %eax,%edx
c0108438:	89 c8                	mov    %ecx,%eax
c010843a:	29 d0                	sub    %edx,%eax
c010843c:	83 ec 0c             	sub    $0xc,%esp
c010843f:	50                   	push   %eax
c0108440:	e8 72 fe ff ff       	call   c01082b7 <phi_test_sema>
c0108445:	83 c4 10             	add    $0x10,%esp
        up(&mutex); /* 离开临界区 */
c0108448:	83 ec 0c             	sub    $0xc,%esp
c010844b:	68 28 22 15 c0       	push   $0xc0152228
c0108450:	e8 2a 0a 00 00       	call   c0108e7f <up>
c0108455:	83 c4 10             	add    $0x10,%esp
}
c0108458:	90                   	nop
c0108459:	c9                   	leave  
c010845a:	c3                   	ret    

c010845b <philosopher_using_semaphore>:

int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
c010845b:	55                   	push   %ebp
c010845c:	89 e5                	mov    %esp,%ebp
c010845e:	83 ec 18             	sub    $0x18,%esp
    int i, iter=0;
c0108461:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c0108468:	8b 45 08             	mov    0x8(%ebp),%eax
c010846b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_sema\n",i);
c010846e:	83 ec 08             	sub    $0x8,%esp
c0108471:	ff 75 f0             	pushl  -0x10(%ebp)
c0108474:	68 7c 4b 11 c0       	push   $0xc0114b7c
c0108479:	e8 01 7f ff ff       	call   c010037f <cprintf>
c010847e:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c0108481:	eb 62                	jmp    c01084e5 <philosopher_using_semaphore+0x8a>
    { /* 无限循环 */
        cprintf("Iter %d, No.%d philosopher_sema is thinking\n",iter,i); /* 哲学家正在思考 */
c0108483:	83 ec 04             	sub    $0x4,%esp
c0108486:	ff 75 f0             	pushl  -0x10(%ebp)
c0108489:	ff 75 f4             	pushl  -0xc(%ebp)
c010848c:	68 9c 4b 11 c0       	push   $0xc0114b9c
c0108491:	e8 e9 7e ff ff       	call   c010037f <cprintf>
c0108496:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c0108499:	83 ec 0c             	sub    $0xc,%esp
c010849c:	6a 0a                	push   $0xa
c010849e:	e8 9f 3d 00 00       	call   c010c242 <do_sleep>
c01084a3:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_sema(i); 
c01084a6:	83 ec 0c             	sub    $0xc,%esp
c01084a9:	ff 75 f0             	pushl  -0x10(%ebp)
c01084ac:	e8 af fe ff ff       	call   c0108360 <phi_take_forks_sema>
c01084b1:	83 c4 10             	add    $0x10,%esp
        /* 需要两只叉子，或者阻塞 */
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
c01084b4:	83 ec 04             	sub    $0x4,%esp
c01084b7:	ff 75 f0             	pushl  -0x10(%ebp)
c01084ba:	ff 75 f4             	pushl  -0xc(%ebp)
c01084bd:	68 cc 4b 11 c0       	push   $0xc0114bcc
c01084c2:	e8 b8 7e ff ff       	call   c010037f <cprintf>
c01084c7:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c01084ca:	83 ec 0c             	sub    $0xc,%esp
c01084cd:	6a 0a                	push   $0xa
c01084cf:	e8 6e 3d 00 00       	call   c010c242 <do_sleep>
c01084d4:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_sema(i); 
c01084d7:	83 ec 0c             	sub    $0xc,%esp
c01084da:	ff 75 f0             	pushl  -0x10(%ebp)
c01084dd:	e8 e0 fe ff ff       	call   c01083c2 <phi_put_forks_sema>
c01084e2:	83 c4 10             	add    $0x10,%esp
int philosopher_using_semaphore(void * arg) /* i：哲学家号码，从0到N-1 */
{
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_sema\n",i);
    while(iter++<TIMES)
c01084e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01084e8:	8d 50 01             	lea    0x1(%eax),%edx
c01084eb:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01084ee:	83 f8 03             	cmp    $0x3,%eax
c01084f1:	7e 90                	jle    c0108483 <philosopher_using_semaphore+0x28>
        cprintf("Iter %d, No.%d philosopher_sema is eating\n",iter,i); /* 进餐 */
        do_sleep(SLEEP_TIME);
        phi_put_forks_sema(i); 
        /* 把两把叉子同时放回桌子 */
    }
    cprintf("No.%d philosopher_sema quit\n",i);
c01084f3:	83 ec 08             	sub    $0x8,%esp
c01084f6:	ff 75 f0             	pushl  -0x10(%ebp)
c01084f9:	68 f7 4b 11 c0       	push   $0xc0114bf7
c01084fe:	e8 7c 7e ff ff       	call   c010037f <cprintf>
c0108503:	83 c4 10             	add    $0x10,%esp
    return 0;    
c0108506:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010850b:	c9                   	leave  
c010850c:	c3                   	ret    

c010850d <phi_test_condvar>:

struct proc_struct *philosopher_proc_condvar[N]; // N philosopher
int state_condvar[N];                            // the philosopher's state: EATING, HUNGARY, THINKING  
monitor_t mt, *mtp=&mt;                          // monitor

void phi_test_condvar (i) { 
c010850d:	55                   	push   %ebp
c010850e:	89 e5                	mov    %esp,%ebp
c0108510:	83 ec 08             	sub    $0x8,%esp
    if(state_condvar[i]==HUNGRY&&state_condvar[LEFT]!=EATING
c0108513:	8b 45 08             	mov    0x8(%ebp),%eax
c0108516:	8b 04 85 60 22 15 c0 	mov    -0x3feadda0(,%eax,4),%eax
c010851d:	83 f8 01             	cmp    $0x1,%eax
c0108520:	0f 85 bd 00 00 00    	jne    c01085e3 <phi_test_condvar+0xd6>
c0108526:	8b 45 08             	mov    0x8(%ebp),%eax
c0108529:	8d 48 04             	lea    0x4(%eax),%ecx
c010852c:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108531:	89 c8                	mov    %ecx,%eax
c0108533:	f7 ea                	imul   %edx
c0108535:	d1 fa                	sar    %edx
c0108537:	89 c8                	mov    %ecx,%eax
c0108539:	c1 f8 1f             	sar    $0x1f,%eax
c010853c:	29 c2                	sub    %eax,%edx
c010853e:	89 d0                	mov    %edx,%eax
c0108540:	89 c2                	mov    %eax,%edx
c0108542:	c1 e2 02             	shl    $0x2,%edx
c0108545:	01 c2                	add    %eax,%edx
c0108547:	89 c8                	mov    %ecx,%eax
c0108549:	29 d0                	sub    %edx,%eax
c010854b:	8b 04 85 60 22 15 c0 	mov    -0x3feadda0(,%eax,4),%eax
c0108552:	83 f8 02             	cmp    $0x2,%eax
c0108555:	0f 84 88 00 00 00    	je     c01085e3 <phi_test_condvar+0xd6>
            &&state_condvar[RIGHT]!=EATING) {
c010855b:	8b 45 08             	mov    0x8(%ebp),%eax
c010855e:	8d 48 01             	lea    0x1(%eax),%ecx
c0108561:	ba 67 66 66 66       	mov    $0x66666667,%edx
c0108566:	89 c8                	mov    %ecx,%eax
c0108568:	f7 ea                	imul   %edx
c010856a:	d1 fa                	sar    %edx
c010856c:	89 c8                	mov    %ecx,%eax
c010856e:	c1 f8 1f             	sar    $0x1f,%eax
c0108571:	29 c2                	sub    %eax,%edx
c0108573:	89 d0                	mov    %edx,%eax
c0108575:	89 c2                	mov    %eax,%edx
c0108577:	c1 e2 02             	shl    $0x2,%edx
c010857a:	01 c2                	add    %eax,%edx
c010857c:	89 c8                	mov    %ecx,%eax
c010857e:	29 d0                	sub    %edx,%eax
c0108580:	8b 04 85 60 22 15 c0 	mov    -0x3feadda0(,%eax,4),%eax
c0108587:	83 f8 02             	cmp    $0x2,%eax
c010858a:	74 57                	je     c01085e3 <phi_test_condvar+0xd6>
        cprintf("phi_test_condvar: state_condvar[%d] will eating\n",i);
c010858c:	83 ec 08             	sub    $0x8,%esp
c010858f:	ff 75 08             	pushl  0x8(%ebp)
c0108592:	68 14 4c 11 c0       	push   $0xc0114c14
c0108597:	e8 e3 7d ff ff       	call   c010037f <cprintf>
c010859c:	83 c4 10             	add    $0x10,%esp
        state_condvar[i] = EATING ;
c010859f:	8b 45 08             	mov    0x8(%ebp),%eax
c01085a2:	c7 04 85 60 22 15 c0 	movl   $0x2,-0x3feadda0(,%eax,4)
c01085a9:	02 00 00 00 
        cprintf("phi_test_condvar: signal self_cv[%d] \n",i);
c01085ad:	83 ec 08             	sub    $0x8,%esp
c01085b0:	ff 75 08             	pushl  0x8(%ebp)
c01085b3:	68 48 4c 11 c0       	push   $0xc0114c48
c01085b8:	e8 c2 7d ff ff       	call   c010037f <cprintf>
c01085bd:	83 c4 10             	add    $0x10,%esp
        cond_signal(&mtp->cv[i]) ;
c01085c0:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c01085c5:	8b 48 1c             	mov    0x1c(%eax),%ecx
c01085c8:	8b 55 08             	mov    0x8(%ebp),%edx
c01085cb:	89 d0                	mov    %edx,%eax
c01085cd:	c1 e0 02             	shl    $0x2,%eax
c01085d0:	01 d0                	add    %edx,%eax
c01085d2:	c1 e0 02             	shl    $0x2,%eax
c01085d5:	01 c8                	add    %ecx,%eax
c01085d7:	83 ec 0c             	sub    $0xc,%esp
c01085da:	50                   	push   %eax
c01085db:	e8 4a 0a 00 00       	call   c010902a <cond_signal>
c01085e0:	83 c4 10             	add    $0x10,%esp
    }
}
c01085e3:	90                   	nop
c01085e4:	c9                   	leave  
c01085e5:	c3                   	ret    

c01085e6 <phi_take_forks_condvar>:


void phi_take_forks_condvar(int i) {
c01085e6:	55                   	push   %ebp
c01085e7:	89 e5                	mov    %esp,%ebp
c01085e9:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c01085ec:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c01085f1:	83 ec 0c             	sub    $0xc,%esp
c01085f4:	50                   	push   %eax
c01085f5:	e8 a1 08 00 00       	call   c0108e9b <down>
c01085fa:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I am hungry
     // try to get fork
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
c01085fd:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c0108602:	8b 40 18             	mov    0x18(%eax),%eax
c0108605:	85 c0                	test   %eax,%eax
c0108607:	7e 16                	jle    c010861f <phi_take_forks_condvar+0x39>
         up(&(mtp->next));
c0108609:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c010860e:	83 c0 0c             	add    $0xc,%eax
c0108611:	83 ec 0c             	sub    $0xc,%esp
c0108614:	50                   	push   %eax
c0108615:	e8 65 08 00 00       	call   c0108e7f <up>
c010861a:	83 c4 10             	add    $0x10,%esp
      else
         up(&(mtp->mutex));
}
c010861d:	eb 11                	jmp    c0108630 <phi_take_forks_condvar+0x4a>
     // try to get fork
//--------leave routine in monitor--------------
      if(mtp->next_count>0)
         up(&(mtp->next));
      else
         up(&(mtp->mutex));
c010861f:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c0108624:	83 ec 0c             	sub    $0xc,%esp
c0108627:	50                   	push   %eax
c0108628:	e8 52 08 00 00       	call   c0108e7f <up>
c010862d:	83 c4 10             	add    $0x10,%esp
}
c0108630:	90                   	nop
c0108631:	c9                   	leave  
c0108632:	c3                   	ret    

c0108633 <phi_put_forks_condvar>:

void phi_put_forks_condvar(int i) {
c0108633:	55                   	push   %ebp
c0108634:	89 e5                	mov    %esp,%ebp
c0108636:	83 ec 08             	sub    $0x8,%esp
     down(&(mtp->mutex));
c0108639:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c010863e:	83 ec 0c             	sub    $0xc,%esp
c0108641:	50                   	push   %eax
c0108642:	e8 54 08 00 00       	call   c0108e9b <down>
c0108647:	83 c4 10             	add    $0x10,%esp
//--------into routine in monitor--------------
     // LAB7 EXERCISE1: YOUR CODE
     // I ate over
     // test left and right neighbors
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
c010864a:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c010864f:	8b 40 18             	mov    0x18(%eax),%eax
c0108652:	85 c0                	test   %eax,%eax
c0108654:	7e 16                	jle    c010866c <phi_put_forks_condvar+0x39>
        up(&(mtp->next));
c0108656:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c010865b:	83 c0 0c             	add    $0xc,%eax
c010865e:	83 ec 0c             	sub    $0xc,%esp
c0108661:	50                   	push   %eax
c0108662:	e8 18 08 00 00       	call   c0108e7f <up>
c0108667:	83 c4 10             	add    $0x10,%esp
     else
        up(&(mtp->mutex));
}
c010866a:	eb 11                	jmp    c010867d <phi_put_forks_condvar+0x4a>
     // test left and right neighbors
//--------leave routine in monitor--------------
     if(mtp->next_count>0)
        up(&(mtp->next));
     else
        up(&(mtp->mutex));
c010866c:	a1 80 ba 14 c0       	mov    0xc014ba80,%eax
c0108671:	83 ec 0c             	sub    $0xc,%esp
c0108674:	50                   	push   %eax
c0108675:	e8 05 08 00 00       	call   c0108e7f <up>
c010867a:	83 c4 10             	add    $0x10,%esp
}
c010867d:	90                   	nop
c010867e:	c9                   	leave  
c010867f:	c3                   	ret    

c0108680 <philosopher_using_condvar>:

//---------- philosophers using monitor (condition variable) ----------------------
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
c0108680:	55                   	push   %ebp
c0108681:	89 e5                	mov    %esp,%ebp
c0108683:	83 ec 18             	sub    $0x18,%esp
  
    int i, iter=0;
c0108686:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    i=(int)arg;
c010868d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108690:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cprintf("I am No.%d philosopher_condvar\n",i);
c0108693:	83 ec 08             	sub    $0x8,%esp
c0108696:	ff 75 f0             	pushl  -0x10(%ebp)
c0108699:	68 70 4c 11 c0       	push   $0xc0114c70
c010869e:	e8 dc 7c ff ff       	call   c010037f <cprintf>
c01086a3:	83 c4 10             	add    $0x10,%esp
    while(iter++<TIMES)
c01086a6:	eb 62                	jmp    c010870a <philosopher_using_condvar+0x8a>
    { /* iterate*/
        cprintf("Iter %d, No.%d philosopher_condvar is thinking\n",iter,i); /* thinking*/
c01086a8:	83 ec 04             	sub    $0x4,%esp
c01086ab:	ff 75 f0             	pushl  -0x10(%ebp)
c01086ae:	ff 75 f4             	pushl  -0xc(%ebp)
c01086b1:	68 90 4c 11 c0       	push   $0xc0114c90
c01086b6:	e8 c4 7c ff ff       	call   c010037f <cprintf>
c01086bb:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c01086be:	83 ec 0c             	sub    $0xc,%esp
c01086c1:	6a 0a                	push   $0xa
c01086c3:	e8 7a 3b 00 00       	call   c010c242 <do_sleep>
c01086c8:	83 c4 10             	add    $0x10,%esp
        phi_take_forks_condvar(i); 
c01086cb:	83 ec 0c             	sub    $0xc,%esp
c01086ce:	ff 75 f0             	pushl  -0x10(%ebp)
c01086d1:	e8 10 ff ff ff       	call   c01085e6 <phi_take_forks_condvar>
c01086d6:	83 c4 10             	add    $0x10,%esp
        /* need two forks, maybe blocked */
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
c01086d9:	83 ec 04             	sub    $0x4,%esp
c01086dc:	ff 75 f0             	pushl  -0x10(%ebp)
c01086df:	ff 75 f4             	pushl  -0xc(%ebp)
c01086e2:	68 c0 4c 11 c0       	push   $0xc0114cc0
c01086e7:	e8 93 7c ff ff       	call   c010037f <cprintf>
c01086ec:	83 c4 10             	add    $0x10,%esp
        do_sleep(SLEEP_TIME);
c01086ef:	83 ec 0c             	sub    $0xc,%esp
c01086f2:	6a 0a                	push   $0xa
c01086f4:	e8 49 3b 00 00       	call   c010c242 <do_sleep>
c01086f9:	83 c4 10             	add    $0x10,%esp
        phi_put_forks_condvar(i); 
c01086fc:	83 ec 0c             	sub    $0xc,%esp
c01086ff:	ff 75 f0             	pushl  -0x10(%ebp)
c0108702:	e8 2c ff ff ff       	call   c0108633 <phi_put_forks_condvar>
c0108707:	83 c4 10             	add    $0x10,%esp
int philosopher_using_condvar(void * arg) { /* arg is the No. of philosopher 0~N-1*/
  
    int i, iter=0;
    i=(int)arg;
    cprintf("I am No.%d philosopher_condvar\n",i);
    while(iter++<TIMES)
c010870a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010870d:	8d 50 01             	lea    0x1(%eax),%edx
c0108710:	89 55 f4             	mov    %edx,-0xc(%ebp)
c0108713:	83 f8 03             	cmp    $0x3,%eax
c0108716:	7e 90                	jle    c01086a8 <philosopher_using_condvar+0x28>
        cprintf("Iter %d, No.%d philosopher_condvar is eating\n",iter,i); /* eating*/
        do_sleep(SLEEP_TIME);
        phi_put_forks_condvar(i); 
        /* return two forks back*/
    }
    cprintf("No.%d philosopher_condvar quit\n",i);
c0108718:	83 ec 08             	sub    $0x8,%esp
c010871b:	ff 75 f0             	pushl  -0x10(%ebp)
c010871e:	68 f0 4c 11 c0       	push   $0xc0114cf0
c0108723:	e8 57 7c ff ff       	call   c010037f <cprintf>
c0108728:	83 c4 10             	add    $0x10,%esp
    return 0;    
c010872b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108730:	c9                   	leave  
c0108731:	c3                   	ret    

c0108732 <check_sync>:

void check_sync(void){
c0108732:	55                   	push   %ebp
c0108733:	89 e5                	mov    %esp,%ebp
c0108735:	83 ec 18             	sub    $0x18,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
c0108738:	83 ec 08             	sub    $0x8,%esp
c010873b:	6a 01                	push   $0x1
c010873d:	68 28 22 15 c0       	push   $0xc0152228
c0108742:	e8 cb 05 00 00       	call   c0108d12 <sem_init>
c0108747:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c010874a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108751:	e9 8e 00 00 00       	jmp    c01087e4 <check_sync+0xb2>
        sem_init(&s[i], 0);
c0108756:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108759:	89 d0                	mov    %edx,%eax
c010875b:	01 c0                	add    %eax,%eax
c010875d:	01 d0                	add    %edx,%eax
c010875f:	c1 e0 02             	shl    $0x2,%eax
c0108762:	05 a0 22 15 c0       	add    $0xc01522a0,%eax
c0108767:	83 ec 08             	sub    $0x8,%esp
c010876a:	6a 00                	push   $0x0
c010876c:	50                   	push   %eax
c010876d:	e8 a0 05 00 00       	call   c0108d12 <sem_init>
c0108772:	83 c4 10             	add    $0x10,%esp
        int pid = kernel_thread(philosopher_using_semaphore, (void *)i, 0);
c0108775:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108778:	83 ec 04             	sub    $0x4,%esp
c010877b:	6a 00                	push   $0x0
c010877d:	50                   	push   %eax
c010877e:	68 5b 84 10 c0       	push   $0xc010845b
c0108783:	e8 45 2a 00 00       	call   c010b1cd <kernel_thread>
c0108788:	83 c4 10             	add    $0x10,%esp
c010878b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid <= 0) {
c010878e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108792:	7f 17                	jg     c01087ab <check_sync+0x79>
            panic("create No.%d philosopher_using_semaphore failed.\n");
c0108794:	83 ec 04             	sub    $0x4,%esp
c0108797:	68 10 4d 11 c0       	push   $0xc0114d10
c010879c:	68 ef 00 00 00       	push   $0xef
c01087a1:	68 42 4d 11 c0       	push   $0xc0114d42
c01087a6:	e8 3a 7d ff ff       	call   c01004e5 <__panic>
        }
        philosopher_proc_sema[i] = find_proc(pid);
c01087ab:	83 ec 0c             	sub    $0xc,%esp
c01087ae:	ff 75 f0             	pushl  -0x10(%ebp)
c01087b1:	e8 a5 29 00 00       	call   c010b15b <find_proc>
c01087b6:	83 c4 10             	add    $0x10,%esp
c01087b9:	89 c2                	mov    %eax,%edx
c01087bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087be:	89 14 85 74 22 15 c0 	mov    %edx,-0x3feadd8c(,%eax,4)
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
c01087c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01087c8:	8b 04 85 74 22 15 c0 	mov    -0x3feadd8c(,%eax,4),%eax
c01087cf:	83 ec 08             	sub    $0x8,%esp
c01087d2:	68 59 4d 11 c0       	push   $0xc0114d59
c01087d7:	50                   	push   %eax
c01087d8:	e8 71 25 00 00       	call   c010ad4e <set_proc_name>
c01087dd:	83 c4 10             	add    $0x10,%esp

    int i;

    //check semaphore
    sem_init(&mutex, 1);
    for(i=0;i<N;i++){
c01087e0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c01087e4:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c01087e8:	0f 8e 68 ff ff ff    	jle    c0108756 <check_sync+0x24>
        philosopher_proc_sema[i] = find_proc(pid);
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
c01087ee:	83 ec 08             	sub    $0x8,%esp
c01087f1:	6a 05                	push   $0x5
c01087f3:	68 40 22 15 c0       	push   $0xc0152240
c01087f8:	e8 1e 07 00 00       	call   c0108f1b <monitor_init>
c01087fd:	83 c4 10             	add    $0x10,%esp
    for(i=0;i<N;i++){
c0108800:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108807:	eb 7d                	jmp    c0108886 <check_sync+0x154>
        state_condvar[i]=THINKING;
c0108809:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010880c:	c7 04 85 60 22 15 c0 	movl   $0x0,-0x3feadda0(,%eax,4)
c0108813:	00 00 00 00 
        int pid = kernel_thread(philosopher_using_condvar, (void *)i, 0);
c0108817:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010881a:	83 ec 04             	sub    $0x4,%esp
c010881d:	6a 00                	push   $0x0
c010881f:	50                   	push   %eax
c0108820:	68 80 86 10 c0       	push   $0xc0108680
c0108825:	e8 a3 29 00 00       	call   c010b1cd <kernel_thread>
c010882a:	83 c4 10             	add    $0x10,%esp
c010882d:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pid <= 0) {
c0108830:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0108834:	7f 17                	jg     c010884d <check_sync+0x11b>
            panic("create No.%d philosopher_using_condvar failed.\n");
c0108836:	83 ec 04             	sub    $0x4,%esp
c0108839:	68 70 4d 11 c0       	push   $0xc0114d70
c010883e:	68 fb 00 00 00       	push   $0xfb
c0108843:	68 42 4d 11 c0       	push   $0xc0114d42
c0108848:	e8 98 7c ff ff       	call   c01004e5 <__panic>
        }
        philosopher_proc_condvar[i] = find_proc(pid);
c010884d:	83 ec 0c             	sub    $0xc,%esp
c0108850:	ff 75 ec             	pushl  -0x14(%ebp)
c0108853:	e8 03 29 00 00       	call   c010b15b <find_proc>
c0108858:	83 c4 10             	add    $0x10,%esp
c010885b:	89 c2                	mov    %eax,%edx
c010885d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108860:	89 14 85 14 22 15 c0 	mov    %edx,-0x3feaddec(,%eax,4)
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
c0108867:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010886a:	8b 04 85 14 22 15 c0 	mov    -0x3feaddec(,%eax,4),%eax
c0108871:	83 ec 08             	sub    $0x8,%esp
c0108874:	68 a0 4d 11 c0       	push   $0xc0114da0
c0108879:	50                   	push   %eax
c010887a:	e8 cf 24 00 00       	call   c010ad4e <set_proc_name>
c010887f:	83 c4 10             	add    $0x10,%esp
        set_proc_name(philosopher_proc_sema[i], "philosopher_sema_proc");
    }

    //check condition variable
    monitor_init(&mt, N);
    for(i=0;i<N;i++){
c0108882:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0108886:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
c010888a:	0f 8e 79 ff ff ff    	jle    c0108809 <check_sync+0xd7>
            panic("create No.%d philosopher_using_condvar failed.\n");
        }
        philosopher_proc_condvar[i] = find_proc(pid);
        set_proc_name(philosopher_proc_condvar[i], "philosopher_condvar_proc");
    }
}
c0108890:	90                   	nop
c0108891:	c9                   	leave  
c0108892:	c3                   	ret    

c0108893 <wait_init>:
#include <sync.h>
#include <wait.h>
#include <proc.h>

void
wait_init(wait_t *wait, struct proc_struct *proc) {
c0108893:	55                   	push   %ebp
c0108894:	89 e5                	mov    %esp,%ebp
c0108896:	83 ec 10             	sub    $0x10,%esp
    wait->proc = proc;
c0108899:	8b 45 08             	mov    0x8(%ebp),%eax
c010889c:	8b 55 0c             	mov    0xc(%ebp),%edx
c010889f:	89 10                	mov    %edx,(%eax)
    wait->wakeup_flags = WT_INTERRUPTED;
c01088a1:	8b 45 08             	mov    0x8(%ebp),%eax
c01088a4:	c7 40 04 00 00 00 80 	movl   $0x80000000,0x4(%eax)
    list_init(&(wait->wait_link));
c01088ab:	8b 45 08             	mov    0x8(%ebp),%eax
c01088ae:	83 c0 0c             	add    $0xc,%eax
c01088b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01088b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088b7:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01088ba:	89 50 04             	mov    %edx,0x4(%eax)
c01088bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088c0:	8b 50 04             	mov    0x4(%eax),%edx
c01088c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088c6:	89 10                	mov    %edx,(%eax)
}
c01088c8:	90                   	nop
c01088c9:	c9                   	leave  
c01088ca:	c3                   	ret    

c01088cb <wait_queue_init>:

void
wait_queue_init(wait_queue_t *queue) {
c01088cb:	55                   	push   %ebp
c01088cc:	89 e5                	mov    %esp,%ebp
c01088ce:	83 ec 10             	sub    $0x10,%esp
    list_init(&(queue->wait_head));
c01088d1:	8b 45 08             	mov    0x8(%ebp),%eax
c01088d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
c01088d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088da:	8b 55 fc             	mov    -0x4(%ebp),%edx
c01088dd:	89 50 04             	mov    %edx,0x4(%eax)
c01088e0:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088e3:	8b 50 04             	mov    0x4(%eax),%edx
c01088e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01088e9:	89 10                	mov    %edx,(%eax)
}
c01088eb:	90                   	nop
c01088ec:	c9                   	leave  
c01088ed:	c3                   	ret    

c01088ee <wait_queue_add>:

void
wait_queue_add(wait_queue_t *queue, wait_t *wait) {
c01088ee:	55                   	push   %ebp
c01088ef:	89 e5                	mov    %esp,%ebp
c01088f1:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(wait->wait_link)) && wait->proc != NULL);
c01088f4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01088f7:	83 c0 0c             	add    $0xc,%eax
c01088fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c01088fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108900:	8b 40 04             	mov    0x4(%eax),%eax
c0108903:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c0108906:	0f 94 c0             	sete   %al
c0108909:	0f b6 c0             	movzbl %al,%eax
c010890c:	85 c0                	test   %eax,%eax
c010890e:	74 09                	je     c0108919 <wait_queue_add+0x2b>
c0108910:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108913:	8b 00                	mov    (%eax),%eax
c0108915:	85 c0                	test   %eax,%eax
c0108917:	75 16                	jne    c010892f <wait_queue_add+0x41>
c0108919:	68 bc 4d 11 c0       	push   $0xc0114dbc
c010891e:	68 f1 4d 11 c0       	push   $0xc0114df1
c0108923:	6a 15                	push   $0x15
c0108925:	68 06 4e 11 c0       	push   $0xc0114e06
c010892a:	e8 b6 7b ff ff       	call   c01004e5 <__panic>
    wait->wait_queue = queue;
c010892f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108932:	8b 55 08             	mov    0x8(%ebp),%edx
c0108935:	89 50 08             	mov    %edx,0x8(%eax)
    list_add_before(&(queue->wait_head), &(wait->wait_link));
c0108938:	8b 45 0c             	mov    0xc(%ebp),%eax
c010893b:	8d 50 0c             	lea    0xc(%eax),%edx
c010893e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108941:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108944:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c0108947:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010894a:	8b 00                	mov    (%eax),%eax
c010894c:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010894f:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0108952:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0108955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108958:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010895b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010895e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0108961:	89 10                	mov    %edx,(%eax)
c0108963:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108966:	8b 10                	mov    (%eax),%edx
c0108968:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010896b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010896e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0108971:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108974:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c0108977:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010897a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010897d:	89 10                	mov    %edx,(%eax)
}
c010897f:	90                   	nop
c0108980:	c9                   	leave  
c0108981:	c3                   	ret    

c0108982 <wait_queue_del>:

void
wait_queue_del(wait_queue_t *queue, wait_t *wait) {
c0108982:	55                   	push   %ebp
c0108983:	89 e5                	mov    %esp,%ebp
c0108985:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0108988:	8b 45 0c             	mov    0xc(%ebp),%eax
c010898b:	83 c0 0c             	add    $0xc,%eax
c010898e:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108991:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108994:	8b 40 04             	mov    0x4(%eax),%eax
c0108997:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010899a:	0f 94 c0             	sete   %al
c010899d:	0f b6 c0             	movzbl %al,%eax
c01089a0:	85 c0                	test   %eax,%eax
c01089a2:	75 0b                	jne    c01089af <wait_queue_del+0x2d>
c01089a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01089a7:	8b 40 08             	mov    0x8(%eax),%eax
c01089aa:	3b 45 08             	cmp    0x8(%ebp),%eax
c01089ad:	74 16                	je     c01089c5 <wait_queue_del+0x43>
c01089af:	68 18 4e 11 c0       	push   $0xc0114e18
c01089b4:	68 f1 4d 11 c0       	push   $0xc0114df1
c01089b9:	6a 1c                	push   $0x1c
c01089bb:	68 06 4e 11 c0       	push   $0xc0114e06
c01089c0:	e8 20 7b ff ff       	call   c01004e5 <__panic>
    list_del_init(&(wait->wait_link));
c01089c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01089c8:	83 c0 0c             	add    $0xc,%eax
c01089cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01089ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c01089d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01089d7:	8b 40 04             	mov    0x4(%eax),%eax
c01089da:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01089dd:	8b 12                	mov    (%edx),%edx
c01089df:	89 55 e8             	mov    %edx,-0x18(%ebp)
c01089e2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c01089e5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01089e8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01089eb:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c01089ee:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01089f1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c01089f4:	89 10                	mov    %edx,(%eax)
c01089f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01089f9:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c01089fc:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01089ff:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0108a02:	89 50 04             	mov    %edx,0x4(%eax)
c0108a05:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a08:	8b 50 04             	mov    0x4(%eax),%edx
c0108a0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0108a0e:	89 10                	mov    %edx,(%eax)
}
c0108a10:	90                   	nop
c0108a11:	c9                   	leave  
c0108a12:	c3                   	ret    

c0108a13 <wait_queue_next>:

wait_t *
wait_queue_next(wait_queue_t *queue, wait_t *wait) {
c0108a13:	55                   	push   %ebp
c0108a14:	89 e5                	mov    %esp,%ebp
c0108a16:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0108a19:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a1c:	83 c0 0c             	add    $0xc,%eax
c0108a1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108a22:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a25:	8b 40 04             	mov    0x4(%eax),%eax
c0108a28:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108a2b:	0f 94 c0             	sete   %al
c0108a2e:	0f b6 c0             	movzbl %al,%eax
c0108a31:	85 c0                	test   %eax,%eax
c0108a33:	75 0b                	jne    c0108a40 <wait_queue_next+0x2d>
c0108a35:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a38:	8b 40 08             	mov    0x8(%eax),%eax
c0108a3b:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108a3e:	74 16                	je     c0108a56 <wait_queue_next+0x43>
c0108a40:	68 18 4e 11 c0       	push   $0xc0114e18
c0108a45:	68 f1 4d 11 c0       	push   $0xc0114df1
c0108a4a:	6a 22                	push   $0x22
c0108a4c:	68 06 4e 11 c0       	push   $0xc0114e06
c0108a51:	e8 8f 7a ff ff       	call   c01004e5 <__panic>
    list_entry_t *le = list_next(&(wait->wait_link));
c0108a56:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a59:	83 c0 0c             	add    $0xc,%eax
c0108a5c:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108a5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108a62:	8b 40 04             	mov    0x4(%eax),%eax
c0108a65:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c0108a68:	8b 45 08             	mov    0x8(%ebp),%eax
c0108a6b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108a6e:	74 08                	je     c0108a78 <wait_queue_next+0x65>
        return le2wait(le, wait_link);
c0108a70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108a73:	83 e8 0c             	sub    $0xc,%eax
c0108a76:	eb 05                	jmp    c0108a7d <wait_queue_next+0x6a>
    }
    return NULL;
c0108a78:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108a7d:	c9                   	leave  
c0108a7e:	c3                   	ret    

c0108a7f <wait_queue_prev>:

wait_t *
wait_queue_prev(wait_queue_t *queue, wait_t *wait) {
c0108a7f:	55                   	push   %ebp
c0108a80:	89 e5                	mov    %esp,%ebp
c0108a82:	83 ec 18             	sub    $0x18,%esp
    assert(!list_empty(&(wait->wait_link)) && wait->wait_queue == queue);
c0108a85:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108a88:	83 c0 0c             	add    $0xc,%eax
c0108a8b:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108a8e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0108a91:	8b 40 04             	mov    0x4(%eax),%eax
c0108a94:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c0108a97:	0f 94 c0             	sete   %al
c0108a9a:	0f b6 c0             	movzbl %al,%eax
c0108a9d:	85 c0                	test   %eax,%eax
c0108a9f:	75 0b                	jne    c0108aac <wait_queue_prev+0x2d>
c0108aa1:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108aa4:	8b 40 08             	mov    0x8(%eax),%eax
c0108aa7:	3b 45 08             	cmp    0x8(%ebp),%eax
c0108aaa:	74 16                	je     c0108ac2 <wait_queue_prev+0x43>
c0108aac:	68 18 4e 11 c0       	push   $0xc0114e18
c0108ab1:	68 f1 4d 11 c0       	push   $0xc0114df1
c0108ab6:	6a 2c                	push   $0x2c
c0108ab8:	68 06 4e 11 c0       	push   $0xc0114e06
c0108abd:	e8 23 7a ff ff       	call   c01004e5 <__panic>
    list_entry_t *le = list_prev(&(wait->wait_link));
c0108ac2:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ac5:	83 c0 0c             	add    $0xc,%eax
c0108ac8:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108acb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0108ace:	8b 00                	mov    (%eax),%eax
c0108ad0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (le != &(queue->wait_head)) {
c0108ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ad6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0108ad9:	74 08                	je     c0108ae3 <wait_queue_prev+0x64>
        return le2wait(le, wait_link);
c0108adb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108ade:	83 e8 0c             	sub    $0xc,%eax
c0108ae1:	eb 05                	jmp    c0108ae8 <wait_queue_prev+0x69>
    }
    return NULL;
c0108ae3:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108ae8:	c9                   	leave  
c0108ae9:	c3                   	ret    

c0108aea <wait_queue_first>:

wait_t *
wait_queue_first(wait_queue_t *queue) {
c0108aea:	55                   	push   %ebp
c0108aeb:	89 e5                	mov    %esp,%ebp
c0108aed:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(queue->wait_head));
c0108af0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108af3:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c0108af6:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108af9:	8b 40 04             	mov    0x4(%eax),%eax
c0108afc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0108aff:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b02:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108b05:	74 08                	je     c0108b0f <wait_queue_first+0x25>
        return le2wait(le, wait_link);
c0108b07:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b0a:	83 e8 0c             	sub    $0xc,%eax
c0108b0d:	eb 05                	jmp    c0108b14 <wait_queue_first+0x2a>
    }
    return NULL;
c0108b0f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108b14:	c9                   	leave  
c0108b15:	c3                   	ret    

c0108b16 <wait_queue_last>:

wait_t *
wait_queue_last(wait_queue_t *queue) {
c0108b16:	55                   	push   %ebp
c0108b17:	89 e5                	mov    %esp,%ebp
c0108b19:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_prev(&(queue->wait_head));
c0108b1c:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b1f:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c0108b22:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0108b25:	8b 00                	mov    (%eax),%eax
c0108b27:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(queue->wait_head)) {
c0108b2a:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b2d:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c0108b30:	74 08                	je     c0108b3a <wait_queue_last+0x24>
        return le2wait(le, wait_link);
c0108b32:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b35:	83 e8 0c             	sub    $0xc,%eax
c0108b38:	eb 05                	jmp    c0108b3f <wait_queue_last+0x29>
    }
    return NULL;
c0108b3a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108b3f:	c9                   	leave  
c0108b40:	c3                   	ret    

c0108b41 <wait_queue_empty>:

bool
wait_queue_empty(wait_queue_t *queue) {
c0108b41:	55                   	push   %ebp
c0108b42:	89 e5                	mov    %esp,%ebp
c0108b44:	83 ec 10             	sub    $0x10,%esp
    return list_empty(&(queue->wait_head));
c0108b47:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b4a:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0108b4d:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b50:	8b 40 04             	mov    0x4(%eax),%eax
c0108b53:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0108b56:	0f 94 c0             	sete   %al
c0108b59:	0f b6 c0             	movzbl %al,%eax
c0108b5c:	90                   	nop
}
c0108b5d:	c9                   	leave  
c0108b5e:	c3                   	ret    

c0108b5f <wait_in_queue>:

bool
wait_in_queue(wait_t *wait) {
c0108b5f:	55                   	push   %ebp
c0108b60:	89 e5                	mov    %esp,%ebp
c0108b62:	83 ec 10             	sub    $0x10,%esp
    return !list_empty(&(wait->wait_link));
c0108b65:	8b 45 08             	mov    0x8(%ebp),%eax
c0108b68:	83 c0 0c             	add    $0xc,%eax
c0108b6b:	89 45 fc             	mov    %eax,-0x4(%ebp)
c0108b6e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0108b71:	8b 40 04             	mov    0x4(%eax),%eax
c0108b74:	39 45 fc             	cmp    %eax,-0x4(%ebp)
c0108b77:	0f 94 c0             	sete   %al
c0108b7a:	0f b6 c0             	movzbl %al,%eax
c0108b7d:	85 c0                	test   %eax,%eax
c0108b7f:	0f 94 c0             	sete   %al
c0108b82:	0f b6 c0             	movzbl %al,%eax
}
c0108b85:	c9                   	leave  
c0108b86:	c3                   	ret    

c0108b87 <wakeup_wait>:

void
wakeup_wait(wait_queue_t *queue, wait_t *wait, uint32_t wakeup_flags, bool del) {
c0108b87:	55                   	push   %ebp
c0108b88:	89 e5                	mov    %esp,%ebp
c0108b8a:	83 ec 08             	sub    $0x8,%esp
    if (del) {
c0108b8d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0108b91:	74 11                	je     c0108ba4 <wakeup_wait+0x1d>
        wait_queue_del(queue, wait);
c0108b93:	83 ec 08             	sub    $0x8,%esp
c0108b96:	ff 75 0c             	pushl  0xc(%ebp)
c0108b99:	ff 75 08             	pushl  0x8(%ebp)
c0108b9c:	e8 e1 fd ff ff       	call   c0108982 <wait_queue_del>
c0108ba1:	83 c4 10             	add    $0x10,%esp
    }
    wait->wakeup_flags = wakeup_flags;
c0108ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108ba7:	8b 55 10             	mov    0x10(%ebp),%edx
c0108baa:	89 50 04             	mov    %edx,0x4(%eax)
    wakeup_proc(wait->proc);
c0108bad:	8b 45 0c             	mov    0xc(%ebp),%eax
c0108bb0:	8b 00                	mov    (%eax),%eax
c0108bb2:	83 ec 0c             	sub    $0xc,%esp
c0108bb5:	50                   	push   %eax
c0108bb6:	e8 67 38 00 00       	call   c010c422 <wakeup_proc>
c0108bbb:	83 c4 10             	add    $0x10,%esp
}
c0108bbe:	90                   	nop
c0108bbf:	c9                   	leave  
c0108bc0:	c3                   	ret    

c0108bc1 <wakeup_first>:

void
wakeup_first(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0108bc1:	55                   	push   %ebp
c0108bc2:	89 e5                	mov    %esp,%ebp
c0108bc4:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0108bc7:	ff 75 08             	pushl  0x8(%ebp)
c0108bca:	e8 1b ff ff ff       	call   c0108aea <wait_queue_first>
c0108bcf:	83 c4 04             	add    $0x4,%esp
c0108bd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108bd5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108bd9:	74 14                	je     c0108bef <wakeup_first+0x2e>
        wakeup_wait(queue, wait, wakeup_flags, del);
c0108bdb:	ff 75 10             	pushl  0x10(%ebp)
c0108bde:	ff 75 0c             	pushl  0xc(%ebp)
c0108be1:	ff 75 f4             	pushl  -0xc(%ebp)
c0108be4:	ff 75 08             	pushl  0x8(%ebp)
c0108be7:	e8 9b ff ff ff       	call   c0108b87 <wakeup_wait>
c0108bec:	83 c4 10             	add    $0x10,%esp
    }
}
c0108bef:	90                   	nop
c0108bf0:	c9                   	leave  
c0108bf1:	c3                   	ret    

c0108bf2 <wakeup_queue>:

void
wakeup_queue(wait_queue_t *queue, uint32_t wakeup_flags, bool del) {
c0108bf2:	55                   	push   %ebp
c0108bf3:	89 e5                	mov    %esp,%ebp
c0108bf5:	83 ec 18             	sub    $0x18,%esp
    wait_t *wait;
    if ((wait = wait_queue_first(queue)) != NULL) {
c0108bf8:	ff 75 08             	pushl  0x8(%ebp)
c0108bfb:	e8 ea fe ff ff       	call   c0108aea <wait_queue_first>
c0108c00:	83 c4 04             	add    $0x4,%esp
c0108c03:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c06:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c0a:	74 5f                	je     c0108c6b <wakeup_queue+0x79>
        if (del) {
c0108c0c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0108c10:	74 2c                	je     c0108c3e <wakeup_queue+0x4c>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 1);
c0108c12:	6a 01                	push   $0x1
c0108c14:	ff 75 0c             	pushl  0xc(%ebp)
c0108c17:	ff 75 f4             	pushl  -0xc(%ebp)
c0108c1a:	ff 75 08             	pushl  0x8(%ebp)
c0108c1d:	e8 65 ff ff ff       	call   c0108b87 <wakeup_wait>
c0108c22:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_first(queue)) != NULL);
c0108c25:	83 ec 0c             	sub    $0xc,%esp
c0108c28:	ff 75 08             	pushl  0x8(%ebp)
c0108c2b:	e8 ba fe ff ff       	call   c0108aea <wait_queue_first>
c0108c30:	83 c4 10             	add    $0x10,%esp
c0108c33:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c36:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c3a:	75 d6                	jne    c0108c12 <wakeup_queue+0x20>
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
        }
    }
}
c0108c3c:	eb 2d                	jmp    c0108c6b <wakeup_queue+0x79>
                wakeup_wait(queue, wait, wakeup_flags, 1);
            } while ((wait = wait_queue_first(queue)) != NULL);
        }
        else {
            do {
                wakeup_wait(queue, wait, wakeup_flags, 0);
c0108c3e:	6a 00                	push   $0x0
c0108c40:	ff 75 0c             	pushl  0xc(%ebp)
c0108c43:	ff 75 f4             	pushl  -0xc(%ebp)
c0108c46:	ff 75 08             	pushl  0x8(%ebp)
c0108c49:	e8 39 ff ff ff       	call   c0108b87 <wakeup_wait>
c0108c4e:	83 c4 10             	add    $0x10,%esp
            } while ((wait = wait_queue_next(queue, wait)) != NULL);
c0108c51:	83 ec 08             	sub    $0x8,%esp
c0108c54:	ff 75 f4             	pushl  -0xc(%ebp)
c0108c57:	ff 75 08             	pushl  0x8(%ebp)
c0108c5a:	e8 b4 fd ff ff       	call   c0108a13 <wait_queue_next>
c0108c5f:	83 c4 10             	add    $0x10,%esp
c0108c62:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0108c65:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108c69:	75 d3                	jne    c0108c3e <wakeup_queue+0x4c>
        }
    }
}
c0108c6b:	90                   	nop
c0108c6c:	c9                   	leave  
c0108c6d:	c3                   	ret    

c0108c6e <wait_current_set>:

void
wait_current_set(wait_queue_t *queue, wait_t *wait, uint32_t wait_state) {
c0108c6e:	55                   	push   %ebp
c0108c6f:	89 e5                	mov    %esp,%ebp
c0108c71:	83 ec 08             	sub    $0x8,%esp
    assert(current != NULL);
c0108c74:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0108c79:	85 c0                	test   %eax,%eax
c0108c7b:	75 16                	jne    c0108c93 <wait_current_set+0x25>
c0108c7d:	68 55 4e 11 c0       	push   $0xc0114e55
c0108c82:	68 f1 4d 11 c0       	push   $0xc0114df1
c0108c87:	6a 74                	push   $0x74
c0108c89:	68 06 4e 11 c0       	push   $0xc0114e06
c0108c8e:	e8 52 78 ff ff       	call   c01004e5 <__panic>
    wait_init(wait, current);
c0108c93:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0108c98:	83 ec 08             	sub    $0x8,%esp
c0108c9b:	50                   	push   %eax
c0108c9c:	ff 75 0c             	pushl  0xc(%ebp)
c0108c9f:	e8 ef fb ff ff       	call   c0108893 <wait_init>
c0108ca4:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_SLEEPING;
c0108ca7:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0108cac:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = wait_state;
c0108cb2:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0108cb7:	8b 55 10             	mov    0x10(%ebp),%edx
c0108cba:	89 90 90 00 00 00    	mov    %edx,0x90(%eax)
    wait_queue_add(queue, wait);
c0108cc0:	83 ec 08             	sub    $0x8,%esp
c0108cc3:	ff 75 0c             	pushl  0xc(%ebp)
c0108cc6:	ff 75 08             	pushl  0x8(%ebp)
c0108cc9:	e8 20 fc ff ff       	call   c01088ee <wait_queue_add>
c0108cce:	83 c4 10             	add    $0x10,%esp
}
c0108cd1:	90                   	nop
c0108cd2:	c9                   	leave  
c0108cd3:	c3                   	ret    

c0108cd4 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c0108cd4:	55                   	push   %ebp
c0108cd5:	89 e5                	mov    %esp,%ebp
c0108cd7:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c0108cda:	9c                   	pushf  
c0108cdb:	58                   	pop    %eax
c0108cdc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c0108cdf:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c0108ce2:	25 00 02 00 00       	and    $0x200,%eax
c0108ce7:	85 c0                	test   %eax,%eax
c0108ce9:	74 0c                	je     c0108cf7 <__intr_save+0x23>
        intr_disable();
c0108ceb:	e8 f8 94 ff ff       	call   c01021e8 <intr_disable>
        return 1;
c0108cf0:	b8 01 00 00 00       	mov    $0x1,%eax
c0108cf5:	eb 05                	jmp    c0108cfc <__intr_save+0x28>
    }
    return 0;
c0108cf7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108cfc:	c9                   	leave  
c0108cfd:	c3                   	ret    

c0108cfe <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c0108cfe:	55                   	push   %ebp
c0108cff:	89 e5                	mov    %esp,%ebp
c0108d01:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c0108d04:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0108d08:	74 05                	je     c0108d0f <__intr_restore+0x11>
        intr_enable();
c0108d0a:	e8 d2 94 ff ff       	call   c01021e1 <intr_enable>
    }
}
c0108d0f:	90                   	nop
c0108d10:	c9                   	leave  
c0108d11:	c3                   	ret    

c0108d12 <sem_init>:
#include <proc.h>
#include <sync.h>
#include <assert.h>

void
sem_init(semaphore_t *sem, int value) {
c0108d12:	55                   	push   %ebp
c0108d13:	89 e5                	mov    %esp,%ebp
c0108d15:	83 ec 08             	sub    $0x8,%esp
    sem->value = value;
c0108d18:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d1b:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108d1e:	89 10                	mov    %edx,(%eax)
    wait_queue_init(&(sem->wait_queue));
c0108d20:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d23:	83 c0 04             	add    $0x4,%eax
c0108d26:	83 ec 0c             	sub    $0xc,%esp
c0108d29:	50                   	push   %eax
c0108d2a:	e8 9c fb ff ff       	call   c01088cb <wait_queue_init>
c0108d2f:	83 c4 10             	add    $0x10,%esp
}
c0108d32:	90                   	nop
c0108d33:	c9                   	leave  
c0108d34:	c3                   	ret    

c0108d35 <__up>:

static __noinline void __up(semaphore_t *sem, uint32_t wait_state) {
c0108d35:	55                   	push   %ebp
c0108d36:	89 e5                	mov    %esp,%ebp
c0108d38:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0108d3b:	e8 94 ff ff ff       	call   c0108cd4 <__intr_save>
c0108d40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        wait_t *wait;
        if ((wait = wait_queue_first(&(sem->wait_queue))) == NULL) {
c0108d43:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d46:	83 c0 04             	add    $0x4,%eax
c0108d49:	83 ec 0c             	sub    $0xc,%esp
c0108d4c:	50                   	push   %eax
c0108d4d:	e8 98 fd ff ff       	call   c0108aea <wait_queue_first>
c0108d52:	83 c4 10             	add    $0x10,%esp
c0108d55:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0108d58:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0108d5c:	75 0f                	jne    c0108d6d <__up+0x38>
            sem->value ++;
c0108d5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d61:	8b 00                	mov    (%eax),%eax
c0108d63:	8d 50 01             	lea    0x1(%eax),%edx
c0108d66:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d69:	89 10                	mov    %edx,(%eax)
c0108d6b:	eb 3d                	jmp    c0108daa <__up+0x75>
        }
        else {
            assert(wait->proc->wait_state == wait_state);
c0108d6d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108d70:	8b 00                	mov    (%eax),%eax
c0108d72:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c0108d78:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108d7b:	74 16                	je     c0108d93 <__up+0x5e>
c0108d7d:	68 68 4e 11 c0       	push   $0xc0114e68
c0108d82:	68 8d 4e 11 c0       	push   $0xc0114e8d
c0108d87:	6a 19                	push   $0x19
c0108d89:	68 a2 4e 11 c0       	push   $0xc0114ea2
c0108d8e:	e8 52 77 ff ff       	call   c01004e5 <__panic>
            wakeup_wait(&(sem->wait_queue), wait, wait_state, 1);
c0108d93:	8b 45 08             	mov    0x8(%ebp),%eax
c0108d96:	83 c0 04             	add    $0x4,%eax
c0108d99:	6a 01                	push   $0x1
c0108d9b:	ff 75 0c             	pushl  0xc(%ebp)
c0108d9e:	ff 75 f0             	pushl  -0x10(%ebp)
c0108da1:	50                   	push   %eax
c0108da2:	e8 e0 fd ff ff       	call   c0108b87 <wakeup_wait>
c0108da7:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c0108daa:	83 ec 0c             	sub    $0xc,%esp
c0108dad:	ff 75 f4             	pushl  -0xc(%ebp)
c0108db0:	e8 49 ff ff ff       	call   c0108cfe <__intr_restore>
c0108db5:	83 c4 10             	add    $0x10,%esp
}
c0108db8:	90                   	nop
c0108db9:	c9                   	leave  
c0108dba:	c3                   	ret    

c0108dbb <__down>:

static __noinline uint32_t __down(semaphore_t *sem, uint32_t wait_state) {
c0108dbb:	55                   	push   %ebp
c0108dbc:	89 e5                	mov    %esp,%ebp
c0108dbe:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c0108dc1:	e8 0e ff ff ff       	call   c0108cd4 <__intr_save>
c0108dc6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (sem->value > 0) {
c0108dc9:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dcc:	8b 00                	mov    (%eax),%eax
c0108dce:	85 c0                	test   %eax,%eax
c0108dd0:	7e 25                	jle    c0108df7 <__down+0x3c>
        sem->value --;
c0108dd2:	8b 45 08             	mov    0x8(%ebp),%eax
c0108dd5:	8b 00                	mov    (%eax),%eax
c0108dd7:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108dda:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ddd:	89 10                	mov    %edx,(%eax)
        local_intr_restore(intr_flag);
c0108ddf:	83 ec 0c             	sub    $0xc,%esp
c0108de2:	ff 75 f4             	pushl  -0xc(%ebp)
c0108de5:	e8 14 ff ff ff       	call   c0108cfe <__intr_restore>
c0108dea:	83 c4 10             	add    $0x10,%esp
        return 0;
c0108ded:	b8 00 00 00 00       	mov    $0x0,%eax
c0108df2:	e9 86 00 00 00       	jmp    c0108e7d <__down+0xc2>
    }
    wait_t __wait, *wait = &__wait;
c0108df7:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0108dfa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    wait_current_set(&(sem->wait_queue), wait, wait_state);
c0108dfd:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e00:	83 c0 04             	add    $0x4,%eax
c0108e03:	83 ec 04             	sub    $0x4,%esp
c0108e06:	ff 75 0c             	pushl  0xc(%ebp)
c0108e09:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e0c:	50                   	push   %eax
c0108e0d:	e8 5c fe ff ff       	call   c0108c6e <wait_current_set>
c0108e12:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0108e15:	83 ec 0c             	sub    $0xc,%esp
c0108e18:	ff 75 f4             	pushl  -0xc(%ebp)
c0108e1b:	e8 de fe ff ff       	call   c0108cfe <__intr_restore>
c0108e20:	83 c4 10             	add    $0x10,%esp

    schedule();
c0108e23:	e8 8a 36 00 00       	call   c010c4b2 <schedule>

    local_intr_save(intr_flag);
c0108e28:	e8 a7 fe ff ff       	call   c0108cd4 <__intr_save>
c0108e2d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    wait_current_del(&(sem->wait_queue), wait);
c0108e30:	83 ec 0c             	sub    $0xc,%esp
c0108e33:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e36:	e8 24 fd ff ff       	call   c0108b5f <wait_in_queue>
c0108e3b:	83 c4 10             	add    $0x10,%esp
c0108e3e:	85 c0                	test   %eax,%eax
c0108e40:	74 15                	je     c0108e57 <__down+0x9c>
c0108e42:	8b 45 08             	mov    0x8(%ebp),%eax
c0108e45:	83 c0 04             	add    $0x4,%eax
c0108e48:	83 ec 08             	sub    $0x8,%esp
c0108e4b:	ff 75 f0             	pushl  -0x10(%ebp)
c0108e4e:	50                   	push   %eax
c0108e4f:	e8 2e fb ff ff       	call   c0108982 <wait_queue_del>
c0108e54:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c0108e57:	83 ec 0c             	sub    $0xc,%esp
c0108e5a:	ff 75 f4             	pushl  -0xc(%ebp)
c0108e5d:	e8 9c fe ff ff       	call   c0108cfe <__intr_restore>
c0108e62:	83 c4 10             	add    $0x10,%esp

    if (wait->wakeup_flags != wait_state) {
c0108e65:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e68:	8b 40 04             	mov    0x4(%eax),%eax
c0108e6b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0108e6e:	74 08                	je     c0108e78 <__down+0xbd>
        return wait->wakeup_flags;
c0108e70:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0108e73:	8b 40 04             	mov    0x4(%eax),%eax
c0108e76:	eb 05                	jmp    c0108e7d <__down+0xc2>
    }
    return 0;
c0108e78:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0108e7d:	c9                   	leave  
c0108e7e:	c3                   	ret    

c0108e7f <up>:

void
up(semaphore_t *sem) {
c0108e7f:	55                   	push   %ebp
c0108e80:	89 e5                	mov    %esp,%ebp
c0108e82:	83 ec 08             	sub    $0x8,%esp
    __up(sem, WT_KSEM);
c0108e85:	83 ec 08             	sub    $0x8,%esp
c0108e88:	68 00 01 00 00       	push   $0x100
c0108e8d:	ff 75 08             	pushl  0x8(%ebp)
c0108e90:	e8 a0 fe ff ff       	call   c0108d35 <__up>
c0108e95:	83 c4 10             	add    $0x10,%esp
}
c0108e98:	90                   	nop
c0108e99:	c9                   	leave  
c0108e9a:	c3                   	ret    

c0108e9b <down>:

void
down(semaphore_t *sem) {
c0108e9b:	55                   	push   %ebp
c0108e9c:	89 e5                	mov    %esp,%ebp
c0108e9e:	83 ec 18             	sub    $0x18,%esp
    uint32_t flags = __down(sem, WT_KSEM);
c0108ea1:	83 ec 08             	sub    $0x8,%esp
c0108ea4:	68 00 01 00 00       	push   $0x100
c0108ea9:	ff 75 08             	pushl  0x8(%ebp)
c0108eac:	e8 0a ff ff ff       	call   c0108dbb <__down>
c0108eb1:	83 c4 10             	add    $0x10,%esp
c0108eb4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(flags == 0);
c0108eb7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0108ebb:	74 16                	je     c0108ed3 <down+0x38>
c0108ebd:	68 b2 4e 11 c0       	push   $0xc0114eb2
c0108ec2:	68 8d 4e 11 c0       	push   $0xc0114e8d
c0108ec7:	6a 40                	push   $0x40
c0108ec9:	68 a2 4e 11 c0       	push   $0xc0114ea2
c0108ece:	e8 12 76 ff ff       	call   c01004e5 <__panic>
}
c0108ed3:	90                   	nop
c0108ed4:	c9                   	leave  
c0108ed5:	c3                   	ret    

c0108ed6 <try_down>:

bool
try_down(semaphore_t *sem) {
c0108ed6:	55                   	push   %ebp
c0108ed7:	89 e5                	mov    %esp,%ebp
c0108ed9:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag, ret = 0;
c0108edc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    local_intr_save(intr_flag);
c0108ee3:	e8 ec fd ff ff       	call   c0108cd4 <__intr_save>
c0108ee8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (sem->value > 0) {
c0108eeb:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eee:	8b 00                	mov    (%eax),%eax
c0108ef0:	85 c0                	test   %eax,%eax
c0108ef2:	7e 14                	jle    c0108f08 <try_down+0x32>
        sem->value --, ret = 1;
c0108ef4:	8b 45 08             	mov    0x8(%ebp),%eax
c0108ef7:	8b 00                	mov    (%eax),%eax
c0108ef9:	8d 50 ff             	lea    -0x1(%eax),%edx
c0108efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108eff:	89 10                	mov    %edx,(%eax)
c0108f01:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }
    local_intr_restore(intr_flag);
c0108f08:	83 ec 0c             	sub    $0xc,%esp
c0108f0b:	ff 75 f0             	pushl  -0x10(%ebp)
c0108f0e:	e8 eb fd ff ff       	call   c0108cfe <__intr_restore>
c0108f13:	83 c4 10             	add    $0x10,%esp
    return ret;
c0108f16:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0108f19:	c9                   	leave  
c0108f1a:	c3                   	ret    

c0108f1b <monitor_init>:
#include <assert.h>


// Initialize monitor.
void     
monitor_init (monitor_t * mtp, size_t num_cv) {
c0108f1b:	55                   	push   %ebp
c0108f1c:	89 e5                	mov    %esp,%ebp
c0108f1e:	83 ec 18             	sub    $0x18,%esp
    int i;
    assert(num_cv>0);
c0108f21:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0108f25:	75 16                	jne    c0108f3d <monitor_init+0x22>
c0108f27:	68 c0 4e 11 c0       	push   $0xc0114ec0
c0108f2c:	68 c9 4e 11 c0       	push   $0xc0114ec9
c0108f31:	6a 0b                	push   $0xb
c0108f33:	68 de 4e 11 c0       	push   $0xc0114ede
c0108f38:	e8 a8 75 ff ff       	call   c01004e5 <__panic>
    mtp->next_count = 0;
c0108f3d:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f40:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    mtp->cv = NULL;
c0108f47:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f4a:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    sem_init(&(mtp->mutex), 1); //unlocked
c0108f51:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f54:	83 ec 08             	sub    $0x8,%esp
c0108f57:	6a 01                	push   $0x1
c0108f59:	50                   	push   %eax
c0108f5a:	e8 b3 fd ff ff       	call   c0108d12 <sem_init>
c0108f5f:	83 c4 10             	add    $0x10,%esp
    sem_init(&(mtp->next), 0);
c0108f62:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f65:	83 c0 0c             	add    $0xc,%eax
c0108f68:	83 ec 08             	sub    $0x8,%esp
c0108f6b:	6a 00                	push   $0x0
c0108f6d:	50                   	push   %eax
c0108f6e:	e8 9f fd ff ff       	call   c0108d12 <sem_init>
c0108f73:	83 c4 10             	add    $0x10,%esp
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
c0108f76:	8b 55 0c             	mov    0xc(%ebp),%edx
c0108f79:	89 d0                	mov    %edx,%eax
c0108f7b:	c1 e0 02             	shl    $0x2,%eax
c0108f7e:	01 d0                	add    %edx,%eax
c0108f80:	c1 e0 02             	shl    $0x2,%eax
c0108f83:	83 ec 0c             	sub    $0xc,%esp
c0108f86:	50                   	push   %eax
c0108f87:	e8 b8 de ff ff       	call   c0106e44 <kmalloc>
c0108f8c:	83 c4 10             	add    $0x10,%esp
c0108f8f:	89 c2                	mov    %eax,%edx
c0108f91:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f94:	89 50 1c             	mov    %edx,0x1c(%eax)
    assert(mtp->cv!=NULL);
c0108f97:	8b 45 08             	mov    0x8(%ebp),%eax
c0108f9a:	8b 40 1c             	mov    0x1c(%eax),%eax
c0108f9d:	85 c0                	test   %eax,%eax
c0108f9f:	75 16                	jne    c0108fb7 <monitor_init+0x9c>
c0108fa1:	68 f2 4e 11 c0       	push   $0xc0114ef2
c0108fa6:	68 c9 4e 11 c0       	push   $0xc0114ec9
c0108fab:	6a 11                	push   $0x11
c0108fad:	68 de 4e 11 c0       	push   $0xc0114ede
c0108fb2:	e8 2e 75 ff ff       	call   c01004e5 <__panic>
    for(i=0; i<num_cv; i++){
c0108fb7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0108fbe:	eb 5f                	jmp    c010901f <monitor_init+0x104>
        mtp->cv[i].count=0;
c0108fc0:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fc3:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108fc6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108fc9:	89 d0                	mov    %edx,%eax
c0108fcb:	c1 e0 02             	shl    $0x2,%eax
c0108fce:	01 d0                	add    %edx,%eax
c0108fd0:	c1 e0 02             	shl    $0x2,%eax
c0108fd3:	01 c8                	add    %ecx,%eax
c0108fd5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        sem_init(&(mtp->cv[i].sem),0);
c0108fdc:	8b 45 08             	mov    0x8(%ebp),%eax
c0108fdf:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0108fe2:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0108fe5:	89 d0                	mov    %edx,%eax
c0108fe7:	c1 e0 02             	shl    $0x2,%eax
c0108fea:	01 d0                	add    %edx,%eax
c0108fec:	c1 e0 02             	shl    $0x2,%eax
c0108fef:	01 c8                	add    %ecx,%eax
c0108ff1:	83 ec 08             	sub    $0x8,%esp
c0108ff4:	6a 00                	push   $0x0
c0108ff6:	50                   	push   %eax
c0108ff7:	e8 16 fd ff ff       	call   c0108d12 <sem_init>
c0108ffc:	83 c4 10             	add    $0x10,%esp
        mtp->cv[i].owner=mtp;
c0108fff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109002:	8b 48 1c             	mov    0x1c(%eax),%ecx
c0109005:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109008:	89 d0                	mov    %edx,%eax
c010900a:	c1 e0 02             	shl    $0x2,%eax
c010900d:	01 d0                	add    %edx,%eax
c010900f:	c1 e0 02             	shl    $0x2,%eax
c0109012:	8d 14 01             	lea    (%ecx,%eax,1),%edx
c0109015:	8b 45 08             	mov    0x8(%ebp),%eax
c0109018:	89 42 10             	mov    %eax,0x10(%edx)
    mtp->cv = NULL;
    sem_init(&(mtp->mutex), 1); //unlocked
    sem_init(&(mtp->next), 0);
    mtp->cv =(condvar_t *) kmalloc(sizeof(condvar_t)*num_cv);
    assert(mtp->cv!=NULL);
    for(i=0; i<num_cv; i++){
c010901b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010901f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109022:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0109025:	72 99                	jb     c0108fc0 <monitor_init+0xa5>
        mtp->cv[i].count=0;
        sem_init(&(mtp->cv[i].sem),0);
        mtp->cv[i].owner=mtp;
    }
}
c0109027:	90                   	nop
c0109028:	c9                   	leave  
c0109029:	c3                   	ret    

c010902a <cond_signal>:

// Unlock one of threads waiting on the condition variable. 
void 
cond_signal (condvar_t *cvp) {
c010902a:	55                   	push   %ebp
c010902b:	89 e5                	mov    %esp,%ebp
c010902d:	83 ec 08             	sub    $0x8,%esp
   //LAB7 EXERCISE1: YOUR CODE
   cprintf("cond_signal begin: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);  
c0109030:	8b 45 08             	mov    0x8(%ebp),%eax
c0109033:	8b 40 10             	mov    0x10(%eax),%eax
c0109036:	8b 50 18             	mov    0x18(%eax),%edx
c0109039:	8b 45 08             	mov    0x8(%ebp),%eax
c010903c:	8b 40 0c             	mov    0xc(%eax),%eax
c010903f:	52                   	push   %edx
c0109040:	50                   	push   %eax
c0109041:	ff 75 08             	pushl  0x8(%ebp)
c0109044:	68 00 4f 11 c0       	push   $0xc0114f00
c0109049:	e8 31 73 ff ff       	call   c010037f <cprintf>
c010904e:	83 c4 10             	add    $0x10,%esp
   *             wait(mt.next);
   *             mt.next_count--;
   *          }
   *       }
   */
   cprintf("cond_signal end: cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c0109051:	8b 45 08             	mov    0x8(%ebp),%eax
c0109054:	8b 40 10             	mov    0x10(%eax),%eax
c0109057:	8b 50 18             	mov    0x18(%eax),%edx
c010905a:	8b 45 08             	mov    0x8(%ebp),%eax
c010905d:	8b 40 0c             	mov    0xc(%eax),%eax
c0109060:	52                   	push   %edx
c0109061:	50                   	push   %eax
c0109062:	ff 75 08             	pushl  0x8(%ebp)
c0109065:	68 48 4f 11 c0       	push   $0xc0114f48
c010906a:	e8 10 73 ff ff       	call   c010037f <cprintf>
c010906f:	83 c4 10             	add    $0x10,%esp
}
c0109072:	90                   	nop
c0109073:	c9                   	leave  
c0109074:	c3                   	ret    

c0109075 <cond_wait>:

// Suspend calling thread on a condition variable waiting for condition Atomically unlocks 
// mutex and suspends calling thread on conditional variable after waking up locks mutex. Notice: mp is mutex semaphore for monitor's procedures
void
cond_wait (condvar_t *cvp) {
c0109075:	55                   	push   %ebp
c0109076:	89 e5                	mov    %esp,%ebp
c0109078:	83 ec 08             	sub    $0x8,%esp
    //LAB7 EXERCISE1: YOUR CODE
    cprintf("cond_wait begin:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010907b:	8b 45 08             	mov    0x8(%ebp),%eax
c010907e:	8b 40 10             	mov    0x10(%eax),%eax
c0109081:	8b 50 18             	mov    0x18(%eax),%edx
c0109084:	8b 45 08             	mov    0x8(%ebp),%eax
c0109087:	8b 40 0c             	mov    0xc(%eax),%eax
c010908a:	52                   	push   %edx
c010908b:	50                   	push   %eax
c010908c:	ff 75 08             	pushl  0x8(%ebp)
c010908f:	68 8c 4f 11 c0       	push   $0xc0114f8c
c0109094:	e8 e6 72 ff ff       	call   c010037f <cprintf>
c0109099:	83 c4 10             	add    $0x10,%esp
    *         else
    *            signal(mt.mutex);
    *         wait(cv.sem);
    *         cv.count --;
    */
    cprintf("cond_wait end:  cvp %x, cvp->count %d, cvp->owner->next_count %d\n", cvp, cvp->count, cvp->owner->next_count);
c010909c:	8b 45 08             	mov    0x8(%ebp),%eax
c010909f:	8b 40 10             	mov    0x10(%eax),%eax
c01090a2:	8b 50 18             	mov    0x18(%eax),%edx
c01090a5:	8b 45 08             	mov    0x8(%ebp),%eax
c01090a8:	8b 40 0c             	mov    0xc(%eax),%eax
c01090ab:	52                   	push   %edx
c01090ac:	50                   	push   %eax
c01090ad:	ff 75 08             	pushl  0x8(%ebp)
c01090b0:	68 d0 4f 11 c0       	push   $0xc0114fd0
c01090b5:	e8 c5 72 ff ff       	call   c010037f <cprintf>
c01090ba:	83 c4 10             	add    $0x10,%esp
}
c01090bd:	90                   	nop
c01090be:	c9                   	leave  
c01090bf:	c3                   	ret    

c01090c0 <lock_mm>:
    mm->mm_count -= 1;
    return mm->mm_count;
}

static inline void
lock_mm(struct mm_struct *mm) {
c01090c0:	55                   	push   %ebp
c01090c1:	89 e5                	mov    %esp,%ebp
c01090c3:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c01090c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01090ca:	74 29                	je     c01090f5 <lock_mm+0x35>
        down(&(mm->mm_sem));
c01090cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01090cf:	83 c0 1c             	add    $0x1c,%eax
c01090d2:	83 ec 0c             	sub    $0xc,%esp
c01090d5:	50                   	push   %eax
c01090d6:	e8 c0 fd ff ff       	call   c0108e9b <down>
c01090db:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c01090de:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01090e3:	85 c0                	test   %eax,%eax
c01090e5:	74 0e                	je     c01090f5 <lock_mm+0x35>
            mm->locked_by = current->pid;
c01090e7:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01090ec:	8b 50 04             	mov    0x4(%eax),%edx
c01090ef:	8b 45 08             	mov    0x8(%ebp),%eax
c01090f2:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c01090f5:	90                   	nop
c01090f6:	c9                   	leave  
c01090f7:	c3                   	ret    

c01090f8 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c01090f8:	55                   	push   %ebp
c01090f9:	89 e5                	mov    %esp,%ebp
c01090fb:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c01090fe:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109102:	74 1c                	je     c0109120 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c0109104:	8b 45 08             	mov    0x8(%ebp),%eax
c0109107:	83 c0 1c             	add    $0x1c,%eax
c010910a:	83 ec 0c             	sub    $0xc,%esp
c010910d:	50                   	push   %eax
c010910e:	e8 6c fd ff ff       	call   c0108e7f <up>
c0109113:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c0109116:	8b 45 08             	mov    0x8(%ebp),%eax
c0109119:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c0109120:	90                   	nop
c0109121:	c9                   	leave  
c0109122:	c3                   	ret    

c0109123 <copy_path>:

#define IOBUF_SIZE                          4096

/* copy_path - copy path name */
static int
copy_path(char **to, const char *from) {
c0109123:	55                   	push   %ebp
c0109124:	89 e5                	mov    %esp,%ebp
c0109126:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c0109129:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010912e:	8b 40 18             	mov    0x18(%eax),%eax
c0109131:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *buffer;
    if ((buffer = kmalloc(FS_MAX_FPATH_LEN + 1)) == NULL) {
c0109134:	83 ec 0c             	sub    $0xc,%esp
c0109137:	68 00 10 00 00       	push   $0x1000
c010913c:	e8 03 dd ff ff       	call   c0106e44 <kmalloc>
c0109141:	83 c4 10             	add    $0x10,%esp
c0109144:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0109147:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010914b:	75 07                	jne    c0109154 <copy_path+0x31>
        return -E_NO_MEM;
c010914d:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109152:	eb 67                	jmp    c01091bb <copy_path+0x98>
    }
    lock_mm(mm);
c0109154:	83 ec 0c             	sub    $0xc,%esp
c0109157:	ff 75 f4             	pushl  -0xc(%ebp)
c010915a:	e8 61 ff ff ff       	call   c01090c0 <lock_mm>
c010915f:	83 c4 10             	add    $0x10,%esp
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
c0109162:	68 00 10 00 00       	push   $0x1000
c0109167:	ff 75 0c             	pushl  0xc(%ebp)
c010916a:	ff 75 f0             	pushl  -0x10(%ebp)
c010916d:	ff 75 f4             	pushl  -0xc(%ebp)
c0109170:	e8 1f cb ff ff       	call   c0105c94 <copy_string>
c0109175:	83 c4 10             	add    $0x10,%esp
c0109178:	85 c0                	test   %eax,%eax
c010917a:	75 24                	jne    c01091a0 <copy_path+0x7d>
        unlock_mm(mm);
c010917c:	83 ec 0c             	sub    $0xc,%esp
c010917f:	ff 75 f4             	pushl  -0xc(%ebp)
c0109182:	e8 71 ff ff ff       	call   c01090f8 <unlock_mm>
c0109187:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c010918a:	90                   	nop
    unlock_mm(mm);
    *to = buffer;
    return 0;

failed_cleanup:
    kfree(buffer);
c010918b:	83 ec 0c             	sub    $0xc,%esp
c010918e:	ff 75 f0             	pushl  -0x10(%ebp)
c0109191:	e8 c6 dc ff ff       	call   c0106e5c <kfree>
c0109196:	83 c4 10             	add    $0x10,%esp
    return -E_INVAL;
c0109199:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010919e:	eb 1b                	jmp    c01091bb <copy_path+0x98>
    lock_mm(mm);
    if (!copy_string(mm, buffer, from, FS_MAX_FPATH_LEN + 1)) {
        unlock_mm(mm);
        goto failed_cleanup;
    }
    unlock_mm(mm);
c01091a0:	83 ec 0c             	sub    $0xc,%esp
c01091a3:	ff 75 f4             	pushl  -0xc(%ebp)
c01091a6:	e8 4d ff ff ff       	call   c01090f8 <unlock_mm>
c01091ab:	83 c4 10             	add    $0x10,%esp
    *to = buffer;
c01091ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01091b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01091b4:	89 10                	mov    %edx,(%eax)
    return 0;
c01091b6:	b8 00 00 00 00       	mov    $0x0,%eax

failed_cleanup:
    kfree(buffer);
    return -E_INVAL;
}
c01091bb:	c9                   	leave  
c01091bc:	c3                   	ret    

c01091bd <sysfile_open>:

/* sysfile_open - open file */
int
sysfile_open(const char *__path, uint32_t open_flags) {
c01091bd:	55                   	push   %ebp
c01091be:	89 e5                	mov    %esp,%ebp
c01091c0:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c01091c3:	83 ec 08             	sub    $0x8,%esp
c01091c6:	ff 75 08             	pushl  0x8(%ebp)
c01091c9:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01091cc:	50                   	push   %eax
c01091cd:	e8 51 ff ff ff       	call   c0109123 <copy_path>
c01091d2:	83 c4 10             	add    $0x10,%esp
c01091d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01091d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01091dc:	74 05                	je     c01091e3 <sysfile_open+0x26>
        return ret;
c01091de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01091e1:	eb 27                	jmp    c010920a <sysfile_open+0x4d>
    }
    ret = file_open(path, open_flags);
c01091e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091e6:	83 ec 08             	sub    $0x8,%esp
c01091e9:	ff 75 0c             	pushl  0xc(%ebp)
c01091ec:	50                   	push   %eax
c01091ed:	e8 c3 0b 00 00       	call   c0109db5 <file_open>
c01091f2:	83 c4 10             	add    $0x10,%esp
c01091f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c01091f8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01091fb:	83 ec 0c             	sub    $0xc,%esp
c01091fe:	50                   	push   %eax
c01091ff:	e8 58 dc ff ff       	call   c0106e5c <kfree>
c0109204:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109207:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010920a:	c9                   	leave  
c010920b:	c3                   	ret    

c010920c <sysfile_close>:

/* sysfile_close - close file */
int
sysfile_close(int fd) {
c010920c:	55                   	push   %ebp
c010920d:	89 e5                	mov    %esp,%ebp
c010920f:	83 ec 08             	sub    $0x8,%esp
    return file_close(fd);
c0109212:	83 ec 0c             	sub    $0xc,%esp
c0109215:	ff 75 08             	pushl  0x8(%ebp)
c0109218:	e8 37 0d 00 00       	call   c0109f54 <file_close>
c010921d:	83 c4 10             	add    $0x10,%esp
}
c0109220:	c9                   	leave  
c0109221:	c3                   	ret    

c0109222 <sysfile_read>:

/* sysfile_read - read file */
int
sysfile_read(int fd, void *base, size_t len) {
c0109222:	55                   	push   %ebp
c0109223:	89 e5                	mov    %esp,%ebp
c0109225:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109228:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010922d:	8b 40 18             	mov    0x18(%eax),%eax
c0109230:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109233:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109237:	75 0a                	jne    c0109243 <sysfile_read+0x21>
        return 0;
c0109239:	b8 00 00 00 00       	mov    $0x0,%eax
c010923e:	e9 32 01 00 00       	jmp    c0109375 <sysfile_read+0x153>
    }
    if (!file_testfd(fd, 1, 0)) {
c0109243:	83 ec 04             	sub    $0x4,%esp
c0109246:	6a 00                	push   $0x0
c0109248:	6a 01                	push   $0x1
c010924a:	ff 75 08             	pushl  0x8(%ebp)
c010924d:	e8 06 0b 00 00       	call   c0109d58 <file_testfd>
c0109252:	83 c4 10             	add    $0x10,%esp
c0109255:	85 c0                	test   %eax,%eax
c0109257:	75 0a                	jne    c0109263 <sysfile_read+0x41>
        return -E_INVAL;
c0109259:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010925e:	e9 12 01 00 00       	jmp    c0109375 <sysfile_read+0x153>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c0109263:	83 ec 0c             	sub    $0xc,%esp
c0109266:	68 00 10 00 00       	push   $0x1000
c010926b:	e8 d4 db ff ff       	call   c0106e44 <kmalloc>
c0109270:	83 c4 10             	add    $0x10,%esp
c0109273:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0109276:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010927a:	75 0a                	jne    c0109286 <sysfile_read+0x64>
        return -E_NO_MEM;
c010927c:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0109281:	e9 ef 00 00 00       	jmp    c0109375 <sysfile_read+0x153>
    }

    int ret = 0;
c0109286:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c010928d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c0109294:	e9 b6 00 00 00       	jmp    c010934f <sysfile_read+0x12d>
        if ((alen = IOBUF_SIZE) > len) {
c0109299:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c01092a0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092a3:	3b 45 10             	cmp    0x10(%ebp),%eax
c01092a6:	76 06                	jbe    c01092ae <sysfile_read+0x8c>
            alen = len;
c01092a8:	8b 45 10             	mov    0x10(%ebp),%eax
c01092ab:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        ret = file_read(fd, buffer, alen, &alen);
c01092ae:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092b1:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c01092b4:	52                   	push   %edx
c01092b5:	50                   	push   %eax
c01092b6:	ff 75 e8             	pushl  -0x18(%ebp)
c01092b9:	ff 75 08             	pushl  0x8(%ebp)
c01092bc:	e8 cf 0c 00 00       	call   c0109f90 <file_read>
c01092c1:	83 c4 10             	add    $0x10,%esp
c01092c4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (alen != 0) {
c01092c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092ca:	85 c0                	test   %eax,%eax
c01092cc:	74 74                	je     c0109342 <sysfile_read+0x120>
            lock_mm(mm);
c01092ce:	83 ec 0c             	sub    $0xc,%esp
c01092d1:	ff 75 ec             	pushl  -0x14(%ebp)
c01092d4:	e8 e7 fd ff ff       	call   c01090c0 <lock_mm>
c01092d9:	83 c4 10             	add    $0x10,%esp
            {
                if (copy_to_user(mm, base, buffer, alen)) {
c01092dc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092df:	50                   	push   %eax
c01092e0:	ff 75 e8             	pushl  -0x18(%ebp)
c01092e3:	ff 75 0c             	pushl  0xc(%ebp)
c01092e6:	ff 75 ec             	pushl  -0x14(%ebp)
c01092e9:	e8 14 c1 ff ff       	call   c0105402 <copy_to_user>
c01092ee:	83 c4 10             	add    $0x10,%esp
c01092f1:	85 c0                	test   %eax,%eax
c01092f3:	74 32                	je     c0109327 <sysfile_read+0x105>
                    assert(len >= alen);
c01092f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01092f8:	39 45 10             	cmp    %eax,0x10(%ebp)
c01092fb:	73 16                	jae    c0109313 <sysfile_read+0xf1>
c01092fd:	68 12 50 11 c0       	push   $0xc0115012
c0109302:	68 1e 50 11 c0       	push   $0xc011501e
c0109307:	6a 55                	push   $0x55
c0109309:	68 33 50 11 c0       	push   $0xc0115033
c010930e:	e8 d2 71 ff ff       	call   c01004e5 <__panic>
                    base += alen, len -= alen, copied += alen;
c0109313:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109316:	01 45 0c             	add    %eax,0xc(%ebp)
c0109319:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010931c:	29 45 10             	sub    %eax,0x10(%ebp)
c010931f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109322:	01 45 f0             	add    %eax,-0x10(%ebp)
c0109325:	eb 0d                	jmp    c0109334 <sysfile_read+0x112>
                }
                else if (ret == 0) {
c0109327:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010932b:	75 07                	jne    c0109334 <sysfile_read+0x112>
                    ret = -E_INVAL;
c010932d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
                }
            }
            unlock_mm(mm);
c0109334:	83 ec 0c             	sub    $0xc,%esp
c0109337:	ff 75 ec             	pushl  -0x14(%ebp)
c010933a:	e8 b9 fd ff ff       	call   c01090f8 <unlock_mm>
c010933f:	83 c4 10             	add    $0x10,%esp
        }
        if (ret != 0 || alen == 0) {
c0109342:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109346:	75 11                	jne    c0109359 <sysfile_read+0x137>
c0109348:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010934b:	85 c0                	test   %eax,%eax
c010934d:	74 0a                	je     c0109359 <sysfile_read+0x137>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c010934f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109353:	0f 85 40 ff ff ff    	jne    c0109299 <sysfile_read+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c0109359:	83 ec 0c             	sub    $0xc,%esp
c010935c:	ff 75 e8             	pushl  -0x18(%ebp)
c010935f:	e8 f8 da ff ff       	call   c0106e5c <kfree>
c0109364:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c0109367:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010936b:	74 05                	je     c0109372 <sysfile_read+0x150>
        return copied;
c010936d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109370:	eb 03                	jmp    c0109375 <sysfile_read+0x153>
    }
    return ret;
c0109372:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109375:	c9                   	leave  
c0109376:	c3                   	ret    

c0109377 <sysfile_write>:

/* sysfile_write - write file */
int
sysfile_write(int fd, void *base, size_t len) {
c0109377:	55                   	push   %ebp
c0109378:	89 e5                	mov    %esp,%ebp
c010937a:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c010937d:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0109382:	8b 40 18             	mov    0x18(%eax),%eax
c0109385:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (len == 0) {
c0109388:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010938c:	75 0a                	jne    c0109398 <sysfile_write+0x21>
        return 0;
c010938e:	b8 00 00 00 00       	mov    $0x0,%eax
c0109393:	e9 38 01 00 00       	jmp    c01094d0 <sysfile_write+0x159>
    }
    if (!file_testfd(fd, 0, 1)) {
c0109398:	83 ec 04             	sub    $0x4,%esp
c010939b:	6a 01                	push   $0x1
c010939d:	6a 00                	push   $0x0
c010939f:	ff 75 08             	pushl  0x8(%ebp)
c01093a2:	e8 b1 09 00 00       	call   c0109d58 <file_testfd>
c01093a7:	83 c4 10             	add    $0x10,%esp
c01093aa:	85 c0                	test   %eax,%eax
c01093ac:	75 0a                	jne    c01093b8 <sysfile_write+0x41>
        return -E_INVAL;
c01093ae:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01093b3:	e9 18 01 00 00       	jmp    c01094d0 <sysfile_write+0x159>
    }
    void *buffer;
    if ((buffer = kmalloc(IOBUF_SIZE)) == NULL) {
c01093b8:	83 ec 0c             	sub    $0xc,%esp
c01093bb:	68 00 10 00 00       	push   $0x1000
c01093c0:	e8 7f da ff ff       	call   c0106e44 <kmalloc>
c01093c5:	83 c4 10             	add    $0x10,%esp
c01093c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01093cb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01093cf:	75 0a                	jne    c01093db <sysfile_write+0x64>
        return -E_NO_MEM;
c01093d1:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01093d6:	e9 f5 00 00 00       	jmp    c01094d0 <sysfile_write+0x159>
    }

    int ret = 0;
c01093db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    size_t copied = 0, alen;
c01093e2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (len != 0) {
c01093e9:	e9 bc 00 00 00       	jmp    c01094aa <sysfile_write+0x133>
        if ((alen = IOBUF_SIZE) > len) {
c01093ee:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
c01093f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01093f8:	3b 45 10             	cmp    0x10(%ebp),%eax
c01093fb:	76 06                	jbe    c0109403 <sysfile_write+0x8c>
            alen = len;
c01093fd:	8b 45 10             	mov    0x10(%ebp),%eax
c0109400:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        }
        lock_mm(mm);
c0109403:	83 ec 0c             	sub    $0xc,%esp
c0109406:	ff 75 ec             	pushl  -0x14(%ebp)
c0109409:	e8 b2 fc ff ff       	call   c01090c0 <lock_mm>
c010940e:	83 c4 10             	add    $0x10,%esp
        {
            if (!copy_from_user(mm, buffer, base, alen, 0)) {
c0109411:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109414:	83 ec 0c             	sub    $0xc,%esp
c0109417:	6a 00                	push   $0x0
c0109419:	50                   	push   %eax
c010941a:	ff 75 0c             	pushl  0xc(%ebp)
c010941d:	ff 75 e8             	pushl  -0x18(%ebp)
c0109420:	ff 75 ec             	pushl  -0x14(%ebp)
c0109423:	e8 99 bf ff ff       	call   c01053c1 <copy_from_user>
c0109428:	83 c4 20             	add    $0x20,%esp
c010942b:	85 c0                	test   %eax,%eax
c010942d:	75 07                	jne    c0109436 <sysfile_write+0xbf>
                ret = -E_INVAL;
c010942f:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
            }
        }
        unlock_mm(mm);
c0109436:	83 ec 0c             	sub    $0xc,%esp
c0109439:	ff 75 ec             	pushl  -0x14(%ebp)
c010943c:	e8 b7 fc ff ff       	call   c01090f8 <unlock_mm>
c0109441:	83 c4 10             	add    $0x10,%esp
        if (ret == 0) {
c0109444:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109448:	75 53                	jne    c010949d <sysfile_write+0x126>
            ret = file_write(fd, buffer, alen, &alen);
c010944a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010944d:	8d 55 e4             	lea    -0x1c(%ebp),%edx
c0109450:	52                   	push   %edx
c0109451:	50                   	push   %eax
c0109452:	ff 75 e8             	pushl  -0x18(%ebp)
c0109455:	ff 75 08             	pushl  0x8(%ebp)
c0109458:	e8 60 0c 00 00       	call   c010a0bd <file_write>
c010945d:	83 c4 10             	add    $0x10,%esp
c0109460:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (alen != 0) {
c0109463:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109466:	85 c0                	test   %eax,%eax
c0109468:	74 33                	je     c010949d <sysfile_write+0x126>
                assert(len >= alen);
c010946a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010946d:	39 45 10             	cmp    %eax,0x10(%ebp)
c0109470:	73 19                	jae    c010948b <sysfile_write+0x114>
c0109472:	68 12 50 11 c0       	push   $0xc0115012
c0109477:	68 1e 50 11 c0       	push   $0xc011501e
c010947c:	68 8a 00 00 00       	push   $0x8a
c0109481:	68 33 50 11 c0       	push   $0xc0115033
c0109486:	e8 5a 70 ff ff       	call   c01004e5 <__panic>
                base += alen, len -= alen, copied += alen;
c010948b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010948e:	01 45 0c             	add    %eax,0xc(%ebp)
c0109491:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109494:	29 45 10             	sub    %eax,0x10(%ebp)
c0109497:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010949a:	01 45 f0             	add    %eax,-0x10(%ebp)
            }
        }
        if (ret != 0 || alen == 0) {
c010949d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01094a1:	75 11                	jne    c01094b4 <sysfile_write+0x13d>
c01094a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01094a6:	85 c0                	test   %eax,%eax
c01094a8:	74 0a                	je     c01094b4 <sysfile_write+0x13d>
        return -E_NO_MEM;
    }

    int ret = 0;
    size_t copied = 0, alen;
    while (len != 0) {
c01094aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01094ae:	0f 85 3a ff ff ff    	jne    c01093ee <sysfile_write+0x77>
            goto out;
        }
    }

out:
    kfree(buffer);
c01094b4:	83 ec 0c             	sub    $0xc,%esp
c01094b7:	ff 75 e8             	pushl  -0x18(%ebp)
c01094ba:	e8 9d d9 ff ff       	call   c0106e5c <kfree>
c01094bf:	83 c4 10             	add    $0x10,%esp
    if (copied != 0) {
c01094c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01094c6:	74 05                	je     c01094cd <sysfile_write+0x156>
        return copied;
c01094c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01094cb:	eb 03                	jmp    c01094d0 <sysfile_write+0x159>
    }
    return ret;
c01094cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01094d0:	c9                   	leave  
c01094d1:	c3                   	ret    

c01094d2 <sysfile_seek>:

/* sysfile_seek - seek file */
int
sysfile_seek(int fd, off_t pos, int whence) {
c01094d2:	55                   	push   %ebp
c01094d3:	89 e5                	mov    %esp,%ebp
c01094d5:	83 ec 08             	sub    $0x8,%esp
    return file_seek(fd, pos, whence);
c01094d8:	83 ec 04             	sub    $0x4,%esp
c01094db:	ff 75 10             	pushl  0x10(%ebp)
c01094de:	ff 75 0c             	pushl  0xc(%ebp)
c01094e1:	ff 75 08             	pushl  0x8(%ebp)
c01094e4:	e8 01 0d 00 00       	call   c010a1ea <file_seek>
c01094e9:	83 c4 10             	add    $0x10,%esp
}
c01094ec:	c9                   	leave  
c01094ed:	c3                   	ret    

c01094ee <sysfile_fstat>:

/* sysfile_fstat - stat file */
int
sysfile_fstat(int fd, struct stat *__stat) {
c01094ee:	55                   	push   %ebp
c01094ef:	89 e5                	mov    %esp,%ebp
c01094f1:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c01094f4:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01094f9:	8b 40 18             	mov    0x18(%eax),%eax
c01094fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct stat __local_stat, *stat = &__local_stat;
c01094ff:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109502:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = file_fstat(fd, stat)) != 0) {
c0109505:	83 ec 08             	sub    $0x8,%esp
c0109508:	ff 75 ec             	pushl  -0x14(%ebp)
c010950b:	ff 75 08             	pushl  0x8(%ebp)
c010950e:	e8 69 0e 00 00       	call   c010a37c <file_fstat>
c0109513:	83 c4 10             	add    $0x10,%esp
c0109516:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109519:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010951d:	74 05                	je     c0109524 <sysfile_fstat+0x36>
        return ret;
c010951f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109522:	eb 3d                	jmp    c0109561 <sysfile_fstat+0x73>
    }

    lock_mm(mm);
c0109524:	83 ec 0c             	sub    $0xc,%esp
c0109527:	ff 75 f0             	pushl  -0x10(%ebp)
c010952a:	e8 91 fb ff ff       	call   c01090c0 <lock_mm>
c010952f:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __stat, stat, sizeof(struct stat))) {
c0109532:	6a 10                	push   $0x10
c0109534:	ff 75 ec             	pushl  -0x14(%ebp)
c0109537:	ff 75 0c             	pushl  0xc(%ebp)
c010953a:	ff 75 f0             	pushl  -0x10(%ebp)
c010953d:	e8 c0 be ff ff       	call   c0105402 <copy_to_user>
c0109542:	83 c4 10             	add    $0x10,%esp
c0109545:	85 c0                	test   %eax,%eax
c0109547:	75 07                	jne    c0109550 <sysfile_fstat+0x62>
            ret = -E_INVAL;
c0109549:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0109550:	83 ec 0c             	sub    $0xc,%esp
c0109553:	ff 75 f0             	pushl  -0x10(%ebp)
c0109556:	e8 9d fb ff ff       	call   c01090f8 <unlock_mm>
c010955b:	83 c4 10             	add    $0x10,%esp
    return ret;
c010955e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109561:	c9                   	leave  
c0109562:	c3                   	ret    

c0109563 <sysfile_fsync>:

/* sysfile_fsync - sync file */
int
sysfile_fsync(int fd) {
c0109563:	55                   	push   %ebp
c0109564:	89 e5                	mov    %esp,%ebp
c0109566:	83 ec 08             	sub    $0x8,%esp
    return file_fsync(fd);
c0109569:	83 ec 0c             	sub    $0xc,%esp
c010956c:	ff 75 08             	pushl  0x8(%ebp)
c010956f:	e8 c4 0e 00 00       	call   c010a438 <file_fsync>
c0109574:	83 c4 10             	add    $0x10,%esp
}
c0109577:	c9                   	leave  
c0109578:	c3                   	ret    

c0109579 <sysfile_chdir>:

/* sysfile_chdir - change dir */
int
sysfile_chdir(const char *__path) {
c0109579:	55                   	push   %ebp
c010957a:	89 e5                	mov    %esp,%ebp
c010957c:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c010957f:	83 ec 08             	sub    $0x8,%esp
c0109582:	ff 75 08             	pushl  0x8(%ebp)
c0109585:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109588:	50                   	push   %eax
c0109589:	e8 95 fb ff ff       	call   c0109123 <copy_path>
c010958e:	83 c4 10             	add    $0x10,%esp
c0109591:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109594:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109598:	74 05                	je     c010959f <sysfile_chdir+0x26>
        return ret;
c010959a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010959d:	eb 24                	jmp    c01095c3 <sysfile_chdir+0x4a>
    }
    ret = vfs_chdir(path);
c010959f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095a2:	83 ec 0c             	sub    $0xc,%esp
c01095a5:	50                   	push   %eax
c01095a6:	e8 c9 43 00 00       	call   c010d974 <vfs_chdir>
c01095ab:	83 c4 10             	add    $0x10,%esp
c01095ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c01095b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01095b4:	83 ec 0c             	sub    $0xc,%esp
c01095b7:	50                   	push   %eax
c01095b8:	e8 9f d8 ff ff       	call   c0106e5c <kfree>
c01095bd:	83 c4 10             	add    $0x10,%esp
    return ret;
c01095c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01095c3:	c9                   	leave  
c01095c4:	c3                   	ret    

c01095c5 <sysfile_link>:

/* sysfile_link - link file */
int
sysfile_link(const char *__path1, const char *__path2) {
c01095c5:	55                   	push   %ebp
c01095c6:	89 e5                	mov    %esp,%ebp
c01095c8:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c01095cb:	83 ec 08             	sub    $0x8,%esp
c01095ce:	ff 75 08             	pushl  0x8(%ebp)
c01095d1:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01095d4:	50                   	push   %eax
c01095d5:	e8 49 fb ff ff       	call   c0109123 <copy_path>
c01095da:	83 c4 10             	add    $0x10,%esp
c01095dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01095e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01095e4:	74 05                	je     c01095eb <sysfile_link+0x26>
        return ret;
c01095e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01095e9:	eb 66                	jmp    c0109651 <sysfile_link+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c01095eb:	83 ec 08             	sub    $0x8,%esp
c01095ee:	ff 75 0c             	pushl  0xc(%ebp)
c01095f1:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01095f4:	50                   	push   %eax
c01095f5:	e8 29 fb ff ff       	call   c0109123 <copy_path>
c01095fa:	83 c4 10             	add    $0x10,%esp
c01095fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109600:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109604:	74 14                	je     c010961a <sysfile_link+0x55>
        kfree(old_path);
c0109606:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109609:	83 ec 0c             	sub    $0xc,%esp
c010960c:	50                   	push   %eax
c010960d:	e8 4a d8 ff ff       	call   c0106e5c <kfree>
c0109612:	83 c4 10             	add    $0x10,%esp
        return ret;
c0109615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109618:	eb 37                	jmp    c0109651 <sysfile_link+0x8c>
    }
    ret = vfs_link(old_path, new_path);
c010961a:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010961d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109620:	83 ec 08             	sub    $0x8,%esp
c0109623:	52                   	push   %edx
c0109624:	50                   	push   %eax
c0109625:	e8 61 4a 00 00       	call   c010e08b <vfs_link>
c010962a:	83 c4 10             	add    $0x10,%esp
c010962d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c0109630:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109633:	83 ec 0c             	sub    $0xc,%esp
c0109636:	50                   	push   %eax
c0109637:	e8 20 d8 ff ff       	call   c0106e5c <kfree>
c010963c:	83 c4 10             	add    $0x10,%esp
c010963f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109642:	83 ec 0c             	sub    $0xc,%esp
c0109645:	50                   	push   %eax
c0109646:	e8 11 d8 ff ff       	call   c0106e5c <kfree>
c010964b:	83 c4 10             	add    $0x10,%esp
    return ret;
c010964e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0109651:	c9                   	leave  
c0109652:	c3                   	ret    

c0109653 <sysfile_rename>:

/* sysfile_rename - rename file */
int
sysfile_rename(const char *__path1, const char *__path2) {
c0109653:	55                   	push   %ebp
c0109654:	89 e5                	mov    %esp,%ebp
c0109656:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *old_path, *new_path;
    if ((ret = copy_path(&old_path, __path1)) != 0) {
c0109659:	83 ec 08             	sub    $0x8,%esp
c010965c:	ff 75 08             	pushl  0x8(%ebp)
c010965f:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109662:	50                   	push   %eax
c0109663:	e8 bb fa ff ff       	call   c0109123 <copy_path>
c0109668:	83 c4 10             	add    $0x10,%esp
c010966b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010966e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109672:	74 05                	je     c0109679 <sysfile_rename+0x26>
        return ret;
c0109674:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109677:	eb 66                	jmp    c01096df <sysfile_rename+0x8c>
    }
    if ((ret = copy_path(&new_path, __path2)) != 0) {
c0109679:	83 ec 08             	sub    $0x8,%esp
c010967c:	ff 75 0c             	pushl  0xc(%ebp)
c010967f:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0109682:	50                   	push   %eax
c0109683:	e8 9b fa ff ff       	call   c0109123 <copy_path>
c0109688:	83 c4 10             	add    $0x10,%esp
c010968b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010968e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109692:	74 14                	je     c01096a8 <sysfile_rename+0x55>
        kfree(old_path);
c0109694:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109697:	83 ec 0c             	sub    $0xc,%esp
c010969a:	50                   	push   %eax
c010969b:	e8 bc d7 ff ff       	call   c0106e5c <kfree>
c01096a0:	83 c4 10             	add    $0x10,%esp
        return ret;
c01096a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01096a6:	eb 37                	jmp    c01096df <sysfile_rename+0x8c>
    }
    ret = vfs_rename(old_path, new_path);
c01096a8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01096ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096ae:	83 ec 08             	sub    $0x8,%esp
c01096b1:	52                   	push   %edx
c01096b2:	50                   	push   %eax
c01096b3:	e8 c9 49 00 00       	call   c010e081 <vfs_rename>
c01096b8:	83 c4 10             	add    $0x10,%esp
c01096bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(old_path), kfree(new_path);
c01096be:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01096c1:	83 ec 0c             	sub    $0xc,%esp
c01096c4:	50                   	push   %eax
c01096c5:	e8 92 d7 ff ff       	call   c0106e5c <kfree>
c01096ca:	83 c4 10             	add    $0x10,%esp
c01096cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01096d0:	83 ec 0c             	sub    $0xc,%esp
c01096d3:	50                   	push   %eax
c01096d4:	e8 83 d7 ff ff       	call   c0106e5c <kfree>
c01096d9:	83 c4 10             	add    $0x10,%esp
    return ret;
c01096dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01096df:	c9                   	leave  
c01096e0:	c3                   	ret    

c01096e1 <sysfile_unlink>:

/* sysfile_unlink - unlink file */
int
sysfile_unlink(const char *__path) {
c01096e1:	55                   	push   %ebp
c01096e2:	89 e5                	mov    %esp,%ebp
c01096e4:	83 ec 18             	sub    $0x18,%esp
    int ret;
    char *path;
    if ((ret = copy_path(&path, __path)) != 0) {
c01096e7:	83 ec 08             	sub    $0x8,%esp
c01096ea:	ff 75 08             	pushl  0x8(%ebp)
c01096ed:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01096f0:	50                   	push   %eax
c01096f1:	e8 2d fa ff ff       	call   c0109123 <copy_path>
c01096f6:	83 c4 10             	add    $0x10,%esp
c01096f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01096fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109700:	74 05                	je     c0109707 <sysfile_unlink+0x26>
        return ret;
c0109702:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109705:	eb 24                	jmp    c010972b <sysfile_unlink+0x4a>
    }
    ret = vfs_unlink(path);
c0109707:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010970a:	83 ec 0c             	sub    $0xc,%esp
c010970d:	50                   	push   %eax
c010970e:	e8 64 49 00 00       	call   c010e077 <vfs_unlink>
c0109713:	83 c4 10             	add    $0x10,%esp
c0109716:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kfree(path);
c0109719:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010971c:	83 ec 0c             	sub    $0xc,%esp
c010971f:	50                   	push   %eax
c0109720:	e8 37 d7 ff ff       	call   c0106e5c <kfree>
c0109725:	83 c4 10             	add    $0x10,%esp
    return ret;
c0109728:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010972b:	c9                   	leave  
c010972c:	c3                   	ret    

c010972d <sysfile_getcwd>:

/* sysfile_get cwd - get current working directory */
int
sysfile_getcwd(char *buf, size_t len) {
c010972d:	55                   	push   %ebp
c010972e:	89 e5                	mov    %esp,%ebp
c0109730:	83 ec 28             	sub    $0x28,%esp
    struct mm_struct *mm = current->mm;
c0109733:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0109738:	8b 40 18             	mov    0x18(%eax),%eax
c010973b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (len == 0) {
c010973e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109742:	75 07                	jne    c010974b <sysfile_getcwd+0x1e>
        return -E_INVAL;
c0109744:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109749:	eb 66                	jmp    c01097b1 <sysfile_getcwd+0x84>
    }

    int ret = -E_INVAL;
c010974b:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    lock_mm(mm);
c0109752:	83 ec 0c             	sub    $0xc,%esp
c0109755:	ff 75 f0             	pushl  -0x10(%ebp)
c0109758:	e8 63 f9 ff ff       	call   c01090c0 <lock_mm>
c010975d:	83 c4 10             	add    $0x10,%esp
    {
        if (user_mem_check(mm, (uintptr_t)buf, len, 1)) {
c0109760:	8b 45 08             	mov    0x8(%ebp),%eax
c0109763:	6a 01                	push   $0x1
c0109765:	ff 75 0c             	pushl  0xc(%ebp)
c0109768:	50                   	push   %eax
c0109769:	ff 75 f0             	pushl  -0x10(%ebp)
c010976c:	e8 03 c4 ff ff       	call   c0105b74 <user_mem_check>
c0109771:	83 c4 10             	add    $0x10,%esp
c0109774:	85 c0                	test   %eax,%eax
c0109776:	74 28                	je     c01097a0 <sysfile_getcwd+0x73>
            struct iobuf __iob, *iob = iobuf_init(&__iob, buf, len, 0);
c0109778:	6a 00                	push   $0x0
c010977a:	ff 75 0c             	pushl  0xc(%ebp)
c010977d:	ff 75 08             	pushl  0x8(%ebp)
c0109780:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109783:	50                   	push   %eax
c0109784:	e8 cc 0e 00 00       	call   c010a655 <iobuf_init>
c0109789:	83 c4 10             	add    $0x10,%esp
c010978c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            ret = vfs_getcwd(iob);
c010978f:	83 ec 0c             	sub    $0xc,%esp
c0109792:	ff 75 ec             	pushl  -0x14(%ebp)
c0109795:	e8 21 42 00 00       	call   c010d9bb <vfs_getcwd>
c010979a:	83 c4 10             	add    $0x10,%esp
c010979d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c01097a0:	83 ec 0c             	sub    $0xc,%esp
c01097a3:	ff 75 f0             	pushl  -0x10(%ebp)
c01097a6:	e8 4d f9 ff ff       	call   c01090f8 <unlock_mm>
c01097ab:	83 c4 10             	add    $0x10,%esp
    return ret;
c01097ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01097b1:	c9                   	leave  
c01097b2:	c3                   	ret    

c01097b3 <sysfile_getdirentry>:

/* sysfile_getdirentry - get the file entry in DIR */
int
sysfile_getdirentry(int fd, struct dirent *__direntp) {
c01097b3:	55                   	push   %ebp
c01097b4:	89 e5                	mov    %esp,%ebp
c01097b6:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c01097b9:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c01097be:	8b 40 18             	mov    0x18(%eax),%eax
c01097c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct dirent *direntp;
    if ((direntp = kmalloc(sizeof(struct dirent))) == NULL) {
c01097c4:	83 ec 0c             	sub    $0xc,%esp
c01097c7:	68 04 01 00 00       	push   $0x104
c01097cc:	e8 73 d6 ff ff       	call   c0106e44 <kmalloc>
c01097d1:	83 c4 10             	add    $0x10,%esp
c01097d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01097d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01097db:	75 0a                	jne    c01097e7 <sysfile_getdirentry+0x34>
        return -E_NO_MEM;
c01097dd:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c01097e2:	e9 b6 00 00 00       	jmp    c010989d <sysfile_getdirentry+0xea>
    }

    int ret = 0;
c01097e7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_mm(mm);
c01097ee:	83 ec 0c             	sub    $0xc,%esp
c01097f1:	ff 75 f0             	pushl  -0x10(%ebp)
c01097f4:	e8 c7 f8 ff ff       	call   c01090c0 <lock_mm>
c01097f9:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_from_user(mm, &(direntp->offset), &(__direntp->offset), sizeof(direntp->offset), 1)) {
c01097fc:	8b 55 0c             	mov    0xc(%ebp),%edx
c01097ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109802:	83 ec 0c             	sub    $0xc,%esp
c0109805:	6a 01                	push   $0x1
c0109807:	6a 04                	push   $0x4
c0109809:	52                   	push   %edx
c010980a:	50                   	push   %eax
c010980b:	ff 75 f0             	pushl  -0x10(%ebp)
c010980e:	e8 ae bb ff ff       	call   c01053c1 <copy_from_user>
c0109813:	83 c4 20             	add    $0x20,%esp
c0109816:	85 c0                	test   %eax,%eax
c0109818:	75 07                	jne    c0109821 <sysfile_getdirentry+0x6e>
            ret = -E_INVAL;
c010981a:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c0109821:	83 ec 0c             	sub    $0xc,%esp
c0109824:	ff 75 f0             	pushl  -0x10(%ebp)
c0109827:	e8 cc f8 ff ff       	call   c01090f8 <unlock_mm>
c010982c:	83 c4 10             	add    $0x10,%esp

    if (ret != 0 || (ret = file_getdirentry(fd, direntp)) != 0) {
c010982f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109833:	75 57                	jne    c010988c <sysfile_getdirentry+0xd9>
c0109835:	83 ec 08             	sub    $0x8,%esp
c0109838:	ff 75 ec             	pushl  -0x14(%ebp)
c010983b:	ff 75 08             	pushl  0x8(%ebp)
c010983e:	e8 ae 0c 00 00       	call   c010a4f1 <file_getdirentry>
c0109843:	83 c4 10             	add    $0x10,%esp
c0109846:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109849:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010984d:	75 3d                	jne    c010988c <sysfile_getdirentry+0xd9>
        goto out;
    }

    lock_mm(mm);
c010984f:	83 ec 0c             	sub    $0xc,%esp
c0109852:	ff 75 f0             	pushl  -0x10(%ebp)
c0109855:	e8 66 f8 ff ff       	call   c01090c0 <lock_mm>
c010985a:	83 c4 10             	add    $0x10,%esp
    {
        if (!copy_to_user(mm, __direntp, direntp, sizeof(struct dirent))) {
c010985d:	68 04 01 00 00       	push   $0x104
c0109862:	ff 75 ec             	pushl  -0x14(%ebp)
c0109865:	ff 75 0c             	pushl  0xc(%ebp)
c0109868:	ff 75 f0             	pushl  -0x10(%ebp)
c010986b:	e8 92 bb ff ff       	call   c0105402 <copy_to_user>
c0109870:	83 c4 10             	add    $0x10,%esp
c0109873:	85 c0                	test   %eax,%eax
c0109875:	75 07                	jne    c010987e <sysfile_getdirentry+0xcb>
            ret = -E_INVAL;
c0109877:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        }
    }
    unlock_mm(mm);
c010987e:	83 ec 0c             	sub    $0xc,%esp
c0109881:	ff 75 f0             	pushl  -0x10(%ebp)
c0109884:	e8 6f f8 ff ff       	call   c01090f8 <unlock_mm>
c0109889:	83 c4 10             	add    $0x10,%esp

out:
    kfree(direntp);
c010988c:	83 ec 0c             	sub    $0xc,%esp
c010988f:	ff 75 ec             	pushl  -0x14(%ebp)
c0109892:	e8 c5 d5 ff ff       	call   c0106e5c <kfree>
c0109897:	83 c4 10             	add    $0x10,%esp
    return ret;
c010989a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010989d:	c9                   	leave  
c010989e:	c3                   	ret    

c010989f <sysfile_dup>:

/* sysfile_dup -  duplicate fd1 to fd2 */
int
sysfile_dup(int fd1, int fd2) {
c010989f:	55                   	push   %ebp
c01098a0:	89 e5                	mov    %esp,%ebp
c01098a2:	83 ec 08             	sub    $0x8,%esp
    return file_dup(fd1, fd2);
c01098a5:	83 ec 08             	sub    $0x8,%esp
c01098a8:	ff 75 0c             	pushl  0xc(%ebp)
c01098ab:	ff 75 08             	pushl  0x8(%ebp)
c01098ae:	e8 41 0d 00 00       	call   c010a5f4 <file_dup>
c01098b3:	83 c4 10             	add    $0x10,%esp
}
c01098b6:	c9                   	leave  
c01098b7:	c3                   	ret    

c01098b8 <sysfile_pipe>:

int
sysfile_pipe(int *fd_store) {
c01098b8:	55                   	push   %ebp
c01098b9:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01098bb:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01098c0:	5d                   	pop    %ebp
c01098c1:	c3                   	ret    

c01098c2 <sysfile_mkfifo>:

int
sysfile_mkfifo(const char *__name, uint32_t open_flags) {
c01098c2:	55                   	push   %ebp
c01098c3:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c01098c5:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c01098ca:	5d                   	pop    %ebp
c01098cb:	c3                   	ret    

c01098cc <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c01098cc:	55                   	push   %ebp
c01098cd:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c01098cf:	8b 45 08             	mov    0x8(%ebp),%eax
c01098d2:	8b 40 08             	mov    0x8(%eax),%eax
}
c01098d5:	5d                   	pop    %ebp
c01098d6:	c3                   	ret    

c01098d7 <fopen_count>:
int file_dup(int fd1, int fd2);
int file_pipe(int fd[]);
int file_mkfifo(const char *name, uint32_t open_flags);

static inline int
fopen_count(struct file *file) {
c01098d7:	55                   	push   %ebp
c01098d8:	89 e5                	mov    %esp,%ebp
    return file->open_count;
c01098da:	8b 45 08             	mov    0x8(%ebp),%eax
c01098dd:	8b 40 18             	mov    0x18(%eax),%eax
}
c01098e0:	5d                   	pop    %ebp
c01098e1:	c3                   	ret    

c01098e2 <fopen_count_inc>:

static inline int
fopen_count_inc(struct file *file) {
c01098e2:	55                   	push   %ebp
c01098e3:	89 e5                	mov    %esp,%ebp
    file->open_count += 1;
c01098e5:	8b 45 08             	mov    0x8(%ebp),%eax
c01098e8:	8b 40 18             	mov    0x18(%eax),%eax
c01098eb:	8d 50 01             	lea    0x1(%eax),%edx
c01098ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f1:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c01098f4:	8b 45 08             	mov    0x8(%ebp),%eax
c01098f7:	8b 40 18             	mov    0x18(%eax),%eax
}
c01098fa:	5d                   	pop    %ebp
c01098fb:	c3                   	ret    

c01098fc <fopen_count_dec>:

static inline int
fopen_count_dec(struct file *file) {
c01098fc:	55                   	push   %ebp
c01098fd:	89 e5                	mov    %esp,%ebp
    file->open_count -= 1;
c01098ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0109902:	8b 40 18             	mov    0x18(%eax),%eax
c0109905:	8d 50 ff             	lea    -0x1(%eax),%edx
c0109908:	8b 45 08             	mov    0x8(%ebp),%eax
c010990b:	89 50 18             	mov    %edx,0x18(%eax)
    return file->open_count;
c010990e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109911:	8b 40 18             	mov    0x18(%eax),%eax
}
c0109914:	5d                   	pop    %ebp
c0109915:	c3                   	ret    

c0109916 <get_fd_array>:

#define testfd(fd)                          ((fd) >= 0 && (fd) < FILES_STRUCT_NENTRY)

// get_fd_array - get current process's open files table
static struct file *
get_fd_array(void) {
c0109916:	55                   	push   %ebp
c0109917:	89 e5                	mov    %esp,%ebp
c0109919:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = current->filesp;
c010991c:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c0109921:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c0109927:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(filesp != NULL && files_count(filesp) > 0);
c010992a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010992e:	74 0f                	je     c010993f <get_fd_array+0x29>
c0109930:	ff 75 f4             	pushl  -0xc(%ebp)
c0109933:	e8 94 ff ff ff       	call   c01098cc <files_count>
c0109938:	83 c4 04             	add    $0x4,%esp
c010993b:	85 c0                	test   %eax,%eax
c010993d:	7f 16                	jg     c0109955 <get_fd_array+0x3f>
c010993f:	68 48 50 11 c0       	push   $0xc0115048
c0109944:	68 72 50 11 c0       	push   $0xc0115072
c0109949:	6a 14                	push   $0x14
c010994b:	68 87 50 11 c0       	push   $0xc0115087
c0109950:	e8 90 6b ff ff       	call   c01004e5 <__panic>
    return filesp->fd_array;
c0109955:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109958:	8b 40 04             	mov    0x4(%eax),%eax
}
c010995b:	c9                   	leave  
c010995c:	c3                   	ret    

c010995d <fd_array_init>:

// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
c010995d:	55                   	push   %ebp
c010995e:	89 e5                	mov    %esp,%ebp
c0109960:	83 ec 10             	sub    $0x10,%esp
    int fd;
    struct file *file = fd_array;
c0109963:	8b 45 08             	mov    0x8(%ebp),%eax
c0109966:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c0109969:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
c0109970:	eb 24                	jmp    c0109996 <fd_array_init+0x39>
        file->open_count = 0;
c0109972:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109975:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
        file->status = FD_NONE, file->fd = fd;
c010997c:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010997f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
c0109985:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0109988:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010998b:	89 50 0c             	mov    %edx,0xc(%eax)
// fd_array_init - initialize the open files table
void
fd_array_init(struct file *fd_array) {
    int fd;
    struct file *file = fd_array;
    for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c010998e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0109992:	83 45 f8 1c          	addl   $0x1c,-0x8(%ebp)
c0109996:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0109999:	3d 90 00 00 00       	cmp    $0x90,%eax
c010999e:	76 d2                	jbe    c0109972 <fd_array_init+0x15>
        file->open_count = 0;
        file->status = FD_NONE, file->fd = fd;
    }
}
c01099a0:	90                   	nop
c01099a1:	c9                   	leave  
c01099a2:	c3                   	ret    

c01099a3 <fd_array_alloc>:

// fs_array_alloc - allocate a free file item (with FD_NONE status) in open files table
static int
fd_array_alloc(int fd, struct file **file_store) {
c01099a3:	55                   	push   %ebp
c01099a4:	89 e5                	mov    %esp,%ebp
c01099a6:	83 ec 18             	sub    $0x18,%esp
//    panic("debug");
    struct file *file = get_fd_array();
c01099a9:	e8 68 ff ff ff       	call   c0109916 <get_fd_array>
c01099ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (fd == NO_FD) {
c01099b1:	81 7d 08 d9 6a ff ff 	cmpl   $0xffff6ad9,0x8(%ebp)
c01099b8:	75 2e                	jne    c01099e8 <fd_array_alloc+0x45>
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c01099ba:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
c01099c1:	eb 11                	jmp    c01099d4 <fd_array_alloc+0x31>
            if (file->status == FD_NONE) {
c01099c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01099c6:	8b 00                	mov    (%eax),%eax
c01099c8:	85 c0                	test   %eax,%eax
c01099ca:	74 57                	je     c0109a23 <fd_array_alloc+0x80>
static int
fd_array_alloc(int fd, struct file **file_store) {
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
c01099cc:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01099d0:	83 45 f4 1c          	addl   $0x1c,-0xc(%ebp)
c01099d4:	8b 45 08             	mov    0x8(%ebp),%eax
c01099d7:	3d 90 00 00 00       	cmp    $0x90,%eax
c01099dc:	76 e5                	jbe    c01099c3 <fd_array_alloc+0x20>
            if (file->status == FD_NONE) {
                goto found;
            }
        }
        return -E_MAX_OPEN;
c01099de:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
c01099e3:	e9 87 00 00 00       	jmp    c0109a6f <fd_array_alloc+0xcc>
    }
    else {
        if (testfd(fd)) {
c01099e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c01099ec:	78 2e                	js     c0109a1c <fd_array_alloc+0x79>
c01099ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01099f1:	3d 90 00 00 00       	cmp    $0x90,%eax
c01099f6:	77 24                	ja     c0109a1c <fd_array_alloc+0x79>
            file += fd;
c01099f8:	8b 45 08             	mov    0x8(%ebp),%eax
c01099fb:	c1 e0 02             	shl    $0x2,%eax
c01099fe:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0109a05:	29 c2                	sub    %eax,%edx
c0109a07:	89 d0                	mov    %edx,%eax
c0109a09:	01 45 f4             	add    %eax,-0xc(%ebp)
            if (file->status == FD_NONE) {
c0109a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a0f:	8b 00                	mov    (%eax),%eax
c0109a11:	85 c0                	test   %eax,%eax
c0109a13:	74 11                	je     c0109a26 <fd_array_alloc+0x83>
                goto found;
            }
            return -E_BUSY;
c0109a15:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0109a1a:	eb 53                	jmp    c0109a6f <fd_array_alloc+0xcc>
        }
        return -E_INVAL;
c0109a1c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109a21:	eb 4c                	jmp    c0109a6f <fd_array_alloc+0xcc>
//    panic("debug");
    struct file *file = get_fd_array();
    if (fd == NO_FD) {
        for (fd = 0; fd < FILES_STRUCT_NENTRY; fd ++, file ++) {
            if (file->status == FD_NONE) {
                goto found;
c0109a23:	90                   	nop
c0109a24:	eb 01                	jmp    c0109a27 <fd_array_alloc+0x84>
    }
    else {
        if (testfd(fd)) {
            file += fd;
            if (file->status == FD_NONE) {
                goto found;
c0109a26:	90                   	nop
            return -E_BUSY;
        }
        return -E_INVAL;
    }
found:
    assert(fopen_count(file) == 0);
c0109a27:	83 ec 0c             	sub    $0xc,%esp
c0109a2a:	ff 75 f4             	pushl  -0xc(%ebp)
c0109a2d:	e8 a5 fe ff ff       	call   c01098d7 <fopen_count>
c0109a32:	83 c4 10             	add    $0x10,%esp
c0109a35:	85 c0                	test   %eax,%eax
c0109a37:	74 16                	je     c0109a4f <fd_array_alloc+0xac>
c0109a39:	68 96 50 11 c0       	push   $0xc0115096
c0109a3e:	68 72 50 11 c0       	push   $0xc0115072
c0109a43:	6a 3b                	push   $0x3b
c0109a45:	68 87 50 11 c0       	push   $0xc0115087
c0109a4a:	e8 96 6a ff ff       	call   c01004e5 <__panic>
    file->status = FD_INIT, file->node = NULL;
c0109a4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a52:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
c0109a58:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109a5b:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
    *file_store = file;
c0109a62:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109a65:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109a68:	89 10                	mov    %edx,(%eax)
    return 0;
c0109a6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109a6f:	c9                   	leave  
c0109a70:	c3                   	ret    

c0109a71 <fd_array_free>:

// fd_array_free - free a file item in open files table
static void
fd_array_free(struct file *file) {
c0109a71:	55                   	push   %ebp
c0109a72:	89 e5                	mov    %esp,%ebp
c0109a74:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT || file->status == FD_CLOSED);
c0109a77:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a7a:	8b 00                	mov    (%eax),%eax
c0109a7c:	83 f8 01             	cmp    $0x1,%eax
c0109a7f:	74 20                	je     c0109aa1 <fd_array_free+0x30>
c0109a81:	8b 45 08             	mov    0x8(%ebp),%eax
c0109a84:	8b 00                	mov    (%eax),%eax
c0109a86:	83 f8 03             	cmp    $0x3,%eax
c0109a89:	74 16                	je     c0109aa1 <fd_array_free+0x30>
c0109a8b:	68 b0 50 11 c0       	push   $0xc01150b0
c0109a90:	68 72 50 11 c0       	push   $0xc0115072
c0109a95:	6a 44                	push   $0x44
c0109a97:	68 87 50 11 c0       	push   $0xc0115087
c0109a9c:	e8 44 6a ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) == 0);
c0109aa1:	83 ec 0c             	sub    $0xc,%esp
c0109aa4:	ff 75 08             	pushl  0x8(%ebp)
c0109aa7:	e8 2b fe ff ff       	call   c01098d7 <fopen_count>
c0109aac:	83 c4 10             	add    $0x10,%esp
c0109aaf:	85 c0                	test   %eax,%eax
c0109ab1:	74 16                	je     c0109ac9 <fd_array_free+0x58>
c0109ab3:	68 96 50 11 c0       	push   $0xc0115096
c0109ab8:	68 72 50 11 c0       	push   $0xc0115072
c0109abd:	6a 45                	push   $0x45
c0109abf:	68 87 50 11 c0       	push   $0xc0115087
c0109ac4:	e8 1c 6a ff ff       	call   c01004e5 <__panic>
    if (file->status == FD_CLOSED) {
c0109ac9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109acc:	8b 00                	mov    (%eax),%eax
c0109ace:	83 f8 03             	cmp    $0x3,%eax
c0109ad1:	75 12                	jne    c0109ae5 <fd_array_free+0x74>
        vfs_close(file->node);
c0109ad3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ad6:	8b 40 14             	mov    0x14(%eax),%eax
c0109ad9:	83 ec 0c             	sub    $0xc,%esp
c0109adc:	50                   	push   %eax
c0109add:	e8 6c 45 00 00       	call   c010e04e <vfs_close>
c0109ae2:	83 c4 10             	add    $0x10,%esp
    }
    file->status = FD_NONE;
c0109ae5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ae8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
c0109aee:	90                   	nop
c0109aef:	c9                   	leave  
c0109af0:	c3                   	ret    

c0109af1 <fd_array_acquire>:

static void
fd_array_acquire(struct file *file) {
c0109af1:	55                   	push   %ebp
c0109af2:	89 e5                	mov    %esp,%ebp
c0109af4:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c0109af7:	8b 45 08             	mov    0x8(%ebp),%eax
c0109afa:	8b 00                	mov    (%eax),%eax
c0109afc:	83 f8 02             	cmp    $0x2,%eax
c0109aff:	74 16                	je     c0109b17 <fd_array_acquire+0x26>
c0109b01:	68 e5 50 11 c0       	push   $0xc01150e5
c0109b06:	68 72 50 11 c0       	push   $0xc0115072
c0109b0b:	6a 4e                	push   $0x4e
c0109b0d:	68 87 50 11 c0       	push   $0xc0115087
c0109b12:	e8 ce 69 ff ff       	call   c01004e5 <__panic>
    fopen_count_inc(file);
c0109b17:	83 ec 0c             	sub    $0xc,%esp
c0109b1a:	ff 75 08             	pushl  0x8(%ebp)
c0109b1d:	e8 c0 fd ff ff       	call   c01098e2 <fopen_count_inc>
c0109b22:	83 c4 10             	add    $0x10,%esp
}
c0109b25:	90                   	nop
c0109b26:	c9                   	leave  
c0109b27:	c3                   	ret    

c0109b28 <fd_array_release>:

// fd_array_release - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
static void
fd_array_release(struct file *file) {
c0109b28:	55                   	push   %ebp
c0109b29:	89 e5                	mov    %esp,%ebp
c0109b2b:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED || file->status == FD_CLOSED);
c0109b2e:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b31:	8b 00                	mov    (%eax),%eax
c0109b33:	83 f8 02             	cmp    $0x2,%eax
c0109b36:	74 20                	je     c0109b58 <fd_array_release+0x30>
c0109b38:	8b 45 08             	mov    0x8(%ebp),%eax
c0109b3b:	8b 00                	mov    (%eax),%eax
c0109b3d:	83 f8 03             	cmp    $0x3,%eax
c0109b40:	74 16                	je     c0109b58 <fd_array_release+0x30>
c0109b42:	68 00 51 11 c0       	push   $0xc0115100
c0109b47:	68 72 50 11 c0       	push   $0xc0115072
c0109b4c:	6a 55                	push   $0x55
c0109b4e:	68 87 50 11 c0       	push   $0xc0115087
c0109b53:	e8 8d 69 ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) > 0);
c0109b58:	83 ec 0c             	sub    $0xc,%esp
c0109b5b:	ff 75 08             	pushl  0x8(%ebp)
c0109b5e:	e8 74 fd ff ff       	call   c01098d7 <fopen_count>
c0109b63:	83 c4 10             	add    $0x10,%esp
c0109b66:	85 c0                	test   %eax,%eax
c0109b68:	7f 16                	jg     c0109b80 <fd_array_release+0x58>
c0109b6a:	68 37 51 11 c0       	push   $0xc0115137
c0109b6f:	68 72 50 11 c0       	push   $0xc0115072
c0109b74:	6a 56                	push   $0x56
c0109b76:	68 87 50 11 c0       	push   $0xc0115087
c0109b7b:	e8 65 69 ff ff       	call   c01004e5 <__panic>
    if (fopen_count_dec(file) == 0) {
c0109b80:	83 ec 0c             	sub    $0xc,%esp
c0109b83:	ff 75 08             	pushl  0x8(%ebp)
c0109b86:	e8 71 fd ff ff       	call   c01098fc <fopen_count_dec>
c0109b8b:	83 c4 10             	add    $0x10,%esp
c0109b8e:	85 c0                	test   %eax,%eax
c0109b90:	75 0e                	jne    c0109ba0 <fd_array_release+0x78>
        fd_array_free(file);
c0109b92:	83 ec 0c             	sub    $0xc,%esp
c0109b95:	ff 75 08             	pushl  0x8(%ebp)
c0109b98:	e8 d4 fe ff ff       	call   c0109a71 <fd_array_free>
c0109b9d:	83 c4 10             	add    $0x10,%esp
    }
}
c0109ba0:	90                   	nop
c0109ba1:	c9                   	leave  
c0109ba2:	c3                   	ret    

c0109ba3 <fd_array_open>:

// fd_array_open - file's open_count++, set status to FD_OPENED
void
fd_array_open(struct file *file) {
c0109ba3:	55                   	push   %ebp
c0109ba4:	89 e5                	mov    %esp,%ebp
c0109ba6:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_INIT && file->node != NULL);
c0109ba9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bac:	8b 00                	mov    (%eax),%eax
c0109bae:	83 f8 01             	cmp    $0x1,%eax
c0109bb1:	75 0a                	jne    c0109bbd <fd_array_open+0x1a>
c0109bb3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bb6:	8b 40 14             	mov    0x14(%eax),%eax
c0109bb9:	85 c0                	test   %eax,%eax
c0109bbb:	75 16                	jne    c0109bd3 <fd_array_open+0x30>
c0109bbd:	68 50 51 11 c0       	push   $0xc0115150
c0109bc2:	68 72 50 11 c0       	push   $0xc0115072
c0109bc7:	6a 5f                	push   $0x5f
c0109bc9:	68 87 50 11 c0       	push   $0xc0115087
c0109bce:	e8 12 69 ff ff       	call   c01004e5 <__panic>
    file->status = FD_OPENED;
c0109bd3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bd6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    fopen_count_inc(file);
c0109bdc:	83 ec 0c             	sub    $0xc,%esp
c0109bdf:	ff 75 08             	pushl  0x8(%ebp)
c0109be2:	e8 fb fc ff ff       	call   c01098e2 <fopen_count_inc>
c0109be7:	83 c4 10             	add    $0x10,%esp
}
c0109bea:	90                   	nop
c0109beb:	c9                   	leave  
c0109bec:	c3                   	ret    

c0109bed <fd_array_close>:

// fd_array_close - file's open_count--; if file's open_count-- == 0 , then call fd_array_free to free this file item
void
fd_array_close(struct file *file) {
c0109bed:	55                   	push   %ebp
c0109bee:	89 e5                	mov    %esp,%ebp
c0109bf0:	83 ec 08             	sub    $0x8,%esp
    assert(file->status == FD_OPENED);
c0109bf3:	8b 45 08             	mov    0x8(%ebp),%eax
c0109bf6:	8b 00                	mov    (%eax),%eax
c0109bf8:	83 f8 02             	cmp    $0x2,%eax
c0109bfb:	74 16                	je     c0109c13 <fd_array_close+0x26>
c0109bfd:	68 e5 50 11 c0       	push   $0xc01150e5
c0109c02:	68 72 50 11 c0       	push   $0xc0115072
c0109c07:	6a 67                	push   $0x67
c0109c09:	68 87 50 11 c0       	push   $0xc0115087
c0109c0e:	e8 d2 68 ff ff       	call   c01004e5 <__panic>
    assert(fopen_count(file) > 0);
c0109c13:	83 ec 0c             	sub    $0xc,%esp
c0109c16:	ff 75 08             	pushl  0x8(%ebp)
c0109c19:	e8 b9 fc ff ff       	call   c01098d7 <fopen_count>
c0109c1e:	83 c4 10             	add    $0x10,%esp
c0109c21:	85 c0                	test   %eax,%eax
c0109c23:	7f 16                	jg     c0109c3b <fd_array_close+0x4e>
c0109c25:	68 37 51 11 c0       	push   $0xc0115137
c0109c2a:	68 72 50 11 c0       	push   $0xc0115072
c0109c2f:	6a 68                	push   $0x68
c0109c31:	68 87 50 11 c0       	push   $0xc0115087
c0109c36:	e8 aa 68 ff ff       	call   c01004e5 <__panic>
    file->status = FD_CLOSED;
c0109c3b:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c3e:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    if (fopen_count_dec(file) == 0) {
c0109c44:	83 ec 0c             	sub    $0xc,%esp
c0109c47:	ff 75 08             	pushl  0x8(%ebp)
c0109c4a:	e8 ad fc ff ff       	call   c01098fc <fopen_count_dec>
c0109c4f:	83 c4 10             	add    $0x10,%esp
c0109c52:	85 c0                	test   %eax,%eax
c0109c54:	75 0e                	jne    c0109c64 <fd_array_close+0x77>
        fd_array_free(file);
c0109c56:	83 ec 0c             	sub    $0xc,%esp
c0109c59:	ff 75 08             	pushl  0x8(%ebp)
c0109c5c:	e8 10 fe ff ff       	call   c0109a71 <fd_array_free>
c0109c61:	83 c4 10             	add    $0x10,%esp
    }
}
c0109c64:	90                   	nop
c0109c65:	c9                   	leave  
c0109c66:	c3                   	ret    

c0109c67 <fd_array_dup>:

//fs_array_dup - duplicate file 'from'  to file 'to'
void
fd_array_dup(struct file *to, struct file *from) {
c0109c67:	55                   	push   %ebp
c0109c68:	89 e5                	mov    %esp,%ebp
c0109c6a:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[fd_array_dup]from fd=%d, to fd=%d\n",from->fd, to->fd);
    assert(to->status == FD_INIT && from->status == FD_OPENED);
c0109c6d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109c70:	8b 00                	mov    (%eax),%eax
c0109c72:	83 f8 01             	cmp    $0x1,%eax
c0109c75:	75 0a                	jne    c0109c81 <fd_array_dup+0x1a>
c0109c77:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c7a:	8b 00                	mov    (%eax),%eax
c0109c7c:	83 f8 02             	cmp    $0x2,%eax
c0109c7f:	74 16                	je     c0109c97 <fd_array_dup+0x30>
c0109c81:	68 80 51 11 c0       	push   $0xc0115180
c0109c86:	68 72 50 11 c0       	push   $0xc0115072
c0109c8b:	6a 73                	push   $0x73
c0109c8d:	68 87 50 11 c0       	push   $0xc0115087
c0109c92:	e8 4e 68 ff ff       	call   c01004e5 <__panic>
    to->pos = from->pos;
c0109c97:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109c9a:	8b 50 10             	mov    0x10(%eax),%edx
c0109c9d:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ca0:	89 50 10             	mov    %edx,0x10(%eax)
    to->readable = from->readable;
c0109ca3:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109ca6:	8b 50 04             	mov    0x4(%eax),%edx
c0109ca9:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cac:	89 50 04             	mov    %edx,0x4(%eax)
    to->writable = from->writable;
c0109caf:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cb2:	8b 50 08             	mov    0x8(%eax),%edx
c0109cb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0109cb8:	89 50 08             	mov    %edx,0x8(%eax)
    struct inode *node = from->node;
c0109cbb:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109cbe:	8b 40 14             	mov    0x14(%eax),%eax
c0109cc1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vop_ref_inc(node), vop_open_inc(node);
c0109cc4:	83 ec 0c             	sub    $0xc,%esp
c0109cc7:	ff 75 f4             	pushl  -0xc(%ebp)
c0109cca:	e8 c5 44 00 00       	call   c010e194 <inode_ref_inc>
c0109ccf:	83 c4 10             	add    $0x10,%esp
c0109cd2:	83 ec 0c             	sub    $0xc,%esp
c0109cd5:	ff 75 f4             	pushl  -0xc(%ebp)
c0109cd8:	e8 a5 45 00 00       	call   c010e282 <inode_open_inc>
c0109cdd:	83 c4 10             	add    $0x10,%esp
    to->node = node;
c0109ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0109ce3:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109ce6:	89 50 14             	mov    %edx,0x14(%eax)
    fd_array_open(to);
c0109ce9:	83 ec 0c             	sub    $0xc,%esp
c0109cec:	ff 75 08             	pushl  0x8(%ebp)
c0109cef:	e8 af fe ff ff       	call   c0109ba3 <fd_array_open>
c0109cf4:	83 c4 10             	add    $0x10,%esp
}
c0109cf7:	90                   	nop
c0109cf8:	c9                   	leave  
c0109cf9:	c3                   	ret    

c0109cfa <fd2file>:

// fd2file - use fd as index of fd_array, return the array item (file)
static inline int
fd2file(int fd, struct file **file_store) {
c0109cfa:	55                   	push   %ebp
c0109cfb:	89 e5                	mov    %esp,%ebp
c0109cfd:	83 ec 18             	sub    $0x18,%esp
    if (testfd(fd)) {
c0109d00:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0109d04:	78 4b                	js     c0109d51 <fd2file+0x57>
c0109d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d09:	3d 90 00 00 00       	cmp    $0x90,%eax
c0109d0e:	77 41                	ja     c0109d51 <fd2file+0x57>
        struct file *file = get_fd_array() + fd;
c0109d10:	e8 01 fc ff ff       	call   c0109916 <get_fd_array>
c0109d15:	89 c1                	mov    %eax,%ecx
c0109d17:	8b 45 08             	mov    0x8(%ebp),%eax
c0109d1a:	c1 e0 02             	shl    $0x2,%eax
c0109d1d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0109d24:	29 c2                	sub    %eax,%edx
c0109d26:	89 d0                	mov    %edx,%eax
c0109d28:	01 c8                	add    %ecx,%eax
c0109d2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (file->status == FD_OPENED && file->fd == fd) {
c0109d2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d30:	8b 00                	mov    (%eax),%eax
c0109d32:	83 f8 02             	cmp    $0x2,%eax
c0109d35:	75 1a                	jne    c0109d51 <fd2file+0x57>
c0109d37:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109d3a:	8b 40 0c             	mov    0xc(%eax),%eax
c0109d3d:	3b 45 08             	cmp    0x8(%ebp),%eax
c0109d40:	75 0f                	jne    c0109d51 <fd2file+0x57>
            *file_store = file;
c0109d42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109d45:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109d48:	89 10                	mov    %edx,(%eax)
            return 0;
c0109d4a:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d4f:	eb 05                	jmp    c0109d56 <fd2file+0x5c>
        }
    }
    return -E_INVAL;
c0109d51:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c0109d56:	c9                   	leave  
c0109d57:	c3                   	ret    

c0109d58 <file_testfd>:

// file_testfd - test file is readble or writable?
bool
file_testfd(int fd, bool readable, bool writable) {
c0109d58:	55                   	push   %ebp
c0109d59:	89 e5                	mov    %esp,%ebp
c0109d5b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0109d5e:	83 ec 08             	sub    $0x8,%esp
c0109d61:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109d64:	50                   	push   %eax
c0109d65:	ff 75 08             	pushl  0x8(%ebp)
c0109d68:	e8 8d ff ff ff       	call   c0109cfa <fd2file>
c0109d6d:	83 c4 10             	add    $0x10,%esp
c0109d70:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109d73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109d77:	74 07                	je     c0109d80 <file_testfd+0x28>
        return 0;
c0109d79:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d7e:	eb 33                	jmp    c0109db3 <file_testfd+0x5b>
    }
    if (readable && !file->readable) {
c0109d80:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0109d84:	74 11                	je     c0109d97 <file_testfd+0x3f>
c0109d86:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109d89:	8b 40 04             	mov    0x4(%eax),%eax
c0109d8c:	85 c0                	test   %eax,%eax
c0109d8e:	75 07                	jne    c0109d97 <file_testfd+0x3f>
        return 0;
c0109d90:	b8 00 00 00 00       	mov    $0x0,%eax
c0109d95:	eb 1c                	jmp    c0109db3 <file_testfd+0x5b>
    }
    if (writable && !file->writable) {
c0109d97:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0109d9b:	74 11                	je     c0109dae <file_testfd+0x56>
c0109d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109da0:	8b 40 08             	mov    0x8(%eax),%eax
c0109da3:	85 c0                	test   %eax,%eax
c0109da5:	75 07                	jne    c0109dae <file_testfd+0x56>
        return 0;
c0109da7:	b8 00 00 00 00       	mov    $0x0,%eax
c0109dac:	eb 05                	jmp    c0109db3 <file_testfd+0x5b>
    }
    return 1;
c0109dae:	b8 01 00 00 00       	mov    $0x1,%eax
}
c0109db3:	c9                   	leave  
c0109db4:	c3                   	ret    

c0109db5 <file_open>:

// open file
int
file_open(char *path, uint32_t open_flags) {
c0109db5:	55                   	push   %ebp
c0109db6:	89 e5                	mov    %esp,%ebp
c0109db8:	83 ec 38             	sub    $0x38,%esp
    bool readable = 0, writable = 0;
c0109dbb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0109dc2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    switch (open_flags & O_ACCMODE) {
c0109dc9:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109dcc:	83 e0 03             	and    $0x3,%eax
c0109dcf:	83 f8 01             	cmp    $0x1,%eax
c0109dd2:	74 15                	je     c0109de9 <file_open+0x34>
c0109dd4:	83 f8 01             	cmp    $0x1,%eax
c0109dd7:	72 07                	jb     c0109de0 <file_open+0x2b>
c0109dd9:	83 f8 02             	cmp    $0x2,%eax
c0109ddc:	74 14                	je     c0109df2 <file_open+0x3d>
c0109dde:	eb 21                	jmp    c0109e01 <file_open+0x4c>
    case O_RDONLY: readable = 1; break;
c0109de0:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
c0109de7:	eb 22                	jmp    c0109e0b <file_open+0x56>
    case O_WRONLY: writable = 1; break;
c0109de9:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0109df0:	eb 19                	jmp    c0109e0b <file_open+0x56>
    case O_RDWR:
        readable = writable = 1;
c0109df2:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
c0109df9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109dfc:	89 45 f4             	mov    %eax,-0xc(%ebp)
        break;
c0109dff:	eb 0a                	jmp    c0109e0b <file_open+0x56>
    default:
        return -E_INVAL;
c0109e01:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109e06:	e9 47 01 00 00       	jmp    c0109f52 <file_open+0x19d>
    }

    int ret;
    struct file *file;
    if ((ret = fd_array_alloc(NO_FD, &file)) != 0) {
c0109e0b:	83 ec 08             	sub    $0x8,%esp
c0109e0e:	8d 45 e0             	lea    -0x20(%ebp),%eax
c0109e11:	50                   	push   %eax
c0109e12:	68 d9 6a ff ff       	push   $0xffff6ad9
c0109e17:	e8 87 fb ff ff       	call   c01099a3 <fd_array_alloc>
c0109e1c:	83 c4 10             	add    $0x10,%esp
c0109e1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109e22:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109e26:	74 08                	je     c0109e30 <file_open+0x7b>
        return ret;
c0109e28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e2b:	e9 22 01 00 00       	jmp    c0109f52 <file_open+0x19d>
    }

    struct inode *node;
    if ((ret = vfs_open(path, open_flags, &node)) != 0) {
c0109e30:	83 ec 04             	sub    $0x4,%esp
c0109e33:	8d 45 dc             	lea    -0x24(%ebp),%eax
c0109e36:	50                   	push   %eax
c0109e37:	ff 75 0c             	pushl  0xc(%ebp)
c0109e3a:	ff 75 08             	pushl  0x8(%ebp)
c0109e3d:	e8 54 3f 00 00       	call   c010dd96 <vfs_open>
c0109e42:	83 c4 10             	add    $0x10,%esp
c0109e45:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109e48:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109e4c:	74 17                	je     c0109e65 <file_open+0xb0>
        fd_array_free(file);
c0109e4e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e51:	83 ec 0c             	sub    $0xc,%esp
c0109e54:	50                   	push   %eax
c0109e55:	e8 17 fc ff ff       	call   c0109a71 <fd_array_free>
c0109e5a:	83 c4 10             	add    $0x10,%esp
        return ret;
c0109e5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109e60:	e9 ed 00 00 00       	jmp    c0109f52 <file_open+0x19d>
    }

    file->pos = 0;
c0109e65:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109e68:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    if (open_flags & O_APPEND) {
c0109e6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0109e72:	83 e0 20             	and    $0x20,%eax
c0109e75:	85 c0                	test   %eax,%eax
c0109e77:	0f 84 a5 00 00 00    	je     c0109f22 <file_open+0x16d>
        struct stat __stat, *stat = &__stat;
c0109e7d:	8d 45 cc             	lea    -0x34(%ebp),%eax
c0109e80:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if ((ret = vop_fstat(node, stat)) != 0) {
c0109e83:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109e86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0109e89:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0109e8d:	74 17                	je     c0109ea6 <file_open+0xf1>
c0109e8f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e92:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e95:	85 c0                	test   %eax,%eax
c0109e97:	74 0d                	je     c0109ea6 <file_open+0xf1>
c0109e99:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109e9c:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109e9f:	8b 40 14             	mov    0x14(%eax),%eax
c0109ea2:	85 c0                	test   %eax,%eax
c0109ea4:	75 19                	jne    c0109ebf <file_open+0x10a>
c0109ea6:	68 b4 51 11 c0       	push   $0xc01151b4
c0109eab:	68 72 50 11 c0       	push   $0xc0115072
c0109eb0:	68 b8 00 00 00       	push   $0xb8
c0109eb5:	68 87 50 11 c0       	push   $0xc0115087
c0109eba:	e8 26 66 ff ff       	call   c01004e5 <__panic>
c0109ebf:	83 ec 08             	sub    $0x8,%esp
c0109ec2:	68 02 52 11 c0       	push   $0xc0115202
c0109ec7:	ff 75 e4             	pushl  -0x1c(%ebp)
c0109eca:	e8 97 44 00 00       	call   c010e366 <inode_check>
c0109ecf:	83 c4 10             	add    $0x10,%esp
c0109ed2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109ed5:	8b 40 3c             	mov    0x3c(%eax),%eax
c0109ed8:	8b 40 14             	mov    0x14(%eax),%eax
c0109edb:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109ede:	83 ec 08             	sub    $0x8,%esp
c0109ee1:	ff 75 e8             	pushl  -0x18(%ebp)
c0109ee4:	52                   	push   %edx
c0109ee5:	ff d0                	call   *%eax
c0109ee7:	83 c4 10             	add    $0x10,%esp
c0109eea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0109eed:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0109ef1:	74 23                	je     c0109f16 <file_open+0x161>
            vfs_close(node);
c0109ef3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0109ef6:	83 ec 0c             	sub    $0xc,%esp
c0109ef9:	50                   	push   %eax
c0109efa:	e8 4f 41 00 00       	call   c010e04e <vfs_close>
c0109eff:	83 c4 10             	add    $0x10,%esp
            fd_array_free(file);
c0109f02:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f05:	83 ec 0c             	sub    $0xc,%esp
c0109f08:	50                   	push   %eax
c0109f09:	e8 63 fb ff ff       	call   c0109a71 <fd_array_free>
c0109f0e:	83 c4 10             	add    $0x10,%esp
            return ret;
c0109f11:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0109f14:	eb 3c                	jmp    c0109f52 <file_open+0x19d>
        }
        file->pos = stat->st_size;
c0109f16:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f19:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0109f1c:	8b 52 0c             	mov    0xc(%edx),%edx
c0109f1f:	89 50 10             	mov    %edx,0x10(%eax)
    }

    file->node = node;
c0109f22:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f25:	8b 55 dc             	mov    -0x24(%ebp),%edx
c0109f28:	89 50 14             	mov    %edx,0x14(%eax)
    file->readable = readable;
c0109f2b:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f2e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0109f31:	89 50 04             	mov    %edx,0x4(%eax)
    file->writable = writable;
c0109f34:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f37:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0109f3a:	89 50 08             	mov    %edx,0x8(%eax)
    fd_array_open(file);
c0109f3d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f40:	83 ec 0c             	sub    $0xc,%esp
c0109f43:	50                   	push   %eax
c0109f44:	e8 5a fc ff ff       	call   c0109ba3 <fd_array_open>
c0109f49:	83 c4 10             	add    $0x10,%esp
    return file->fd;
c0109f4c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0109f4f:	8b 40 0c             	mov    0xc(%eax),%eax
}
c0109f52:	c9                   	leave  
c0109f53:	c3                   	ret    

c0109f54 <file_close>:

// close file
int
file_close(int fd) {
c0109f54:	55                   	push   %ebp
c0109f55:	89 e5                	mov    %esp,%ebp
c0109f57:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c0109f5a:	83 ec 08             	sub    $0x8,%esp
c0109f5d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0109f60:	50                   	push   %eax
c0109f61:	ff 75 08             	pushl  0x8(%ebp)
c0109f64:	e8 91 fd ff ff       	call   c0109cfa <fd2file>
c0109f69:	83 c4 10             	add    $0x10,%esp
c0109f6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109f6f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109f73:	74 05                	je     c0109f7a <file_close+0x26>
        return ret;
c0109f75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109f78:	eb 14                	jmp    c0109f8e <file_close+0x3a>
    }
    fd_array_close(file);
c0109f7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0109f7d:	83 ec 0c             	sub    $0xc,%esp
c0109f80:	50                   	push   %eax
c0109f81:	e8 67 fc ff ff       	call   c0109bed <fd_array_close>
c0109f86:	83 c4 10             	add    $0x10,%esp
    return 0;
c0109f89:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0109f8e:	c9                   	leave  
c0109f8f:	c3                   	ret    

c0109f90 <file_read>:

// read file
int
file_read(int fd, void *base, size_t len, size_t *copied_store) {
c0109f90:	55                   	push   %ebp
c0109f91:	89 e5                	mov    %esp,%ebp
c0109f93:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c0109f96:	8b 45 14             	mov    0x14(%ebp),%eax
c0109f99:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c0109f9f:	83 ec 08             	sub    $0x8,%esp
c0109fa2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0109fa5:	50                   	push   %eax
c0109fa6:	ff 75 08             	pushl  0x8(%ebp)
c0109fa9:	e8 4c fd ff ff       	call   c0109cfa <fd2file>
c0109fae:	83 c4 10             	add    $0x10,%esp
c0109fb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0109fb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0109fb8:	74 08                	je     c0109fc2 <file_read+0x32>
        return ret;
c0109fba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0109fbd:	e9 f9 00 00 00       	jmp    c010a0bb <file_read+0x12b>
    }
    if (!file->readable) {
c0109fc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fc5:	8b 40 04             	mov    0x4(%eax),%eax
c0109fc8:	85 c0                	test   %eax,%eax
c0109fca:	75 0a                	jne    c0109fd6 <file_read+0x46>
        return -E_INVAL;
c0109fcc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0109fd1:	e9 e5 00 00 00       	jmp    c010a0bb <file_read+0x12b>
    }
    fd_array_acquire(file);
c0109fd6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fd9:	83 ec 0c             	sub    $0xc,%esp
c0109fdc:	50                   	push   %eax
c0109fdd:	e8 0f fb ff ff       	call   c0109af1 <fd_array_acquire>
c0109fe2:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c0109fe5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0109fe8:	8b 40 10             	mov    0x10(%eax),%eax
c0109feb:	50                   	push   %eax
c0109fec:	ff 75 10             	pushl  0x10(%ebp)
c0109fef:	ff 75 0c             	pushl  0xc(%ebp)
c0109ff2:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c0109ff5:	50                   	push   %eax
c0109ff6:	e8 5a 06 00 00       	call   c010a655 <iobuf_init>
c0109ffb:	83 c4 10             	add    $0x10,%esp
c0109ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_read(file->node, iob);
c010a001:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a004:	8b 40 14             	mov    0x14(%eax),%eax
c010a007:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a00a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a00e:	74 17                	je     c010a027 <file_read+0x97>
c010a010:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a013:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a016:	85 c0                	test   %eax,%eax
c010a018:	74 0d                	je     c010a027 <file_read+0x97>
c010a01a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a01d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a020:	8b 40 0c             	mov    0xc(%eax),%eax
c010a023:	85 c0                	test   %eax,%eax
c010a025:	75 19                	jne    c010a040 <file_read+0xb0>
c010a027:	68 08 52 11 c0       	push   $0xc0115208
c010a02c:	68 72 50 11 c0       	push   $0xc0115072
c010a031:	68 e2 00 00 00       	push   $0xe2
c010a036:	68 87 50 11 c0       	push   $0xc0115087
c010a03b:	e8 a5 64 ff ff       	call   c01004e5 <__panic>
c010a040:	83 ec 08             	sub    $0x8,%esp
c010a043:	68 55 52 11 c0       	push   $0xc0115255
c010a048:	ff 75 ec             	pushl  -0x14(%ebp)
c010a04b:	e8 16 43 00 00       	call   c010e366 <inode_check>
c010a050:	83 c4 10             	add    $0x10,%esp
c010a053:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a056:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a059:	8b 40 0c             	mov    0xc(%eax),%eax
c010a05c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a05f:	8b 52 14             	mov    0x14(%edx),%edx
c010a062:	83 ec 08             	sub    $0x8,%esp
c010a065:	ff 75 f0             	pushl  -0x10(%ebp)
c010a068:	52                   	push   %edx
c010a069:	ff d0                	call   *%eax
c010a06b:	83 c4 10             	add    $0x10,%esp
c010a06e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a071:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a074:	8b 50 08             	mov    0x8(%eax),%edx
c010a077:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a07a:	8b 40 0c             	mov    0xc(%eax),%eax
c010a07d:	29 c2                	sub    %eax,%edx
c010a07f:	89 d0                	mov    %edx,%eax
c010a081:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a084:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a087:	8b 00                	mov    (%eax),%eax
c010a089:	83 f8 02             	cmp    $0x2,%eax
c010a08c:	75 13                	jne    c010a0a1 <file_read+0x111>
        file->pos += copied;
c010a08e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a091:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a094:	8b 52 10             	mov    0x10(%edx),%edx
c010a097:	89 d1                	mov    %edx,%ecx
c010a099:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a09c:	01 ca                	add    %ecx,%edx
c010a09e:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a0a1:	8b 45 14             	mov    0x14(%ebp),%eax
c010a0a4:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a0a7:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a0a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0ac:	83 ec 0c             	sub    $0xc,%esp
c010a0af:	50                   	push   %eax
c010a0b0:	e8 73 fa ff ff       	call   c0109b28 <fd_array_release>
c010a0b5:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a0b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a0bb:	c9                   	leave  
c010a0bc:	c3                   	ret    

c010a0bd <file_write>:

// write file
int
file_write(int fd, void *base, size_t len, size_t *copied_store) {
c010a0bd:	55                   	push   %ebp
c010a0be:	89 e5                	mov    %esp,%ebp
c010a0c0:	83 ec 38             	sub    $0x38,%esp
    int ret;
    struct file *file;
    *copied_store = 0;
c010a0c3:	8b 45 14             	mov    0x14(%ebp),%eax
c010a0c6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    if ((ret = fd2file(fd, &file)) != 0) {
c010a0cc:	83 ec 08             	sub    $0x8,%esp
c010a0cf:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010a0d2:	50                   	push   %eax
c010a0d3:	ff 75 08             	pushl  0x8(%ebp)
c010a0d6:	e8 1f fc ff ff       	call   c0109cfa <fd2file>
c010a0db:	83 c4 10             	add    $0x10,%esp
c010a0de:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a0e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a0e5:	74 08                	je     c010a0ef <file_write+0x32>
        return ret;
c010a0e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a0ea:	e9 f9 00 00 00       	jmp    c010a1e8 <file_write+0x12b>
    }
    if (!file->writable) {
c010a0ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a0f2:	8b 40 08             	mov    0x8(%eax),%eax
c010a0f5:	85 c0                	test   %eax,%eax
c010a0f7:	75 0a                	jne    c010a103 <file_write+0x46>
        return -E_INVAL;
c010a0f9:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010a0fe:	e9 e5 00 00 00       	jmp    c010a1e8 <file_write+0x12b>
    }
    fd_array_acquire(file);
c010a103:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a106:	83 ec 0c             	sub    $0xc,%esp
c010a109:	50                   	push   %eax
c010a10a:	e8 e2 f9 ff ff       	call   c0109af1 <fd_array_acquire>
c010a10f:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, base, len, file->pos);
c010a112:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a115:	8b 40 10             	mov    0x10(%eax),%eax
c010a118:	50                   	push   %eax
c010a119:	ff 75 10             	pushl  0x10(%ebp)
c010a11c:	ff 75 0c             	pushl  0xc(%ebp)
c010a11f:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a122:	50                   	push   %eax
c010a123:	e8 2d 05 00 00       	call   c010a655 <iobuf_init>
c010a128:	83 c4 10             	add    $0x10,%esp
c010a12b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    ret = vop_write(file->node, iob);
c010a12e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a131:	8b 40 14             	mov    0x14(%eax),%eax
c010a134:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a137:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a13b:	74 17                	je     c010a154 <file_write+0x97>
c010a13d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a140:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a143:	85 c0                	test   %eax,%eax
c010a145:	74 0d                	je     c010a154 <file_write+0x97>
c010a147:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a14a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a14d:	8b 40 10             	mov    0x10(%eax),%eax
c010a150:	85 c0                	test   %eax,%eax
c010a152:	75 19                	jne    c010a16d <file_write+0xb0>
c010a154:	68 5c 52 11 c0       	push   $0xc011525c
c010a159:	68 72 50 11 c0       	push   $0xc0115072
c010a15e:	68 fc 00 00 00       	push   $0xfc
c010a163:	68 87 50 11 c0       	push   $0xc0115087
c010a168:	e8 78 63 ff ff       	call   c01004e5 <__panic>
c010a16d:	83 ec 08             	sub    $0x8,%esp
c010a170:	68 aa 52 11 c0       	push   $0xc01152aa
c010a175:	ff 75 ec             	pushl  -0x14(%ebp)
c010a178:	e8 e9 41 00 00       	call   c010e366 <inode_check>
c010a17d:	83 c4 10             	add    $0x10,%esp
c010a180:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a183:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a186:	8b 40 10             	mov    0x10(%eax),%eax
c010a189:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a18c:	8b 52 14             	mov    0x14(%edx),%edx
c010a18f:	83 ec 08             	sub    $0x8,%esp
c010a192:	ff 75 f0             	pushl  -0x10(%ebp)
c010a195:	52                   	push   %edx
c010a196:	ff d0                	call   *%eax
c010a198:	83 c4 10             	add    $0x10,%esp
c010a19b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    size_t copied = iobuf_used(iob);
c010a19e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a1a1:	8b 50 08             	mov    0x8(%eax),%edx
c010a1a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a1a7:	8b 40 0c             	mov    0xc(%eax),%eax
c010a1aa:	29 c2                	sub    %eax,%edx
c010a1ac:	89 d0                	mov    %edx,%eax
c010a1ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (file->status == FD_OPENED) {
c010a1b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1b4:	8b 00                	mov    (%eax),%eax
c010a1b6:	83 f8 02             	cmp    $0x2,%eax
c010a1b9:	75 13                	jne    c010a1ce <file_write+0x111>
        file->pos += copied;
c010a1bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1be:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010a1c1:	8b 52 10             	mov    0x10(%edx),%edx
c010a1c4:	89 d1                	mov    %edx,%ecx
c010a1c6:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a1c9:	01 ca                	add    %ecx,%edx
c010a1cb:	89 50 10             	mov    %edx,0x10(%eax)
    }
    *copied_store = copied;
c010a1ce:	8b 45 14             	mov    0x14(%ebp),%eax
c010a1d1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a1d4:	89 10                	mov    %edx,(%eax)
    fd_array_release(file);
c010a1d6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010a1d9:	83 ec 0c             	sub    $0xc,%esp
c010a1dc:	50                   	push   %eax
c010a1dd:	e8 46 f9 ff ff       	call   c0109b28 <fd_array_release>
c010a1e2:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a1e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a1e8:	c9                   	leave  
c010a1e9:	c3                   	ret    

c010a1ea <file_seek>:

// seek file
int
file_seek(int fd, off_t pos, int whence) {
c010a1ea:	55                   	push   %ebp
c010a1eb:	89 e5                	mov    %esp,%ebp
c010a1ed:	83 ec 38             	sub    $0x38,%esp
    struct stat __stat, *stat = &__stat;
c010a1f0:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010a1f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a1f6:	83 ec 08             	sub    $0x8,%esp
c010a1f9:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010a1fc:	50                   	push   %eax
c010a1fd:	ff 75 08             	pushl  0x8(%ebp)
c010a200:	e8 f5 fa ff ff       	call   c0109cfa <fd2file>
c010a205:	83 c4 10             	add    $0x10,%esp
c010a208:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a20b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a20f:	74 08                	je     c010a219 <file_seek+0x2f>
        return ret;
c010a211:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a214:	e9 61 01 00 00       	jmp    c010a37a <file_seek+0x190>
    }
    fd_array_acquire(file);
c010a219:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a21c:	83 ec 0c             	sub    $0xc,%esp
c010a21f:	50                   	push   %eax
c010a220:	e8 cc f8 ff ff       	call   c0109af1 <fd_array_acquire>
c010a225:	83 c4 10             	add    $0x10,%esp

    switch (whence) {
c010a228:	8b 45 10             	mov    0x10(%ebp),%eax
c010a22b:	83 f8 01             	cmp    $0x1,%eax
c010a22e:	74 12                	je     c010a242 <file_seek+0x58>
c010a230:	83 f8 02             	cmp    $0x2,%eax
c010a233:	74 1b                	je     c010a250 <file_seek+0x66>
c010a235:	85 c0                	test   %eax,%eax
c010a237:	0f 84 a2 00 00 00    	je     c010a2df <file_seek+0xf5>
c010a23d:	e9 94 00 00 00       	jmp    c010a2d6 <file_seek+0xec>
    case LSEEK_SET: break;
    case LSEEK_CUR: pos += file->pos; break;
c010a242:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a245:	8b 40 10             	mov    0x10(%eax),%eax
c010a248:	01 45 0c             	add    %eax,0xc(%ebp)
c010a24b:	e9 93 00 00 00       	jmp    c010a2e3 <file_seek+0xf9>
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
c010a250:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a253:	8b 40 14             	mov    0x14(%eax),%eax
c010a256:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a259:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a25d:	74 17                	je     c010a276 <file_seek+0x8c>
c010a25f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a262:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a265:	85 c0                	test   %eax,%eax
c010a267:	74 0d                	je     c010a276 <file_seek+0x8c>
c010a269:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a26c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a26f:	8b 40 14             	mov    0x14(%eax),%eax
c010a272:	85 c0                	test   %eax,%eax
c010a274:	75 19                	jne    c010a28f <file_seek+0xa5>
c010a276:	68 b4 51 11 c0       	push   $0xc01151b4
c010a27b:	68 72 50 11 c0       	push   $0xc0115072
c010a280:	68 16 01 00 00       	push   $0x116
c010a285:	68 87 50 11 c0       	push   $0xc0115087
c010a28a:	e8 56 62 ff ff       	call   c01004e5 <__panic>
c010a28f:	83 ec 08             	sub    $0x8,%esp
c010a292:	68 02 52 11 c0       	push   $0xc0115202
c010a297:	ff 75 ec             	pushl  -0x14(%ebp)
c010a29a:	e8 c7 40 00 00       	call   c010e366 <inode_check>
c010a29f:	83 c4 10             	add    $0x10,%esp
c010a2a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a2a5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a2a8:	8b 40 14             	mov    0x14(%eax),%eax
c010a2ab:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a2ae:	8b 52 14             	mov    0x14(%edx),%edx
c010a2b1:	83 ec 08             	sub    $0x8,%esp
c010a2b4:	ff 75 f0             	pushl  -0x10(%ebp)
c010a2b7:	52                   	push   %edx
c010a2b8:	ff d0                	call   *%eax
c010a2ba:	83 c4 10             	add    $0x10,%esp
c010a2bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a2c0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2c4:	75 1c                	jne    c010a2e2 <file_seek+0xf8>
            pos += stat->st_size;
c010a2c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a2c9:	8b 50 0c             	mov    0xc(%eax),%edx
c010a2cc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a2cf:	01 d0                	add    %edx,%eax
c010a2d1:	89 45 0c             	mov    %eax,0xc(%ebp)
        }
        break;
c010a2d4:	eb 0c                	jmp    c010a2e2 <file_seek+0xf8>
    default: ret = -E_INVAL;
c010a2d6:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
c010a2dd:	eb 04                	jmp    c010a2e3 <file_seek+0xf9>
        return ret;
    }
    fd_array_acquire(file);

    switch (whence) {
    case LSEEK_SET: break;
c010a2df:	90                   	nop
c010a2e0:	eb 01                	jmp    c010a2e3 <file_seek+0xf9>
    case LSEEK_CUR: pos += file->pos; break;
    case LSEEK_END:
        if ((ret = vop_fstat(file->node, stat)) == 0) {
            pos += stat->st_size;
        }
        break;
c010a2e2:	90                   	nop
    default: ret = -E_INVAL;
    }

    if (ret == 0) {
c010a2e3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a2e7:	75 7f                	jne    c010a368 <file_seek+0x17e>
        if ((ret = vop_tryseek(file->node, pos)) == 0) {
c010a2e9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a2ec:	8b 40 14             	mov    0x14(%eax),%eax
c010a2ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010a2f2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010a2f6:	74 17                	je     c010a30f <file_seek+0x125>
c010a2f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a2fb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a2fe:	85 c0                	test   %eax,%eax
c010a300:	74 0d                	je     c010a30f <file_seek+0x125>
c010a302:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a305:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a308:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a30b:	85 c0                	test   %eax,%eax
c010a30d:	75 19                	jne    c010a328 <file_seek+0x13e>
c010a30f:	68 b0 52 11 c0       	push   $0xc01152b0
c010a314:	68 72 50 11 c0       	push   $0xc0115072
c010a319:	68 1e 01 00 00       	push   $0x11e
c010a31e:	68 87 50 11 c0       	push   $0xc0115087
c010a323:	e8 bd 61 ff ff       	call   c01004e5 <__panic>
c010a328:	83 ec 08             	sub    $0x8,%esp
c010a32b:	68 00 53 11 c0       	push   $0xc0115300
c010a330:	ff 75 e8             	pushl  -0x18(%ebp)
c010a333:	e8 2e 40 00 00       	call   c010e366 <inode_check>
c010a338:	83 c4 10             	add    $0x10,%esp
c010a33b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a33e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a341:	8b 40 2c             	mov    0x2c(%eax),%eax
c010a344:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010a347:	8b 52 14             	mov    0x14(%edx),%edx
c010a34a:	83 ec 08             	sub    $0x8,%esp
c010a34d:	ff 75 0c             	pushl  0xc(%ebp)
c010a350:	52                   	push   %edx
c010a351:	ff d0                	call   *%eax
c010a353:	83 c4 10             	add    $0x10,%esp
c010a356:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a359:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a35d:	75 09                	jne    c010a368 <file_seek+0x17e>
            file->pos = pos;
c010a35f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a362:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a365:	89 50 10             	mov    %edx,0x10(%eax)
        }
//    cprintf("file_seek, pos=%d, whence=%d, ret=%d\n", pos, whence, ret);
    }
    fd_array_release(file);
c010a368:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010a36b:	83 ec 0c             	sub    $0xc,%esp
c010a36e:	50                   	push   %eax
c010a36f:	e8 b4 f7 ff ff       	call   c0109b28 <fd_array_release>
c010a374:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a377:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a37a:	c9                   	leave  
c010a37b:	c3                   	ret    

c010a37c <file_fstat>:

// stat file
int
file_fstat(int fd, struct stat *stat) {
c010a37c:	55                   	push   %ebp
c010a37d:	89 e5                	mov    %esp,%ebp
c010a37f:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a382:	83 ec 08             	sub    $0x8,%esp
c010a385:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a388:	50                   	push   %eax
c010a389:	ff 75 08             	pushl  0x8(%ebp)
c010a38c:	e8 69 f9 ff ff       	call   c0109cfa <fd2file>
c010a391:	83 c4 10             	add    $0x10,%esp
c010a394:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a397:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a39b:	74 08                	je     c010a3a5 <file_fstat+0x29>
        return ret;
c010a39d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a3a0:	e9 91 00 00 00       	jmp    c010a436 <file_fstat+0xba>
    }
    fd_array_acquire(file);
c010a3a5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3a8:	83 ec 0c             	sub    $0xc,%esp
c010a3ab:	50                   	push   %eax
c010a3ac:	e8 40 f7 ff ff       	call   c0109af1 <fd_array_acquire>
c010a3b1:	83 c4 10             	add    $0x10,%esp
    ret = vop_fstat(file->node, stat);
c010a3b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a3b7:	8b 40 14             	mov    0x14(%eax),%eax
c010a3ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a3bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a3c1:	74 17                	je     c010a3da <file_fstat+0x5e>
c010a3c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3c6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a3c9:	85 c0                	test   %eax,%eax
c010a3cb:	74 0d                	je     c010a3da <file_fstat+0x5e>
c010a3cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a3d0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a3d3:	8b 40 14             	mov    0x14(%eax),%eax
c010a3d6:	85 c0                	test   %eax,%eax
c010a3d8:	75 19                	jne    c010a3f3 <file_fstat+0x77>
c010a3da:	68 b4 51 11 c0       	push   $0xc01151b4
c010a3df:	68 72 50 11 c0       	push   $0xc0115072
c010a3e4:	68 30 01 00 00       	push   $0x130
c010a3e9:	68 87 50 11 c0       	push   $0xc0115087
c010a3ee:	e8 f2 60 ff ff       	call   c01004e5 <__panic>
c010a3f3:	83 ec 08             	sub    $0x8,%esp
c010a3f6:	68 02 52 11 c0       	push   $0xc0115202
c010a3fb:	ff 75 f0             	pushl  -0x10(%ebp)
c010a3fe:	e8 63 3f 00 00       	call   c010e366 <inode_check>
c010a403:	83 c4 10             	add    $0x10,%esp
c010a406:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a409:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a40c:	8b 40 14             	mov    0x14(%eax),%eax
c010a40f:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a412:	8b 52 14             	mov    0x14(%edx),%edx
c010a415:	83 ec 08             	sub    $0x8,%esp
c010a418:	ff 75 0c             	pushl  0xc(%ebp)
c010a41b:	52                   	push   %edx
c010a41c:	ff d0                	call   *%eax
c010a41e:	83 c4 10             	add    $0x10,%esp
c010a421:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010a424:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a427:	83 ec 0c             	sub    $0xc,%esp
c010a42a:	50                   	push   %eax
c010a42b:	e8 f8 f6 ff ff       	call   c0109b28 <fd_array_release>
c010a430:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a433:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a436:	c9                   	leave  
c010a437:	c3                   	ret    

c010a438 <file_fsync>:

// sync file
int
file_fsync(int fd) {
c010a438:	55                   	push   %ebp
c010a439:	89 e5                	mov    %esp,%ebp
c010a43b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a43e:	83 ec 08             	sub    $0x8,%esp
c010a441:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a444:	50                   	push   %eax
c010a445:	ff 75 08             	pushl  0x8(%ebp)
c010a448:	e8 ad f8 ff ff       	call   c0109cfa <fd2file>
c010a44d:	83 c4 10             	add    $0x10,%esp
c010a450:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a453:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a457:	74 08                	je     c010a461 <file_fsync+0x29>
        return ret;
c010a459:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a45c:	e9 8e 00 00 00       	jmp    c010a4ef <file_fsync+0xb7>
    }
    fd_array_acquire(file);
c010a461:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a464:	83 ec 0c             	sub    $0xc,%esp
c010a467:	50                   	push   %eax
c010a468:	e8 84 f6 ff ff       	call   c0109af1 <fd_array_acquire>
c010a46d:	83 c4 10             	add    $0x10,%esp
    ret = vop_fsync(file->node);
c010a470:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a473:	8b 40 14             	mov    0x14(%eax),%eax
c010a476:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a479:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010a47d:	74 17                	je     c010a496 <file_fsync+0x5e>
c010a47f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a482:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a485:	85 c0                	test   %eax,%eax
c010a487:	74 0d                	je     c010a496 <file_fsync+0x5e>
c010a489:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a48c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a48f:	8b 40 18             	mov    0x18(%eax),%eax
c010a492:	85 c0                	test   %eax,%eax
c010a494:	75 19                	jne    c010a4af <file_fsync+0x77>
c010a496:	68 08 53 11 c0       	push   $0xc0115308
c010a49b:	68 72 50 11 c0       	push   $0xc0115072
c010a4a0:	68 3e 01 00 00       	push   $0x13e
c010a4a5:	68 87 50 11 c0       	push   $0xc0115087
c010a4aa:	e8 36 60 ff ff       	call   c01004e5 <__panic>
c010a4af:	83 ec 08             	sub    $0x8,%esp
c010a4b2:	68 56 53 11 c0       	push   $0xc0115356
c010a4b7:	ff 75 f0             	pushl  -0x10(%ebp)
c010a4ba:	e8 a7 3e 00 00       	call   c010e366 <inode_check>
c010a4bf:	83 c4 10             	add    $0x10,%esp
c010a4c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a4c5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a4c8:	8b 40 18             	mov    0x18(%eax),%eax
c010a4cb:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010a4ce:	8b 52 14             	mov    0x14(%edx),%edx
c010a4d1:	83 ec 0c             	sub    $0xc,%esp
c010a4d4:	52                   	push   %edx
c010a4d5:	ff d0                	call   *%eax
c010a4d7:	83 c4 10             	add    $0x10,%esp
c010a4da:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fd_array_release(file);
c010a4dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a4e0:	83 ec 0c             	sub    $0xc,%esp
c010a4e3:	50                   	push   %eax
c010a4e4:	e8 3f f6 ff ff       	call   c0109b28 <fd_array_release>
c010a4e9:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a4ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a4ef:	c9                   	leave  
c010a4f0:	c3                   	ret    

c010a4f1 <file_getdirentry>:

// get file entry in DIR
int
file_getdirentry(int fd, struct dirent *direntp) {
c010a4f1:	55                   	push   %ebp
c010a4f2:	89 e5                	mov    %esp,%ebp
c010a4f4:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct file *file;
    if ((ret = fd2file(fd, &file)) != 0) {
c010a4f7:	83 ec 08             	sub    $0x8,%esp
c010a4fa:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010a4fd:	50                   	push   %eax
c010a4fe:	ff 75 08             	pushl  0x8(%ebp)
c010a501:	e8 f4 f7 ff ff       	call   c0109cfa <fd2file>
c010a506:	83 c4 10             	add    $0x10,%esp
c010a509:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a50c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a510:	74 08                	je     c010a51a <file_getdirentry+0x29>
        return ret;
c010a512:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a515:	e9 d8 00 00 00       	jmp    c010a5f2 <file_getdirentry+0x101>
    }
    fd_array_acquire(file);
c010a51a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a51d:	83 ec 0c             	sub    $0xc,%esp
c010a520:	50                   	push   %eax
c010a521:	e8 cb f5 ff ff       	call   c0109af1 <fd_array_acquire>
c010a526:	83 c4 10             	add    $0x10,%esp

    struct iobuf __iob, *iob = iobuf_init(&__iob, direntp->name, sizeof(direntp->name), direntp->offset);
c010a529:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a52c:	8b 00                	mov    (%eax),%eax
c010a52e:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a531:	83 c2 04             	add    $0x4,%edx
c010a534:	50                   	push   %eax
c010a535:	68 00 01 00 00       	push   $0x100
c010a53a:	52                   	push   %edx
c010a53b:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010a53e:	50                   	push   %eax
c010a53f:	e8 11 01 00 00       	call   c010a655 <iobuf_init>
c010a544:	83 c4 10             	add    $0x10,%esp
c010a547:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = vop_getdirentry(file->node, iob)) == 0) {
c010a54a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a54d:	8b 40 14             	mov    0x14(%eax),%eax
c010a550:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010a553:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010a557:	74 17                	je     c010a570 <file_getdirentry+0x7f>
c010a559:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a55c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a55f:	85 c0                	test   %eax,%eax
c010a561:	74 0d                	je     c010a570 <file_getdirentry+0x7f>
c010a563:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a566:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a569:	8b 40 20             	mov    0x20(%eax),%eax
c010a56c:	85 c0                	test   %eax,%eax
c010a56e:	75 19                	jne    c010a589 <file_getdirentry+0x98>
c010a570:	68 5c 53 11 c0       	push   $0xc011535c
c010a575:	68 72 50 11 c0       	push   $0xc0115072
c010a57a:	68 4e 01 00 00       	push   $0x14e
c010a57f:	68 87 50 11 c0       	push   $0xc0115087
c010a584:	e8 5c 5f ff ff       	call   c01004e5 <__panic>
c010a589:	83 ec 08             	sub    $0x8,%esp
c010a58c:	68 b0 53 11 c0       	push   $0xc01153b0
c010a591:	ff 75 ec             	pushl  -0x14(%ebp)
c010a594:	e8 cd 3d 00 00       	call   c010e366 <inode_check>
c010a599:	83 c4 10             	add    $0x10,%esp
c010a59c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a59f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010a5a2:	8b 40 20             	mov    0x20(%eax),%eax
c010a5a5:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010a5a8:	8b 52 14             	mov    0x14(%edx),%edx
c010a5ab:	83 ec 08             	sub    $0x8,%esp
c010a5ae:	ff 75 f0             	pushl  -0x10(%ebp)
c010a5b1:	52                   	push   %edx
c010a5b2:	ff d0                	call   *%eax
c010a5b4:	83 c4 10             	add    $0x10,%esp
c010a5b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a5ba:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a5be:	75 20                	jne    c010a5e0 <file_getdirentry+0xef>
        direntp->offset += iobuf_used(iob);
c010a5c0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5c3:	8b 00                	mov    (%eax),%eax
c010a5c5:	89 c1                	mov    %eax,%ecx
c010a5c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5ca:	8b 50 08             	mov    0x8(%eax),%edx
c010a5cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a5d0:	8b 40 0c             	mov    0xc(%eax),%eax
c010a5d3:	29 c2                	sub    %eax,%edx
c010a5d5:	89 d0                	mov    %edx,%eax
c010a5d7:	01 c8                	add    %ecx,%eax
c010a5d9:	89 c2                	mov    %eax,%edx
c010a5db:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a5de:	89 10                	mov    %edx,(%eax)
    }
    fd_array_release(file);
c010a5e0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a5e3:	83 ec 0c             	sub    $0xc,%esp
c010a5e6:	50                   	push   %eax
c010a5e7:	e8 3c f5 ff ff       	call   c0109b28 <fd_array_release>
c010a5ec:	83 c4 10             	add    $0x10,%esp
    return ret;
c010a5ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a5f2:	c9                   	leave  
c010a5f3:	c3                   	ret    

c010a5f4 <file_dup>:

// duplicate file
int
file_dup(int fd1, int fd2) {
c010a5f4:	55                   	push   %ebp
c010a5f5:	89 e5                	mov    %esp,%ebp
c010a5f7:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct file *file1, *file2;
    if ((ret = fd2file(fd1, &file1)) != 0) {
c010a5fa:	83 ec 08             	sub    $0x8,%esp
c010a5fd:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010a600:	50                   	push   %eax
c010a601:	ff 75 08             	pushl  0x8(%ebp)
c010a604:	e8 f1 f6 ff ff       	call   c0109cfa <fd2file>
c010a609:	83 c4 10             	add    $0x10,%esp
c010a60c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a60f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a613:	74 05                	je     c010a61a <file_dup+0x26>
        return ret;
c010a615:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a618:	eb 39                	jmp    c010a653 <file_dup+0x5f>
    }
    if ((ret = fd_array_alloc(fd2, &file2)) != 0) {
c010a61a:	83 ec 08             	sub    $0x8,%esp
c010a61d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010a620:	50                   	push   %eax
c010a621:	ff 75 0c             	pushl  0xc(%ebp)
c010a624:	e8 7a f3 ff ff       	call   c01099a3 <fd_array_alloc>
c010a629:	83 c4 10             	add    $0x10,%esp
c010a62c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a62f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a633:	74 05                	je     c010a63a <file_dup+0x46>
        return ret;
c010a635:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a638:	eb 19                	jmp    c010a653 <file_dup+0x5f>
    }
    fd_array_dup(file2, file1);
c010a63a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010a63d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a640:	83 ec 08             	sub    $0x8,%esp
c010a643:	52                   	push   %edx
c010a644:	50                   	push   %eax
c010a645:	e8 1d f6 ff ff       	call   c0109c67 <fd_array_dup>
c010a64a:	83 c4 10             	add    $0x10,%esp
    return file2->fd;
c010a64d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a650:	8b 40 0c             	mov    0xc(%eax),%eax
}
c010a653:	c9                   	leave  
c010a654:	c3                   	ret    

c010a655 <iobuf_init>:
 *                set up io_base to point to the buffer you want to transfer to, and set io_len to the length of buffer;
 *                initialize io_offset as desired;
 *                initialize io_resid to the total amount of data that can be transferred through this io.
 */
struct iobuf *
iobuf_init(struct iobuf *iob, void *base, size_t len, off_t offset) {
c010a655:	55                   	push   %ebp
c010a656:	89 e5                	mov    %esp,%ebp
    iob->io_base = base;
c010a658:	8b 45 08             	mov    0x8(%ebp),%eax
c010a65b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010a65e:	89 10                	mov    %edx,(%eax)
    iob->io_offset = offset;
c010a660:	8b 45 08             	mov    0x8(%ebp),%eax
c010a663:	8b 55 14             	mov    0x14(%ebp),%edx
c010a666:	89 50 04             	mov    %edx,0x4(%eax)
    iob->io_len = iob->io_resid = len;
c010a669:	8b 45 08             	mov    0x8(%ebp),%eax
c010a66c:	8b 55 10             	mov    0x10(%ebp),%edx
c010a66f:	89 50 0c             	mov    %edx,0xc(%eax)
c010a672:	8b 45 08             	mov    0x8(%ebp),%eax
c010a675:	8b 50 0c             	mov    0xc(%eax),%edx
c010a678:	8b 45 08             	mov    0x8(%ebp),%eax
c010a67b:	89 50 08             	mov    %edx,0x8(%eax)
    return iob;
c010a67e:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010a681:	5d                   	pop    %ebp
c010a682:	c3                   	ret    

c010a683 <iobuf_move>:
 * iobuf_move may be called repeatedly on the same io to transfer
 * additional data until the available buffer space the io refers to
 * is exhausted.
 */
int
iobuf_move(struct iobuf *iob, void *data, size_t len, bool m2b, size_t *copiedp) {
c010a683:	55                   	push   %ebp
c010a684:	89 e5                	mov    %esp,%ebp
c010a686:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010a689:	8b 45 08             	mov    0x8(%ebp),%eax
c010a68c:	8b 40 0c             	mov    0xc(%eax),%eax
c010a68f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a692:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a695:	3b 45 10             	cmp    0x10(%ebp),%eax
c010a698:	76 06                	jbe    c010a6a0 <iobuf_move+0x1d>
        alen = len;
c010a69a:	8b 45 10             	mov    0x10(%ebp),%eax
c010a69d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010a6a0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a6a4:	74 51                	je     c010a6f7 <iobuf_move+0x74>
        void *src = iob->io_base, *dst = data;
c010a6a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a6a9:	8b 00                	mov    (%eax),%eax
c010a6ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a6ae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a6b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (m2b) {
c010a6b4:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010a6b8:	74 12                	je     c010a6cc <iobuf_move+0x49>
            void *tmp = src;
c010a6ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a6bd:	89 45 e8             	mov    %eax,-0x18(%ebp)
            src = dst, dst = tmp;
c010a6c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010a6c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010a6c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010a6c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
        }
        memmove(dst, src, alen);
c010a6cc:	83 ec 04             	sub    $0x4,%esp
c010a6cf:	ff 75 f4             	pushl  -0xc(%ebp)
c010a6d2:	ff 75 f0             	pushl  -0x10(%ebp)
c010a6d5:	ff 75 ec             	pushl  -0x14(%ebp)
c010a6d8:	e8 68 7d 00 00       	call   c0112445 <memmove>
c010a6dd:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010a6e0:	83 ec 08             	sub    $0x8,%esp
c010a6e3:	ff 75 f4             	pushl  -0xc(%ebp)
c010a6e6:	ff 75 08             	pushl  0x8(%ebp)
c010a6e9:	e8 9d 00 00 00       	call   c010a78b <iobuf_skip>
c010a6ee:	83 c4 10             	add    $0x10,%esp
c010a6f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a6f4:	29 45 10             	sub    %eax,0x10(%ebp)
    }
    if (copiedp != NULL) {
c010a6f7:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010a6fb:	74 08                	je     c010a705 <iobuf_move+0x82>
        *copiedp = alen;
c010a6fd:	8b 45 18             	mov    0x18(%ebp),%eax
c010a700:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a703:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010a705:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a709:	75 07                	jne    c010a712 <iobuf_move+0x8f>
c010a70b:	b8 00 00 00 00       	mov    $0x0,%eax
c010a710:	eb 05                	jmp    c010a717 <iobuf_move+0x94>
c010a712:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a717:	c9                   	leave  
c010a718:	c3                   	ret    

c010a719 <iobuf_move_zeros>:
/*
 * iobuf_move_zeros - set io buffer zero
 * @copiedp:  the size of data memcopied
 */
int
iobuf_move_zeros(struct iobuf *iob, size_t len, size_t *copiedp) {
c010a719:	55                   	push   %ebp
c010a71a:	89 e5                	mov    %esp,%ebp
c010a71c:	83 ec 18             	sub    $0x18,%esp
    size_t alen;
    if ((alen = iob->io_resid) > len) {
c010a71f:	8b 45 08             	mov    0x8(%ebp),%eax
c010a722:	8b 40 0c             	mov    0xc(%eax),%eax
c010a725:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a728:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a72b:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a72e:	76 06                	jbe    c010a736 <iobuf_move_zeros+0x1d>
        alen = len;
c010a730:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a733:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    if (alen > 0) {
c010a736:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a73a:	74 2d                	je     c010a769 <iobuf_move_zeros+0x50>
        memset(iob->io_base, 0, alen);
c010a73c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a73f:	8b 00                	mov    (%eax),%eax
c010a741:	83 ec 04             	sub    $0x4,%esp
c010a744:	ff 75 f4             	pushl  -0xc(%ebp)
c010a747:	6a 00                	push   $0x0
c010a749:	50                   	push   %eax
c010a74a:	e8 b6 7c 00 00       	call   c0112405 <memset>
c010a74f:	83 c4 10             	add    $0x10,%esp
        iobuf_skip(iob, alen), len -= alen;
c010a752:	83 ec 08             	sub    $0x8,%esp
c010a755:	ff 75 f4             	pushl  -0xc(%ebp)
c010a758:	ff 75 08             	pushl  0x8(%ebp)
c010a75b:	e8 2b 00 00 00       	call   c010a78b <iobuf_skip>
c010a760:	83 c4 10             	add    $0x10,%esp
c010a763:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a766:	29 45 0c             	sub    %eax,0xc(%ebp)
    }
    if (copiedp != NULL) {
c010a769:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010a76d:	74 08                	je     c010a777 <iobuf_move_zeros+0x5e>
        *copiedp = alen;
c010a76f:	8b 45 10             	mov    0x10(%ebp),%eax
c010a772:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010a775:	89 10                	mov    %edx,(%eax)
    }
    return (len == 0) ? 0 : -E_NO_MEM;
c010a777:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a77b:	75 07                	jne    c010a784 <iobuf_move_zeros+0x6b>
c010a77d:	b8 00 00 00 00       	mov    $0x0,%eax
c010a782:	eb 05                	jmp    c010a789 <iobuf_move_zeros+0x70>
c010a784:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010a789:	c9                   	leave  
c010a78a:	c3                   	ret    

c010a78b <iobuf_skip>:

/*
 * iobuf_skip - change the current position of io buffer
 */
void
iobuf_skip(struct iobuf *iob, size_t n) {
c010a78b:	55                   	push   %ebp
c010a78c:	89 e5                	mov    %esp,%ebp
c010a78e:	83 ec 08             	sub    $0x8,%esp
    assert(iob->io_resid >= n);
c010a791:	8b 45 08             	mov    0x8(%ebp),%eax
c010a794:	8b 40 0c             	mov    0xc(%eax),%eax
c010a797:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010a79a:	73 16                	jae    c010a7b2 <iobuf_skip+0x27>
c010a79c:	68 bc 53 11 c0       	push   $0xc01153bc
c010a7a1:	68 cf 53 11 c0       	push   $0xc01153cf
c010a7a6:	6a 4a                	push   $0x4a
c010a7a8:	68 e4 53 11 c0       	push   $0xc01153e4
c010a7ad:	e8 33 5d ff ff       	call   c01004e5 <__panic>
    iob->io_base += n, iob->io_offset += n, iob->io_resid -= n;
c010a7b2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7b5:	8b 10                	mov    (%eax),%edx
c010a7b7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7ba:	01 c2                	add    %eax,%edx
c010a7bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7bf:	89 10                	mov    %edx,(%eax)
c010a7c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7c4:	8b 40 04             	mov    0x4(%eax),%eax
c010a7c7:	89 c2                	mov    %eax,%edx
c010a7c9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010a7cc:	01 d0                	add    %edx,%eax
c010a7ce:	89 c2                	mov    %eax,%edx
c010a7d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7d3:	89 50 04             	mov    %edx,0x4(%eax)
c010a7d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7d9:	8b 40 0c             	mov    0xc(%eax),%eax
c010a7dc:	2b 45 0c             	sub    0xc(%ebp),%eax
c010a7df:	89 c2                	mov    %eax,%edx
c010a7e1:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7e4:	89 50 0c             	mov    %edx,0xc(%eax)
}
c010a7e7:	90                   	nop
c010a7e8:	c9                   	leave  
c010a7e9:	c3                   	ret    

c010a7ea <files_count>:
void files_destroy(struct files_struct *filesp);
void files_closeall(struct files_struct *filesp);
int dup_files(struct files_struct *to, struct files_struct *from);

static inline int
files_count(struct files_struct *filesp) {
c010a7ea:	55                   	push   %ebp
c010a7eb:	89 e5                	mov    %esp,%ebp
    return filesp->files_count;
c010a7ed:	8b 45 08             	mov    0x8(%ebp),%eax
c010a7f0:	8b 40 08             	mov    0x8(%eax),%eax
}
c010a7f3:	5d                   	pop    %ebp
c010a7f4:	c3                   	ret    

c010a7f5 <fs_init>:
#include <sfs.h>
#include <inode.h>
#include <assert.h>
//called when init_main proc start
void
fs_init(void) {
c010a7f5:	55                   	push   %ebp
c010a7f6:	89 e5                	mov    %esp,%ebp
c010a7f8:	83 ec 08             	sub    $0x8,%esp
    vfs_init();
c010a7fb:	e8 55 3c 00 00       	call   c010e455 <vfs_init>
    dev_init();
c010a800:	e8 14 4a 00 00       	call   c010f219 <dev_init>
    sfs_init();
c010a805:	e8 60 4a 00 00       	call   c010f26a <sfs_init>
}
c010a80a:	90                   	nop
c010a80b:	c9                   	leave  
c010a80c:	c3                   	ret    

c010a80d <fs_cleanup>:

void
fs_cleanup(void) {
c010a80d:	55                   	push   %ebp
c010a80e:	89 e5                	mov    %esp,%ebp
c010a810:	83 ec 08             	sub    $0x8,%esp
    vfs_cleanup();
c010a813:	e8 1d 28 00 00       	call   c010d035 <vfs_cleanup>
}
c010a818:	90                   	nop
c010a819:	c9                   	leave  
c010a81a:	c3                   	ret    

c010a81b <lock_files>:

void
lock_files(struct files_struct *filesp) {
c010a81b:	55                   	push   %ebp
c010a81c:	89 e5                	mov    %esp,%ebp
c010a81e:	83 ec 08             	sub    $0x8,%esp
    down(&(filesp->files_sem));
c010a821:	8b 45 08             	mov    0x8(%ebp),%eax
c010a824:	83 c0 0c             	add    $0xc,%eax
c010a827:	83 ec 0c             	sub    $0xc,%esp
c010a82a:	50                   	push   %eax
c010a82b:	e8 6b e6 ff ff       	call   c0108e9b <down>
c010a830:	83 c4 10             	add    $0x10,%esp
}
c010a833:	90                   	nop
c010a834:	c9                   	leave  
c010a835:	c3                   	ret    

c010a836 <unlock_files>:

void
unlock_files(struct files_struct *filesp) {
c010a836:	55                   	push   %ebp
c010a837:	89 e5                	mov    %esp,%ebp
c010a839:	83 ec 08             	sub    $0x8,%esp
    up(&(filesp->files_sem));
c010a83c:	8b 45 08             	mov    0x8(%ebp),%eax
c010a83f:	83 c0 0c             	add    $0xc,%eax
c010a842:	83 ec 0c             	sub    $0xc,%esp
c010a845:	50                   	push   %eax
c010a846:	e8 34 e6 ff ff       	call   c0108e7f <up>
c010a84b:	83 c4 10             	add    $0x10,%esp
}
c010a84e:	90                   	nop
c010a84f:	c9                   	leave  
c010a850:	c3                   	ret    

c010a851 <files_create>:
//Called when a new proc init
struct files_struct *
files_create(void) {
c010a851:	55                   	push   %ebp
c010a852:	89 e5                	mov    %esp,%ebp
c010a854:	83 ec 18             	sub    $0x18,%esp
    //cprintf("[files_create]\n");
    static_assert((int)FILES_STRUCT_NENTRY > 128);
    struct files_struct *filesp;
    if ((filesp = kmalloc(sizeof(struct files_struct) + FILES_STRUCT_BUFSIZE)) != NULL) {
c010a857:	83 ec 0c             	sub    $0xc,%esp
c010a85a:	68 00 10 00 00       	push   $0x1000
c010a85f:	e8 e0 c5 ff ff       	call   c0106e44 <kmalloc>
c010a864:	83 c4 10             	add    $0x10,%esp
c010a867:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010a86a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010a86e:	74 45                	je     c010a8b5 <files_create+0x64>
        filesp->pwd = NULL;
c010a870:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a873:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
        filesp->fd_array = (void *)(filesp + 1);
c010a879:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a87c:	8d 50 18             	lea    0x18(%eax),%edx
c010a87f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a882:	89 50 04             	mov    %edx,0x4(%eax)
        filesp->files_count = 0;
c010a885:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a888:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        sem_init(&(filesp->files_sem), 1);
c010a88f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a892:	83 c0 0c             	add    $0xc,%eax
c010a895:	83 ec 08             	sub    $0x8,%esp
c010a898:	6a 01                	push   $0x1
c010a89a:	50                   	push   %eax
c010a89b:	e8 72 e4 ff ff       	call   c0108d12 <sem_init>
c010a8a0:	83 c4 10             	add    $0x10,%esp
        fd_array_init(filesp->fd_array);
c010a8a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a8a6:	8b 40 04             	mov    0x4(%eax),%eax
c010a8a9:	83 ec 0c             	sub    $0xc,%esp
c010a8ac:	50                   	push   %eax
c010a8ad:	e8 ab f0 ff ff       	call   c010995d <fd_array_init>
c010a8b2:	83 c4 10             	add    $0x10,%esp
    }
    return filesp;
c010a8b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010a8b8:	c9                   	leave  
c010a8b9:	c3                   	ret    

c010a8ba <files_destroy>:
//Called when a proc exit
void
files_destroy(struct files_struct *filesp) {
c010a8ba:	55                   	push   %ebp
c010a8bb:	89 e5                	mov    %esp,%ebp
c010a8bd:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_destroy]\n");
    assert(filesp != NULL && files_count(filesp) == 0);
c010a8c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a8c4:	74 0f                	je     c010a8d5 <files_destroy+0x1b>
c010a8c6:	ff 75 08             	pushl  0x8(%ebp)
c010a8c9:	e8 1c ff ff ff       	call   c010a7ea <files_count>
c010a8ce:	83 c4 04             	add    $0x4,%esp
c010a8d1:	85 c0                	test   %eax,%eax
c010a8d3:	74 16                	je     c010a8eb <files_destroy+0x31>
c010a8d5:	68 f4 53 11 c0       	push   $0xc01153f4
c010a8da:	68 1f 54 11 c0       	push   $0xc011541f
c010a8df:	6a 33                	push   $0x33
c010a8e1:	68 34 54 11 c0       	push   $0xc0115434
c010a8e6:	e8 fa 5b ff ff       	call   c01004e5 <__panic>
    if (filesp->pwd != NULL) {
c010a8eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8ee:	8b 00                	mov    (%eax),%eax
c010a8f0:	85 c0                	test   %eax,%eax
c010a8f2:	74 11                	je     c010a905 <files_destroy+0x4b>
        vop_ref_dec(filesp->pwd);
c010a8f4:	8b 45 08             	mov    0x8(%ebp),%eax
c010a8f7:	8b 00                	mov    (%eax),%eax
c010a8f9:	83 ec 0c             	sub    $0xc,%esp
c010a8fc:	50                   	push   %eax
c010a8fd:	e8 ac 38 00 00       	call   c010e1ae <inode_ref_dec>
c010a902:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *file = filesp->fd_array;
c010a905:	8b 45 08             	mov    0x8(%ebp),%eax
c010a908:	8b 40 04             	mov    0x4(%eax),%eax
c010a90b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010a90e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010a915:	eb 3f                	jmp    c010a956 <files_destroy+0x9c>
        if (file->status == FD_OPENED) {
c010a917:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a91a:	8b 00                	mov    (%eax),%eax
c010a91c:	83 f8 02             	cmp    $0x2,%eax
c010a91f:	75 0e                	jne    c010a92f <files_destroy+0x75>
            fd_array_close(file);
c010a921:	83 ec 0c             	sub    $0xc,%esp
c010a924:	ff 75 f0             	pushl  -0x10(%ebp)
c010a927:	e8 c1 f2 ff ff       	call   c0109bed <fd_array_close>
c010a92c:	83 c4 10             	add    $0x10,%esp
        }
        assert(file->status == FD_NONE);
c010a92f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a932:	8b 00                	mov    (%eax),%eax
c010a934:	85 c0                	test   %eax,%eax
c010a936:	74 16                	je     c010a94e <files_destroy+0x94>
c010a938:	68 41 54 11 c0       	push   $0xc0115441
c010a93d:	68 1f 54 11 c0       	push   $0xc011541f
c010a942:	6a 3d                	push   $0x3d
c010a944:	68 34 54 11 c0       	push   $0xc0115434
c010a949:	e8 97 5b ff ff       	call   c01004e5 <__panic>
    if (filesp->pwd != NULL) {
        vop_ref_dec(filesp->pwd);
    }
    int i;
    struct file *file = filesp->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010a94e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a952:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010a956:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a959:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a95e:	76 b7                	jbe    c010a917 <files_destroy+0x5d>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
        assert(file->status == FD_NONE);
    }
    kfree(filesp);
c010a960:	83 ec 0c             	sub    $0xc,%esp
c010a963:	ff 75 08             	pushl  0x8(%ebp)
c010a966:	e8 f1 c4 ff ff       	call   c0106e5c <kfree>
c010a96b:	83 c4 10             	add    $0x10,%esp
}
c010a96e:	90                   	nop
c010a96f:	c9                   	leave  
c010a970:	c3                   	ret    

c010a971 <files_closeall>:

void
files_closeall(struct files_struct *filesp) {
c010a971:	55                   	push   %ebp
c010a972:	89 e5                	mov    %esp,%ebp
c010a974:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
c010a977:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a97b:	74 0f                	je     c010a98c <files_closeall+0x1b>
c010a97d:	ff 75 08             	pushl  0x8(%ebp)
c010a980:	e8 65 fe ff ff       	call   c010a7ea <files_count>
c010a985:	83 c4 04             	add    $0x4,%esp
c010a988:	85 c0                	test   %eax,%eax
c010a98a:	7f 16                	jg     c010a9a2 <files_closeall+0x31>
c010a98c:	68 5c 54 11 c0       	push   $0xc011545c
c010a991:	68 1f 54 11 c0       	push   $0xc011541f
c010a996:	6a 45                	push   $0x45
c010a998:	68 34 54 11 c0       	push   $0xc0115434
c010a99d:	e8 43 5b ff ff       	call   c01004e5 <__panic>
    int i;
    struct file *file = filesp->fd_array;
c010a9a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010a9a5:	8b 40 04             	mov    0x4(%eax),%eax
c010a9a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010a9ab:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
c010a9b2:	83 45 f0 38          	addl   $0x38,-0x10(%ebp)
c010a9b6:	eb 20                	jmp    c010a9d8 <files_closeall+0x67>
        if (file->status == FD_OPENED) {
c010a9b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010a9bb:	8b 00                	mov    (%eax),%eax
c010a9bd:	83 f8 02             	cmp    $0x2,%eax
c010a9c0:	75 0e                	jne    c010a9d0 <files_closeall+0x5f>
            fd_array_close(file);
c010a9c2:	83 ec 0c             	sub    $0xc,%esp
c010a9c5:	ff 75 f0             	pushl  -0x10(%ebp)
c010a9c8:	e8 20 f2 ff ff       	call   c0109bed <fd_array_close>
c010a9cd:	83 c4 10             	add    $0x10,%esp
//    cprintf("[files_closeall]\n");
    assert(filesp != NULL && files_count(filesp) > 0);
    int i;
    struct file *file = filesp->fd_array;
    //skip the stdin & stdout
    for (i = 2, file += 2; i < FILES_STRUCT_NENTRY; i ++, file ++) {
c010a9d0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010a9d4:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010a9d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010a9db:	3d 90 00 00 00       	cmp    $0x90,%eax
c010a9e0:	76 d6                	jbe    c010a9b8 <files_closeall+0x47>
        if (file->status == FD_OPENED) {
            fd_array_close(file);
        }
    }
}
c010a9e2:	90                   	nop
c010a9e3:	c9                   	leave  
c010a9e4:	c3                   	ret    

c010a9e5 <dup_files>:

int
dup_files(struct files_struct *to, struct files_struct *from) {
c010a9e5:	55                   	push   %ebp
c010a9e6:	89 e5                	mov    %esp,%ebp
c010a9e8:	83 ec 18             	sub    $0x18,%esp
//    cprintf("[dup_fs]\n");
    assert(to != NULL && from != NULL);
c010a9eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010a9ef:	74 06                	je     c010a9f7 <dup_files+0x12>
c010a9f1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010a9f5:	75 16                	jne    c010aa0d <dup_files+0x28>
c010a9f7:	68 86 54 11 c0       	push   $0xc0115486
c010a9fc:	68 1f 54 11 c0       	push   $0xc011541f
c010aa01:	6a 53                	push   $0x53
c010aa03:	68 34 54 11 c0       	push   $0xc0115434
c010aa08:	e8 d8 5a ff ff       	call   c01004e5 <__panic>
    assert(files_count(to) == 0 && files_count(from) > 0);
c010aa0d:	83 ec 0c             	sub    $0xc,%esp
c010aa10:	ff 75 08             	pushl  0x8(%ebp)
c010aa13:	e8 d2 fd ff ff       	call   c010a7ea <files_count>
c010aa18:	83 c4 10             	add    $0x10,%esp
c010aa1b:	85 c0                	test   %eax,%eax
c010aa1d:	75 12                	jne    c010aa31 <dup_files+0x4c>
c010aa1f:	83 ec 0c             	sub    $0xc,%esp
c010aa22:	ff 75 0c             	pushl  0xc(%ebp)
c010aa25:	e8 c0 fd ff ff       	call   c010a7ea <files_count>
c010aa2a:	83 c4 10             	add    $0x10,%esp
c010aa2d:	85 c0                	test   %eax,%eax
c010aa2f:	7f 16                	jg     c010aa47 <dup_files+0x62>
c010aa31:	68 a4 54 11 c0       	push   $0xc01154a4
c010aa36:	68 1f 54 11 c0       	push   $0xc011541f
c010aa3b:	6a 54                	push   $0x54
c010aa3d:	68 34 54 11 c0       	push   $0xc0115434
c010aa42:	e8 9e 5a ff ff       	call   c01004e5 <__panic>
    if ((to->pwd = from->pwd) != NULL) {
c010aa47:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa4a:	8b 10                	mov    (%eax),%edx
c010aa4c:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa4f:	89 10                	mov    %edx,(%eax)
c010aa51:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa54:	8b 00                	mov    (%eax),%eax
c010aa56:	85 c0                	test   %eax,%eax
c010aa58:	74 11                	je     c010aa6b <dup_files+0x86>
        vop_ref_inc(to->pwd);
c010aa5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa5d:	8b 00                	mov    (%eax),%eax
c010aa5f:	83 ec 0c             	sub    $0xc,%esp
c010aa62:	50                   	push   %eax
c010aa63:	e8 2c 37 00 00       	call   c010e194 <inode_ref_inc>
c010aa68:	83 c4 10             	add    $0x10,%esp
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
c010aa6b:	8b 45 08             	mov    0x8(%ebp),%eax
c010aa6e:	8b 40 04             	mov    0x4(%eax),%eax
c010aa71:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010aa74:	8b 45 0c             	mov    0xc(%ebp),%eax
c010aa77:	8b 40 04             	mov    0x4(%eax),%eax
c010aa7a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010aa7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010aa84:	eb 30                	jmp    c010aab6 <dup_files+0xd1>
        if (from_file->status == FD_OPENED) {
c010aa86:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010aa89:	8b 00                	mov    (%eax),%eax
c010aa8b:	83 f8 02             	cmp    $0x2,%eax
c010aa8e:	75 1a                	jne    c010aaaa <dup_files+0xc5>
            /* alloc_fd first */
            to_file->status = FD_INIT;
c010aa90:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aa93:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
            fd_array_dup(to_file, from_file);
c010aa99:	83 ec 08             	sub    $0x8,%esp
c010aa9c:	ff 75 ec             	pushl  -0x14(%ebp)
c010aa9f:	ff 75 f0             	pushl  -0x10(%ebp)
c010aaa2:	e8 c0 f1 ff ff       	call   c0109c67 <fd_array_dup>
c010aaa7:	83 c4 10             	add    $0x10,%esp
    if ((to->pwd = from->pwd) != NULL) {
        vop_ref_inc(to->pwd);
    }
    int i;
    struct file *to_file = to->fd_array, *from_file = from->fd_array;
    for (i = 0; i < FILES_STRUCT_NENTRY; i ++, to_file ++, from_file ++) {
c010aaaa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010aaae:	83 45 f0 1c          	addl   $0x1c,-0x10(%ebp)
c010aab2:	83 45 ec 1c          	addl   $0x1c,-0x14(%ebp)
c010aab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010aab9:	3d 90 00 00 00       	cmp    $0x90,%eax
c010aabe:	76 c6                	jbe    c010aa86 <dup_files+0xa1>
            /* alloc_fd first */
            to_file->status = FD_INIT;
            fd_array_dup(to_file, from_file);
        }
    }
    return 0;
c010aac0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010aac5:	c9                   	leave  
c010aac6:	c3                   	ret    

c010aac7 <kernel_thread_entry>:
.text
.globl kernel_thread_entry
kernel_thread_entry:        # void kernel_thread(void)

    pushl %edx              # push arg
c010aac7:	52                   	push   %edx
    call *%ebx              # call fn
c010aac8:	ff d3                	call   *%ebx

    pushl %eax              # save the return value of fn(arg)
c010aaca:	50                   	push   %eax
    call do_exit            # call do_exit to terminate current thread
c010aacb:	e8 5d 0b 00 00       	call   c010b62d <do_exit>

c010aad0 <switch_to>:
.text
.globl switch_to
switch_to:                      # switch_to(from, to)

    # save from's registers
    movl 4(%esp), %eax          # eax points to from
c010aad0:	8b 44 24 04          	mov    0x4(%esp),%eax
    popl 0(%eax)                # save eip !popl
c010aad4:	8f 00                	popl   (%eax)
    movl %esp, 4(%eax)
c010aad6:	89 60 04             	mov    %esp,0x4(%eax)
    movl %ebx, 8(%eax)
c010aad9:	89 58 08             	mov    %ebx,0x8(%eax)
    movl %ecx, 12(%eax)
c010aadc:	89 48 0c             	mov    %ecx,0xc(%eax)
    movl %edx, 16(%eax)
c010aadf:	89 50 10             	mov    %edx,0x10(%eax)
    movl %esi, 20(%eax)
c010aae2:	89 70 14             	mov    %esi,0x14(%eax)
    movl %edi, 24(%eax)
c010aae5:	89 78 18             	mov    %edi,0x18(%eax)
    movl %ebp, 28(%eax)
c010aae8:	89 68 1c             	mov    %ebp,0x1c(%eax)

    # restore to's registers
    movl 4(%esp), %eax          # not 8(%esp): popped return address already
c010aaeb:	8b 44 24 04          	mov    0x4(%esp),%eax
                                # eax now points to to
    movl 28(%eax), %ebp
c010aaef:	8b 68 1c             	mov    0x1c(%eax),%ebp
    movl 24(%eax), %edi
c010aaf2:	8b 78 18             	mov    0x18(%eax),%edi
    movl 20(%eax), %esi
c010aaf5:	8b 70 14             	mov    0x14(%eax),%esi
    movl 16(%eax), %edx
c010aaf8:	8b 50 10             	mov    0x10(%eax),%edx
    movl 12(%eax), %ecx
c010aafb:	8b 48 0c             	mov    0xc(%eax),%ecx
    movl 8(%eax), %ebx
c010aafe:	8b 58 08             	mov    0x8(%eax),%ebx
    movl 4(%eax), %esp
c010ab01:	8b 60 04             	mov    0x4(%eax),%esp

    pushl 0(%eax)               # push eip
c010ab04:	ff 30                	pushl  (%eax)

    ret
c010ab06:	c3                   	ret    

c010ab07 <timer_init>:
#define le2timer(le, member)            \
to_struct((le), timer_t, member)

// init a timer
static inline timer_t *
timer_init(timer_t *timer, struct proc_struct *proc, int expires) {
c010ab07:	55                   	push   %ebp
c010ab08:	89 e5                	mov    %esp,%ebp
c010ab0a:	83 ec 10             	sub    $0x10,%esp
    timer->expires = expires;
c010ab0d:	8b 55 10             	mov    0x10(%ebp),%edx
c010ab10:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab13:	89 10                	mov    %edx,(%eax)
    timer->proc = proc;
c010ab15:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab18:	8b 55 0c             	mov    0xc(%ebp),%edx
c010ab1b:	89 50 04             	mov    %edx,0x4(%eax)
    list_init(&(timer->timer_link));
c010ab1e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab21:	83 c0 08             	add    $0x8,%eax
c010ab24:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010ab27:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab2a:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ab2d:	89 50 04             	mov    %edx,0x4(%eax)
c010ab30:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab33:	8b 50 04             	mov    0x4(%eax),%edx
c010ab36:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ab39:	89 10                	mov    %edx,(%eax)
    return timer;
c010ab3b:	8b 45 08             	mov    0x8(%ebp),%eax
}
c010ab3e:	c9                   	leave  
c010ab3f:	c3                   	ret    

c010ab40 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010ab40:	55                   	push   %ebp
c010ab41:	89 e5                	mov    %esp,%ebp
c010ab43:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010ab46:	9c                   	pushf  
c010ab47:	58                   	pop    %eax
c010ab48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010ab4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010ab4e:	25 00 02 00 00       	and    $0x200,%eax
c010ab53:	85 c0                	test   %eax,%eax
c010ab55:	74 0c                	je     c010ab63 <__intr_save+0x23>
        intr_disable();
c010ab57:	e8 8c 76 ff ff       	call   c01021e8 <intr_disable>
        return 1;
c010ab5c:	b8 01 00 00 00       	mov    $0x1,%eax
c010ab61:	eb 05                	jmp    c010ab68 <__intr_save+0x28>
    }
    return 0;
c010ab63:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ab68:	c9                   	leave  
c010ab69:	c3                   	ret    

c010ab6a <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010ab6a:	55                   	push   %ebp
c010ab6b:	89 e5                	mov    %esp,%ebp
c010ab6d:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010ab70:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010ab74:	74 05                	je     c010ab7b <__intr_restore+0x11>
        intr_enable();
c010ab76:	e8 66 76 ff ff       	call   c01021e1 <intr_enable>
    }
}
c010ab7b:	90                   	nop
c010ab7c:	c9                   	leave  
c010ab7d:	c3                   	ret    

c010ab7e <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ab7e:	55                   	push   %ebp
c010ab7f:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ab81:	8b 45 08             	mov    0x8(%ebp),%eax
c010ab84:	8b 15 0c 21 15 c0    	mov    0xc015210c,%edx
c010ab8a:	29 d0                	sub    %edx,%eax
c010ab8c:	c1 f8 05             	sar    $0x5,%eax
}
c010ab8f:	5d                   	pop    %ebp
c010ab90:	c3                   	ret    

c010ab91 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ab91:	55                   	push   %ebp
c010ab92:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010ab94:	ff 75 08             	pushl  0x8(%ebp)
c010ab97:	e8 e2 ff ff ff       	call   c010ab7e <page2ppn>
c010ab9c:	83 c4 04             	add    $0x4,%esp
c010ab9f:	c1 e0 0c             	shl    $0xc,%eax
}
c010aba2:	c9                   	leave  
c010aba3:	c3                   	ret    

c010aba4 <pa2page>:

static inline struct Page *
pa2page(uintptr_t pa) {
c010aba4:	55                   	push   %ebp
c010aba5:	89 e5                	mov    %esp,%ebp
c010aba7:	83 ec 08             	sub    $0x8,%esp
    if (PPN(pa) >= npage) {
c010abaa:	8b 45 08             	mov    0x8(%ebp),%eax
c010abad:	c1 e8 0c             	shr    $0xc,%eax
c010abb0:	89 c2                	mov    %eax,%edx
c010abb2:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010abb7:	39 c2                	cmp    %eax,%edx
c010abb9:	72 14                	jb     c010abcf <pa2page+0x2b>
        panic("pa2page called with invalid pa");
c010abbb:	83 ec 04             	sub    $0x4,%esp
c010abbe:	68 d4 54 11 c0       	push   $0xc01154d4
c010abc3:	6a 5e                	push   $0x5e
c010abc5:	68 f3 54 11 c0       	push   $0xc01154f3
c010abca:	e8 16 59 ff ff       	call   c01004e5 <__panic>
    }
    return &pages[PPN(pa)];
c010abcf:	a1 0c 21 15 c0       	mov    0xc015210c,%eax
c010abd4:	8b 55 08             	mov    0x8(%ebp),%edx
c010abd7:	c1 ea 0c             	shr    $0xc,%edx
c010abda:	c1 e2 05             	shl    $0x5,%edx
c010abdd:	01 d0                	add    %edx,%eax
}
c010abdf:	c9                   	leave  
c010abe0:	c3                   	ret    

c010abe1 <page2kva>:

static inline void *
page2kva(struct Page *page) {
c010abe1:	55                   	push   %ebp
c010abe2:	89 e5                	mov    %esp,%ebp
c010abe4:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010abe7:	ff 75 08             	pushl  0x8(%ebp)
c010abea:	e8 a2 ff ff ff       	call   c010ab91 <page2pa>
c010abef:	83 c4 04             	add    $0x4,%esp
c010abf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010abf5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010abf8:	c1 e8 0c             	shr    $0xc,%eax
c010abfb:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010abfe:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010ac03:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ac06:	72 14                	jb     c010ac1c <page2kva+0x3b>
c010ac08:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac0b:	68 04 55 11 c0       	push   $0xc0115504
c010ac10:	6a 65                	push   $0x65
c010ac12:	68 f3 54 11 c0       	push   $0xc01154f3
c010ac17:	e8 c9 58 ff ff       	call   c01004e5 <__panic>
c010ac1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac1f:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010ac24:	c9                   	leave  
c010ac25:	c3                   	ret    

c010ac26 <kva2page>:

static inline struct Page *
kva2page(void *kva) {
c010ac26:	55                   	push   %ebp
c010ac27:	89 e5                	mov    %esp,%ebp
c010ac29:	83 ec 18             	sub    $0x18,%esp
    return pa2page(PADDR(kva));
c010ac2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ac32:	81 7d f4 ff ff ff bf 	cmpl   $0xbfffffff,-0xc(%ebp)
c010ac39:	77 14                	ja     c010ac4f <kva2page+0x29>
c010ac3b:	ff 75 f4             	pushl  -0xc(%ebp)
c010ac3e:	68 28 55 11 c0       	push   $0xc0115528
c010ac43:	6a 6a                	push   $0x6a
c010ac45:	68 f3 54 11 c0       	push   $0xc01154f3
c010ac4a:	e8 96 58 ff ff       	call   c01004e5 <__panic>
c010ac4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ac52:	05 00 00 00 40       	add    $0x40000000,%eax
c010ac57:	83 ec 0c             	sub    $0xc,%esp
c010ac5a:	50                   	push   %eax
c010ac5b:	e8 44 ff ff ff       	call   c010aba4 <pa2page>
c010ac60:	83 c4 10             	add    $0x10,%esp
}
c010ac63:	c9                   	leave  
c010ac64:	c3                   	ret    

c010ac65 <mm_count_inc>:
set_mm_count(struct mm_struct *mm, int val) {
    mm->mm_count = val;
}

static inline int
mm_count_inc(struct mm_struct *mm) {
c010ac65:	55                   	push   %ebp
c010ac66:	89 e5                	mov    %esp,%ebp
    mm->mm_count += 1;
c010ac68:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac6b:	8b 40 18             	mov    0x18(%eax),%eax
c010ac6e:	8d 50 01             	lea    0x1(%eax),%edx
c010ac71:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac74:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010ac77:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac7a:	8b 40 18             	mov    0x18(%eax),%eax
}
c010ac7d:	5d                   	pop    %ebp
c010ac7e:	c3                   	ret    

c010ac7f <mm_count_dec>:

static inline int
mm_count_dec(struct mm_struct *mm) {
c010ac7f:	55                   	push   %ebp
c010ac80:	89 e5                	mov    %esp,%ebp
    mm->mm_count -= 1;
c010ac82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac85:	8b 40 18             	mov    0x18(%eax),%eax
c010ac88:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ac8b:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac8e:	89 50 18             	mov    %edx,0x18(%eax)
    return mm->mm_count;
c010ac91:	8b 45 08             	mov    0x8(%ebp),%eax
c010ac94:	8b 40 18             	mov    0x18(%eax),%eax
}
c010ac97:	5d                   	pop    %ebp
c010ac98:	c3                   	ret    

c010ac99 <lock_mm>:

static inline void
lock_mm(struct mm_struct *mm) {
c010ac99:	55                   	push   %ebp
c010ac9a:	89 e5                	mov    %esp,%ebp
c010ac9c:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010ac9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010aca3:	74 29                	je     c010acce <lock_mm+0x35>
        down(&(mm->mm_sem));
c010aca5:	8b 45 08             	mov    0x8(%ebp),%eax
c010aca8:	83 c0 1c             	add    $0x1c,%eax
c010acab:	83 ec 0c             	sub    $0xc,%esp
c010acae:	50                   	push   %eax
c010acaf:	e8 e7 e1 ff ff       	call   c0108e9b <down>
c010acb4:	83 c4 10             	add    $0x10,%esp
        if (current != NULL) {
c010acb7:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010acbc:	85 c0                	test   %eax,%eax
c010acbe:	74 0e                	je     c010acce <lock_mm+0x35>
            mm->locked_by = current->pid;
c010acc0:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010acc5:	8b 50 04             	mov    0x4(%eax),%edx
c010acc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010accb:	89 50 28             	mov    %edx,0x28(%eax)
        }
    }
}
c010acce:	90                   	nop
c010accf:	c9                   	leave  
c010acd0:	c3                   	ret    

c010acd1 <unlock_mm>:

static inline void
unlock_mm(struct mm_struct *mm) {
c010acd1:	55                   	push   %ebp
c010acd2:	89 e5                	mov    %esp,%ebp
c010acd4:	83 ec 08             	sub    $0x8,%esp
    if (mm != NULL) {
c010acd7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010acdb:	74 1c                	je     c010acf9 <unlock_mm+0x28>
        up(&(mm->mm_sem));
c010acdd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ace0:	83 c0 1c             	add    $0x1c,%eax
c010ace3:	83 ec 0c             	sub    $0xc,%esp
c010ace6:	50                   	push   %eax
c010ace7:	e8 93 e1 ff ff       	call   c0108e7f <up>
c010acec:	83 c4 10             	add    $0x10,%esp
        mm->locked_by = 0;
c010acef:	8b 45 08             	mov    0x8(%ebp),%eax
c010acf2:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    }
}
c010acf9:	90                   	nop
c010acfa:	c9                   	leave  
c010acfb:	c3                   	ret    

c010acfc <files_count_inc>:

static inline int
files_count_inc(struct files_struct *filesp) {
c010acfc:	55                   	push   %ebp
c010acfd:	89 e5                	mov    %esp,%ebp
    filesp->files_count += 1;
c010acff:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad02:	8b 40 08             	mov    0x8(%eax),%eax
c010ad05:	8d 50 01             	lea    0x1(%eax),%edx
c010ad08:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad0b:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010ad0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad11:	8b 40 08             	mov    0x8(%eax),%eax
}
c010ad14:	5d                   	pop    %ebp
c010ad15:	c3                   	ret    

c010ad16 <files_count_dec>:

static inline int
files_count_dec(struct files_struct *filesp) {
c010ad16:	55                   	push   %ebp
c010ad17:	89 e5                	mov    %esp,%ebp
    filesp->files_count -= 1;
c010ad19:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad1c:	8b 40 08             	mov    0x8(%eax),%eax
c010ad1f:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ad22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad25:	89 50 08             	mov    %edx,0x8(%eax)
    return filesp->files_count;
c010ad28:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad2b:	8b 40 08             	mov    0x8(%eax),%eax
}
c010ad2e:	5d                   	pop    %ebp
c010ad2f:	c3                   	ret    

c010ad30 <alloc_proc>:
void forkrets(struct trapframe *tf);
void switch_to(struct context *from, struct context *to);

// alloc_proc - alloc a proc_struct and init all fields of proc_struct
static struct proc_struct *
alloc_proc(void) {
c010ad30:	55                   	push   %ebp
c010ad31:	89 e5                	mov    %esp,%ebp
c010ad33:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc = kmalloc(sizeof(struct proc_struct));
c010ad36:	83 ec 0c             	sub    $0xc,%esp
c010ad39:	68 c8 00 00 00       	push   $0xc8
c010ad3e:	e8 01 c1 ff ff       	call   c0106e44 <kmalloc>
c010ad43:	83 c4 10             	add    $0x10,%esp
c010ad46:	89 45 f4             	mov    %eax,-0xc(%ebp)
     *     uint32_t lab6_stride;                       // FOR LAB6 ONLY: the current stride of the process
     *     uint32_t lab6_priority;                     // FOR LAB6 ONLY: the priority of process, set by lab6_set_priority(uint32_t)
     */
    //LAB8:EXERCISE2 YOUR CODE HINT:need add some code to init fs in proc_struct, ...
    }
    return proc;
c010ad49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010ad4c:	c9                   	leave  
c010ad4d:	c3                   	ret    

c010ad4e <set_proc_name>:

// set_proc_name - set the name of proc
char *
set_proc_name(struct proc_struct *proc, const char *name) {
c010ad4e:	55                   	push   %ebp
c010ad4f:	89 e5                	mov    %esp,%ebp
c010ad51:	83 ec 08             	sub    $0x8,%esp
    memset(proc->name, 0, sizeof(proc->name));
c010ad54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad57:	83 c0 48             	add    $0x48,%eax
c010ad5a:	83 ec 04             	sub    $0x4,%esp
c010ad5d:	6a 33                	push   $0x33
c010ad5f:	6a 00                	push   $0x0
c010ad61:	50                   	push   %eax
c010ad62:	e8 9e 76 00 00       	call   c0112405 <memset>
c010ad67:	83 c4 10             	add    $0x10,%esp
    return memcpy(proc->name, name, PROC_NAME_LEN);
c010ad6a:	8b 45 08             	mov    0x8(%ebp),%eax
c010ad6d:	83 c0 48             	add    $0x48,%eax
c010ad70:	83 ec 04             	sub    $0x4,%esp
c010ad73:	6a 32                	push   $0x32
c010ad75:	ff 75 0c             	pushl  0xc(%ebp)
c010ad78:	50                   	push   %eax
c010ad79:	e8 6a 77 00 00       	call   c01124e8 <memcpy>
c010ad7e:	83 c4 10             	add    $0x10,%esp
}
c010ad81:	c9                   	leave  
c010ad82:	c3                   	ret    

c010ad83 <get_proc_name>:

// get_proc_name - get the name of proc
char *
get_proc_name(struct proc_struct *proc) {
c010ad83:	55                   	push   %ebp
c010ad84:	89 e5                	mov    %esp,%ebp
c010ad86:	83 ec 08             	sub    $0x8,%esp
    static char name[PROC_NAME_LEN + 1];
    memset(name, 0, sizeof(name));
c010ad89:	83 ec 04             	sub    $0x4,%esp
c010ad8c:	6a 33                	push   $0x33
c010ad8e:	6a 00                	push   $0x0
c010ad90:	68 60 10 15 c0       	push   $0xc0151060
c010ad95:	e8 6b 76 00 00       	call   c0112405 <memset>
c010ad9a:	83 c4 10             	add    $0x10,%esp
    return memcpy(name, proc->name, PROC_NAME_LEN);
c010ad9d:	8b 45 08             	mov    0x8(%ebp),%eax
c010ada0:	83 c0 48             	add    $0x48,%eax
c010ada3:	83 ec 04             	sub    $0x4,%esp
c010ada6:	6a 32                	push   $0x32
c010ada8:	50                   	push   %eax
c010ada9:	68 60 10 15 c0       	push   $0xc0151060
c010adae:	e8 35 77 00 00       	call   c01124e8 <memcpy>
c010adb3:	83 c4 10             	add    $0x10,%esp
}
c010adb6:	c9                   	leave  
c010adb7:	c3                   	ret    

c010adb8 <set_links>:

// set_links - set the relation links of process
static void
set_links(struct proc_struct *proc) {
c010adb8:	55                   	push   %ebp
c010adb9:	89 e5                	mov    %esp,%ebp
c010adbb:	83 ec 20             	sub    $0x20,%esp
    list_add(&proc_list, &(proc->list_link));
c010adbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010adc1:	83 c0 7c             	add    $0x7c,%eax
c010adc4:	c7 45 fc dc 22 15 c0 	movl   $0xc01522dc,-0x4(%ebp)
c010adcb:	89 45 f8             	mov    %eax,-0x8(%ebp)
c010adce:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010add1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010add4:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010add7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010adda:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010addd:	8b 40 04             	mov    0x4(%eax),%eax
c010ade0:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ade3:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010ade6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ade9:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010adec:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010adef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010adf2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010adf5:	89 10                	mov    %edx,(%eax)
c010adf7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010adfa:	8b 10                	mov    (%eax),%edx
c010adfc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010adff:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010ae02:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae05:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010ae08:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010ae0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ae0e:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ae11:	89 10                	mov    %edx,(%eax)
    proc->yptr = NULL;
c010ae13:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae16:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010ae1d:	00 00 00 
    if ((proc->optr = proc->parent->cptr) != NULL) {
c010ae20:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae23:	8b 40 14             	mov    0x14(%eax),%eax
c010ae26:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010ae2c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae2f:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010ae35:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae38:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010ae3e:	85 c0                	test   %eax,%eax
c010ae40:	74 12                	je     c010ae54 <set_links+0x9c>
        proc->optr->yptr = proc;
c010ae42:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae45:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010ae4b:	8b 55 08             	mov    0x8(%ebp),%edx
c010ae4e:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    proc->parent->cptr = proc;
c010ae54:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae57:	8b 40 14             	mov    0x14(%eax),%eax
c010ae5a:	8b 55 08             	mov    0x8(%ebp),%edx
c010ae5d:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    nr_process ++;
c010ae63:	a1 40 10 15 c0       	mov    0xc0151040,%eax
c010ae68:	83 c0 01             	add    $0x1,%eax
c010ae6b:	a3 40 10 15 c0       	mov    %eax,0xc0151040
}
c010ae70:	90                   	nop
c010ae71:	c9                   	leave  
c010ae72:	c3                   	ret    

c010ae73 <remove_links>:

// remove_links - clean the relation links of process
static void
remove_links(struct proc_struct *proc) {
c010ae73:	55                   	push   %ebp
c010ae74:	89 e5                	mov    %esp,%ebp
c010ae76:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->list_link));
c010ae79:	8b 45 08             	mov    0x8(%ebp),%eax
c010ae7c:	83 c0 7c             	add    $0x7c,%eax
c010ae7f:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010ae82:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ae85:	8b 40 04             	mov    0x4(%eax),%eax
c010ae88:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010ae8b:	8b 12                	mov    (%edx),%edx
c010ae8d:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010ae90:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010ae93:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ae96:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010ae99:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010ae9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ae9f:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010aea2:	89 10                	mov    %edx,(%eax)
    if (proc->optr != NULL) {
c010aea4:	8b 45 08             	mov    0x8(%ebp),%eax
c010aea7:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aead:	85 c0                	test   %eax,%eax
c010aeaf:	74 18                	je     c010aec9 <remove_links+0x56>
        proc->optr->yptr = proc->yptr;
c010aeb1:	8b 45 08             	mov    0x8(%ebp),%eax
c010aeb4:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010aeba:	8b 55 08             	mov    0x8(%ebp),%edx
c010aebd:	8b 92 98 00 00 00    	mov    0x98(%edx),%edx
c010aec3:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    }
    if (proc->yptr != NULL) {
c010aec9:	8b 45 08             	mov    0x8(%ebp),%eax
c010aecc:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010aed2:	85 c0                	test   %eax,%eax
c010aed4:	74 1a                	je     c010aef0 <remove_links+0x7d>
        proc->yptr->optr = proc->optr;
c010aed6:	8b 45 08             	mov    0x8(%ebp),%eax
c010aed9:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010aedf:	8b 55 08             	mov    0x8(%ebp),%edx
c010aee2:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010aee8:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010aeee:	eb 15                	jmp    c010af05 <remove_links+0x92>
    }
    else {
       proc->parent->cptr = proc->optr;
c010aef0:	8b 45 08             	mov    0x8(%ebp),%eax
c010aef3:	8b 40 14             	mov    0x14(%eax),%eax
c010aef6:	8b 55 08             	mov    0x8(%ebp),%edx
c010aef9:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010aeff:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    }
    nr_process --;
c010af05:	a1 40 10 15 c0       	mov    0xc0151040,%eax
c010af0a:	83 e8 01             	sub    $0x1,%eax
c010af0d:	a3 40 10 15 c0       	mov    %eax,0xc0151040
}
c010af12:	90                   	nop
c010af13:	c9                   	leave  
c010af14:	c3                   	ret    

c010af15 <get_pid>:

// get_pid - alloc a unique pid for process
static int
get_pid(void) {
c010af15:	55                   	push   %ebp
c010af16:	89 e5                	mov    %esp,%ebp
c010af18:	83 ec 10             	sub    $0x10,%esp
    static_assert(MAX_PID > MAX_PROCESS);
    struct proc_struct *proc;
    list_entry_t *list = &proc_list, *le;
c010af1b:	c7 45 f8 dc 22 15 c0 	movl   $0xc01522dc,-0x8(%ebp)
    static int next_safe = MAX_PID, last_pid = MAX_PID;
    if (++ last_pid >= MAX_PID) {
c010af22:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010af27:	83 c0 01             	add    $0x1,%eax
c010af2a:	a3 84 ba 14 c0       	mov    %eax,0xc014ba84
c010af2f:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010af34:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010af39:	7e 0c                	jle    c010af47 <get_pid+0x32>
        last_pid = 1;
c010af3b:	c7 05 84 ba 14 c0 01 	movl   $0x1,0xc014ba84
c010af42:	00 00 00 
        goto inside;
c010af45:	eb 13                	jmp    c010af5a <get_pid+0x45>
    }
    if (last_pid >= next_safe) {
c010af47:	8b 15 84 ba 14 c0    	mov    0xc014ba84,%edx
c010af4d:	a1 88 ba 14 c0       	mov    0xc014ba88,%eax
c010af52:	39 c2                	cmp    %eax,%edx
c010af54:	0f 8c ac 00 00 00    	jl     c010b006 <get_pid+0xf1>
    inside:
        next_safe = MAX_PID;
c010af5a:	c7 05 88 ba 14 c0 00 	movl   $0x2000,0xc014ba88
c010af61:	20 00 00 
    repeat:
        le = list;
c010af64:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010af67:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while ((le = list_next(le)) != list) {
c010af6a:	eb 7f                	jmp    c010afeb <get_pid+0xd6>
            proc = le2proc(le, list_link);
c010af6c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010af6f:	83 e8 7c             	sub    $0x7c,%eax
c010af72:	89 45 f4             	mov    %eax,-0xc(%ebp)
            if (proc->pid == last_pid) {
c010af75:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010af78:	8b 50 04             	mov    0x4(%eax),%edx
c010af7b:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010af80:	39 c2                	cmp    %eax,%edx
c010af82:	75 3e                	jne    c010afc2 <get_pid+0xad>
                if (++ last_pid >= next_safe) {
c010af84:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010af89:	83 c0 01             	add    $0x1,%eax
c010af8c:	a3 84 ba 14 c0       	mov    %eax,0xc014ba84
c010af91:	8b 15 84 ba 14 c0    	mov    0xc014ba84,%edx
c010af97:	a1 88 ba 14 c0       	mov    0xc014ba88,%eax
c010af9c:	39 c2                	cmp    %eax,%edx
c010af9e:	7c 4b                	jl     c010afeb <get_pid+0xd6>
                    if (last_pid >= MAX_PID) {
c010afa0:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010afa5:	3d ff 1f 00 00       	cmp    $0x1fff,%eax
c010afaa:	7e 0a                	jle    c010afb6 <get_pid+0xa1>
                        last_pid = 1;
c010afac:	c7 05 84 ba 14 c0 01 	movl   $0x1,0xc014ba84
c010afb3:	00 00 00 
                    }
                    next_safe = MAX_PID;
c010afb6:	c7 05 88 ba 14 c0 00 	movl   $0x2000,0xc014ba88
c010afbd:	20 00 00 
                    goto repeat;
c010afc0:	eb a2                	jmp    c010af64 <get_pid+0x4f>
                }
            }
            else if (proc->pid > last_pid && next_safe > proc->pid) {
c010afc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afc5:	8b 50 04             	mov    0x4(%eax),%edx
c010afc8:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
c010afcd:	39 c2                	cmp    %eax,%edx
c010afcf:	7e 1a                	jle    c010afeb <get_pid+0xd6>
c010afd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afd4:	8b 50 04             	mov    0x4(%eax),%edx
c010afd7:	a1 88 ba 14 c0       	mov    0xc014ba88,%eax
c010afdc:	39 c2                	cmp    %eax,%edx
c010afde:	7d 0b                	jge    c010afeb <get_pid+0xd6>
                next_safe = proc->pid;
c010afe0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010afe3:	8b 40 04             	mov    0x4(%eax),%eax
c010afe6:	a3 88 ba 14 c0       	mov    %eax,0xc014ba88
c010afeb:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010afee:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010aff1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010aff4:	8b 40 04             	mov    0x4(%eax),%eax
    if (last_pid >= next_safe) {
    inside:
        next_safe = MAX_PID;
    repeat:
        le = list;
        while ((le = list_next(le)) != list) {
c010aff7:	89 45 fc             	mov    %eax,-0x4(%ebp)
c010affa:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010affd:	3b 45 f8             	cmp    -0x8(%ebp),%eax
c010b000:	0f 85 66 ff ff ff    	jne    c010af6c <get_pid+0x57>
            else if (proc->pid > last_pid && next_safe > proc->pid) {
                next_safe = proc->pid;
            }
        }
    }
    return last_pid;
c010b006:	a1 84 ba 14 c0       	mov    0xc014ba84,%eax
}
c010b00b:	c9                   	leave  
c010b00c:	c3                   	ret    

c010b00d <proc_run>:

// proc_run - make process "proc" running on cpu
// NOTE: before call switch_to, should load  base addr of "proc"'s new PDT
void
proc_run(struct proc_struct *proc) {
c010b00d:	55                   	push   %ebp
c010b00e:	89 e5                	mov    %esp,%ebp
c010b010:	83 ec 18             	sub    $0x18,%esp
    if (proc != current) {
c010b013:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b018:	39 45 08             	cmp    %eax,0x8(%ebp)
c010b01b:	74 6b                	je     c010b088 <proc_run+0x7b>
        bool intr_flag;
        struct proc_struct *prev = current, *next = proc;
c010b01d:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b022:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b025:	8b 45 08             	mov    0x8(%ebp),%eax
c010b028:	89 45 f0             	mov    %eax,-0x10(%ebp)
        local_intr_save(intr_flag);
c010b02b:	e8 10 fb ff ff       	call   c010ab40 <__intr_save>
c010b030:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
            current = proc;
c010b033:	8b 45 08             	mov    0x8(%ebp),%eax
c010b036:	a3 28 f0 14 c0       	mov    %eax,0xc014f028
            load_esp0(next->kstack + KSTACKSIZE);
c010b03b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b03e:	8b 40 0c             	mov    0xc(%eax),%eax
c010b041:	05 00 20 00 00       	add    $0x2000,%eax
c010b046:	83 ec 0c             	sub    $0xc,%esp
c010b049:	50                   	push   %eax
c010b04a:	e8 4e 84 ff ff       	call   c010349d <load_esp0>
c010b04f:	83 c4 10             	add    $0x10,%esp
            lcr3(next->cr3);
c010b052:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b055:	8b 40 40             	mov    0x40(%eax),%eax
c010b058:	89 45 e8             	mov    %eax,-0x18(%ebp)
    asm volatile ("mov %0, %%cr0" :: "r" (cr0) : "memory");
}

static inline void
lcr3(uintptr_t cr3) {
    asm volatile ("mov %0, %%cr3" :: "r" (cr3) : "memory");
c010b05b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b05e:	0f 22 d8             	mov    %eax,%cr3
            switch_to(&(prev->context), &(next->context));
c010b061:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b064:	8d 50 1c             	lea    0x1c(%eax),%edx
c010b067:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b06a:	83 c0 1c             	add    $0x1c,%eax
c010b06d:	83 ec 08             	sub    $0x8,%esp
c010b070:	52                   	push   %edx
c010b071:	50                   	push   %eax
c010b072:	e8 59 fa ff ff       	call   c010aad0 <switch_to>
c010b077:	83 c4 10             	add    $0x10,%esp
        }
        local_intr_restore(intr_flag);
c010b07a:	83 ec 0c             	sub    $0xc,%esp
c010b07d:	ff 75 ec             	pushl  -0x14(%ebp)
c010b080:	e8 e5 fa ff ff       	call   c010ab6a <__intr_restore>
c010b085:	83 c4 10             	add    $0x10,%esp
    }
}
c010b088:	90                   	nop
c010b089:	c9                   	leave  
c010b08a:	c3                   	ret    

c010b08b <forkret>:

// forkret -- the first kernel entry point of a new thread/process
// NOTE: the addr of forkret is setted in copy_thread function
//       after switch_to, the current proc will execute here.
static void
forkret(void) {
c010b08b:	55                   	push   %ebp
c010b08c:	89 e5                	mov    %esp,%ebp
c010b08e:	83 ec 08             	sub    $0x8,%esp
    forkrets(current->tf);
c010b091:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b096:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b099:	83 ec 0c             	sub    $0xc,%esp
c010b09c:	50                   	push   %eax
c010b09d:	e8 4b 82 ff ff       	call   c01032ed <forkrets>
c010b0a2:	83 c4 10             	add    $0x10,%esp
}
c010b0a5:	90                   	nop
c010b0a6:	c9                   	leave  
c010b0a7:	c3                   	ret    

c010b0a8 <hash_proc>:

// hash_proc - add proc into proc hash_list
static void
hash_proc(struct proc_struct *proc) {
c010b0a8:	55                   	push   %ebp
c010b0a9:	89 e5                	mov    %esp,%ebp
c010b0ab:	53                   	push   %ebx
c010b0ac:	83 ec 24             	sub    $0x24,%esp
    list_add(hash_list + pid_hashfn(proc->pid), &(proc->hash_link));
c010b0af:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0b2:	8d 98 84 00 00 00    	lea    0x84(%eax),%ebx
c010b0b8:	8b 45 08             	mov    0x8(%ebp),%eax
c010b0bb:	8b 40 04             	mov    0x4(%eax),%eax
c010b0be:	83 ec 08             	sub    $0x8,%esp
c010b0c1:	6a 0a                	push   $0xa
c010b0c3:	50                   	push   %eax
c010b0c4:	e8 17 7b 00 00       	call   c0112be0 <hash32>
c010b0c9:	83 c4 10             	add    $0x10,%esp
c010b0cc:	c1 e0 03             	shl    $0x3,%eax
c010b0cf:	05 40 f0 14 c0       	add    $0xc014f040,%eax
c010b0d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b0d7:	89 5d f0             	mov    %ebx,-0x10(%ebp)
c010b0da:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b0dd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b0e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b0e3:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010b0e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b0e9:	8b 40 04             	mov    0x4(%eax),%eax
c010b0ec:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010b0ef:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c010b0f2:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b0f5:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010b0f8:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010b0fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b0fe:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010b101:	89 10                	mov    %edx,(%eax)
c010b103:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010b106:	8b 10                	mov    (%eax),%edx
c010b108:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010b10b:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010b10e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b111:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010b114:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010b117:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010b11a:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010b11d:	89 10                	mov    %edx,(%eax)
}
c010b11f:	90                   	nop
c010b120:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010b123:	c9                   	leave  
c010b124:	c3                   	ret    

c010b125 <unhash_proc>:

// unhash_proc - delete proc from proc hash_list
static void
unhash_proc(struct proc_struct *proc) {
c010b125:	55                   	push   %ebp
c010b126:	89 e5                	mov    %esp,%ebp
c010b128:	83 ec 10             	sub    $0x10,%esp
    list_del(&(proc->hash_link));
c010b12b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b12e:	05 84 00 00 00       	add    $0x84,%eax
c010b133:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010b136:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010b139:	8b 40 04             	mov    0x4(%eax),%eax
c010b13c:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010b13f:	8b 12                	mov    (%edx),%edx
c010b141:	89 55 f8             	mov    %edx,-0x8(%ebp)
c010b144:	89 45 f4             	mov    %eax,-0xc(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010b147:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010b14a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b14d:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010b150:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b153:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010b156:	89 10                	mov    %edx,(%eax)
}
c010b158:	90                   	nop
c010b159:	c9                   	leave  
c010b15a:	c3                   	ret    

c010b15b <find_proc>:

// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
c010b15b:	55                   	push   %ebp
c010b15c:	89 e5                	mov    %esp,%ebp
c010b15e:	83 ec 18             	sub    $0x18,%esp
    if (0 < pid && pid < MAX_PID) {
c010b161:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b165:	7e 5f                	jle    c010b1c6 <find_proc+0x6b>
c010b167:	81 7d 08 ff 1f 00 00 	cmpl   $0x1fff,0x8(%ebp)
c010b16e:	7f 56                	jg     c010b1c6 <find_proc+0x6b>
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
c010b170:	8b 45 08             	mov    0x8(%ebp),%eax
c010b173:	83 ec 08             	sub    $0x8,%esp
c010b176:	6a 0a                	push   $0xa
c010b178:	50                   	push   %eax
c010b179:	e8 62 7a 00 00       	call   c0112be0 <hash32>
c010b17e:	83 c4 10             	add    $0x10,%esp
c010b181:	c1 e0 03             	shl    $0x3,%eax
c010b184:	05 40 f0 14 c0       	add    $0xc014f040,%eax
c010b189:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b18c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b18f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c010b192:	eb 1b                	jmp    c010b1af <find_proc+0x54>
            struct proc_struct *proc = le2proc(le, hash_link);
c010b194:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b197:	2d 84 00 00 00       	sub    $0x84,%eax
c010b19c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (proc->pid == pid) {
c010b19f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1a2:	8b 40 04             	mov    0x4(%eax),%eax
c010b1a5:	3b 45 08             	cmp    0x8(%ebp),%eax
c010b1a8:	75 05                	jne    c010b1af <find_proc+0x54>
                return proc;
c010b1aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b1ad:	eb 1c                	jmp    c010b1cb <find_proc+0x70>
c010b1af:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010b1b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b1b8:	8b 40 04             	mov    0x4(%eax),%eax
// find_proc - find proc frome proc hash_list according to pid
struct proc_struct *
find_proc(int pid) {
    if (0 < pid && pid < MAX_PID) {
        list_entry_t *list = hash_list + pid_hashfn(pid), *le = list;
        while ((le = list_next(le)) != list) {
c010b1bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b1be:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b1c1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010b1c4:	75 ce                	jne    c010b194 <find_proc+0x39>
            if (proc->pid == pid) {
                return proc;
            }
        }
    }
    return NULL;
c010b1c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b1cb:	c9                   	leave  
c010b1cc:	c3                   	ret    

c010b1cd <kernel_thread>:

// kernel_thread - create a kernel thread using "fn" function
// NOTE: the contents of temp trapframe tf will be copied to 
//       proc->tf in do_fork-->copy_thread function
int
kernel_thread(int (*fn)(void *), void *arg, uint32_t clone_flags) {
c010b1cd:	55                   	push   %ebp
c010b1ce:	89 e5                	mov    %esp,%ebp
c010b1d0:	83 ec 58             	sub    $0x58,%esp
    struct trapframe tf;
    memset(&tf, 0, sizeof(struct trapframe));
c010b1d3:	83 ec 04             	sub    $0x4,%esp
c010b1d6:	6a 4c                	push   $0x4c
c010b1d8:	6a 00                	push   $0x0
c010b1da:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010b1dd:	50                   	push   %eax
c010b1de:	e8 22 72 00 00       	call   c0112405 <memset>
c010b1e3:	83 c4 10             	add    $0x10,%esp
    tf.tf_cs = KERNEL_CS;
c010b1e6:	66 c7 45 e8 08 00    	movw   $0x8,-0x18(%ebp)
    tf.tf_ds = tf.tf_es = tf.tf_ss = KERNEL_DS;
c010b1ec:	66 c7 45 f4 10 00    	movw   $0x10,-0xc(%ebp)
c010b1f2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010b1f6:	66 89 45 d4          	mov    %ax,-0x2c(%ebp)
c010b1fa:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
c010b1fe:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
    tf.tf_regs.reg_ebx = (uint32_t)fn;
c010b202:	8b 45 08             	mov    0x8(%ebp),%eax
c010b205:	89 45 bc             	mov    %eax,-0x44(%ebp)
    tf.tf_regs.reg_edx = (uint32_t)arg;
c010b208:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b20b:	89 45 c0             	mov    %eax,-0x40(%ebp)
    tf.tf_eip = (uint32_t)kernel_thread_entry;
c010b20e:	b8 c7 aa 10 c0       	mov    $0xc010aac7,%eax
c010b213:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    return do_fork(clone_flags | CLONE_VM, 0, &tf);
c010b216:	8b 45 10             	mov    0x10(%ebp),%eax
c010b219:	80 cc 01             	or     $0x1,%ah
c010b21c:	89 c2                	mov    %eax,%edx
c010b21e:	83 ec 04             	sub    $0x4,%esp
c010b221:	8d 45 ac             	lea    -0x54(%ebp),%eax
c010b224:	50                   	push   %eax
c010b225:	6a 00                	push   $0x0
c010b227:	52                   	push   %edx
c010b228:	e8 d8 03 00 00       	call   c010b605 <do_fork>
c010b22d:	83 c4 10             	add    $0x10,%esp
}
c010b230:	c9                   	leave  
c010b231:	c3                   	ret    

c010b232 <setup_kstack>:

// setup_kstack - alloc pages with size KSTACKPAGE as process kernel stack
static int
setup_kstack(struct proc_struct *proc) {
c010b232:	55                   	push   %ebp
c010b233:	89 e5                	mov    %esp,%ebp
c010b235:	83 ec 18             	sub    $0x18,%esp
    struct Page *page = alloc_pages(KSTACKPAGE);
c010b238:	83 ec 0c             	sub    $0xc,%esp
c010b23b:	6a 02                	push   $0x2
c010b23d:	e8 af 83 ff ff       	call   c01035f1 <alloc_pages>
c010b242:	83 c4 10             	add    $0x10,%esp
c010b245:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (page != NULL) {
c010b248:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b24c:	74 1d                	je     c010b26b <setup_kstack+0x39>
        proc->kstack = (uintptr_t)page2kva(page);
c010b24e:	83 ec 0c             	sub    $0xc,%esp
c010b251:	ff 75 f4             	pushl  -0xc(%ebp)
c010b254:	e8 88 f9 ff ff       	call   c010abe1 <page2kva>
c010b259:	83 c4 10             	add    $0x10,%esp
c010b25c:	89 c2                	mov    %eax,%edx
c010b25e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b261:	89 50 0c             	mov    %edx,0xc(%eax)
        return 0;
c010b264:	b8 00 00 00 00       	mov    $0x0,%eax
c010b269:	eb 05                	jmp    c010b270 <setup_kstack+0x3e>
    }
    return -E_NO_MEM;
c010b26b:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010b270:	c9                   	leave  
c010b271:	c3                   	ret    

c010b272 <put_kstack>:

// put_kstack - free the memory space of process kernel stack
static void
put_kstack(struct proc_struct *proc) {
c010b272:	55                   	push   %ebp
c010b273:	89 e5                	mov    %esp,%ebp
c010b275:	83 ec 08             	sub    $0x8,%esp
    free_pages(kva2page((void *)(proc->kstack)), KSTACKPAGE);
c010b278:	8b 45 08             	mov    0x8(%ebp),%eax
c010b27b:	8b 40 0c             	mov    0xc(%eax),%eax
c010b27e:	83 ec 0c             	sub    $0xc,%esp
c010b281:	50                   	push   %eax
c010b282:	e8 9f f9 ff ff       	call   c010ac26 <kva2page>
c010b287:	83 c4 10             	add    $0x10,%esp
c010b28a:	83 ec 08             	sub    $0x8,%esp
c010b28d:	6a 02                	push   $0x2
c010b28f:	50                   	push   %eax
c010b290:	e8 c8 83 ff ff       	call   c010365d <free_pages>
c010b295:	83 c4 10             	add    $0x10,%esp
}
c010b298:	90                   	nop
c010b299:	c9                   	leave  
c010b29a:	c3                   	ret    

c010b29b <setup_pgdir>:

// setup_pgdir - alloc one page as PDT
static int
setup_pgdir(struct mm_struct *mm) {
c010b29b:	55                   	push   %ebp
c010b29c:	89 e5                	mov    %esp,%ebp
c010b29e:	83 ec 18             	sub    $0x18,%esp
    struct Page *page;
    if ((page = alloc_page()) == NULL) {
c010b2a1:	83 ec 0c             	sub    $0xc,%esp
c010b2a4:	6a 01                	push   $0x1
c010b2a6:	e8 46 83 ff ff       	call   c01035f1 <alloc_pages>
c010b2ab:	83 c4 10             	add    $0x10,%esp
c010b2ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b2b1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b2b5:	75 07                	jne    c010b2be <setup_pgdir+0x23>
        return -E_NO_MEM;
c010b2b7:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010b2bc:	eb 74                	jmp    c010b332 <setup_pgdir+0x97>
    }
    pde_t *pgdir = page2kva(page);
c010b2be:	83 ec 0c             	sub    $0xc,%esp
c010b2c1:	ff 75 f4             	pushl  -0xc(%ebp)
c010b2c4:	e8 18 f9 ff ff       	call   c010abe1 <page2kva>
c010b2c9:	83 c4 10             	add    $0x10,%esp
c010b2cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    memcpy(pgdir, boot_pgdir, PGSIZE);
c010b2cf:	a1 e0 b9 14 c0       	mov    0xc014b9e0,%eax
c010b2d4:	83 ec 04             	sub    $0x4,%esp
c010b2d7:	68 00 10 00 00       	push   $0x1000
c010b2dc:	50                   	push   %eax
c010b2dd:	ff 75 f0             	pushl  -0x10(%ebp)
c010b2e0:	e8 03 72 00 00       	call   c01124e8 <memcpy>
c010b2e5:	83 c4 10             	add    $0x10,%esp
    pgdir[PDX(VPT)] = PADDR(pgdir) | PTE_P | PTE_W;
c010b2e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2eb:	8d 90 ac 0f 00 00    	lea    0xfac(%eax),%edx
c010b2f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b2f4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b2f7:	81 7d ec ff ff ff bf 	cmpl   $0xbfffffff,-0x14(%ebp)
c010b2fe:	77 17                	ja     c010b317 <setup_pgdir+0x7c>
c010b300:	ff 75 ec             	pushl  -0x14(%ebp)
c010b303:	68 28 55 11 c0       	push   $0xc0115528
c010b308:	68 2e 01 00 00       	push   $0x12e
c010b30d:	68 4c 55 11 c0       	push   $0xc011554c
c010b312:	e8 ce 51 ff ff       	call   c01004e5 <__panic>
c010b317:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b31a:	05 00 00 00 40       	add    $0x40000000,%eax
c010b31f:	83 c8 03             	or     $0x3,%eax
c010b322:	89 02                	mov    %eax,(%edx)
    mm->pgdir = pgdir;
c010b324:	8b 45 08             	mov    0x8(%ebp),%eax
c010b327:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010b32a:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010b32d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b332:	c9                   	leave  
c010b333:	c3                   	ret    

c010b334 <put_pgdir>:

// put_pgdir - free the memory space of PDT
static void
put_pgdir(struct mm_struct *mm) {
c010b334:	55                   	push   %ebp
c010b335:	89 e5                	mov    %esp,%ebp
c010b337:	83 ec 08             	sub    $0x8,%esp
    free_page(kva2page(mm->pgdir));
c010b33a:	8b 45 08             	mov    0x8(%ebp),%eax
c010b33d:	8b 40 0c             	mov    0xc(%eax),%eax
c010b340:	83 ec 0c             	sub    $0xc,%esp
c010b343:	50                   	push   %eax
c010b344:	e8 dd f8 ff ff       	call   c010ac26 <kva2page>
c010b349:	83 c4 10             	add    $0x10,%esp
c010b34c:	83 ec 08             	sub    $0x8,%esp
c010b34f:	6a 01                	push   $0x1
c010b351:	50                   	push   %eax
c010b352:	e8 06 83 ff ff       	call   c010365d <free_pages>
c010b357:	83 c4 10             	add    $0x10,%esp
}
c010b35a:	90                   	nop
c010b35b:	c9                   	leave  
c010b35c:	c3                   	ret    

c010b35d <copy_mm>:

// copy_mm - process "proc" duplicate OR share process "current"'s mm according clone_flags
//         - if clone_flags & CLONE_VM, then "share" ; else "duplicate"
static int
copy_mm(uint32_t clone_flags, struct proc_struct *proc) {
c010b35d:	55                   	push   %ebp
c010b35e:	89 e5                	mov    %esp,%ebp
c010b360:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm, *oldmm = current->mm;
c010b363:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b368:	8b 40 18             	mov    0x18(%eax),%eax
c010b36b:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* current is a kernel thread */
    if (oldmm == NULL) {
c010b36e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b372:	75 0a                	jne    c010b37e <copy_mm+0x21>
        return 0;
c010b374:	b8 00 00 00 00       	mov    $0x0,%eax
c010b379:	e9 03 01 00 00       	jmp    c010b481 <copy_mm+0x124>
    }
    if (clone_flags & CLONE_VM) {
c010b37e:	8b 45 08             	mov    0x8(%ebp),%eax
c010b381:	25 00 01 00 00       	and    $0x100,%eax
c010b386:	85 c0                	test   %eax,%eax
c010b388:	74 08                	je     c010b392 <copy_mm+0x35>
        mm = oldmm;
c010b38a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b38d:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_mm;
c010b390:	eb 65                	jmp    c010b3f7 <copy_mm+0x9a>
    }

    int ret = -E_NO_MEM;
c010b392:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((mm = mm_create()) == NULL) {
c010b399:	e8 a1 99 ff ff       	call   c0104d3f <mm_create>
c010b39e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b3a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b3a5:	0f 84 d2 00 00 00    	je     c010b47d <copy_mm+0x120>
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
c010b3ab:	83 ec 0c             	sub    $0xc,%esp
c010b3ae:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3b1:	e8 e5 fe ff ff       	call   c010b29b <setup_pgdir>
c010b3b6:	83 c4 10             	add    $0x10,%esp
c010b3b9:	85 c0                	test   %eax,%eax
c010b3bb:	0f 85 ab 00 00 00    	jne    c010b46c <copy_mm+0x10f>
        goto bad_pgdir_cleanup_mm;
    }

    lock_mm(oldmm);
c010b3c1:	83 ec 0c             	sub    $0xc,%esp
c010b3c4:	ff 75 ec             	pushl  -0x14(%ebp)
c010b3c7:	e8 cd f8 ff ff       	call   c010ac99 <lock_mm>
c010b3cc:	83 c4 10             	add    $0x10,%esp
    {
        ret = dup_mmap(mm, oldmm);
c010b3cf:	83 ec 08             	sub    $0x8,%esp
c010b3d2:	ff 75 ec             	pushl  -0x14(%ebp)
c010b3d5:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3d8:	e8 35 9e ff ff       	call   c0105212 <dup_mmap>
c010b3dd:	83 c4 10             	add    $0x10,%esp
c010b3e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }
    unlock_mm(oldmm);
c010b3e3:	83 ec 0c             	sub    $0xc,%esp
c010b3e6:	ff 75 ec             	pushl  -0x14(%ebp)
c010b3e9:	e8 e3 f8 ff ff       	call   c010acd1 <unlock_mm>
c010b3ee:	83 c4 10             	add    $0x10,%esp

    if (ret != 0) {
c010b3f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b3f5:	75 56                	jne    c010b44d <copy_mm+0xf0>
        goto bad_dup_cleanup_mmap;
    }

good_mm:
    mm_count_inc(mm);
c010b3f7:	83 ec 0c             	sub    $0xc,%esp
c010b3fa:	ff 75 f4             	pushl  -0xc(%ebp)
c010b3fd:	e8 63 f8 ff ff       	call   c010ac65 <mm_count_inc>
c010b402:	83 c4 10             	add    $0x10,%esp
    proc->mm = mm;
c010b405:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b408:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b40b:	89 50 18             	mov    %edx,0x18(%eax)
    proc->cr3 = PADDR(mm->pgdir);
c010b40e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b411:	8b 40 0c             	mov    0xc(%eax),%eax
c010b414:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b417:	81 7d e8 ff ff ff bf 	cmpl   $0xbfffffff,-0x18(%ebp)
c010b41e:	77 17                	ja     c010b437 <copy_mm+0xda>
c010b420:	ff 75 e8             	pushl  -0x18(%ebp)
c010b423:	68 28 55 11 c0       	push   $0xc0115528
c010b428:	68 5d 01 00 00       	push   $0x15d
c010b42d:	68 4c 55 11 c0       	push   $0xc011554c
c010b432:	e8 ae 50 ff ff       	call   c01004e5 <__panic>
c010b437:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b43a:	8d 90 00 00 00 40    	lea    0x40000000(%eax),%edx
c010b440:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b443:	89 50 40             	mov    %edx,0x40(%eax)
    return 0;
c010b446:	b8 00 00 00 00       	mov    $0x0,%eax
c010b44b:	eb 34                	jmp    c010b481 <copy_mm+0x124>
        ret = dup_mmap(mm, oldmm);
    }
    unlock_mm(oldmm);

    if (ret != 0) {
        goto bad_dup_cleanup_mmap;
c010b44d:	90                   	nop
    mm_count_inc(mm);
    proc->mm = mm;
    proc->cr3 = PADDR(mm->pgdir);
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
c010b44e:	83 ec 0c             	sub    $0xc,%esp
c010b451:	ff 75 f4             	pushl  -0xc(%ebp)
c010b454:	e8 a0 9e ff ff       	call   c01052f9 <exit_mmap>
c010b459:	83 c4 10             	add    $0x10,%esp
    put_pgdir(mm);
c010b45c:	83 ec 0c             	sub    $0xc,%esp
c010b45f:	ff 75 f4             	pushl  -0xc(%ebp)
c010b462:	e8 cd fe ff ff       	call   c010b334 <put_pgdir>
c010b467:	83 c4 10             	add    $0x10,%esp
c010b46a:	eb 01                	jmp    c010b46d <copy_mm+0x110>
    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
    }
    if (setup_pgdir(mm) != 0) {
        goto bad_pgdir_cleanup_mm;
c010b46c:	90                   	nop
    return 0;
bad_dup_cleanup_mmap:
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
c010b46d:	83 ec 0c             	sub    $0xc,%esp
c010b470:	ff 75 f4             	pushl  -0xc(%ebp)
c010b473:	e8 f3 9b ff ff       	call   c010506b <mm_destroy>
c010b478:	83 c4 10             	add    $0x10,%esp
c010b47b:	eb 01                	jmp    c010b47e <copy_mm+0x121>
        goto good_mm;
    }

    int ret = -E_NO_MEM;
    if ((mm = mm_create()) == NULL) {
        goto bad_mm;
c010b47d:	90                   	nop
    exit_mmap(mm);
    put_pgdir(mm);
bad_pgdir_cleanup_mm:
    mm_destroy(mm);
bad_mm:
    return ret;
c010b47e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b481:	c9                   	leave  
c010b482:	c3                   	ret    

c010b483 <copy_thread>:

// copy_thread - setup the trapframe on the  process's kernel stack top and
//             - setup the kernel entry point and stack of process
static void
copy_thread(struct proc_struct *proc, uintptr_t esp, struct trapframe *tf) {
c010b483:	55                   	push   %ebp
c010b484:	89 e5                	mov    %esp,%ebp
c010b486:	57                   	push   %edi
c010b487:	56                   	push   %esi
c010b488:	53                   	push   %ebx
    proc->tf = (struct trapframe *)(proc->kstack + KSTACKSIZE) - 1;
c010b489:	8b 45 08             	mov    0x8(%ebp),%eax
c010b48c:	8b 40 0c             	mov    0xc(%eax),%eax
c010b48f:	05 b4 1f 00 00       	add    $0x1fb4,%eax
c010b494:	89 c2                	mov    %eax,%edx
c010b496:	8b 45 08             	mov    0x8(%ebp),%eax
c010b499:	89 50 3c             	mov    %edx,0x3c(%eax)
    *(proc->tf) = *tf;
c010b49c:	8b 45 08             	mov    0x8(%ebp),%eax
c010b49f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4a2:	8b 55 10             	mov    0x10(%ebp),%edx
c010b4a5:	89 d3                	mov    %edx,%ebx
c010b4a7:	ba 4c 00 00 00       	mov    $0x4c,%edx
c010b4ac:	8b 0b                	mov    (%ebx),%ecx
c010b4ae:	89 08                	mov    %ecx,(%eax)
c010b4b0:	8b 4c 13 fc          	mov    -0x4(%ebx,%edx,1),%ecx
c010b4b4:	89 4c 10 fc          	mov    %ecx,-0x4(%eax,%edx,1)
c010b4b8:	8d 78 04             	lea    0x4(%eax),%edi
c010b4bb:	83 e7 fc             	and    $0xfffffffc,%edi
c010b4be:	29 f8                	sub    %edi,%eax
c010b4c0:	29 c3                	sub    %eax,%ebx
c010b4c2:	01 c2                	add    %eax,%edx
c010b4c4:	83 e2 fc             	and    $0xfffffffc,%edx
c010b4c7:	89 d0                	mov    %edx,%eax
c010b4c9:	c1 e8 02             	shr    $0x2,%eax
c010b4cc:	89 de                	mov    %ebx,%esi
c010b4ce:	89 c1                	mov    %eax,%ecx
c010b4d0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    proc->tf->tf_regs.reg_eax = 0;
c010b4d2:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4d5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4d8:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    proc->tf->tf_esp = esp;
c010b4df:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4e2:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4e5:	8b 55 0c             	mov    0xc(%ebp),%edx
c010b4e8:	89 50 44             	mov    %edx,0x44(%eax)
    proc->tf->tf_eflags |= FL_IF;
c010b4eb:	8b 45 08             	mov    0x8(%ebp),%eax
c010b4ee:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b4f1:	8b 55 08             	mov    0x8(%ebp),%edx
c010b4f4:	8b 52 3c             	mov    0x3c(%edx),%edx
c010b4f7:	8b 52 40             	mov    0x40(%edx),%edx
c010b4fa:	80 ce 02             	or     $0x2,%dh
c010b4fd:	89 50 40             	mov    %edx,0x40(%eax)

    proc->context.eip = (uintptr_t)forkret;
c010b500:	ba 8b b0 10 c0       	mov    $0xc010b08b,%edx
c010b505:	8b 45 08             	mov    0x8(%ebp),%eax
c010b508:	89 50 1c             	mov    %edx,0x1c(%eax)
    proc->context.esp = (uintptr_t)(proc->tf);
c010b50b:	8b 45 08             	mov    0x8(%ebp),%eax
c010b50e:	8b 40 3c             	mov    0x3c(%eax),%eax
c010b511:	89 c2                	mov    %eax,%edx
c010b513:	8b 45 08             	mov    0x8(%ebp),%eax
c010b516:	89 50 20             	mov    %edx,0x20(%eax)
}
c010b519:	90                   	nop
c010b51a:	5b                   	pop    %ebx
c010b51b:	5e                   	pop    %esi
c010b51c:	5f                   	pop    %edi
c010b51d:	5d                   	pop    %ebp
c010b51e:	c3                   	ret    

c010b51f <copy_files>:

//copy_files&put_files function used by do_fork in LAB8
//copy the files_struct from current to proc
static int
copy_files(uint32_t clone_flags, struct proc_struct *proc) {
c010b51f:	55                   	push   %ebp
c010b520:	89 e5                	mov    %esp,%ebp
c010b522:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp, *old_filesp = current->filesp;
c010b525:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b52a:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010b530:	89 45 ec             	mov    %eax,-0x14(%ebp)
    assert(old_filesp != NULL);
c010b533:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b537:	75 19                	jne    c010b552 <copy_files+0x33>
c010b539:	68 60 55 11 c0       	push   $0xc0115560
c010b53e:	68 73 55 11 c0       	push   $0xc0115573
c010b543:	68 7b 01 00 00       	push   $0x17b
c010b548:	68 4c 55 11 c0       	push   $0xc011554c
c010b54d:	e8 93 4f ff ff       	call   c01004e5 <__panic>

    if (clone_flags & CLONE_FS) {
c010b552:	8b 45 08             	mov    0x8(%ebp),%eax
c010b555:	25 00 08 00 00       	and    $0x800,%eax
c010b55a:	85 c0                	test   %eax,%eax
c010b55c:	74 08                	je     c010b566 <copy_files+0x47>
        filesp = old_filesp;
c010b55e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b561:	89 45 f4             	mov    %eax,-0xc(%ebp)
        goto good_files_struct;
c010b564:	eb 2f                	jmp    c010b595 <copy_files+0x76>
    }

    int ret = -E_NO_MEM;
c010b566:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
    if ((filesp = files_create()) == NULL) {
c010b56d:	e8 df f2 ff ff       	call   c010a851 <files_create>
c010b572:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b575:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b579:	74 4c                	je     c010b5c7 <copy_files+0xa8>
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
c010b57b:	83 ec 08             	sub    $0x8,%esp
c010b57e:	ff 75 ec             	pushl  -0x14(%ebp)
c010b581:	ff 75 f4             	pushl  -0xc(%ebp)
c010b584:	e8 5c f4 ff ff       	call   c010a9e5 <dup_files>
c010b589:	83 c4 10             	add    $0x10,%esp
c010b58c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010b58f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010b593:	75 21                	jne    c010b5b6 <copy_files+0x97>
        goto bad_dup_cleanup_fs;
    }

good_files_struct:
    files_count_inc(filesp);
c010b595:	83 ec 0c             	sub    $0xc,%esp
c010b598:	ff 75 f4             	pushl  -0xc(%ebp)
c010b59b:	e8 5c f7 ff ff       	call   c010acfc <files_count_inc>
c010b5a0:	83 c4 10             	add    $0x10,%esp
    proc->filesp = filesp;
c010b5a3:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b5a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010b5a9:	89 90 c4 00 00 00    	mov    %edx,0xc4(%eax)
    return 0;
c010b5af:	b8 00 00 00 00       	mov    $0x0,%eax
c010b5b4:	eb 15                	jmp    c010b5cb <copy_files+0xac>
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
    }

    if ((ret = dup_files(filesp, old_filesp)) != 0) {
        goto bad_dup_cleanup_fs;
c010b5b6:	90                   	nop
    files_count_inc(filesp);
    proc->filesp = filesp;
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
c010b5b7:	83 ec 0c             	sub    $0xc,%esp
c010b5ba:	ff 75 f4             	pushl  -0xc(%ebp)
c010b5bd:	e8 f8 f2 ff ff       	call   c010a8ba <files_destroy>
c010b5c2:	83 c4 10             	add    $0x10,%esp
c010b5c5:	eb 01                	jmp    c010b5c8 <copy_files+0xa9>
        goto good_files_struct;
    }

    int ret = -E_NO_MEM;
    if ((filesp = files_create()) == NULL) {
        goto bad_files_struct;
c010b5c7:	90                   	nop
    return 0;

bad_dup_cleanup_fs:
    files_destroy(filesp);
bad_files_struct:
    return ret;
c010b5c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b5cb:	c9                   	leave  
c010b5cc:	c3                   	ret    

c010b5cd <put_files>:

//decrease the ref_count of files, and if ref_count==0, then destroy files_struct
static void
put_files(struct proc_struct *proc) {
c010b5cd:	55                   	push   %ebp
c010b5ce:	89 e5                	mov    %esp,%ebp
c010b5d0:	83 ec 18             	sub    $0x18,%esp
    struct files_struct *filesp = proc->filesp;
c010b5d3:	8b 45 08             	mov    0x8(%ebp),%eax
c010b5d6:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010b5dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (filesp != NULL) {
c010b5df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b5e3:	74 1d                	je     c010b602 <put_files+0x35>
        if (files_count_dec(filesp) == 0) {
c010b5e5:	ff 75 f4             	pushl  -0xc(%ebp)
c010b5e8:	e8 29 f7 ff ff       	call   c010ad16 <files_count_dec>
c010b5ed:	83 c4 04             	add    $0x4,%esp
c010b5f0:	85 c0                	test   %eax,%eax
c010b5f2:	75 0e                	jne    c010b602 <put_files+0x35>
            files_destroy(filesp);
c010b5f4:	83 ec 0c             	sub    $0xc,%esp
c010b5f7:	ff 75 f4             	pushl  -0xc(%ebp)
c010b5fa:	e8 bb f2 ff ff       	call   c010a8ba <files_destroy>
c010b5ff:	83 c4 10             	add    $0x10,%esp
        }
    }
}
c010b602:	90                   	nop
c010b603:	c9                   	leave  
c010b604:	c3                   	ret    

c010b605 <do_fork>:
 * @clone_flags: used to guide how to clone the child process
 * @stack:       the parent's user stack pointer. if stack==0, It means to fork a kernel thread.
 * @tf:          the trapframe info, which will be copied to child process's proc->tf
 */
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
c010b605:	55                   	push   %ebp
c010b606:	89 e5                	mov    %esp,%ebp
c010b608:	83 ec 10             	sub    $0x10,%esp
    int ret = -E_NO_FREE_PROC;
c010b60b:	c7 45 fc fb ff ff ff 	movl   $0xfffffffb,-0x4(%ebp)
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
c010b612:	a1 40 10 15 c0       	mov    0xc0151040,%eax
c010b617:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010b61c:	7f 09                	jg     c010b627 <do_fork+0x22>
        goto fork_out;
    }
    ret = -E_NO_MEM;
c010b61e:	c7 45 fc fc ff ff ff 	movl   $0xfffffffc,-0x4(%ebp)
c010b625:	eb 01                	jmp    c010b628 <do_fork+0x23>
int
do_fork(uint32_t clone_flags, uintptr_t stack, struct trapframe *tf) {
    int ret = -E_NO_FREE_PROC;
    struct proc_struct *proc;
    if (nr_process >= MAX_PROCESS) {
        goto fork_out;
c010b627:	90                   	nop
	*    update step 1: set child proc's parent to current process, make sure current process's wait_state is 0
	*    update step 5: insert proc_struct into hash_list && proc_list, set the relation links of process
    */
	
fork_out:
    return ret;
c010b628:	8b 45 fc             	mov    -0x4(%ebp),%eax
bad_fork_cleanup_kstack:
    put_kstack(proc);
bad_fork_cleanup_proc:
    kfree(proc);
    goto fork_out;
}
c010b62b:	c9                   	leave  
c010b62c:	c3                   	ret    

c010b62d <do_exit>:
// do_exit - called by sys_exit
//   1. call exit_mmap & put_pgdir & mm_destroy to free the almost all memory space of process
//   2. set process' state as PROC_ZOMBIE, then call wakeup_proc(parent) to ask parent reclaim itself.
//   3. call scheduler to switch to other process
int
do_exit(int error_code) {
c010b62d:	55                   	push   %ebp
c010b62e:	89 e5                	mov    %esp,%ebp
c010b630:	83 ec 18             	sub    $0x18,%esp
    if (current == idleproc) {
c010b633:	8b 15 28 f0 14 c0    	mov    0xc014f028,%edx
c010b639:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010b63e:	39 c2                	cmp    %eax,%edx
c010b640:	75 17                	jne    c010b659 <do_exit+0x2c>
        panic("idleproc exit.\n");
c010b642:	83 ec 04             	sub    $0x4,%esp
c010b645:	68 88 55 11 c0       	push   $0xc0115588
c010b64a:	68 e4 01 00 00       	push   $0x1e4
c010b64f:	68 4c 55 11 c0       	push   $0xc011554c
c010b654:	e8 8c 4e ff ff       	call   c01004e5 <__panic>
    }
    if (current == initproc) {
c010b659:	8b 15 28 f0 14 c0    	mov    0xc014f028,%edx
c010b65f:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b664:	39 c2                	cmp    %eax,%edx
c010b666:	75 17                	jne    c010b67f <do_exit+0x52>
        panic("initproc exit.\n");
c010b668:	83 ec 04             	sub    $0x4,%esp
c010b66b:	68 98 55 11 c0       	push   $0xc0115598
c010b670:	68 e7 01 00 00       	push   $0x1e7
c010b675:	68 4c 55 11 c0       	push   $0xc011554c
c010b67a:	e8 66 4e ff ff       	call   c01004e5 <__panic>
    }
    
    struct mm_struct *mm = current->mm;
c010b67f:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b684:	8b 40 18             	mov    0x18(%eax),%eax
c010b687:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (mm != NULL) {
c010b68a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b68e:	74 56                	je     c010b6e6 <do_exit+0xb9>
        lcr3(boot_cr3);
c010b690:	a1 08 21 15 c0       	mov    0xc0152108,%eax
c010b695:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010b698:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010b69b:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010b69e:	83 ec 0c             	sub    $0xc,%esp
c010b6a1:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6a4:	e8 d6 f5 ff ff       	call   c010ac7f <mm_count_dec>
c010b6a9:	83 c4 10             	add    $0x10,%esp
c010b6ac:	85 c0                	test   %eax,%eax
c010b6ae:	75 2a                	jne    c010b6da <do_exit+0xad>
            exit_mmap(mm);
c010b6b0:	83 ec 0c             	sub    $0xc,%esp
c010b6b3:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6b6:	e8 3e 9c ff ff       	call   c01052f9 <exit_mmap>
c010b6bb:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010b6be:	83 ec 0c             	sub    $0xc,%esp
c010b6c1:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6c4:	e8 6b fc ff ff       	call   c010b334 <put_pgdir>
c010b6c9:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010b6cc:	83 ec 0c             	sub    $0xc,%esp
c010b6cf:	ff 75 f4             	pushl  -0xc(%ebp)
c010b6d2:	e8 94 99 ff ff       	call   c010506b <mm_destroy>
c010b6d7:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010b6da:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b6df:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    put_files(current); //for LAB8
c010b6e6:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b6eb:	83 ec 0c             	sub    $0xc,%esp
c010b6ee:	50                   	push   %eax
c010b6ef:	e8 d9 fe ff ff       	call   c010b5cd <put_files>
c010b6f4:	83 c4 10             	add    $0x10,%esp
    current->state = PROC_ZOMBIE;
c010b6f7:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b6fc:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    current->exit_code = error_code;
c010b702:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b707:	8b 55 08             	mov    0x8(%ebp),%edx
c010b70a:	89 90 8c 00 00 00    	mov    %edx,0x8c(%eax)
    
    bool intr_flag;
    struct proc_struct *proc;
    local_intr_save(intr_flag);
c010b710:	e8 2b f4 ff ff       	call   c010ab40 <__intr_save>
c010b715:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        proc = current->parent;
c010b718:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b71d:	8b 40 14             	mov    0x14(%eax),%eax
c010b720:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (proc->wait_state == WT_CHILD) {
c010b723:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b726:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b72c:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b731:	0f 85 be 00 00 00    	jne    c010b7f5 <do_exit+0x1c8>
            wakeup_proc(proc);
c010b737:	83 ec 0c             	sub    $0xc,%esp
c010b73a:	ff 75 ec             	pushl  -0x14(%ebp)
c010b73d:	e8 e0 0c 00 00       	call   c010c422 <wakeup_proc>
c010b742:	83 c4 10             	add    $0x10,%esp
        }
        while (current->cptr != NULL) {
c010b745:	e9 ab 00 00 00       	jmp    c010b7f5 <do_exit+0x1c8>
            proc = current->cptr;
c010b74a:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b74f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b755:	89 45 ec             	mov    %eax,-0x14(%ebp)
            current->cptr = proc->optr;
c010b758:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b75d:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b760:	8b 92 9c 00 00 00    	mov    0x9c(%edx),%edx
c010b766:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    
            proc->yptr = NULL;
c010b76c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b76f:	c7 80 98 00 00 00 00 	movl   $0x0,0x98(%eax)
c010b776:	00 00 00 
            if ((proc->optr = initproc->cptr) != NULL) {
c010b779:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b77e:	8b 90 94 00 00 00    	mov    0x94(%eax),%edx
c010b784:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b787:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
c010b78d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b790:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010b796:	85 c0                	test   %eax,%eax
c010b798:	74 14                	je     c010b7ae <do_exit+0x181>
                initproc->cptr->yptr = proc;
c010b79a:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b79f:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b7a5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b7a8:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
            }
            proc->parent = initproc;
c010b7ae:	8b 15 24 f0 14 c0    	mov    0xc014f024,%edx
c010b7b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7b7:	89 50 14             	mov    %edx,0x14(%eax)
            initproc->cptr = proc;
c010b7ba:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b7bf:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010b7c2:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
            if (proc->state == PROC_ZOMBIE) {
c010b7c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b7cb:	8b 00                	mov    (%eax),%eax
c010b7cd:	83 f8 03             	cmp    $0x3,%eax
c010b7d0:	75 23                	jne    c010b7f5 <do_exit+0x1c8>
                if (initproc->wait_state == WT_CHILD) {
c010b7d2:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b7d7:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010b7dd:	3d 01 00 00 80       	cmp    $0x80000001,%eax
c010b7e2:	75 11                	jne    c010b7f5 <do_exit+0x1c8>
                    wakeup_proc(initproc);
c010b7e4:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010b7e9:	83 ec 0c             	sub    $0xc,%esp
c010b7ec:	50                   	push   %eax
c010b7ed:	e8 30 0c 00 00       	call   c010c422 <wakeup_proc>
c010b7f2:	83 c4 10             	add    $0x10,%esp
    {
        proc = current->parent;
        if (proc->wait_state == WT_CHILD) {
            wakeup_proc(proc);
        }
        while (current->cptr != NULL) {
c010b7f5:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b7fa:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010b800:	85 c0                	test   %eax,%eax
c010b802:	0f 85 42 ff ff ff    	jne    c010b74a <do_exit+0x11d>
                    wakeup_proc(initproc);
                }
            }
        }
    }
    local_intr_restore(intr_flag);
c010b808:	83 ec 0c             	sub    $0xc,%esp
c010b80b:	ff 75 f0             	pushl  -0x10(%ebp)
c010b80e:	e8 57 f3 ff ff       	call   c010ab6a <__intr_restore>
c010b813:	83 c4 10             	add    $0x10,%esp
    
    schedule();
c010b816:	e8 97 0c 00 00       	call   c010c4b2 <schedule>
    panic("do_exit will not return!! %d.\n", current->pid);
c010b81b:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b820:	8b 40 04             	mov    0x4(%eax),%eax
c010b823:	50                   	push   %eax
c010b824:	68 a8 55 11 c0       	push   $0xc01155a8
c010b829:	68 14 02 00 00       	push   $0x214
c010b82e:	68 4c 55 11 c0       	push   $0xc011554c
c010b833:	e8 ad 4c ff ff       	call   c01004e5 <__panic>

c010b838 <load_icode_read>:
}

//load_icode_read is used by load_icode in LAB8
static int
load_icode_read(int fd, void *buf, size_t len, off_t offset) {
c010b838:	55                   	push   %ebp
c010b839:	89 e5                	mov    %esp,%ebp
c010b83b:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sysfile_seek(fd, offset, LSEEK_SET)) != 0) {
c010b83e:	83 ec 04             	sub    $0x4,%esp
c010b841:	6a 00                	push   $0x0
c010b843:	ff 75 14             	pushl  0x14(%ebp)
c010b846:	ff 75 08             	pushl  0x8(%ebp)
c010b849:	e8 84 dc ff ff       	call   c01094d2 <sysfile_seek>
c010b84e:	83 c4 10             	add    $0x10,%esp
c010b851:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b854:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b858:	74 05                	je     c010b85f <load_icode_read+0x27>
        return ret;
c010b85a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b85d:	eb 33                	jmp    c010b892 <load_icode_read+0x5a>
    }
    if ((ret = sysfile_read(fd, buf, len)) != len) {
c010b85f:	83 ec 04             	sub    $0x4,%esp
c010b862:	ff 75 10             	pushl  0x10(%ebp)
c010b865:	ff 75 0c             	pushl  0xc(%ebp)
c010b868:	ff 75 08             	pushl  0x8(%ebp)
c010b86b:	e8 b2 d9 ff ff       	call   c0109222 <sysfile_read>
c010b870:	83 c4 10             	add    $0x10,%esp
c010b873:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010b876:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b879:	3b 45 10             	cmp    0x10(%ebp),%eax
c010b87c:	74 0f                	je     c010b88d <load_icode_read+0x55>
        return (ret < 0) ? ret : -1;
c010b87e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
c010b883:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010b887:	0f 48 45 f4          	cmovs  -0xc(%ebp),%eax
c010b88b:	eb 05                	jmp    c010b892 <load_icode_read+0x5a>
    }
    return 0;
c010b88d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010b892:	c9                   	leave  
c010b893:	c3                   	ret    

c010b894 <load_icode>:

// load_icode -  called by sys_exec-->do_execve
  
static int
load_icode(int fd, int argc, char **kargv) {
c010b894:	55                   	push   %ebp
c010b895:	89 e5                	mov    %esp,%ebp
     * (5) setup current process's mm, cr3, reset pgidr (using lcr3 MARCO)
     * (6) setup uargc and uargv in user stacks
     * (7) setup trapframe for user environment
     * (8) if up steps failed, you should cleanup the env.
     */
}
c010b897:	90                   	nop
c010b898:	5d                   	pop    %ebp
c010b899:	c3                   	ret    

c010b89a <put_kargv>:

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
c010b89a:	55                   	push   %ebp
c010b89b:	89 e5                	mov    %esp,%ebp
c010b89d:	83 ec 08             	sub    $0x8,%esp
    while (argc > 0) {
c010b8a0:	eb 21                	jmp    c010b8c3 <put_kargv+0x29>
        kfree(kargv[-- argc]);
c010b8a2:	83 6d 08 01          	subl   $0x1,0x8(%ebp)
c010b8a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010b8a9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010b8b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8b3:	01 d0                	add    %edx,%eax
c010b8b5:	8b 00                	mov    (%eax),%eax
c010b8b7:	83 ec 0c             	sub    $0xc,%esp
c010b8ba:	50                   	push   %eax
c010b8bb:	e8 9c b5 ff ff       	call   c0106e5c <kfree>
c010b8c0:	83 c4 10             	add    $0x10,%esp
}

// this function isn't very correct in LAB8
static void
put_kargv(int argc, char **kargv) {
    while (argc > 0) {
c010b8c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b8c7:	7f d9                	jg     c010b8a2 <put_kargv+0x8>
        kfree(kargv[-- argc]);
    }
}
c010b8c9:	90                   	nop
c010b8ca:	c9                   	leave  
c010b8cb:	c3                   	ret    

c010b8cc <copy_kargv>:

static int
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
c010b8cc:	55                   	push   %ebp
c010b8cd:	89 e5                	mov    %esp,%ebp
c010b8cf:	83 ec 18             	sub    $0x18,%esp
    int i, ret = -E_INVAL;
c010b8d2:	c7 45 f0 fd ff ff ff 	movl   $0xfffffffd,-0x10(%ebp)
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
c010b8d9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010b8dc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010b8e3:	8b 45 14             	mov    0x14(%ebp),%eax
c010b8e6:	6a 00                	push   $0x0
c010b8e8:	52                   	push   %edx
c010b8e9:	50                   	push   %eax
c010b8ea:	ff 75 08             	pushl  0x8(%ebp)
c010b8ed:	e8 82 a2 ff ff       	call   c0105b74 <user_mem_check>
c010b8f2:	83 c4 10             	add    $0x10,%esp
c010b8f5:	85 c0                	test   %eax,%eax
c010b8f7:	75 08                	jne    c010b901 <copy_kargv+0x35>
        return ret;
c010b8f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010b8fc:	e9 9e 00 00 00       	jmp    c010b99f <copy_kargv+0xd3>
    }
    for (i = 0; i < argc; i ++) {
c010b901:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010b908:	eb 6a                	jmp    c010b974 <copy_kargv+0xa8>
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
c010b90a:	83 ec 0c             	sub    $0xc,%esp
c010b90d:	68 00 10 00 00       	push   $0x1000
c010b912:	e8 2d b5 ff ff       	call   c0106e44 <kmalloc>
c010b917:	83 c4 10             	add    $0x10,%esp
c010b91a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010b91d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010b921:	74 60                	je     c010b983 <copy_kargv+0xb7>
            goto failed_nomem;
        }
        if (!copy_string(mm, buffer, argv[i], EXEC_MAX_ARG_LEN + 1)) {
c010b923:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b926:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010b92d:	8b 45 14             	mov    0x14(%ebp),%eax
c010b930:	01 d0                	add    %edx,%eax
c010b932:	8b 00                	mov    (%eax),%eax
c010b934:	68 00 10 00 00       	push   $0x1000
c010b939:	50                   	push   %eax
c010b93a:	ff 75 ec             	pushl  -0x14(%ebp)
c010b93d:	ff 75 08             	pushl  0x8(%ebp)
c010b940:	e8 4f a3 ff ff       	call   c0105c94 <copy_string>
c010b945:	83 c4 10             	add    $0x10,%esp
c010b948:	85 c0                	test   %eax,%eax
c010b94a:	75 10                	jne    c010b95c <copy_kargv+0x90>
            kfree(buffer);
c010b94c:	83 ec 0c             	sub    $0xc,%esp
c010b94f:	ff 75 ec             	pushl  -0x14(%ebp)
c010b952:	e8 05 b5 ff ff       	call   c0106e5c <kfree>
c010b957:	83 c4 10             	add    $0x10,%esp
            goto failed_cleanup;
c010b95a:	eb 2f                	jmp    c010b98b <copy_kargv+0xbf>
        }
        kargv[i] = buffer;
c010b95c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b95f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010b966:	8b 45 10             	mov    0x10(%ebp),%eax
c010b969:	01 c2                	add    %eax,%edx
c010b96b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010b96e:	89 02                	mov    %eax,(%edx)
copy_kargv(struct mm_struct *mm, int argc, char **kargv, const char **argv) {
    int i, ret = -E_INVAL;
    if (!user_mem_check(mm, (uintptr_t)argv, sizeof(const char *) * argc, 0)) {
        return ret;
    }
    for (i = 0; i < argc; i ++) {
c010b970:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010b974:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010b977:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010b97a:	7c 8e                	jl     c010b90a <copy_kargv+0x3e>
            kfree(buffer);
            goto failed_cleanup;
        }
        kargv[i] = buffer;
    }
    return 0;
c010b97c:	b8 00 00 00 00       	mov    $0x0,%eax
c010b981:	eb 1c                	jmp    c010b99f <copy_kargv+0xd3>
        return ret;
    }
    for (i = 0; i < argc; i ++) {
        char *buffer;
        if ((buffer = kmalloc(EXEC_MAX_ARG_LEN + 1)) == NULL) {
            goto failed_nomem;
c010b983:	90                   	nop
        kargv[i] = buffer;
    }
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c010b984:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
failed_cleanup:
    put_kargv(i, kargv);
c010b98b:	83 ec 08             	sub    $0x8,%esp
c010b98e:	ff 75 10             	pushl  0x10(%ebp)
c010b991:	ff 75 f4             	pushl  -0xc(%ebp)
c010b994:	e8 01 ff ff ff       	call   c010b89a <put_kargv>
c010b999:	83 c4 10             	add    $0x10,%esp
    return ret;
c010b99c:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c010b99f:	c9                   	leave  
c010b9a0:	c3                   	ret    

c010b9a1 <do_execve>:

// do_execve - call exit_mmap(mm)&put_pgdir(mm) to reclaim memory space of current process
//           - call load_icode to setup new memory space accroding binary prog.
int
do_execve(const char *name, int argc, const char **argv) {
c010b9a1:	55                   	push   %ebp
c010b9a2:	89 e5                	mov    %esp,%ebp
c010b9a4:	81 ec d8 00 00 00    	sub    $0xd8,%esp
    static_assert(EXEC_MAX_ARG_LEN >= FS_MAX_FPATH_LEN);
    struct mm_struct *mm = current->mm;
c010b9aa:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b9af:	8b 40 18             	mov    0x18(%eax),%eax
c010b9b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!(argc >= 1 && argc <= EXEC_MAX_ARG_NUM)) {
c010b9b5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010b9b9:	7e 06                	jle    c010b9c1 <do_execve+0x20>
c010b9bb:	83 7d 0c 20          	cmpl   $0x20,0xc(%ebp)
c010b9bf:	7e 0a                	jle    c010b9cb <do_execve+0x2a>
        return -E_INVAL;
c010b9c1:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010b9c6:	e9 f4 01 00 00       	jmp    c010bbbf <do_execve+0x21e>
    }

    char local_name[PROC_NAME_LEN + 1];
    memset(local_name, 0, sizeof(local_name));
c010b9cb:	83 ec 04             	sub    $0x4,%esp
c010b9ce:	6a 33                	push   $0x33
c010b9d0:	6a 00                	push   $0x0
c010b9d2:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010b9d5:	50                   	push   %eax
c010b9d6:	e8 2a 6a 00 00       	call   c0112405 <memset>
c010b9db:	83 c4 10             	add    $0x10,%esp
    
    char *kargv[EXEC_MAX_ARG_NUM];
    const char *path;
    
    int ret = -E_INVAL;
c010b9de:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
    
    lock_mm(mm);
c010b9e5:	83 ec 0c             	sub    $0xc,%esp
c010b9e8:	ff 75 f0             	pushl  -0x10(%ebp)
c010b9eb:	e8 a9 f2 ff ff       	call   c010ac99 <lock_mm>
c010b9f0:	83 c4 10             	add    $0x10,%esp
    if (name == NULL) {
c010b9f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010b9f7:	75 1e                	jne    c010ba17 <do_execve+0x76>
        snprintf(local_name, sizeof(local_name), "<null> %d", current->pid);
c010b9f9:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010b9fe:	8b 40 04             	mov    0x4(%eax),%eax
c010ba01:	50                   	push   %eax
c010ba02:	68 c7 55 11 c0       	push   $0xc01155c7
c010ba07:	6a 33                	push   $0x33
c010ba09:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010ba0c:	50                   	push   %eax
c010ba0d:	e8 43 71 00 00       	call   c0112b55 <snprintf>
c010ba12:	83 c4 10             	add    $0x10,%esp
c010ba15:	eb 2e                	jmp    c010ba45 <do_execve+0xa4>
    }
    else {
        if (!copy_string(mm, local_name, name, sizeof(local_name))) {
c010ba17:	6a 33                	push   $0x33
c010ba19:	ff 75 08             	pushl  0x8(%ebp)
c010ba1c:	8d 45 b1             	lea    -0x4f(%ebp),%eax
c010ba1f:	50                   	push   %eax
c010ba20:	ff 75 f0             	pushl  -0x10(%ebp)
c010ba23:	e8 6c a2 ff ff       	call   c0105c94 <copy_string>
c010ba28:	83 c4 10             	add    $0x10,%esp
c010ba2b:	85 c0                	test   %eax,%eax
c010ba2d:	75 16                	jne    c010ba45 <do_execve+0xa4>
            unlock_mm(mm);
c010ba2f:	83 ec 0c             	sub    $0xc,%esp
c010ba32:	ff 75 f0             	pushl  -0x10(%ebp)
c010ba35:	e8 97 f2 ff ff       	call   c010acd1 <unlock_mm>
c010ba3a:	83 c4 10             	add    $0x10,%esp
            return ret;
c010ba3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba40:	e9 7a 01 00 00       	jmp    c010bbbf <do_execve+0x21e>
        }
    }
    if ((ret = copy_kargv(mm, argc, kargv, argv)) != 0) {
c010ba45:	ff 75 10             	pushl  0x10(%ebp)
c010ba48:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010ba4e:	50                   	push   %eax
c010ba4f:	ff 75 0c             	pushl  0xc(%ebp)
c010ba52:	ff 75 f0             	pushl  -0x10(%ebp)
c010ba55:	e8 72 fe ff ff       	call   c010b8cc <copy_kargv>
c010ba5a:	83 c4 10             	add    $0x10,%esp
c010ba5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ba60:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ba64:	74 16                	je     c010ba7c <do_execve+0xdb>
        unlock_mm(mm);
c010ba66:	83 ec 0c             	sub    $0xc,%esp
c010ba69:	ff 75 f0             	pushl  -0x10(%ebp)
c010ba6c:	e8 60 f2 ff ff       	call   c010acd1 <unlock_mm>
c010ba71:	83 c4 10             	add    $0x10,%esp
        return ret;
c010ba74:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ba77:	e9 43 01 00 00       	jmp    c010bbbf <do_execve+0x21e>
    }
    path = argv[0];
c010ba7c:	8b 45 10             	mov    0x10(%ebp),%eax
c010ba7f:	8b 00                	mov    (%eax),%eax
c010ba81:	89 45 ec             	mov    %eax,-0x14(%ebp)
    unlock_mm(mm);
c010ba84:	83 ec 0c             	sub    $0xc,%esp
c010ba87:	ff 75 f0             	pushl  -0x10(%ebp)
c010ba8a:	e8 42 f2 ff ff       	call   c010acd1 <unlock_mm>
c010ba8f:	83 c4 10             	add    $0x10,%esp
    files_closeall(current->filesp);
c010ba92:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010ba97:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010ba9d:	83 ec 0c             	sub    $0xc,%esp
c010baa0:	50                   	push   %eax
c010baa1:	e8 cb ee ff ff       	call   c010a971 <files_closeall>
c010baa6:	83 c4 10             	add    $0x10,%esp

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
c010baa9:	83 ec 08             	sub    $0x8,%esp
c010baac:	6a 00                	push   $0x0
c010baae:	ff 75 ec             	pushl  -0x14(%ebp)
c010bab1:	e8 07 d7 ff ff       	call   c01091bd <sysfile_open>
c010bab6:	83 c4 10             	add    $0x10,%esp
c010bab9:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010babc:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010babf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bac2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bac6:	0f 88 b5 00 00 00    	js     c010bb81 <do_execve+0x1e0>
        goto execve_exit;
    }
    if (mm != NULL) {
c010bacc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bad0:	74 56                	je     c010bb28 <do_execve+0x187>
        lcr3(boot_cr3);
c010bad2:	a1 08 21 15 c0       	mov    0xc0152108,%eax
c010bad7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010bada:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010badd:	0f 22 d8             	mov    %eax,%cr3
        if (mm_count_dec(mm) == 0) {
c010bae0:	83 ec 0c             	sub    $0xc,%esp
c010bae3:	ff 75 f0             	pushl  -0x10(%ebp)
c010bae6:	e8 94 f1 ff ff       	call   c010ac7f <mm_count_dec>
c010baeb:	83 c4 10             	add    $0x10,%esp
c010baee:	85 c0                	test   %eax,%eax
c010baf0:	75 2a                	jne    c010bb1c <do_execve+0x17b>
            exit_mmap(mm);
c010baf2:	83 ec 0c             	sub    $0xc,%esp
c010baf5:	ff 75 f0             	pushl  -0x10(%ebp)
c010baf8:	e8 fc 97 ff ff       	call   c01052f9 <exit_mmap>
c010bafd:	83 c4 10             	add    $0x10,%esp
            put_pgdir(mm);
c010bb00:	83 ec 0c             	sub    $0xc,%esp
c010bb03:	ff 75 f0             	pushl  -0x10(%ebp)
c010bb06:	e8 29 f8 ff ff       	call   c010b334 <put_pgdir>
c010bb0b:	83 c4 10             	add    $0x10,%esp
            mm_destroy(mm);
c010bb0e:	83 ec 0c             	sub    $0xc,%esp
c010bb11:	ff 75 f0             	pushl  -0x10(%ebp)
c010bb14:	e8 52 95 ff ff       	call   c010506b <mm_destroy>
c010bb19:	83 c4 10             	add    $0x10,%esp
        }
        current->mm = NULL;
c010bb1c:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bb21:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
    }
    ret= -E_NO_MEM;;
c010bb28:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
c010bb2f:	83 ec 04             	sub    $0x4,%esp
c010bb32:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010bb38:	50                   	push   %eax
c010bb39:	ff 75 0c             	pushl  0xc(%ebp)
c010bb3c:	ff 75 e8             	pushl  -0x18(%ebp)
c010bb3f:	e8 50 fd ff ff       	call   c010b894 <load_icode>
c010bb44:	83 c4 10             	add    $0x10,%esp
c010bb47:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bb4a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bb4e:	75 34                	jne    c010bb84 <do_execve+0x1e3>
        goto execve_exit;
    }
    put_kargv(argc, kargv);
c010bb50:	83 ec 08             	sub    $0x8,%esp
c010bb53:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010bb59:	50                   	push   %eax
c010bb5a:	ff 75 0c             	pushl  0xc(%ebp)
c010bb5d:	e8 38 fd ff ff       	call   c010b89a <put_kargv>
c010bb62:	83 c4 10             	add    $0x10,%esp
    set_proc_name(current, local_name);
c010bb65:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bb6a:	83 ec 08             	sub    $0x8,%esp
c010bb6d:	8d 55 b1             	lea    -0x4f(%ebp),%edx
c010bb70:	52                   	push   %edx
c010bb71:	50                   	push   %eax
c010bb72:	e8 d7 f1 ff ff       	call   c010ad4e <set_proc_name>
c010bb77:	83 c4 10             	add    $0x10,%esp
    return 0;
c010bb7a:	b8 00 00 00 00       	mov    $0x0,%eax
c010bb7f:	eb 3e                	jmp    c010bbbf <do_execve+0x21e>
    files_closeall(current->filesp);

    /* sysfile_open will check the first argument path, thus we have to use a user-space pointer, and argv[0] may be incorrect */    
    int fd;
    if ((ret = fd = sysfile_open(path, O_RDONLY)) < 0) {
        goto execve_exit;
c010bb81:	90                   	nop
c010bb82:	eb 01                	jmp    c010bb85 <do_execve+0x1e4>
        }
        current->mm = NULL;
    }
    ret= -E_NO_MEM;;
    if ((ret = load_icode(fd, argc, kargv)) != 0) {
        goto execve_exit;
c010bb84:	90                   	nop
    put_kargv(argc, kargv);
    set_proc_name(current, local_name);
    return 0;

execve_exit:
    put_kargv(argc, kargv);
c010bb85:	83 ec 08             	sub    $0x8,%esp
c010bb88:	8d 85 30 ff ff ff    	lea    -0xd0(%ebp),%eax
c010bb8e:	50                   	push   %eax
c010bb8f:	ff 75 0c             	pushl  0xc(%ebp)
c010bb92:	e8 03 fd ff ff       	call   c010b89a <put_kargv>
c010bb97:	83 c4 10             	add    $0x10,%esp
    do_exit(ret);
c010bb9a:	83 ec 0c             	sub    $0xc,%esp
c010bb9d:	ff 75 f4             	pushl  -0xc(%ebp)
c010bba0:	e8 88 fa ff ff       	call   c010b62d <do_exit>
c010bba5:	83 c4 10             	add    $0x10,%esp
    panic("already exit: %e.\n", ret);
c010bba8:	ff 75 f4             	pushl  -0xc(%ebp)
c010bbab:	68 d1 55 11 c0       	push   $0xc01155d1
c010bbb0:	68 a1 02 00 00       	push   $0x2a1
c010bbb5:	68 4c 55 11 c0       	push   $0xc011554c
c010bbba:	e8 26 49 ff ff       	call   c01004e5 <__panic>
}
c010bbbf:	c9                   	leave  
c010bbc0:	c3                   	ret    

c010bbc1 <do_yield>:

// do_yield - ask the scheduler to reschedule
int
do_yield(void) {
c010bbc1:	55                   	push   %ebp
c010bbc2:	89 e5                	mov    %esp,%ebp
    current->need_resched = 1;
c010bbc4:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bbc9:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    return 0;
c010bbd0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bbd5:	5d                   	pop    %ebp
c010bbd6:	c3                   	ret    

c010bbd7 <do_wait>:

// do_wait - wait one OR any children with PROC_ZOMBIE state, and free memory space of kernel stack
//         - proc struct of this child.
// NOTE: only after do_wait function, all resources of the child proces are free.
int
do_wait(int pid, int *code_store) {
c010bbd7:	55                   	push   %ebp
c010bbd8:	89 e5                	mov    %esp,%ebp
c010bbda:	83 ec 18             	sub    $0x18,%esp
    struct mm_struct *mm = current->mm;
c010bbdd:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bbe2:	8b 40 18             	mov    0x18(%eax),%eax
c010bbe5:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (code_store != NULL) {
c010bbe8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bbec:	74 21                	je     c010bc0f <do_wait+0x38>
        if (!user_mem_check(mm, (uintptr_t)code_store, sizeof(int), 1)) {
c010bbee:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bbf1:	6a 01                	push   $0x1
c010bbf3:	6a 04                	push   $0x4
c010bbf5:	50                   	push   %eax
c010bbf6:	ff 75 ec             	pushl  -0x14(%ebp)
c010bbf9:	e8 76 9f ff ff       	call   c0105b74 <user_mem_check>
c010bbfe:	83 c4 10             	add    $0x10,%esp
c010bc01:	85 c0                	test   %eax,%eax
c010bc03:	75 0a                	jne    c010bc0f <do_wait+0x38>
            return -E_INVAL;
c010bc05:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010bc0a:	e9 63 01 00 00       	jmp    c010bd72 <do_wait+0x19b>
    }

    struct proc_struct *proc;
    bool intr_flag, haskid;
repeat:
    haskid = 0;
c010bc0f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    if (pid != 0) {
c010bc16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010bc1a:	74 3c                	je     c010bc58 <do_wait+0x81>
        proc = find_proc(pid);
c010bc1c:	83 ec 0c             	sub    $0xc,%esp
c010bc1f:	ff 75 08             	pushl  0x8(%ebp)
c010bc22:	e8 34 f5 ff ff       	call   c010b15b <find_proc>
c010bc27:	83 c4 10             	add    $0x10,%esp
c010bc2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (proc != NULL && proc->parent == current) {
c010bc2d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc31:	74 58                	je     c010bc8b <do_wait+0xb4>
c010bc33:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc36:	8b 50 14             	mov    0x14(%eax),%edx
c010bc39:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bc3e:	39 c2                	cmp    %eax,%edx
c010bc40:	75 49                	jne    c010bc8b <do_wait+0xb4>
            haskid = 1;
c010bc42:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bc49:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc4c:	8b 00                	mov    (%eax),%eax
c010bc4e:	83 f8 03             	cmp    $0x3,%eax
c010bc51:	75 38                	jne    c010bc8b <do_wait+0xb4>
                goto found;
c010bc53:	e9 88 00 00 00       	jmp    c010bce0 <do_wait+0x109>
            }
        }
    }
    else {
        proc = current->cptr;
c010bc58:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bc5d:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bc63:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; proc != NULL; proc = proc->optr) {
c010bc66:	eb 1d                	jmp    c010bc85 <do_wait+0xae>
            haskid = 1;
c010bc68:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
            if (proc->state == PROC_ZOMBIE) {
c010bc6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc72:	8b 00                	mov    (%eax),%eax
c010bc74:	83 f8 03             	cmp    $0x3,%eax
c010bc77:	74 66                	je     c010bcdf <do_wait+0x108>
            }
        }
    }
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
c010bc79:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bc7c:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bc82:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bc85:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bc89:	75 dd                	jne    c010bc68 <do_wait+0x91>
            if (proc->state == PROC_ZOMBIE) {
                goto found;
            }
        }
    }
    if (haskid) {
c010bc8b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010bc8f:	74 44                	je     c010bcd5 <do_wait+0xfe>
        current->state = PROC_SLEEPING;
c010bc91:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bc96:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        current->wait_state = WT_CHILD;
c010bc9c:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bca1:	c7 80 90 00 00 00 01 	movl   $0x80000001,0x90(%eax)
c010bca8:	00 00 80 
        schedule();
c010bcab:	e8 02 08 00 00       	call   c010c4b2 <schedule>
        if (current->flags & PF_EXITING) {
c010bcb0:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010bcb5:	8b 40 44             	mov    0x44(%eax),%eax
c010bcb8:	83 e0 01             	and    $0x1,%eax
c010bcbb:	85 c0                	test   %eax,%eax
c010bcbd:	0f 84 4c ff ff ff    	je     c010bc0f <do_wait+0x38>
            do_exit(-E_KILLED);
c010bcc3:	83 ec 0c             	sub    $0xc,%esp
c010bcc6:	6a f7                	push   $0xfffffff7
c010bcc8:	e8 60 f9 ff ff       	call   c010b62d <do_exit>
c010bccd:	83 c4 10             	add    $0x10,%esp
        }
        goto repeat;
c010bcd0:	e9 3a ff ff ff       	jmp    c010bc0f <do_wait+0x38>
    }
    return -E_BAD_PROC;
c010bcd5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
c010bcda:	e9 93 00 00 00       	jmp    c010bd72 <do_wait+0x19b>
    else {
        proc = current->cptr;
        for (; proc != NULL; proc = proc->optr) {
            haskid = 1;
            if (proc->state == PROC_ZOMBIE) {
                goto found;
c010bcdf:	90                   	nop
        goto repeat;
    }
    return -E_BAD_PROC;

found:
    if (proc == idleproc || proc == initproc) {
c010bce0:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010bce5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bce8:	74 0a                	je     c010bcf4 <do_wait+0x11d>
c010bcea:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010bcef:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010bcf2:	75 17                	jne    c010bd0b <do_wait+0x134>
        panic("wait idleproc or initproc.\n");
c010bcf4:	83 ec 04             	sub    $0x4,%esp
c010bcf7:	68 e4 55 11 c0       	push   $0xc01155e4
c010bcfc:	68 da 02 00 00       	push   $0x2da
c010bd01:	68 4c 55 11 c0       	push   $0xc011554c
c010bd06:	e8 da 47 ff ff       	call   c01004e5 <__panic>
    }
    if (code_store != NULL) {
c010bd0b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010bd0f:	74 0e                	je     c010bd1f <do_wait+0x148>
        *code_store = proc->exit_code;
c010bd11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd14:	8b 90 8c 00 00 00    	mov    0x8c(%eax),%edx
c010bd1a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010bd1d:	89 10                	mov    %edx,(%eax)
    }
    local_intr_save(intr_flag);
c010bd1f:	e8 1c ee ff ff       	call   c010ab40 <__intr_save>
c010bd24:	89 45 e8             	mov    %eax,-0x18(%ebp)
    {
        unhash_proc(proc);
c010bd27:	83 ec 0c             	sub    $0xc,%esp
c010bd2a:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd2d:	e8 f3 f3 ff ff       	call   c010b125 <unhash_proc>
c010bd32:	83 c4 10             	add    $0x10,%esp
        remove_links(proc);
c010bd35:	83 ec 0c             	sub    $0xc,%esp
c010bd38:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd3b:	e8 33 f1 ff ff       	call   c010ae73 <remove_links>
c010bd40:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010bd43:	83 ec 0c             	sub    $0xc,%esp
c010bd46:	ff 75 e8             	pushl  -0x18(%ebp)
c010bd49:	e8 1c ee ff ff       	call   c010ab6a <__intr_restore>
c010bd4e:	83 c4 10             	add    $0x10,%esp
    put_kstack(proc);
c010bd51:	83 ec 0c             	sub    $0xc,%esp
c010bd54:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd57:	e8 16 f5 ff ff       	call   c010b272 <put_kstack>
c010bd5c:	83 c4 10             	add    $0x10,%esp
    kfree(proc);
c010bd5f:	83 ec 0c             	sub    $0xc,%esp
c010bd62:	ff 75 f4             	pushl  -0xc(%ebp)
c010bd65:	e8 f2 b0 ff ff       	call   c0106e5c <kfree>
c010bd6a:	83 c4 10             	add    $0x10,%esp
    return 0;
c010bd6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010bd72:	c9                   	leave  
c010bd73:	c3                   	ret    

c010bd74 <do_kill>:

// do_kill - kill process with pid by set this process's flags with PF_EXITING
int
do_kill(int pid) {
c010bd74:	55                   	push   %ebp
c010bd75:	89 e5                	mov    %esp,%ebp
c010bd77:	83 ec 18             	sub    $0x18,%esp
    struct proc_struct *proc;
    if ((proc = find_proc(pid)) != NULL) {
c010bd7a:	83 ec 0c             	sub    $0xc,%esp
c010bd7d:	ff 75 08             	pushl  0x8(%ebp)
c010bd80:	e8 d6 f3 ff ff       	call   c010b15b <find_proc>
c010bd85:	83 c4 10             	add    $0x10,%esp
c010bd88:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010bd8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010bd8f:	74 47                	je     c010bdd8 <do_kill+0x64>
        if (!(proc->flags & PF_EXITING)) {
c010bd91:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bd94:	8b 40 44             	mov    0x44(%eax),%eax
c010bd97:	83 e0 01             	and    $0x1,%eax
c010bd9a:	85 c0                	test   %eax,%eax
c010bd9c:	75 33                	jne    c010bdd1 <do_kill+0x5d>
            proc->flags |= PF_EXITING;
c010bd9e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bda1:	8b 40 44             	mov    0x44(%eax),%eax
c010bda4:	83 c8 01             	or     $0x1,%eax
c010bda7:	89 c2                	mov    %eax,%edx
c010bda9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdac:	89 50 44             	mov    %edx,0x44(%eax)
            if (proc->wait_state & WT_INTERRUPTED) {
c010bdaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010bdb2:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010bdb8:	85 c0                	test   %eax,%eax
c010bdba:	79 0e                	jns    c010bdca <do_kill+0x56>
                wakeup_proc(proc);
c010bdbc:	83 ec 0c             	sub    $0xc,%esp
c010bdbf:	ff 75 f4             	pushl  -0xc(%ebp)
c010bdc2:	e8 5b 06 00 00       	call   c010c422 <wakeup_proc>
c010bdc7:	83 c4 10             	add    $0x10,%esp
            }
            return 0;
c010bdca:	b8 00 00 00 00       	mov    $0x0,%eax
c010bdcf:	eb 0c                	jmp    c010bddd <do_kill+0x69>
        }
        return -E_KILLED;
c010bdd1:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
c010bdd6:	eb 05                	jmp    c010bddd <do_kill+0x69>
    }
    return -E_INVAL;
c010bdd8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010bddd:	c9                   	leave  
c010bdde:	c3                   	ret    

c010bddf <kernel_execve>:

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
c010bddf:	55                   	push   %ebp
c010bde0:	89 e5                	mov    %esp,%ebp
c010bde2:	53                   	push   %ebx
c010bde3:	83 ec 10             	sub    $0x10,%esp
    int argc = 0, ret;
c010bde6:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (argv[argc] != NULL) {
c010bded:	eb 04                	jmp    c010bdf3 <kernel_execve+0x14>
        argc ++;
c010bdef:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)

// kernel_execve - do SYS_exec syscall to exec a user program called by user_main kernel_thread
static int
kernel_execve(const char *name, const char **argv) {
    int argc = 0, ret;
    while (argv[argc] != NULL) {
c010bdf3:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010bdf6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c010bdfd:	8b 45 0c             	mov    0xc(%ebp),%eax
c010be00:	01 d0                	add    %edx,%eax
c010be02:	8b 00                	mov    (%eax),%eax
c010be04:	85 c0                	test   %eax,%eax
c010be06:	75 e7                	jne    c010bdef <kernel_execve+0x10>
        argc ++;
    }
    asm volatile (
c010be08:	b8 04 00 00 00       	mov    $0x4,%eax
c010be0d:	8b 55 08             	mov    0x8(%ebp),%edx
c010be10:	8b 4d f8             	mov    -0x8(%ebp),%ecx
c010be13:	8b 5d 0c             	mov    0xc(%ebp),%ebx
c010be16:	cd 80                	int    $0x80
c010be18:	89 45 f4             	mov    %eax,-0xc(%ebp)
        "int %1;"
        : "=a" (ret)
        : "i" (T_SYSCALL), "0" (SYS_exec), "d" (name), "c" (argc), "b" (argv)
        : "memory");
    return ret;
c010be1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010be1e:	83 c4 10             	add    $0x10,%esp
c010be21:	5b                   	pop    %ebx
c010be22:	5d                   	pop    %ebp
c010be23:	c3                   	ret    

c010be24 <user_main>:

#define KERNEL_EXECVE3(x, s, ...)               __KERNEL_EXECVE3(x, s, ##__VA_ARGS__)

// user_main - kernel thread used to exec a user program
static int
user_main(void *arg) {
c010be24:	55                   	push   %ebp
c010be25:	89 e5                	mov    %esp,%ebp
c010be27:	83 ec 18             	sub    $0x18,%esp
    KERNEL_EXECVE3(TEST, TESTSCRIPT);
#else
    KERNEL_EXECVE2(TEST);
#endif
#else
    KERNEL_EXECVE(sh);
c010be2a:	c7 45 f0 00 56 11 c0 	movl   $0xc0115600,-0x10(%ebp)
c010be31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010be38:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010be3d:	8b 40 04             	mov    0x4(%eax),%eax
c010be40:	83 ec 04             	sub    $0x4,%esp
c010be43:	68 00 56 11 c0       	push   $0xc0115600
c010be48:	50                   	push   %eax
c010be49:	68 04 56 11 c0       	push   $0xc0115604
c010be4e:	e8 2c 45 ff ff       	call   c010037f <cprintf>
c010be53:	83 c4 10             	add    $0x10,%esp
c010be56:	83 ec 08             	sub    $0x8,%esp
c010be59:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010be5c:	50                   	push   %eax
c010be5d:	68 00 56 11 c0       	push   $0xc0115600
c010be62:	e8 78 ff ff ff       	call   c010bddf <kernel_execve>
c010be67:	83 c4 10             	add    $0x10,%esp
#endif
    panic("user_main execve failed.\n");
c010be6a:	83 ec 04             	sub    $0x4,%esp
c010be6d:	68 2b 56 11 c0       	push   $0xc011562b
c010be72:	68 25 03 00 00       	push   $0x325
c010be77:	68 4c 55 11 c0       	push   $0xc011554c
c010be7c:	e8 64 46 ff ff       	call   c01004e5 <__panic>

c010be81 <init_main>:
}

// init_main - the second kernel thread used to create user_main kernel threads
static int
init_main(void *arg) {
c010be81:	55                   	push   %ebp
c010be82:	89 e5                	mov    %esp,%ebp
c010be84:	83 ec 28             	sub    $0x28,%esp
    int ret;
    if ((ret = vfs_set_bootfs("disk0:")) != 0) {
c010be87:	83 ec 0c             	sub    $0xc,%esp
c010be8a:	68 45 56 11 c0       	push   $0xc0115645
c010be8f:	e8 4a 26 00 00       	call   c010e4de <vfs_set_bootfs>
c010be94:	83 c4 10             	add    $0x10,%esp
c010be97:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010be9a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010be9e:	74 17                	je     c010beb7 <init_main+0x36>
        panic("set boot fs failed: %e.\n", ret);
c010bea0:	ff 75 f4             	pushl  -0xc(%ebp)
c010bea3:	68 4c 56 11 c0       	push   $0xc011564c
c010bea8:	68 2d 03 00 00       	push   $0x32d
c010bead:	68 4c 55 11 c0       	push   $0xc011554c
c010beb2:	e8 2e 46 ff ff       	call   c01004e5 <__panic>
    }
    
    size_t nr_free_pages_store = nr_free_pages();
c010beb7:	e8 d6 77 ff ff       	call   c0103692 <nr_free_pages>
c010bebc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t kernel_allocated_store = kallocated();
c010bebf:	e8 63 ae ff ff       	call   c0106d27 <kallocated>
c010bec4:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int pid = kernel_thread(user_main, NULL, 0);
c010bec7:	83 ec 04             	sub    $0x4,%esp
c010beca:	6a 00                	push   $0x0
c010becc:	6a 00                	push   $0x0
c010bece:	68 24 be 10 c0       	push   $0xc010be24
c010bed3:	e8 f5 f2 ff ff       	call   c010b1cd <kernel_thread>
c010bed8:	83 c4 10             	add    $0x10,%esp
c010bedb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (pid <= 0) {
c010bede:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010bee2:	7f 17                	jg     c010befb <init_main+0x7a>
        panic("create user_main failed.\n");
c010bee4:	83 ec 04             	sub    $0x4,%esp
c010bee7:	68 65 56 11 c0       	push   $0xc0115665
c010beec:	68 35 03 00 00       	push   $0x335
c010bef1:	68 4c 55 11 c0       	push   $0xc011554c
c010bef6:	e8 ea 45 ff ff       	call   c01004e5 <__panic>
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem
c010befb:	e8 32 c8 ff ff       	call   c0108732 <check_sync>

    while (do_wait(0, NULL) == 0) {
c010bf00:	eb 05                	jmp    c010bf07 <init_main+0x86>
        schedule();
c010bf02:	e8 ab 05 00 00       	call   c010c4b2 <schedule>
        panic("create user_main failed.\n");
    }
 extern void check_sync(void);
    check_sync();                // check philosopher sync problem

    while (do_wait(0, NULL) == 0) {
c010bf07:	83 ec 08             	sub    $0x8,%esp
c010bf0a:	6a 00                	push   $0x0
c010bf0c:	6a 00                	push   $0x0
c010bf0e:	e8 c4 fc ff ff       	call   c010bbd7 <do_wait>
c010bf13:	83 c4 10             	add    $0x10,%esp
c010bf16:	85 c0                	test   %eax,%eax
c010bf18:	74 e8                	je     c010bf02 <init_main+0x81>
        schedule();
    }

    fs_cleanup();
c010bf1a:	e8 ee e8 ff ff       	call   c010a80d <fs_cleanup>
        
    cprintf("all user-mode processes have quit.\n");
c010bf1f:	83 ec 0c             	sub    $0xc,%esp
c010bf22:	68 80 56 11 c0       	push   $0xc0115680
c010bf27:	e8 53 44 ff ff       	call   c010037f <cprintf>
c010bf2c:	83 c4 10             	add    $0x10,%esp
    assert(initproc->cptr == NULL && initproc->yptr == NULL && initproc->optr == NULL);
c010bf2f:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010bf34:	8b 80 94 00 00 00    	mov    0x94(%eax),%eax
c010bf3a:	85 c0                	test   %eax,%eax
c010bf3c:	75 1e                	jne    c010bf5c <init_main+0xdb>
c010bf3e:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010bf43:	8b 80 98 00 00 00    	mov    0x98(%eax),%eax
c010bf49:	85 c0                	test   %eax,%eax
c010bf4b:	75 0f                	jne    c010bf5c <init_main+0xdb>
c010bf4d:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010bf52:	8b 80 9c 00 00 00    	mov    0x9c(%eax),%eax
c010bf58:	85 c0                	test   %eax,%eax
c010bf5a:	74 19                	je     c010bf75 <init_main+0xf4>
c010bf5c:	68 a4 56 11 c0       	push   $0xc01156a4
c010bf61:	68 73 55 11 c0       	push   $0xc0115573
c010bf66:	68 41 03 00 00       	push   $0x341
c010bf6b:	68 4c 55 11 c0       	push   $0xc011554c
c010bf70:	e8 70 45 ff ff       	call   c01004e5 <__panic>
    assert(nr_process == 2);
c010bf75:	a1 40 10 15 c0       	mov    0xc0151040,%eax
c010bf7a:	83 f8 02             	cmp    $0x2,%eax
c010bf7d:	74 19                	je     c010bf98 <init_main+0x117>
c010bf7f:	68 ef 56 11 c0       	push   $0xc01156ef
c010bf84:	68 73 55 11 c0       	push   $0xc0115573
c010bf89:	68 42 03 00 00       	push   $0x342
c010bf8e:	68 4c 55 11 c0       	push   $0xc011554c
c010bf93:	e8 4d 45 ff ff       	call   c01004e5 <__panic>
c010bf98:	c7 45 e0 dc 22 15 c0 	movl   $0xc01522dc,-0x20(%ebp)
c010bf9f:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010bfa2:	8b 40 04             	mov    0x4(%eax),%eax
    assert(list_next(&proc_list) == &(initproc->list_link));
c010bfa5:	8b 15 24 f0 14 c0    	mov    0xc014f024,%edx
c010bfab:	83 c2 7c             	add    $0x7c,%edx
c010bfae:	39 d0                	cmp    %edx,%eax
c010bfb0:	74 19                	je     c010bfcb <init_main+0x14a>
c010bfb2:	68 00 57 11 c0       	push   $0xc0115700
c010bfb7:	68 73 55 11 c0       	push   $0xc0115573
c010bfbc:	68 43 03 00 00       	push   $0x343
c010bfc1:	68 4c 55 11 c0       	push   $0xc011554c
c010bfc6:	e8 1a 45 ff ff       	call   c01004e5 <__panic>
c010bfcb:	c7 45 e4 dc 22 15 c0 	movl   $0xc01522dc,-0x1c(%ebp)
 * list_prev - get the previous entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_prev(list_entry_t *listelm) {
    return listelm->prev;
c010bfd2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010bfd5:	8b 00                	mov    (%eax),%eax
    assert(list_prev(&proc_list) == &(initproc->list_link));
c010bfd7:	8b 15 24 f0 14 c0    	mov    0xc014f024,%edx
c010bfdd:	83 c2 7c             	add    $0x7c,%edx
c010bfe0:	39 d0                	cmp    %edx,%eax
c010bfe2:	74 19                	je     c010bffd <init_main+0x17c>
c010bfe4:	68 30 57 11 c0       	push   $0xc0115730
c010bfe9:	68 73 55 11 c0       	push   $0xc0115573
c010bfee:	68 44 03 00 00       	push   $0x344
c010bff3:	68 4c 55 11 c0       	push   $0xc011554c
c010bff8:	e8 e8 44 ff ff       	call   c01004e5 <__panic>

    cprintf("init check memory pass.\n");
c010bffd:	83 ec 0c             	sub    $0xc,%esp
c010c000:	68 60 57 11 c0       	push   $0xc0115760
c010c005:	e8 75 43 ff ff       	call   c010037f <cprintf>
c010c00a:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c00d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c012:	c9                   	leave  
c010c013:	c3                   	ret    

c010c014 <proc_init>:

// proc_init - set up the first kernel thread idleproc "idle" by itself and 
//           - create the second kernel thread init_main
void
proc_init(void) {
c010c014:	55                   	push   %ebp
c010c015:	89 e5                	mov    %esp,%ebp
c010c017:	53                   	push   %ebx
c010c018:	83 ec 14             	sub    $0x14,%esp
c010c01b:	c7 45 e8 dc 22 15 c0 	movl   $0xc01522dc,-0x18(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c022:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c025:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c028:	89 50 04             	mov    %edx,0x4(%eax)
c010c02b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c02e:	8b 50 04             	mov    0x4(%eax),%edx
c010c031:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c034:	89 10                	mov    %edx,(%eax)
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c036:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010c03d:	eb 26                	jmp    c010c065 <proc_init+0x51>
        list_init(hash_list + i);
c010c03f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c042:	c1 e0 03             	shl    $0x3,%eax
c010c045:	05 40 f0 14 c0       	add    $0xc014f040,%eax
c010c04a:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010c04d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c050:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010c053:	89 50 04             	mov    %edx,0x4(%eax)
c010c056:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c059:	8b 50 04             	mov    0x4(%eax),%edx
c010c05c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c05f:	89 10                	mov    %edx,(%eax)
void
proc_init(void) {
    int i;

    list_init(&proc_list);
    for (i = 0; i < HASH_LIST_SIZE; i ++) {
c010c061:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010c065:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
c010c06c:	7e d1                	jle    c010c03f <proc_init+0x2b>
        list_init(hash_list + i);
    }

    if ((idleproc = alloc_proc()) == NULL) {
c010c06e:	e8 bd ec ff ff       	call   c010ad30 <alloc_proc>
c010c073:	a3 20 f0 14 c0       	mov    %eax,0xc014f020
c010c078:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c07d:	85 c0                	test   %eax,%eax
c010c07f:	75 17                	jne    c010c098 <proc_init+0x84>
        panic("cannot alloc idleproc.\n");
c010c081:	83 ec 04             	sub    $0x4,%esp
c010c084:	68 79 57 11 c0       	push   $0xc0115779
c010c089:	68 56 03 00 00       	push   $0x356
c010c08e:	68 4c 55 11 c0       	push   $0xc011554c
c010c093:	e8 4d 44 ff ff       	call   c01004e5 <__panic>
    }

    idleproc->pid = 0;
c010c098:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c09d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    idleproc->state = PROC_RUNNABLE;
c010c0a4:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c0a9:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    idleproc->kstack = (uintptr_t)bootstack;
c010c0af:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c0b4:	ba 00 90 14 c0       	mov    $0xc0149000,%edx
c010c0b9:	89 50 0c             	mov    %edx,0xc(%eax)
    idleproc->need_resched = 1;
c010c0bc:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c0c1:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    
    if ((idleproc->filesp = files_create()) == NULL) {
c010c0c8:	8b 1d 20 f0 14 c0    	mov    0xc014f020,%ebx
c010c0ce:	e8 7e e7 ff ff       	call   c010a851 <files_create>
c010c0d3:	89 83 c4 00 00 00    	mov    %eax,0xc4(%ebx)
c010c0d9:	8b 83 c4 00 00 00    	mov    0xc4(%ebx),%eax
c010c0df:	85 c0                	test   %eax,%eax
c010c0e1:	75 17                	jne    c010c0fa <proc_init+0xe6>
        panic("create filesp (idleproc) failed.\n");
c010c0e3:	83 ec 04             	sub    $0x4,%esp
c010c0e6:	68 94 57 11 c0       	push   $0xc0115794
c010c0eb:	68 5f 03 00 00       	push   $0x35f
c010c0f0:	68 4c 55 11 c0       	push   $0xc011554c
c010c0f5:	e8 eb 43 ff ff       	call   c01004e5 <__panic>
    }
    files_count_inc(idleproc->filesp);
c010c0fa:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c0ff:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010c105:	83 ec 0c             	sub    $0xc,%esp
c010c108:	50                   	push   %eax
c010c109:	e8 ee eb ff ff       	call   c010acfc <files_count_inc>
c010c10e:	83 c4 10             	add    $0x10,%esp
    
    set_proc_name(idleproc, "idle");
c010c111:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c116:	83 ec 08             	sub    $0x8,%esp
c010c119:	68 b6 57 11 c0       	push   $0xc01157b6
c010c11e:	50                   	push   %eax
c010c11f:	e8 2a ec ff ff       	call   c010ad4e <set_proc_name>
c010c124:	83 c4 10             	add    $0x10,%esp
    nr_process ++;
c010c127:	a1 40 10 15 c0       	mov    0xc0151040,%eax
c010c12c:	83 c0 01             	add    $0x1,%eax
c010c12f:	a3 40 10 15 c0       	mov    %eax,0xc0151040

    current = idleproc;
c010c134:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c139:	a3 28 f0 14 c0       	mov    %eax,0xc014f028

    int pid = kernel_thread(init_main, NULL, 0);
c010c13e:	83 ec 04             	sub    $0x4,%esp
c010c141:	6a 00                	push   $0x0
c010c143:	6a 00                	push   $0x0
c010c145:	68 81 be 10 c0       	push   $0xc010be81
c010c14a:	e8 7e f0 ff ff       	call   c010b1cd <kernel_thread>
c010c14f:	83 c4 10             	add    $0x10,%esp
c010c152:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (pid <= 0) {
c010c155:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010c159:	7f 17                	jg     c010c172 <proc_init+0x15e>
        panic("create init_main failed.\n");
c010c15b:	83 ec 04             	sub    $0x4,%esp
c010c15e:	68 bb 57 11 c0       	push   $0xc01157bb
c010c163:	68 6a 03 00 00       	push   $0x36a
c010c168:	68 4c 55 11 c0       	push   $0xc011554c
c010c16d:	e8 73 43 ff ff       	call   c01004e5 <__panic>
    }

    initproc = find_proc(pid);
c010c172:	83 ec 0c             	sub    $0xc,%esp
c010c175:	ff 75 ec             	pushl  -0x14(%ebp)
c010c178:	e8 de ef ff ff       	call   c010b15b <find_proc>
c010c17d:	83 c4 10             	add    $0x10,%esp
c010c180:	a3 24 f0 14 c0       	mov    %eax,0xc014f024
    set_proc_name(initproc, "init");
c010c185:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010c18a:	83 ec 08             	sub    $0x8,%esp
c010c18d:	68 d5 57 11 c0       	push   $0xc01157d5
c010c192:	50                   	push   %eax
c010c193:	e8 b6 eb ff ff       	call   c010ad4e <set_proc_name>
c010c198:	83 c4 10             	add    $0x10,%esp

    assert(idleproc != NULL && idleproc->pid == 0);
c010c19b:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c1a0:	85 c0                	test   %eax,%eax
c010c1a2:	74 0c                	je     c010c1b0 <proc_init+0x19c>
c010c1a4:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c1a9:	8b 40 04             	mov    0x4(%eax),%eax
c010c1ac:	85 c0                	test   %eax,%eax
c010c1ae:	74 19                	je     c010c1c9 <proc_init+0x1b5>
c010c1b0:	68 dc 57 11 c0       	push   $0xc01157dc
c010c1b5:	68 73 55 11 c0       	push   $0xc0115573
c010c1ba:	68 70 03 00 00       	push   $0x370
c010c1bf:	68 4c 55 11 c0       	push   $0xc011554c
c010c1c4:	e8 1c 43 ff ff       	call   c01004e5 <__panic>
    assert(initproc != NULL && initproc->pid == 1);
c010c1c9:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010c1ce:	85 c0                	test   %eax,%eax
c010c1d0:	74 0d                	je     c010c1df <proc_init+0x1cb>
c010c1d2:	a1 24 f0 14 c0       	mov    0xc014f024,%eax
c010c1d7:	8b 40 04             	mov    0x4(%eax),%eax
c010c1da:	83 f8 01             	cmp    $0x1,%eax
c010c1dd:	74 19                	je     c010c1f8 <proc_init+0x1e4>
c010c1df:	68 04 58 11 c0       	push   $0xc0115804
c010c1e4:	68 73 55 11 c0       	push   $0xc0115573
c010c1e9:	68 71 03 00 00       	push   $0x371
c010c1ee:	68 4c 55 11 c0       	push   $0xc011554c
c010c1f3:	e8 ed 42 ff ff       	call   c01004e5 <__panic>
}
c010c1f8:	90                   	nop
c010c1f9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010c1fc:	c9                   	leave  
c010c1fd:	c3                   	ret    

c010c1fe <cpu_idle>:

// cpu_idle - at the end of kern_init, the first kernel thread idleproc will do below works
void
cpu_idle(void) {
c010c1fe:	55                   	push   %ebp
c010c1ff:	89 e5                	mov    %esp,%ebp
c010c201:	83 ec 08             	sub    $0x8,%esp
    while (1) {
        if (current->need_resched) {
c010c204:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c209:	8b 40 10             	mov    0x10(%eax),%eax
c010c20c:	85 c0                	test   %eax,%eax
c010c20e:	74 f4                	je     c010c204 <cpu_idle+0x6>
            schedule();
c010c210:	e8 9d 02 00 00       	call   c010c4b2 <schedule>
        }
    }
c010c215:	eb ed                	jmp    c010c204 <cpu_idle+0x6>

c010c217 <lab6_set_priority>:
}

//FOR LAB6, set the process's priority (bigger value will get more CPU time) 
void
lab6_set_priority(uint32_t priority)
{
c010c217:	55                   	push   %ebp
c010c218:	89 e5                	mov    %esp,%ebp
    if (priority == 0)
c010c21a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c21e:	75 11                	jne    c010c231 <lab6_set_priority+0x1a>
        current->lab6_priority = 1;
c010c220:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c225:	c7 80 c0 00 00 00 01 	movl   $0x1,0xc0(%eax)
c010c22c:	00 00 00 
    else current->lab6_priority = priority;
}
c010c22f:	eb 0e                	jmp    c010c23f <lab6_set_priority+0x28>
void
lab6_set_priority(uint32_t priority)
{
    if (priority == 0)
        current->lab6_priority = 1;
    else current->lab6_priority = priority;
c010c231:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c236:	8b 55 08             	mov    0x8(%ebp),%edx
c010c239:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
}
c010c23f:	90                   	nop
c010c240:	5d                   	pop    %ebp
c010c241:	c3                   	ret    

c010c242 <do_sleep>:

// do_sleep - set current process state to sleep and add timer with "time"
//          - then call scheduler. if process run again, delete timer first.
int
do_sleep(unsigned int time) {
c010c242:	55                   	push   %ebp
c010c243:	89 e5                	mov    %esp,%ebp
c010c245:	83 ec 28             	sub    $0x28,%esp
    if (time == 0) {
c010c248:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c24c:	75 07                	jne    c010c255 <do_sleep+0x13>
        return 0;
c010c24e:	b8 00 00 00 00       	mov    $0x0,%eax
c010c253:	eb 72                	jmp    c010c2c7 <do_sleep+0x85>
    }
    bool intr_flag;
    local_intr_save(intr_flag);
c010c255:	e8 e6 e8 ff ff       	call   c010ab40 <__intr_save>
c010c25a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    timer_t __timer, *timer = timer_init(&__timer, current, time);
c010c25d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c260:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c265:	83 ec 04             	sub    $0x4,%esp
c010c268:	52                   	push   %edx
c010c269:	50                   	push   %eax
c010c26a:	8d 45 e0             	lea    -0x20(%ebp),%eax
c010c26d:	50                   	push   %eax
c010c26e:	e8 94 e8 ff ff       	call   c010ab07 <timer_init>
c010c273:	83 c4 10             	add    $0x10,%esp
c010c276:	89 45 f0             	mov    %eax,-0x10(%ebp)
    current->state = PROC_SLEEPING;
c010c279:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c27e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
    current->wait_state = WT_TIMER;
c010c284:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c289:	c7 80 90 00 00 00 02 	movl   $0x80000002,0x90(%eax)
c010c290:	00 00 80 
    add_timer(timer);
c010c293:	83 ec 0c             	sub    $0xc,%esp
c010c296:	ff 75 f0             	pushl  -0x10(%ebp)
c010c299:	e8 ad 02 00 00       	call   c010c54b <add_timer>
c010c29e:	83 c4 10             	add    $0x10,%esp
    local_intr_restore(intr_flag);
c010c2a1:	83 ec 0c             	sub    $0xc,%esp
c010c2a4:	ff 75 f4             	pushl  -0xc(%ebp)
c010c2a7:	e8 be e8 ff ff       	call   c010ab6a <__intr_restore>
c010c2ac:	83 c4 10             	add    $0x10,%esp

    schedule();
c010c2af:	e8 fe 01 00 00       	call   c010c4b2 <schedule>

    del_timer(timer);
c010c2b4:	83 ec 0c             	sub    $0xc,%esp
c010c2b7:	ff 75 f0             	pushl  -0x10(%ebp)
c010c2ba:	e8 b2 03 00 00       	call   c010c671 <del_timer>
c010c2bf:	83 c4 10             	add    $0x10,%esp
    return 0;
c010c2c2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2c7:	c9                   	leave  
c010c2c8:	c3                   	ret    

c010c2c9 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010c2c9:	55                   	push   %ebp
c010c2ca:	89 e5                	mov    %esp,%ebp
c010c2cc:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010c2cf:	9c                   	pushf  
c010c2d0:	58                   	pop    %eax
c010c2d1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010c2d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010c2d7:	25 00 02 00 00       	and    $0x200,%eax
c010c2dc:	85 c0                	test   %eax,%eax
c010c2de:	74 0c                	je     c010c2ec <__intr_save+0x23>
        intr_disable();
c010c2e0:	e8 03 5f ff ff       	call   c01021e8 <intr_disable>
        return 1;
c010c2e5:	b8 01 00 00 00       	mov    $0x1,%eax
c010c2ea:	eb 05                	jmp    c010c2f1 <__intr_save+0x28>
    }
    return 0;
c010c2ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010c2f1:	c9                   	leave  
c010c2f2:	c3                   	ret    

c010c2f3 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010c2f3:	55                   	push   %ebp
c010c2f4:	89 e5                	mov    %esp,%ebp
c010c2f6:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010c2f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010c2fd:	74 05                	je     c010c304 <__intr_restore+0x11>
        intr_enable();
c010c2ff:	e8 dd 5e ff ff       	call   c01021e1 <intr_enable>
    }
}
c010c304:	90                   	nop
c010c305:	c9                   	leave  
c010c306:	c3                   	ret    

c010c307 <sched_class_enqueue>:
static struct sched_class *sched_class;

static struct run_queue *rq;

static inline void
sched_class_enqueue(struct proc_struct *proc) {
c010c307:	55                   	push   %ebp
c010c308:	89 e5                	mov    %esp,%ebp
c010c30a:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010c30d:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c312:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c315:	74 1a                	je     c010c331 <sched_class_enqueue+0x2a>
        sched_class->enqueue(rq, proc);
c010c317:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c31c:	8b 40 08             	mov    0x8(%eax),%eax
c010c31f:	8b 15 a0 10 15 c0    	mov    0xc01510a0,%edx
c010c325:	83 ec 08             	sub    $0x8,%esp
c010c328:	ff 75 08             	pushl  0x8(%ebp)
c010c32b:	52                   	push   %edx
c010c32c:	ff d0                	call   *%eax
c010c32e:	83 c4 10             	add    $0x10,%esp
    }
}
c010c331:	90                   	nop
c010c332:	c9                   	leave  
c010c333:	c3                   	ret    

c010c334 <sched_class_dequeue>:

static inline void
sched_class_dequeue(struct proc_struct *proc) {
c010c334:	55                   	push   %ebp
c010c335:	89 e5                	mov    %esp,%ebp
c010c337:	83 ec 08             	sub    $0x8,%esp
    sched_class->dequeue(rq, proc);
c010c33a:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c33f:	8b 40 0c             	mov    0xc(%eax),%eax
c010c342:	8b 15 a0 10 15 c0    	mov    0xc01510a0,%edx
c010c348:	83 ec 08             	sub    $0x8,%esp
c010c34b:	ff 75 08             	pushl  0x8(%ebp)
c010c34e:	52                   	push   %edx
c010c34f:	ff d0                	call   *%eax
c010c351:	83 c4 10             	add    $0x10,%esp
}
c010c354:	90                   	nop
c010c355:	c9                   	leave  
c010c356:	c3                   	ret    

c010c357 <sched_class_pick_next>:

static inline struct proc_struct *
sched_class_pick_next(void) {
c010c357:	55                   	push   %ebp
c010c358:	89 e5                	mov    %esp,%ebp
c010c35a:	83 ec 08             	sub    $0x8,%esp
    return sched_class->pick_next(rq);
c010c35d:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c362:	8b 40 10             	mov    0x10(%eax),%eax
c010c365:	8b 15 a0 10 15 c0    	mov    0xc01510a0,%edx
c010c36b:	83 ec 0c             	sub    $0xc,%esp
c010c36e:	52                   	push   %edx
c010c36f:	ff d0                	call   *%eax
c010c371:	83 c4 10             	add    $0x10,%esp
}
c010c374:	c9                   	leave  
c010c375:	c3                   	ret    

c010c376 <sched_class_proc_tick>:

static void
sched_class_proc_tick(struct proc_struct *proc) {
c010c376:	55                   	push   %ebp
c010c377:	89 e5                	mov    %esp,%ebp
c010c379:	83 ec 08             	sub    $0x8,%esp
    if (proc != idleproc) {
c010c37c:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c381:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c384:	74 1c                	je     c010c3a2 <sched_class_proc_tick+0x2c>
        sched_class->proc_tick(rq, proc);
c010c386:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c38b:	8b 40 14             	mov    0x14(%eax),%eax
c010c38e:	8b 15 a0 10 15 c0    	mov    0xc01510a0,%edx
c010c394:	83 ec 08             	sub    $0x8,%esp
c010c397:	ff 75 08             	pushl  0x8(%ebp)
c010c39a:	52                   	push   %edx
c010c39b:	ff d0                	call   *%eax
c010c39d:	83 c4 10             	add    $0x10,%esp
    }
    else {
        proc->need_resched = 1;
    }
}
c010c3a0:	eb 0a                	jmp    c010c3ac <sched_class_proc_tick+0x36>
sched_class_proc_tick(struct proc_struct *proc) {
    if (proc != idleproc) {
        sched_class->proc_tick(rq, proc);
    }
    else {
        proc->need_resched = 1;
c010c3a2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c3a5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010c3ac:	90                   	nop
c010c3ad:	c9                   	leave  
c010c3ae:	c3                   	ret    

c010c3af <sched_init>:

static struct run_queue __rq;

void
sched_init(void) {
c010c3af:	55                   	push   %ebp
c010c3b0:	89 e5                	mov    %esp,%ebp
c010c3b2:	83 ec 18             	sub    $0x18,%esp
c010c3b5:	c7 45 f4 94 10 15 c0 	movl   $0xc0151094,-0xc(%ebp)
c010c3bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3bf:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010c3c2:	89 50 04             	mov    %edx,0x4(%eax)
c010c3c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3c8:	8b 50 04             	mov    0x4(%eax),%edx
c010c3cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c3ce:	89 10                	mov    %edx,(%eax)
    list_init(&timer_list);

    sched_class = &default_sched_class;
c010c3d0:	c7 05 9c 10 15 c0 8c 	movl   $0xc014ba8c,0xc015109c
c010c3d7:	ba 14 c0 

    rq = &__rq;
c010c3da:	c7 05 a0 10 15 c0 a4 	movl   $0xc01510a4,0xc01510a0
c010c3e1:	10 15 c0 
    rq->max_time_slice = MAX_TIME_SLICE;
c010c3e4:	a1 a0 10 15 c0       	mov    0xc01510a0,%eax
c010c3e9:	c7 40 0c 05 00 00 00 	movl   $0x5,0xc(%eax)
    sched_class->init(rq);
c010c3f0:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c3f5:	8b 40 04             	mov    0x4(%eax),%eax
c010c3f8:	8b 15 a0 10 15 c0    	mov    0xc01510a0,%edx
c010c3fe:	83 ec 0c             	sub    $0xc,%esp
c010c401:	52                   	push   %edx
c010c402:	ff d0                	call   *%eax
c010c404:	83 c4 10             	add    $0x10,%esp

    cprintf("sched class: %s\n", sched_class->name);
c010c407:	a1 9c 10 15 c0       	mov    0xc015109c,%eax
c010c40c:	8b 00                	mov    (%eax),%eax
c010c40e:	83 ec 08             	sub    $0x8,%esp
c010c411:	50                   	push   %eax
c010c412:	68 2c 58 11 c0       	push   $0xc011582c
c010c417:	e8 63 3f ff ff       	call   c010037f <cprintf>
c010c41c:	83 c4 10             	add    $0x10,%esp
}
c010c41f:	90                   	nop
c010c420:	c9                   	leave  
c010c421:	c3                   	ret    

c010c422 <wakeup_proc>:

void
wakeup_proc(struct proc_struct *proc) {
c010c422:	55                   	push   %ebp
c010c423:	89 e5                	mov    %esp,%ebp
c010c425:	83 ec 18             	sub    $0x18,%esp
    assert(proc->state != PROC_ZOMBIE);
c010c428:	8b 45 08             	mov    0x8(%ebp),%eax
c010c42b:	8b 00                	mov    (%eax),%eax
c010c42d:	83 f8 03             	cmp    $0x3,%eax
c010c430:	75 16                	jne    c010c448 <wakeup_proc+0x26>
c010c432:	68 3d 58 11 c0       	push   $0xc011583d
c010c437:	68 58 58 11 c0       	push   $0xc0115858
c010c43c:	6a 3c                	push   $0x3c
c010c43e:	68 6d 58 11 c0       	push   $0xc011586d
c010c443:	e8 9d 40 ff ff       	call   c01004e5 <__panic>
    bool intr_flag;
    local_intr_save(intr_flag);
c010c448:	e8 7c fe ff ff       	call   c010c2c9 <__intr_save>
c010c44d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (proc->state != PROC_RUNNABLE) {
c010c450:	8b 45 08             	mov    0x8(%ebp),%eax
c010c453:	8b 00                	mov    (%eax),%eax
c010c455:	83 f8 02             	cmp    $0x2,%eax
c010c458:	74 30                	je     c010c48a <wakeup_proc+0x68>
            proc->state = PROC_RUNNABLE;
c010c45a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c45d:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
            proc->wait_state = 0;
c010c463:	8b 45 08             	mov    0x8(%ebp),%eax
c010c466:	c7 80 90 00 00 00 00 	movl   $0x0,0x90(%eax)
c010c46d:	00 00 00 
            if (proc != current) {
c010c470:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c475:	39 45 08             	cmp    %eax,0x8(%ebp)
c010c478:	74 27                	je     c010c4a1 <wakeup_proc+0x7f>
                sched_class_enqueue(proc);
c010c47a:	83 ec 0c             	sub    $0xc,%esp
c010c47d:	ff 75 08             	pushl  0x8(%ebp)
c010c480:	e8 82 fe ff ff       	call   c010c307 <sched_class_enqueue>
c010c485:	83 c4 10             	add    $0x10,%esp
c010c488:	eb 17                	jmp    c010c4a1 <wakeup_proc+0x7f>
            }
        }
        else {
            warn("wakeup runnable process.\n");
c010c48a:	83 ec 04             	sub    $0x4,%esp
c010c48d:	68 83 58 11 c0       	push   $0xc0115883
c010c492:	6a 48                	push   $0x48
c010c494:	68 6d 58 11 c0       	push   $0xc011586d
c010c499:	e8 ca 40 ff ff       	call   c0100568 <__warn>
c010c49e:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010c4a1:	83 ec 0c             	sub    $0xc,%esp
c010c4a4:	ff 75 f4             	pushl  -0xc(%ebp)
c010c4a7:	e8 47 fe ff ff       	call   c010c2f3 <__intr_restore>
c010c4ac:	83 c4 10             	add    $0x10,%esp
}
c010c4af:	90                   	nop
c010c4b0:	c9                   	leave  
c010c4b1:	c3                   	ret    

c010c4b2 <schedule>:

void
schedule(void) {
c010c4b2:	55                   	push   %ebp
c010c4b3:	89 e5                	mov    %esp,%ebp
c010c4b5:	83 ec 18             	sub    $0x18,%esp
    bool intr_flag;
    struct proc_struct *next;
    local_intr_save(intr_flag);
c010c4b8:	e8 0c fe ff ff       	call   c010c2c9 <__intr_save>
c010c4bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        current->need_resched = 0;
c010c4c0:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c4c5:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
        if (current->state == PROC_RUNNABLE) {
c010c4cc:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c4d1:	8b 00                	mov    (%eax),%eax
c010c4d3:	83 f8 02             	cmp    $0x2,%eax
c010c4d6:	75 11                	jne    c010c4e9 <schedule+0x37>
            sched_class_enqueue(current);
c010c4d8:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c4dd:	83 ec 0c             	sub    $0xc,%esp
c010c4e0:	50                   	push   %eax
c010c4e1:	e8 21 fe ff ff       	call   c010c307 <sched_class_enqueue>
c010c4e6:	83 c4 10             	add    $0x10,%esp
        }
        if ((next = sched_class_pick_next()) != NULL) {
c010c4e9:	e8 69 fe ff ff       	call   c010c357 <sched_class_pick_next>
c010c4ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c4f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c4f5:	74 0e                	je     c010c505 <schedule+0x53>
            sched_class_dequeue(next);
c010c4f7:	83 ec 0c             	sub    $0xc,%esp
c010c4fa:	ff 75 f4             	pushl  -0xc(%ebp)
c010c4fd:	e8 32 fe ff ff       	call   c010c334 <sched_class_dequeue>
c010c502:	83 c4 10             	add    $0x10,%esp
        }
        if (next == NULL) {
c010c505:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010c509:	75 08                	jne    c010c513 <schedule+0x61>
            next = idleproc;
c010c50b:	a1 20 f0 14 c0       	mov    0xc014f020,%eax
c010c510:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        next->runs ++;
c010c513:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c516:	8b 40 08             	mov    0x8(%eax),%eax
c010c519:	8d 50 01             	lea    0x1(%eax),%edx
c010c51c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c51f:	89 50 08             	mov    %edx,0x8(%eax)
        if (next != current) {
c010c522:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c527:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010c52a:	74 0e                	je     c010c53a <schedule+0x88>
            proc_run(next);
c010c52c:	83 ec 0c             	sub    $0xc,%esp
c010c52f:	ff 75 f4             	pushl  -0xc(%ebp)
c010c532:	e8 d6 ea ff ff       	call   c010b00d <proc_run>
c010c537:	83 c4 10             	add    $0x10,%esp
        }
    }
    local_intr_restore(intr_flag);
c010c53a:	83 ec 0c             	sub    $0xc,%esp
c010c53d:	ff 75 f0             	pushl  -0x10(%ebp)
c010c540:	e8 ae fd ff ff       	call   c010c2f3 <__intr_restore>
c010c545:	83 c4 10             	add    $0x10,%esp
}
c010c548:	90                   	nop
c010c549:	c9                   	leave  
c010c54a:	c3                   	ret    

c010c54b <add_timer>:

void
add_timer(timer_t *timer) {
c010c54b:	55                   	push   %ebp
c010c54c:	89 e5                	mov    %esp,%ebp
c010c54e:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c551:	e8 73 fd ff ff       	call   c010c2c9 <__intr_save>
c010c556:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        assert(timer->expires > 0 && timer->proc != NULL);
c010c559:	8b 45 08             	mov    0x8(%ebp),%eax
c010c55c:	8b 00                	mov    (%eax),%eax
c010c55e:	85 c0                	test   %eax,%eax
c010c560:	74 0a                	je     c010c56c <add_timer+0x21>
c010c562:	8b 45 08             	mov    0x8(%ebp),%eax
c010c565:	8b 40 04             	mov    0x4(%eax),%eax
c010c568:	85 c0                	test   %eax,%eax
c010c56a:	75 16                	jne    c010c582 <add_timer+0x37>
c010c56c:	68 a0 58 11 c0       	push   $0xc01158a0
c010c571:	68 58 58 11 c0       	push   $0xc0115858
c010c576:	6a 6b                	push   $0x6b
c010c578:	68 6d 58 11 c0       	push   $0xc011586d
c010c57d:	e8 63 3f ff ff       	call   c01004e5 <__panic>
        assert(list_empty(&(timer->timer_link)));
c010c582:	8b 45 08             	mov    0x8(%ebp),%eax
c010c585:	83 c0 08             	add    $0x8,%eax
c010c588:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c58b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c58e:	8b 40 04             	mov    0x4(%eax),%eax
c010c591:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010c594:	0f 94 c0             	sete   %al
c010c597:	0f b6 c0             	movzbl %al,%eax
c010c59a:	85 c0                	test   %eax,%eax
c010c59c:	75 16                	jne    c010c5b4 <add_timer+0x69>
c010c59e:	68 cc 58 11 c0       	push   $0xc01158cc
c010c5a3:	68 58 58 11 c0       	push   $0xc0115858
c010c5a8:	6a 6c                	push   $0x6c
c010c5aa:	68 6d 58 11 c0       	push   $0xc011586d
c010c5af:	e8 31 3f ff ff       	call   c01004e5 <__panic>
c010c5b4:	c7 45 ec 94 10 15 c0 	movl   $0xc0151094,-0x14(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c5bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c5be:	8b 40 04             	mov    0x4(%eax),%eax
        list_entry_t *le = list_next(&timer_list);
c010c5c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while (le != &timer_list) {
c010c5c4:	eb 4a                	jmp    c010c610 <add_timer+0xc5>
            timer_t *next = le2timer(le, timer_link);
c010c5c6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c5c9:	83 e8 08             	sub    $0x8,%eax
c010c5cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            if (timer->expires < next->expires) {
c010c5cf:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5d2:	8b 10                	mov    (%eax),%edx
c010c5d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5d7:	8b 00                	mov    (%eax),%eax
c010c5d9:	39 c2                	cmp    %eax,%edx
c010c5db:	73 13                	jae    c010c5f0 <add_timer+0xa5>
                next->expires -= timer->expires;
c010c5dd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5e0:	8b 10                	mov    (%eax),%edx
c010c5e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5e5:	8b 00                	mov    (%eax),%eax
c010c5e7:	29 c2                	sub    %eax,%edx
c010c5e9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5ec:	89 10                	mov    %edx,(%eax)
                break;
c010c5ee:	eb 29                	jmp    c010c619 <add_timer+0xce>
            }
            timer->expires -= next->expires;
c010c5f0:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5f3:	8b 10                	mov    (%eax),%edx
c010c5f5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c5f8:	8b 00                	mov    (%eax),%eax
c010c5fa:	29 c2                	sub    %eax,%edx
c010c5fc:	8b 45 08             	mov    0x8(%ebp),%eax
c010c5ff:	89 10                	mov    %edx,(%eax)
c010c601:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c604:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c607:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c60a:	8b 40 04             	mov    0x4(%eax),%eax
            le = list_next(le);
c010c60d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    local_intr_save(intr_flag);
    {
        assert(timer->expires > 0 && timer->proc != NULL);
        assert(list_empty(&(timer->timer_link)));
        list_entry_t *le = list_next(&timer_list);
        while (le != &timer_list) {
c010c610:	81 7d f4 94 10 15 c0 	cmpl   $0xc0151094,-0xc(%ebp)
c010c617:	75 ad                	jne    c010c5c6 <add_timer+0x7b>
                break;
            }
            timer->expires -= next->expires;
            le = list_next(le);
        }
        list_add_before(le, &(timer->timer_link));
c010c619:	8b 45 08             	mov    0x8(%ebp),%eax
c010c61c:	8d 50 08             	lea    0x8(%eax),%edx
c010c61f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c622:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010c625:	89 55 d8             	mov    %edx,-0x28(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c628:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c62b:	8b 00                	mov    (%eax),%eax
c010c62d:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c630:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010c633:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010c636:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c639:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c63c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c63f:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c642:	89 10                	mov    %edx,(%eax)
c010c644:	8b 45 cc             	mov    -0x34(%ebp),%eax
c010c647:	8b 10                	mov    (%eax),%edx
c010c649:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c64c:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c64f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c652:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010c655:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c658:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c65b:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c65e:	89 10                	mov    %edx,(%eax)
    }
    local_intr_restore(intr_flag);
c010c660:	83 ec 0c             	sub    $0xc,%esp
c010c663:	ff 75 f0             	pushl  -0x10(%ebp)
c010c666:	e8 88 fc ff ff       	call   c010c2f3 <__intr_restore>
c010c66b:	83 c4 10             	add    $0x10,%esp
}
c010c66e:	90                   	nop
c010c66f:	c9                   	leave  
c010c670:	c3                   	ret    

c010c671 <del_timer>:

// del timer from timer_list
void
del_timer(timer_t *timer) {
c010c671:	55                   	push   %ebp
c010c672:	89 e5                	mov    %esp,%ebp
c010c674:	83 ec 38             	sub    $0x38,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c677:	e8 4d fc ff ff       	call   c010c2c9 <__intr_save>
c010c67c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    {
        if (!list_empty(&(timer->timer_link))) {
c010c67f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c682:	83 c0 08             	add    $0x8,%eax
c010c685:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c688:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c68b:	8b 40 04             	mov    0x4(%eax),%eax
c010c68e:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010c691:	0f 94 c0             	sete   %al
c010c694:	0f b6 c0             	movzbl %al,%eax
c010c697:	85 c0                	test   %eax,%eax
c010c699:	0f 85 89 00 00 00    	jne    c010c728 <del_timer+0xb7>
            if (timer->expires != 0) {
c010c69f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6a2:	8b 00                	mov    (%eax),%eax
c010c6a4:	85 c0                	test   %eax,%eax
c010c6a6:	74 35                	je     c010c6dd <del_timer+0x6c>
                list_entry_t *le = list_next(&(timer->timer_link));
c010c6a8:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6ab:	83 c0 08             	add    $0x8,%eax
c010c6ae:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c6b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c6b4:	8b 40 04             	mov    0x4(%eax),%eax
c010c6b7:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (le != &timer_list) {
c010c6ba:	81 7d e8 94 10 15 c0 	cmpl   $0xc0151094,-0x18(%ebp)
c010c6c1:	74 1a                	je     c010c6dd <del_timer+0x6c>
                    timer_t *next = le2timer(le, timer_link);
c010c6c3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c6c6:	83 e8 08             	sub    $0x8,%eax
c010c6c9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    next->expires += timer->expires;
c010c6cc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c6cf:	8b 10                	mov    (%eax),%edx
c010c6d1:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6d4:	8b 00                	mov    (%eax),%eax
c010c6d6:	01 c2                	add    %eax,%edx
c010c6d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c6db:	89 10                	mov    %edx,(%eax)
                }
            }
            list_del_init(&(timer->timer_link));
c010c6dd:	8b 45 08             	mov    0x8(%ebp),%eax
c010c6e0:	83 c0 08             	add    $0x8,%eax
c010c6e3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c6e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c6e9:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c6ec:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010c6ef:	8b 40 04             	mov    0x4(%eax),%eax
c010c6f2:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010c6f5:	8b 12                	mov    (%edx),%edx
c010c6f7:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010c6fa:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c6fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010c700:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010c703:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c706:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010c709:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010c70c:	89 10                	mov    %edx,(%eax)
c010c70e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c711:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c714:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c717:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010c71a:	89 50 04             	mov    %edx,0x4(%eax)
c010c71d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c720:	8b 50 04             	mov    0x4(%eax),%edx
c010c723:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010c726:	89 10                	mov    %edx,(%eax)
        }
    }
    local_intr_restore(intr_flag);
c010c728:	83 ec 0c             	sub    $0xc,%esp
c010c72b:	ff 75 f4             	pushl  -0xc(%ebp)
c010c72e:	e8 c0 fb ff ff       	call   c010c2f3 <__intr_restore>
c010c733:	83 c4 10             	add    $0x10,%esp
}
c010c736:	90                   	nop
c010c737:	c9                   	leave  
c010c738:	c3                   	ret    

c010c739 <run_timer_list>:

// call scheduler to update tick related info, and check the timer is expired? If expired, then wakup proc
void
run_timer_list(void) {
c010c739:	55                   	push   %ebp
c010c73a:	89 e5                	mov    %esp,%ebp
c010c73c:	83 ec 28             	sub    $0x28,%esp
    bool intr_flag;
    local_intr_save(intr_flag);
c010c73f:	e8 85 fb ff ff       	call   c010c2c9 <__intr_save>
c010c744:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010c747:	c7 45 e0 94 10 15 c0 	movl   $0xc0151094,-0x20(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010c74e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c751:	8b 40 04             	mov    0x4(%eax),%eax
    {
        list_entry_t *le = list_next(&timer_list);
c010c754:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (le != &timer_list) {
c010c757:	81 7d f4 94 10 15 c0 	cmpl   $0xc0151094,-0xc(%ebp)
c010c75e:	0f 84 e4 00 00 00    	je     c010c848 <run_timer_list+0x10f>
            timer_t *timer = le2timer(le, timer_link);
c010c764:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c767:	83 e8 08             	sub    $0x8,%eax
c010c76a:	89 45 f0             	mov    %eax,-0x10(%ebp)
            assert(timer->expires != 0);
c010c76d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c770:	8b 00                	mov    (%eax),%eax
c010c772:	85 c0                	test   %eax,%eax
c010c774:	75 19                	jne    c010c78f <run_timer_list+0x56>
c010c776:	68 ed 58 11 c0       	push   $0xc01158ed
c010c77b:	68 58 58 11 c0       	push   $0xc0115858
c010c780:	68 99 00 00 00       	push   $0x99
c010c785:	68 6d 58 11 c0       	push   $0xc011586d
c010c78a:	e8 56 3d ff ff       	call   c01004e5 <__panic>
            timer->expires --;
c010c78f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c792:	8b 00                	mov    (%eax),%eax
c010c794:	8d 50 ff             	lea    -0x1(%eax),%edx
c010c797:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c79a:	89 10                	mov    %edx,(%eax)
            while (timer->expires == 0) {
c010c79c:	e9 97 00 00 00       	jmp    c010c838 <run_timer_list+0xff>
c010c7a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c7a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010c7a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c7aa:	8b 40 04             	mov    0x4(%eax),%eax
                le = list_next(le);
c010c7ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
                struct proc_struct *proc = timer->proc;
c010c7b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c7b3:	8b 40 04             	mov    0x4(%eax),%eax
c010c7b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (proc->wait_state != 0) {
c010c7b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c7bc:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c7c2:	85 c0                	test   %eax,%eax
c010c7c4:	74 26                	je     c010c7ec <run_timer_list+0xb3>
                    assert(proc->wait_state & WT_INTERRUPTED);
c010c7c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c7c9:	8b 80 90 00 00 00    	mov    0x90(%eax),%eax
c010c7cf:	85 c0                	test   %eax,%eax
c010c7d1:	78 37                	js     c010c80a <run_timer_list+0xd1>
c010c7d3:	68 04 59 11 c0       	push   $0xc0115904
c010c7d8:	68 58 58 11 c0       	push   $0xc0115858
c010c7dd:	68 9f 00 00 00       	push   $0x9f
c010c7e2:	68 6d 58 11 c0       	push   $0xc011586d
c010c7e7:	e8 f9 3c ff ff       	call   c01004e5 <__panic>
                }
                else {
                    warn("process %d's wait_state == 0.\n", proc->pid);
c010c7ec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c7ef:	8b 40 04             	mov    0x4(%eax),%eax
c010c7f2:	50                   	push   %eax
c010c7f3:	68 28 59 11 c0       	push   $0xc0115928
c010c7f8:	68 a2 00 00 00       	push   $0xa2
c010c7fd:	68 6d 58 11 c0       	push   $0xc011586d
c010c802:	e8 61 3d ff ff       	call   c0100568 <__warn>
c010c807:	83 c4 10             	add    $0x10,%esp
                }
                wakeup_proc(proc);
c010c80a:	83 ec 0c             	sub    $0xc,%esp
c010c80d:	ff 75 e4             	pushl  -0x1c(%ebp)
c010c810:	e8 0d fc ff ff       	call   c010c422 <wakeup_proc>
c010c815:	83 c4 10             	add    $0x10,%esp
                del_timer(timer);
c010c818:	83 ec 0c             	sub    $0xc,%esp
c010c81b:	ff 75 f0             	pushl  -0x10(%ebp)
c010c81e:	e8 4e fe ff ff       	call   c010c671 <del_timer>
c010c823:	83 c4 10             	add    $0x10,%esp
                if (le == &timer_list) {
c010c826:	81 7d f4 94 10 15 c0 	cmpl   $0xc0151094,-0xc(%ebp)
c010c82d:	74 18                	je     c010c847 <run_timer_list+0x10e>
                    break;
                }
                timer = le2timer(le, timer_link);
c010c82f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c832:	83 e8 08             	sub    $0x8,%eax
c010c835:	89 45 f0             	mov    %eax,-0x10(%ebp)
        list_entry_t *le = list_next(&timer_list);
        if (le != &timer_list) {
            timer_t *timer = le2timer(le, timer_link);
            assert(timer->expires != 0);
            timer->expires --;
            while (timer->expires == 0) {
c010c838:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c83b:	8b 00                	mov    (%eax),%eax
c010c83d:	85 c0                	test   %eax,%eax
c010c83f:	0f 84 5c ff ff ff    	je     c010c7a1 <run_timer_list+0x68>
c010c845:	eb 01                	jmp    c010c848 <run_timer_list+0x10f>
                    warn("process %d's wait_state == 0.\n", proc->pid);
                }
                wakeup_proc(proc);
                del_timer(timer);
                if (le == &timer_list) {
                    break;
c010c847:	90                   	nop
                }
                timer = le2timer(le, timer_link);
            }
        }
        sched_class_proc_tick(current);
c010c848:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010c84d:	83 ec 0c             	sub    $0xc,%esp
c010c850:	50                   	push   %eax
c010c851:	e8 20 fb ff ff       	call   c010c376 <sched_class_proc_tick>
c010c856:	83 c4 10             	add    $0x10,%esp
    }
    local_intr_restore(intr_flag);
c010c859:	83 ec 0c             	sub    $0xc,%esp
c010c85c:	ff 75 ec             	pushl  -0x14(%ebp)
c010c85f:	e8 8f fa ff ff       	call   c010c2f3 <__intr_restore>
c010c864:	83 c4 10             	add    $0x10,%esp
}
c010c867:	90                   	nop
c010c868:	c9                   	leave  
c010c869:	c3                   	ret    

c010c86a <RR_init>:
#include <proc.h>
#include <assert.h>
#include <default_sched.h>

static void
RR_init(struct run_queue *rq) {
c010c86a:	55                   	push   %ebp
c010c86b:	89 e5                	mov    %esp,%ebp
c010c86d:	83 ec 10             	sub    $0x10,%esp
    list_init(&(rq->run_list));
c010c870:	8b 45 08             	mov    0x8(%ebp),%eax
c010c873:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c876:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c879:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010c87c:	89 50 04             	mov    %edx,0x4(%eax)
c010c87f:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c882:	8b 50 04             	mov    0x4(%eax),%edx
c010c885:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010c888:	89 10                	mov    %edx,(%eax)
    rq->proc_num = 0;
c010c88a:	8b 45 08             	mov    0x8(%ebp),%eax
c010c88d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
c010c894:	90                   	nop
c010c895:	c9                   	leave  
c010c896:	c3                   	ret    

c010c897 <RR_enqueue>:

static void
RR_enqueue(struct run_queue *rq, struct proc_struct *proc) {
c010c897:	55                   	push   %ebp
c010c898:	89 e5                	mov    %esp,%ebp
c010c89a:	83 ec 28             	sub    $0x28,%esp
    assert(list_empty(&(proc->run_link)));
c010c89d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8a0:	05 a4 00 00 00       	add    $0xa4,%eax
c010c8a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c8a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c8ab:	8b 40 04             	mov    0x4(%eax),%eax
c010c8ae:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c8b1:	0f 94 c0             	sete   %al
c010c8b4:	0f b6 c0             	movzbl %al,%eax
c010c8b7:	85 c0                	test   %eax,%eax
c010c8b9:	75 16                	jne    c010c8d1 <RR_enqueue+0x3a>
c010c8bb:	68 48 59 11 c0       	push   $0xc0115948
c010c8c0:	68 66 59 11 c0       	push   $0xc0115966
c010c8c5:	6a 0f                	push   $0xf
c010c8c7:	68 7b 59 11 c0       	push   $0xc011597b
c010c8cc:	e8 14 3c ff ff       	call   c01004e5 <__panic>
    list_add_before(&(rq->run_list), &(proc->run_link));
c010c8d1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c8d4:	8d 90 a4 00 00 00    	lea    0xa4(%eax),%edx
c010c8da:	8b 45 08             	mov    0x8(%ebp),%eax
c010c8dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c8e0:	89 55 ec             	mov    %edx,-0x14(%ebp)
 * Insert the new element @elm *before* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_before(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm->prev, listelm);
c010c8e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8e6:	8b 00                	mov    (%eax),%eax
c010c8e8:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c8eb:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c8ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010c8f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c8f4:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010c8f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c8fa:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c8fd:	89 10                	mov    %edx,(%eax)
c010c8ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c902:	8b 10                	mov    (%eax),%edx
c010c904:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c907:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010c90a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c90d:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c910:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010c913:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c916:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c919:	89 10                	mov    %edx,(%eax)
    if (proc->time_slice == 0 || proc->time_slice > rq->max_time_slice) {
c010c91b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c91e:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010c924:	85 c0                	test   %eax,%eax
c010c926:	74 13                	je     c010c93b <RR_enqueue+0xa4>
c010c928:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c92b:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
c010c931:	8b 45 08             	mov    0x8(%ebp),%eax
c010c934:	8b 40 0c             	mov    0xc(%eax),%eax
c010c937:	39 c2                	cmp    %eax,%edx
c010c939:	7e 0f                	jle    c010c94a <RR_enqueue+0xb3>
        proc->time_slice = rq->max_time_slice;
c010c93b:	8b 45 08             	mov    0x8(%ebp),%eax
c010c93e:	8b 50 0c             	mov    0xc(%eax),%edx
c010c941:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c944:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    proc->rq = rq;
c010c94a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c94d:	8b 55 08             	mov    0x8(%ebp),%edx
c010c950:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    rq->proc_num ++;
c010c956:	8b 45 08             	mov    0x8(%ebp),%eax
c010c959:	8b 40 08             	mov    0x8(%eax),%eax
c010c95c:	8d 50 01             	lea    0x1(%eax),%edx
c010c95f:	8b 45 08             	mov    0x8(%ebp),%eax
c010c962:	89 50 08             	mov    %edx,0x8(%eax)
}
c010c965:	90                   	nop
c010c966:	c9                   	leave  
c010c967:	c3                   	ret    

c010c968 <RR_dequeue>:

static void
RR_dequeue(struct run_queue *rq, struct proc_struct *proc) {
c010c968:	55                   	push   %ebp
c010c969:	89 e5                	mov    %esp,%ebp
c010c96b:	83 ec 28             	sub    $0x28,%esp
    assert(!list_empty(&(proc->run_link)) && proc->rq == rq);
c010c96e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c971:	05 a4 00 00 00       	add    $0xa4,%eax
c010c976:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010c979:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010c97c:	8b 40 04             	mov    0x4(%eax),%eax
c010c97f:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010c982:	0f 94 c0             	sete   %al
c010c985:	0f b6 c0             	movzbl %al,%eax
c010c988:	85 c0                	test   %eax,%eax
c010c98a:	75 0e                	jne    c010c99a <RR_dequeue+0x32>
c010c98c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c98f:	8b 80 a0 00 00 00    	mov    0xa0(%eax),%eax
c010c995:	3b 45 08             	cmp    0x8(%ebp),%eax
c010c998:	74 16                	je     c010c9b0 <RR_dequeue+0x48>
c010c99a:	68 9c 59 11 c0       	push   $0xc011599c
c010c99f:	68 66 59 11 c0       	push   $0xc0115966
c010c9a4:	6a 1a                	push   $0x1a
c010c9a6:	68 7b 59 11 c0       	push   $0xc011597b
c010c9ab:	e8 35 3b ff ff       	call   c01004e5 <__panic>
    list_del_init(&(proc->run_link));
c010c9b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010c9b3:	05 a4 00 00 00       	add    $0xa4,%eax
c010c9b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010c9bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9be:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010c9c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010c9c4:	8b 40 04             	mov    0x4(%eax),%eax
c010c9c7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010c9ca:	8b 12                	mov    (%edx),%edx
c010c9cc:	89 55 e8             	mov    %edx,-0x18(%ebp)
c010c9cf:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010c9d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010c9d5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010c9d8:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010c9db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010c9de:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010c9e1:	89 10                	mov    %edx,(%eax)
c010c9e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010c9e6:	89 45 e0             	mov    %eax,-0x20(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010c9e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c9ec:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010c9ef:	89 50 04             	mov    %edx,0x4(%eax)
c010c9f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c9f5:	8b 50 04             	mov    0x4(%eax),%edx
c010c9f8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010c9fb:	89 10                	mov    %edx,(%eax)
    rq->proc_num --;
c010c9fd:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca00:	8b 40 08             	mov    0x8(%eax),%eax
c010ca03:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ca06:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca09:	89 50 08             	mov    %edx,0x8(%eax)
}
c010ca0c:	90                   	nop
c010ca0d:	c9                   	leave  
c010ca0e:	c3                   	ret    

c010ca0f <RR_pick_next>:

static struct proc_struct *
RR_pick_next(struct run_queue *rq) {
c010ca0f:	55                   	push   %ebp
c010ca10:	89 e5                	mov    %esp,%ebp
c010ca12:	83 ec 10             	sub    $0x10,%esp
    list_entry_t *le = list_next(&(rq->run_list));
c010ca15:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca18:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010ca1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010ca1e:	8b 40 04             	mov    0x4(%eax),%eax
c010ca21:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (le != &(rq->run_list)) {
c010ca24:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca27:	3b 45 fc             	cmp    -0x4(%ebp),%eax
c010ca2a:	74 0a                	je     c010ca36 <RR_pick_next+0x27>
        return le2proc(le, run_link);
c010ca2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010ca2f:	2d a4 00 00 00       	sub    $0xa4,%eax
c010ca34:	eb 05                	jmp    c010ca3b <RR_pick_next+0x2c>
    }
    return NULL;
c010ca36:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ca3b:	c9                   	leave  
c010ca3c:	c3                   	ret    

c010ca3d <RR_proc_tick>:

static void
RR_proc_tick(struct run_queue *rq, struct proc_struct *proc) {
c010ca3d:	55                   	push   %ebp
c010ca3e:	89 e5                	mov    %esp,%ebp
    if (proc->time_slice > 0) {
c010ca40:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca43:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010ca49:	85 c0                	test   %eax,%eax
c010ca4b:	7e 15                	jle    c010ca62 <RR_proc_tick+0x25>
        proc->time_slice --;
c010ca4d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca50:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010ca56:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ca59:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca5c:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
    }
    if (proc->time_slice == 0) {
c010ca62:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca65:	8b 80 ac 00 00 00    	mov    0xac(%eax),%eax
c010ca6b:	85 c0                	test   %eax,%eax
c010ca6d:	75 0a                	jne    c010ca79 <RR_proc_tick+0x3c>
        proc->need_resched = 1;
c010ca6f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ca72:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
    }
}
c010ca79:	90                   	nop
c010ca7a:	5d                   	pop    %ebp
c010ca7b:	c3                   	ret    

c010ca7c <sys_exit>:
#include <stat.h>
#include <dirent.h>
#include <sysfile.h>

static int
sys_exit(uint32_t arg[]) {
c010ca7c:	55                   	push   %ebp
c010ca7d:	89 e5                	mov    %esp,%ebp
c010ca7f:	83 ec 18             	sub    $0x18,%esp
    int error_code = (int)arg[0];
c010ca82:	8b 45 08             	mov    0x8(%ebp),%eax
c010ca85:	8b 00                	mov    (%eax),%eax
c010ca87:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_exit(error_code);
c010ca8a:	83 ec 0c             	sub    $0xc,%esp
c010ca8d:	ff 75 f4             	pushl  -0xc(%ebp)
c010ca90:	e8 98 eb ff ff       	call   c010b62d <do_exit>
c010ca95:	83 c4 10             	add    $0x10,%esp
}
c010ca98:	c9                   	leave  
c010ca99:	c3                   	ret    

c010ca9a <sys_fork>:

static int
sys_fork(uint32_t arg[]) {
c010ca9a:	55                   	push   %ebp
c010ca9b:	89 e5                	mov    %esp,%ebp
c010ca9d:	83 ec 18             	sub    $0x18,%esp
    struct trapframe *tf = current->tf;
c010caa0:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010caa5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010caa8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uintptr_t stack = tf->tf_esp;
c010caab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010caae:	8b 40 44             	mov    0x44(%eax),%eax
c010cab1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_fork(0, stack, tf);
c010cab4:	83 ec 04             	sub    $0x4,%esp
c010cab7:	ff 75 f4             	pushl  -0xc(%ebp)
c010caba:	ff 75 f0             	pushl  -0x10(%ebp)
c010cabd:	6a 00                	push   $0x0
c010cabf:	e8 41 eb ff ff       	call   c010b605 <do_fork>
c010cac4:	83 c4 10             	add    $0x10,%esp
}
c010cac7:	c9                   	leave  
c010cac8:	c3                   	ret    

c010cac9 <sys_wait>:

static int
sys_wait(uint32_t arg[]) {
c010cac9:	55                   	push   %ebp
c010caca:	89 e5                	mov    %esp,%ebp
c010cacc:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010cacf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cad2:	8b 00                	mov    (%eax),%eax
c010cad4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int *store = (int *)arg[1];
c010cad7:	8b 45 08             	mov    0x8(%ebp),%eax
c010cada:	83 c0 04             	add    $0x4,%eax
c010cadd:	8b 00                	mov    (%eax),%eax
c010cadf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return do_wait(pid, store);
c010cae2:	83 ec 08             	sub    $0x8,%esp
c010cae5:	ff 75 f0             	pushl  -0x10(%ebp)
c010cae8:	ff 75 f4             	pushl  -0xc(%ebp)
c010caeb:	e8 e7 f0 ff ff       	call   c010bbd7 <do_wait>
c010caf0:	83 c4 10             	add    $0x10,%esp
}
c010caf3:	c9                   	leave  
c010caf4:	c3                   	ret    

c010caf5 <sys_exec>:

static int
sys_exec(uint32_t arg[]) {
c010caf5:	55                   	push   %ebp
c010caf6:	89 e5                	mov    %esp,%ebp
c010caf8:	83 ec 18             	sub    $0x18,%esp
    const char *name = (const char *)arg[0];
c010cafb:	8b 45 08             	mov    0x8(%ebp),%eax
c010cafe:	8b 00                	mov    (%eax),%eax
c010cb00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int argc = (int)arg[1];
c010cb03:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb06:	83 c0 04             	add    $0x4,%eax
c010cb09:	8b 00                	mov    (%eax),%eax
c010cb0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    const char **argv = (const char **)arg[2];
c010cb0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb11:	83 c0 08             	add    $0x8,%eax
c010cb14:	8b 00                	mov    (%eax),%eax
c010cb16:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return do_execve(name, argc, argv);
c010cb19:	83 ec 04             	sub    $0x4,%esp
c010cb1c:	ff 75 ec             	pushl  -0x14(%ebp)
c010cb1f:	ff 75 f0             	pushl  -0x10(%ebp)
c010cb22:	ff 75 f4             	pushl  -0xc(%ebp)
c010cb25:	e8 77 ee ff ff       	call   c010b9a1 <do_execve>
c010cb2a:	83 c4 10             	add    $0x10,%esp
}
c010cb2d:	c9                   	leave  
c010cb2e:	c3                   	ret    

c010cb2f <sys_yield>:

static int
sys_yield(uint32_t arg[]) {
c010cb2f:	55                   	push   %ebp
c010cb30:	89 e5                	mov    %esp,%ebp
c010cb32:	83 ec 08             	sub    $0x8,%esp
    return do_yield();
c010cb35:	e8 87 f0 ff ff       	call   c010bbc1 <do_yield>
}
c010cb3a:	c9                   	leave  
c010cb3b:	c3                   	ret    

c010cb3c <sys_kill>:

static int
sys_kill(uint32_t arg[]) {
c010cb3c:	55                   	push   %ebp
c010cb3d:	89 e5                	mov    %esp,%ebp
c010cb3f:	83 ec 18             	sub    $0x18,%esp
    int pid = (int)arg[0];
c010cb42:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb45:	8b 00                	mov    (%eax),%eax
c010cb47:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_kill(pid);
c010cb4a:	83 ec 0c             	sub    $0xc,%esp
c010cb4d:	ff 75 f4             	pushl  -0xc(%ebp)
c010cb50:	e8 1f f2 ff ff       	call   c010bd74 <do_kill>
c010cb55:	83 c4 10             	add    $0x10,%esp
}
c010cb58:	c9                   	leave  
c010cb59:	c3                   	ret    

c010cb5a <sys_getpid>:

static int
sys_getpid(uint32_t arg[]) {
c010cb5a:	55                   	push   %ebp
c010cb5b:	89 e5                	mov    %esp,%ebp
    return current->pid;
c010cb5d:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010cb62:	8b 40 04             	mov    0x4(%eax),%eax
}
c010cb65:	5d                   	pop    %ebp
c010cb66:	c3                   	ret    

c010cb67 <sys_putc>:

static int
sys_putc(uint32_t arg[]) {
c010cb67:	55                   	push   %ebp
c010cb68:	89 e5                	mov    %esp,%ebp
c010cb6a:	83 ec 18             	sub    $0x18,%esp
    int c = (int)arg[0];
c010cb6d:	8b 45 08             	mov    0x8(%ebp),%eax
c010cb70:	8b 00                	mov    (%eax),%eax
c010cb72:	89 45 f4             	mov    %eax,-0xc(%ebp)
    cputchar(c);
c010cb75:	83 ec 0c             	sub    $0xc,%esp
c010cb78:	ff 75 f4             	pushl  -0xc(%ebp)
c010cb7b:	e8 25 38 ff ff       	call   c01003a5 <cputchar>
c010cb80:	83 c4 10             	add    $0x10,%esp
    return 0;
c010cb83:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb88:	c9                   	leave  
c010cb89:	c3                   	ret    

c010cb8a <sys_pgdir>:

static int
sys_pgdir(uint32_t arg[]) {
c010cb8a:	55                   	push   %ebp
c010cb8b:	89 e5                	mov    %esp,%ebp
c010cb8d:	83 ec 08             	sub    $0x8,%esp
    print_pgdir();
c010cb90:	e8 e3 7f ff ff       	call   c0104b78 <print_pgdir>
    return 0;
c010cb95:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cb9a:	c9                   	leave  
c010cb9b:	c3                   	ret    

c010cb9c <sys_gettime>:

static int
sys_gettime(uint32_t arg[]) {
c010cb9c:	55                   	push   %ebp
c010cb9d:	89 e5                	mov    %esp,%ebp
    return (int)ticks;
c010cb9f:	a1 00 21 15 c0       	mov    0xc0152100,%eax
}
c010cba4:	5d                   	pop    %ebp
c010cba5:	c3                   	ret    

c010cba6 <sys_lab6_set_priority>:
static int
sys_lab6_set_priority(uint32_t arg[])
{
c010cba6:	55                   	push   %ebp
c010cba7:	89 e5                	mov    %esp,%ebp
c010cba9:	83 ec 18             	sub    $0x18,%esp
    uint32_t priority = (uint32_t)arg[0];
c010cbac:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbaf:	8b 00                	mov    (%eax),%eax
c010cbb1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    lab6_set_priority(priority);
c010cbb4:	83 ec 0c             	sub    $0xc,%esp
c010cbb7:	ff 75 f4             	pushl  -0xc(%ebp)
c010cbba:	e8 58 f6 ff ff       	call   c010c217 <lab6_set_priority>
c010cbbf:	83 c4 10             	add    $0x10,%esp
    return 0;
c010cbc2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010cbc7:	c9                   	leave  
c010cbc8:	c3                   	ret    

c010cbc9 <sys_sleep>:

static int
sys_sleep(uint32_t arg[]) {
c010cbc9:	55                   	push   %ebp
c010cbca:	89 e5                	mov    %esp,%ebp
c010cbcc:	83 ec 18             	sub    $0x18,%esp
    unsigned int time = (unsigned int)arg[0];
c010cbcf:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbd2:	8b 00                	mov    (%eax),%eax
c010cbd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return do_sleep(time);
c010cbd7:	83 ec 0c             	sub    $0xc,%esp
c010cbda:	ff 75 f4             	pushl  -0xc(%ebp)
c010cbdd:	e8 60 f6 ff ff       	call   c010c242 <do_sleep>
c010cbe2:	83 c4 10             	add    $0x10,%esp
}
c010cbe5:	c9                   	leave  
c010cbe6:	c3                   	ret    

c010cbe7 <sys_open>:

static int
sys_open(uint32_t arg[]) {
c010cbe7:	55                   	push   %ebp
c010cbe8:	89 e5                	mov    %esp,%ebp
c010cbea:	83 ec 18             	sub    $0x18,%esp
    const char *path = (const char *)arg[0];
c010cbed:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf0:	8b 00                	mov    (%eax),%eax
c010cbf2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t open_flags = (uint32_t)arg[1];
c010cbf5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cbf8:	83 c0 04             	add    $0x4,%eax
c010cbfb:	8b 00                	mov    (%eax),%eax
c010cbfd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_open(path, open_flags);
c010cc00:	83 ec 08             	sub    $0x8,%esp
c010cc03:	ff 75 f0             	pushl  -0x10(%ebp)
c010cc06:	ff 75 f4             	pushl  -0xc(%ebp)
c010cc09:	e8 af c5 ff ff       	call   c01091bd <sysfile_open>
c010cc0e:	83 c4 10             	add    $0x10,%esp
}
c010cc11:	c9                   	leave  
c010cc12:	c3                   	ret    

c010cc13 <sys_close>:

static int
sys_close(uint32_t arg[]) {
c010cc13:	55                   	push   %ebp
c010cc14:	89 e5                	mov    %esp,%ebp
c010cc16:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cc19:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc1c:	8b 00                	mov    (%eax),%eax
c010cc1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_close(fd);
c010cc21:	83 ec 0c             	sub    $0xc,%esp
c010cc24:	ff 75 f4             	pushl  -0xc(%ebp)
c010cc27:	e8 e0 c5 ff ff       	call   c010920c <sysfile_close>
c010cc2c:	83 c4 10             	add    $0x10,%esp
}
c010cc2f:	c9                   	leave  
c010cc30:	c3                   	ret    

c010cc31 <sys_read>:

static int
sys_read(uint32_t arg[]) {
c010cc31:	55                   	push   %ebp
c010cc32:	89 e5                	mov    %esp,%ebp
c010cc34:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cc37:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc3a:	8b 00                	mov    (%eax),%eax
c010cc3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010cc3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc42:	83 c0 04             	add    $0x4,%eax
c010cc45:	8b 00                	mov    (%eax),%eax
c010cc47:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010cc4a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc4d:	83 c0 08             	add    $0x8,%eax
c010cc50:	8b 00                	mov    (%eax),%eax
c010cc52:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_read(fd, base, len);
c010cc55:	83 ec 04             	sub    $0x4,%esp
c010cc58:	ff 75 ec             	pushl  -0x14(%ebp)
c010cc5b:	ff 75 f0             	pushl  -0x10(%ebp)
c010cc5e:	ff 75 f4             	pushl  -0xc(%ebp)
c010cc61:	e8 bc c5 ff ff       	call   c0109222 <sysfile_read>
c010cc66:	83 c4 10             	add    $0x10,%esp
}
c010cc69:	c9                   	leave  
c010cc6a:	c3                   	ret    

c010cc6b <sys_write>:

static int
sys_write(uint32_t arg[]) {
c010cc6b:	55                   	push   %ebp
c010cc6c:	89 e5                	mov    %esp,%ebp
c010cc6e:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cc71:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc74:	8b 00                	mov    (%eax),%eax
c010cc76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    void *base = (void *)arg[1];
c010cc79:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc7c:	83 c0 04             	add    $0x4,%eax
c010cc7f:	8b 00                	mov    (%eax),%eax
c010cc81:	89 45 f0             	mov    %eax,-0x10(%ebp)
    size_t len = (size_t)arg[2];
c010cc84:	8b 45 08             	mov    0x8(%ebp),%eax
c010cc87:	83 c0 08             	add    $0x8,%eax
c010cc8a:	8b 00                	mov    (%eax),%eax
c010cc8c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_write(fd, base, len);
c010cc8f:	83 ec 04             	sub    $0x4,%esp
c010cc92:	ff 75 ec             	pushl  -0x14(%ebp)
c010cc95:	ff 75 f0             	pushl  -0x10(%ebp)
c010cc98:	ff 75 f4             	pushl  -0xc(%ebp)
c010cc9b:	e8 d7 c6 ff ff       	call   c0109377 <sysfile_write>
c010cca0:	83 c4 10             	add    $0x10,%esp
}
c010cca3:	c9                   	leave  
c010cca4:	c3                   	ret    

c010cca5 <sys_seek>:

static int
sys_seek(uint32_t arg[]) {
c010cca5:	55                   	push   %ebp
c010cca6:	89 e5                	mov    %esp,%ebp
c010cca8:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010ccab:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccae:	8b 00                	mov    (%eax),%eax
c010ccb0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    off_t pos = (off_t)arg[1];
c010ccb3:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccb6:	83 c0 04             	add    $0x4,%eax
c010ccb9:	8b 00                	mov    (%eax),%eax
c010ccbb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int whence = (int)arg[2];
c010ccbe:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccc1:	83 c0 08             	add    $0x8,%eax
c010ccc4:	8b 00                	mov    (%eax),%eax
c010ccc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    return sysfile_seek(fd, pos, whence);
c010ccc9:	83 ec 04             	sub    $0x4,%esp
c010cccc:	ff 75 ec             	pushl  -0x14(%ebp)
c010cccf:	ff 75 f0             	pushl  -0x10(%ebp)
c010ccd2:	ff 75 f4             	pushl  -0xc(%ebp)
c010ccd5:	e8 f8 c7 ff ff       	call   c01094d2 <sysfile_seek>
c010ccda:	83 c4 10             	add    $0x10,%esp
}
c010ccdd:	c9                   	leave  
c010ccde:	c3                   	ret    

c010ccdf <sys_fstat>:

static int
sys_fstat(uint32_t arg[]) {
c010ccdf:	55                   	push   %ebp
c010cce0:	89 e5                	mov    %esp,%ebp
c010cce2:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cce5:	8b 45 08             	mov    0x8(%ebp),%eax
c010cce8:	8b 00                	mov    (%eax),%eax
c010ccea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct stat *stat = (struct stat *)arg[1];
c010cced:	8b 45 08             	mov    0x8(%ebp),%eax
c010ccf0:	83 c0 04             	add    $0x4,%eax
c010ccf3:	8b 00                	mov    (%eax),%eax
c010ccf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_fstat(fd, stat);
c010ccf8:	83 ec 08             	sub    $0x8,%esp
c010ccfb:	ff 75 f0             	pushl  -0x10(%ebp)
c010ccfe:	ff 75 f4             	pushl  -0xc(%ebp)
c010cd01:	e8 e8 c7 ff ff       	call   c01094ee <sysfile_fstat>
c010cd06:	83 c4 10             	add    $0x10,%esp
}
c010cd09:	c9                   	leave  
c010cd0a:	c3                   	ret    

c010cd0b <sys_fsync>:

static int
sys_fsync(uint32_t arg[]) {
c010cd0b:	55                   	push   %ebp
c010cd0c:	89 e5                	mov    %esp,%ebp
c010cd0e:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cd11:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd14:	8b 00                	mov    (%eax),%eax
c010cd16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sysfile_fsync(fd);
c010cd19:	83 ec 0c             	sub    $0xc,%esp
c010cd1c:	ff 75 f4             	pushl  -0xc(%ebp)
c010cd1f:	e8 3f c8 ff ff       	call   c0109563 <sysfile_fsync>
c010cd24:	83 c4 10             	add    $0x10,%esp
}
c010cd27:	c9                   	leave  
c010cd28:	c3                   	ret    

c010cd29 <sys_getcwd>:

static int
sys_getcwd(uint32_t arg[]) {
c010cd29:	55                   	push   %ebp
c010cd2a:	89 e5                	mov    %esp,%ebp
c010cd2c:	83 ec 18             	sub    $0x18,%esp
    char *buf = (char *)arg[0];
c010cd2f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd32:	8b 00                	mov    (%eax),%eax
c010cd34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    size_t len = (size_t)arg[1];
c010cd37:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd3a:	83 c0 04             	add    $0x4,%eax
c010cd3d:	8b 00                	mov    (%eax),%eax
c010cd3f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getcwd(buf, len);
c010cd42:	83 ec 08             	sub    $0x8,%esp
c010cd45:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd48:	ff 75 f4             	pushl  -0xc(%ebp)
c010cd4b:	e8 dd c9 ff ff       	call   c010972d <sysfile_getcwd>
c010cd50:	83 c4 10             	add    $0x10,%esp
}
c010cd53:	c9                   	leave  
c010cd54:	c3                   	ret    

c010cd55 <sys_getdirentry>:

static int
sys_getdirentry(uint32_t arg[]) {
c010cd55:	55                   	push   %ebp
c010cd56:	89 e5                	mov    %esp,%ebp
c010cd58:	83 ec 18             	sub    $0x18,%esp
    int fd = (int)arg[0];
c010cd5b:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd5e:	8b 00                	mov    (%eax),%eax
c010cd60:	89 45 f4             	mov    %eax,-0xc(%ebp)
    struct dirent *direntp = (struct dirent *)arg[1];
c010cd63:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd66:	83 c0 04             	add    $0x4,%eax
c010cd69:	8b 00                	mov    (%eax),%eax
c010cd6b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_getdirentry(fd, direntp);
c010cd6e:	83 ec 08             	sub    $0x8,%esp
c010cd71:	ff 75 f0             	pushl  -0x10(%ebp)
c010cd74:	ff 75 f4             	pushl  -0xc(%ebp)
c010cd77:	e8 37 ca ff ff       	call   c01097b3 <sysfile_getdirentry>
c010cd7c:	83 c4 10             	add    $0x10,%esp
}
c010cd7f:	c9                   	leave  
c010cd80:	c3                   	ret    

c010cd81 <sys_dup>:

static int
sys_dup(uint32_t arg[]) {
c010cd81:	55                   	push   %ebp
c010cd82:	89 e5                	mov    %esp,%ebp
c010cd84:	83 ec 18             	sub    $0x18,%esp
    int fd1 = (int)arg[0];
c010cd87:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd8a:	8b 00                	mov    (%eax),%eax
c010cd8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int fd2 = (int)arg[1];
c010cd8f:	8b 45 08             	mov    0x8(%ebp),%eax
c010cd92:	83 c0 04             	add    $0x4,%eax
c010cd95:	8b 00                	mov    (%eax),%eax
c010cd97:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sysfile_dup(fd1, fd2);
c010cd9a:	83 ec 08             	sub    $0x8,%esp
c010cd9d:	ff 75 f0             	pushl  -0x10(%ebp)
c010cda0:	ff 75 f4             	pushl  -0xc(%ebp)
c010cda3:	e8 f7 ca ff ff       	call   c010989f <sysfile_dup>
c010cda8:	83 c4 10             	add    $0x10,%esp
}
c010cdab:	c9                   	leave  
c010cdac:	c3                   	ret    

c010cdad <syscall>:
};

#define NUM_SYSCALLS        ((sizeof(syscalls)) / (sizeof(syscalls[0])))

void
syscall(void) {
c010cdad:	55                   	push   %ebp
c010cdae:	89 e5                	mov    %esp,%ebp
c010cdb0:	83 ec 28             	sub    $0x28,%esp
    struct trapframe *tf = current->tf;
c010cdb3:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010cdb8:	8b 40 3c             	mov    0x3c(%eax),%eax
c010cdbb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t arg[5];
    int num = tf->tf_regs.reg_eax;
c010cdbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdc1:	8b 40 1c             	mov    0x1c(%eax),%eax
c010cdc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (num >= 0 && num < NUM_SYSCALLS) {
c010cdc7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010cdcb:	78 64                	js     c010ce31 <syscall+0x84>
c010cdcd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdd0:	3d ff 00 00 00       	cmp    $0xff,%eax
c010cdd5:	77 5a                	ja     c010ce31 <syscall+0x84>
        if (syscalls[num] != NULL) {
c010cdd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010cdda:	8b 04 85 c0 ba 14 c0 	mov    -0x3feb4540(,%eax,4),%eax
c010cde1:	85 c0                	test   %eax,%eax
c010cde3:	74 4c                	je     c010ce31 <syscall+0x84>
            arg[0] = tf->tf_regs.reg_edx;
c010cde5:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cde8:	8b 40 14             	mov    0x14(%eax),%eax
c010cdeb:	89 45 dc             	mov    %eax,-0x24(%ebp)
            arg[1] = tf->tf_regs.reg_ecx;
c010cdee:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdf1:	8b 40 18             	mov    0x18(%eax),%eax
c010cdf4:	89 45 e0             	mov    %eax,-0x20(%ebp)
            arg[2] = tf->tf_regs.reg_ebx;
c010cdf7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cdfa:	8b 40 10             	mov    0x10(%eax),%eax
c010cdfd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            arg[3] = tf->tf_regs.reg_edi;
c010ce00:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce03:	8b 00                	mov    (%eax),%eax
c010ce05:	89 45 e8             	mov    %eax,-0x18(%ebp)
            arg[4] = tf->tf_regs.reg_esi;
c010ce08:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce0b:	8b 40 04             	mov    0x4(%eax),%eax
c010ce0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
            tf->tf_regs.reg_eax = syscalls[num](arg);
c010ce11:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ce14:	8b 04 85 c0 ba 14 c0 	mov    -0x3feb4540(,%eax,4),%eax
c010ce1b:	83 ec 0c             	sub    $0xc,%esp
c010ce1e:	8d 55 dc             	lea    -0x24(%ebp),%edx
c010ce21:	52                   	push   %edx
c010ce22:	ff d0                	call   *%eax
c010ce24:	83 c4 10             	add    $0x10,%esp
c010ce27:	89 c2                	mov    %eax,%edx
c010ce29:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ce2c:	89 50 1c             	mov    %edx,0x1c(%eax)
            return ;
c010ce2f:	eb 3a                	jmp    c010ce6b <syscall+0xbe>
        }
    }
    print_trapframe(tf);
c010ce31:	83 ec 0c             	sub    $0xc,%esp
c010ce34:	ff 75 f4             	pushl  -0xc(%ebp)
c010ce37:	e8 1b 54 ff ff       	call   c0102257 <print_trapframe>
c010ce3c:	83 c4 10             	add    $0x10,%esp
    panic("undefined syscall %d, pid = %d, name = %s.\n",
c010ce3f:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010ce44:	8d 50 48             	lea    0x48(%eax),%edx
c010ce47:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010ce4c:	8b 40 04             	mov    0x4(%eax),%eax
c010ce4f:	83 ec 08             	sub    $0x8,%esp
c010ce52:	52                   	push   %edx
c010ce53:	50                   	push   %eax
c010ce54:	ff 75 f0             	pushl  -0x10(%ebp)
c010ce57:	68 dc 59 11 c0       	push   $0xc01159dc
c010ce5c:	68 cd 00 00 00       	push   $0xcd
c010ce61:	68 08 5a 11 c0       	push   $0xc0115a08
c010ce66:	e8 7a 36 ff ff       	call   c01004e5 <__panic>
            num, current->pid, current->name);
}
c010ce6b:	c9                   	leave  
c010ce6c:	c3                   	ret    

c010ce6d <page2ppn>:

extern struct Page *pages;
extern size_t npage;

static inline ppn_t
page2ppn(struct Page *page) {
c010ce6d:	55                   	push   %ebp
c010ce6e:	89 e5                	mov    %esp,%ebp
    return page - pages;
c010ce70:	8b 45 08             	mov    0x8(%ebp),%eax
c010ce73:	8b 15 0c 21 15 c0    	mov    0xc015210c,%edx
c010ce79:	29 d0                	sub    %edx,%eax
c010ce7b:	c1 f8 05             	sar    $0x5,%eax
}
c010ce7e:	5d                   	pop    %ebp
c010ce7f:	c3                   	ret    

c010ce80 <page2pa>:

static inline uintptr_t
page2pa(struct Page *page) {
c010ce80:	55                   	push   %ebp
c010ce81:	89 e5                	mov    %esp,%ebp
    return page2ppn(page) << PGSHIFT;
c010ce83:	ff 75 08             	pushl  0x8(%ebp)
c010ce86:	e8 e2 ff ff ff       	call   c010ce6d <page2ppn>
c010ce8b:	83 c4 04             	add    $0x4,%esp
c010ce8e:	c1 e0 0c             	shl    $0xc,%eax
}
c010ce91:	c9                   	leave  
c010ce92:	c3                   	ret    

c010ce93 <page2kva>:
    }
    return &pages[PPN(pa)];
}

static inline void *
page2kva(struct Page *page) {
c010ce93:	55                   	push   %ebp
c010ce94:	89 e5                	mov    %esp,%ebp
c010ce96:	83 ec 18             	sub    $0x18,%esp
    return KADDR(page2pa(page));
c010ce99:	ff 75 08             	pushl  0x8(%ebp)
c010ce9c:	e8 df ff ff ff       	call   c010ce80 <page2pa>
c010cea1:	83 c4 04             	add    $0x4,%esp
c010cea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ceaa:	c1 e8 0c             	shr    $0xc,%eax
c010cead:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ceb0:	a1 80 ef 14 c0       	mov    0xc014ef80,%eax
c010ceb5:	39 45 f0             	cmp    %eax,-0x10(%ebp)
c010ceb8:	72 14                	jb     c010cece <page2kva+0x3b>
c010ceba:	ff 75 f4             	pushl  -0xc(%ebp)
c010cebd:	68 20 5a 11 c0       	push   $0xc0115a20
c010cec2:	6a 65                	push   $0x65
c010cec4:	68 43 5a 11 c0       	push   $0xc0115a43
c010cec9:	e8 17 36 ff ff       	call   c01004e5 <__panic>
c010cece:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ced1:	2d 00 00 00 40       	sub    $0x40000000,%eax
}
c010ced6:	c9                   	leave  
c010ced7:	c3                   	ret    

c010ced8 <swapfs_init>:
#include <ide.h>
#include <pmm.h>
#include <assert.h>

void
swapfs_init(void) {
c010ced8:	55                   	push   %ebp
c010ced9:	89 e5                	mov    %esp,%ebp
c010cedb:	83 ec 08             	sub    $0x8,%esp
    static_assert((PGSIZE % SECTSIZE) == 0);
    if (!ide_device_valid(SWAP_DEV_NO)) {
c010cede:	83 ec 0c             	sub    $0xc,%esp
c010cee1:	6a 01                	push   $0x1
c010cee3:	e8 13 43 ff ff       	call   c01011fb <ide_device_valid>
c010cee8:	83 c4 10             	add    $0x10,%esp
c010ceeb:	85 c0                	test   %eax,%eax
c010ceed:	75 14                	jne    c010cf03 <swapfs_init+0x2b>
        panic("swap fs isn't available.\n");
c010ceef:	83 ec 04             	sub    $0x4,%esp
c010cef2:	68 51 5a 11 c0       	push   $0xc0115a51
c010cef7:	6a 0d                	push   $0xd
c010cef9:	68 6b 5a 11 c0       	push   $0xc0115a6b
c010cefe:	e8 e2 35 ff ff       	call   c01004e5 <__panic>
    }
    max_swap_offset = ide_device_size(SWAP_DEV_NO) / (PGSIZE / SECTSIZE);
c010cf03:	83 ec 0c             	sub    $0xc,%esp
c010cf06:	6a 01                	push   $0x1
c010cf08:	e8 2e 43 ff ff       	call   c010123b <ide_device_size>
c010cf0d:	83 c4 10             	add    $0x10,%esp
c010cf10:	c1 e8 03             	shr    $0x3,%eax
c010cf13:	a3 bc 21 15 c0       	mov    %eax,0xc01521bc
}
c010cf18:	90                   	nop
c010cf19:	c9                   	leave  
c010cf1a:	c3                   	ret    

c010cf1b <swapfs_read>:

int
swapfs_read(swap_entry_t entry, struct Page *page) {
c010cf1b:	55                   	push   %ebp
c010cf1c:	89 e5                	mov    %esp,%ebp
c010cf1e:	83 ec 18             	sub    $0x18,%esp
    return ide_read_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010cf21:	83 ec 0c             	sub    $0xc,%esp
c010cf24:	ff 75 0c             	pushl  0xc(%ebp)
c010cf27:	e8 67 ff ff ff       	call   c010ce93 <page2kva>
c010cf2c:	83 c4 10             	add    $0x10,%esp
c010cf2f:	89 c2                	mov    %eax,%edx
c010cf31:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf34:	c1 e8 08             	shr    $0x8,%eax
c010cf37:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf3a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf3e:	74 0a                	je     c010cf4a <swapfs_read+0x2f>
c010cf40:	a1 bc 21 15 c0       	mov    0xc01521bc,%eax
c010cf45:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010cf48:	72 14                	jb     c010cf5e <swapfs_read+0x43>
c010cf4a:	ff 75 08             	pushl  0x8(%ebp)
c010cf4d:	68 81 5a 11 c0       	push   $0xc0115a81
c010cf52:	6a 14                	push   $0x14
c010cf54:	68 6b 5a 11 c0       	push   $0xc0115a6b
c010cf59:	e8 87 35 ff ff       	call   c01004e5 <__panic>
c010cf5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cf61:	c1 e0 03             	shl    $0x3,%eax
c010cf64:	6a 08                	push   $0x8
c010cf66:	52                   	push   %edx
c010cf67:	50                   	push   %eax
c010cf68:	6a 01                	push   $0x1
c010cf6a:	e8 0c 43 ff ff       	call   c010127b <ide_read_secs>
c010cf6f:	83 c4 10             	add    $0x10,%esp
}
c010cf72:	c9                   	leave  
c010cf73:	c3                   	ret    

c010cf74 <swapfs_write>:

int
swapfs_write(swap_entry_t entry, struct Page *page) {
c010cf74:	55                   	push   %ebp
c010cf75:	89 e5                	mov    %esp,%ebp
c010cf77:	83 ec 18             	sub    $0x18,%esp
    return ide_write_secs(SWAP_DEV_NO, swap_offset(entry) * PAGE_NSECT, page2kva(page), PAGE_NSECT);
c010cf7a:	83 ec 0c             	sub    $0xc,%esp
c010cf7d:	ff 75 0c             	pushl  0xc(%ebp)
c010cf80:	e8 0e ff ff ff       	call   c010ce93 <page2kva>
c010cf85:	83 c4 10             	add    $0x10,%esp
c010cf88:	89 c2                	mov    %eax,%edx
c010cf8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010cf8d:	c1 e8 08             	shr    $0x8,%eax
c010cf90:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010cf93:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010cf97:	74 0a                	je     c010cfa3 <swapfs_write+0x2f>
c010cf99:	a1 bc 21 15 c0       	mov    0xc01521bc,%eax
c010cf9e:	39 45 f4             	cmp    %eax,-0xc(%ebp)
c010cfa1:	72 14                	jb     c010cfb7 <swapfs_write+0x43>
c010cfa3:	ff 75 08             	pushl  0x8(%ebp)
c010cfa6:	68 81 5a 11 c0       	push   $0xc0115a81
c010cfab:	6a 19                	push   $0x19
c010cfad:	68 6b 5a 11 c0       	push   $0xc0115a6b
c010cfb2:	e8 2e 35 ff ff       	call   c01004e5 <__panic>
c010cfb7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010cfba:	c1 e0 03             	shl    $0x3,%eax
c010cfbd:	6a 08                	push   $0x8
c010cfbf:	52                   	push   %edx
c010cfc0:	50                   	push   %eax
c010cfc1:	6a 01                	push   $0x1
c010cfc3:	e8 dd 44 ff ff       	call   c01014a5 <ide_write_secs>
c010cfc8:	83 c4 10             	add    $0x10,%esp
}
c010cfcb:	c9                   	leave  
c010cfcc:	c3                   	ret    

c010cfcd <lock_vdev_list>:

static list_entry_t vdev_list;     // device info list in vfs layer
static semaphore_t vdev_list_sem;

static void
lock_vdev_list(void) {
c010cfcd:	55                   	push   %ebp
c010cfce:	89 e5                	mov    %esp,%ebp
c010cfd0:	83 ec 08             	sub    $0x8,%esp
    down(&vdev_list_sem);
c010cfd3:	83 ec 0c             	sub    $0xc,%esp
c010cfd6:	68 c0 10 15 c0       	push   $0xc01510c0
c010cfdb:	e8 bb be ff ff       	call   c0108e9b <down>
c010cfe0:	83 c4 10             	add    $0x10,%esp
}
c010cfe3:	90                   	nop
c010cfe4:	c9                   	leave  
c010cfe5:	c3                   	ret    

c010cfe6 <unlock_vdev_list>:

static void
unlock_vdev_list(void) {
c010cfe6:	55                   	push   %ebp
c010cfe7:	89 e5                	mov    %esp,%ebp
c010cfe9:	83 ec 08             	sub    $0x8,%esp
    up(&vdev_list_sem);
c010cfec:	83 ec 0c             	sub    $0xc,%esp
c010cfef:	68 c0 10 15 c0       	push   $0xc01510c0
c010cff4:	e8 86 be ff ff       	call   c0108e7f <up>
c010cff9:	83 c4 10             	add    $0x10,%esp
}
c010cffc:	90                   	nop
c010cffd:	c9                   	leave  
c010cffe:	c3                   	ret    

c010cfff <vfs_devlist_init>:

void
vfs_devlist_init(void) {
c010cfff:	55                   	push   %ebp
c010d000:	89 e5                	mov    %esp,%ebp
c010d002:	83 ec 18             	sub    $0x18,%esp
c010d005:	c7 45 f4 b8 10 15 c0 	movl   $0xc01510b8,-0xc(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c010d00c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d00f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d012:	89 50 04             	mov    %edx,0x4(%eax)
c010d015:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d018:	8b 50 04             	mov    0x4(%eax),%edx
c010d01b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d01e:	89 10                	mov    %edx,(%eax)
    list_init(&vdev_list);
    sem_init(&vdev_list_sem, 1);
c010d020:	83 ec 08             	sub    $0x8,%esp
c010d023:	6a 01                	push   $0x1
c010d025:	68 c0 10 15 c0       	push   $0xc01510c0
c010d02a:	e8 e3 bc ff ff       	call   c0108d12 <sem_init>
c010d02f:	83 c4 10             	add    $0x10,%esp
}
c010d032:	90                   	nop
c010d033:	c9                   	leave  
c010d034:	c3                   	ret    

c010d035 <vfs_cleanup>:

// vfs_cleanup - finally clean (or sync) fs
void
vfs_cleanup(void) {
c010d035:	55                   	push   %ebp
c010d036:	89 e5                	mov    %esp,%ebp
c010d038:	83 ec 28             	sub    $0x28,%esp
c010d03b:	c7 45 e4 b8 10 15 c0 	movl   $0xc01510b8,-0x1c(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d042:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d045:	8b 40 04             	mov    0x4(%eax),%eax
c010d048:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
c010d04b:	0f 94 c0             	sete   %al
c010d04e:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010d051:	85 c0                	test   %eax,%eax
c010d053:	75 5b                	jne    c010d0b0 <vfs_cleanup+0x7b>
        lock_vdev_list();
c010d055:	e8 73 ff ff ff       	call   c010cfcd <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010d05a:	c7 45 ec b8 10 15 c0 	movl   $0xc01510b8,-0x14(%ebp)
c010d061:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d064:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010d067:	eb 2b                	jmp    c010d094 <vfs_cleanup+0x5f>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d069:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d06c:	83 e8 10             	sub    $0x10,%eax
c010d06f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->fs != NULL) {
c010d072:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d075:	8b 40 08             	mov    0x8(%eax),%eax
c010d078:	85 c0                	test   %eax,%eax
c010d07a:	74 18                	je     c010d094 <vfs_cleanup+0x5f>
                    fsop_cleanup(vdev->fs);
c010d07c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d07f:	8b 40 08             	mov    0x8(%eax),%eax
c010d082:	8b 40 7c             	mov    0x7c(%eax),%eax
c010d085:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d088:	8b 52 08             	mov    0x8(%edx),%edx
c010d08b:	83 ec 0c             	sub    $0xc,%esp
c010d08e:	52                   	push   %edx
c010d08f:	ff d0                	call   *%eax
c010d091:	83 c4 10             	add    $0x10,%esp
c010d094:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d097:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d09a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d09d:	8b 40 04             	mov    0x4(%eax),%eax
vfs_cleanup(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010d0a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d0a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d0a6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d0a9:	75 be                	jne    c010d069 <vfs_cleanup+0x34>
                if (vdev->fs != NULL) {
                    fsop_cleanup(vdev->fs);
                }
            }
        }
        unlock_vdev_list();
c010d0ab:	e8 36 ff ff ff       	call   c010cfe6 <unlock_vdev_list>
    }
}
c010d0b0:	90                   	nop
c010d0b1:	c9                   	leave  
c010d0b2:	c3                   	ret    

c010d0b3 <vfs_get_root>:
/*
 * vfs_get_root - Given a device name (stdin, stdout, etc.), hand
 *                back an appropriate inode.
 */
int
vfs_get_root(const char *devname, struct inode **node_store) {
c010d0b3:	55                   	push   %ebp
c010d0b4:	89 e5                	mov    %esp,%ebp
c010d0b6:	83 ec 28             	sub    $0x28,%esp
    assert(devname != NULL);
c010d0b9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d0bd:	75 16                	jne    c010d0d5 <vfs_get_root+0x22>
c010d0bf:	68 a0 5a 11 c0       	push   $0xc0115aa0
c010d0c4:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d0c9:	6a 45                	push   $0x45
c010d0cb:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d0d0:	e8 10 34 ff ff       	call   c01004e5 <__panic>
    int ret = -E_NO_DEV;
c010d0d5:	c7 45 f4 f3 ff ff ff 	movl   $0xfffffff3,-0xc(%ebp)
c010d0dc:	c7 45 dc b8 10 15 c0 	movl   $0xc01510b8,-0x24(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d0e3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010d0e6:	8b 40 04             	mov    0x4(%eax),%eax
c010d0e9:	39 45 dc             	cmp    %eax,-0x24(%ebp)
c010d0ec:	0f 94 c0             	sete   %al
c010d0ef:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010d0f2:	85 c0                	test   %eax,%eax
c010d0f4:	0f 85 cb 00 00 00    	jne    c010d1c5 <vfs_get_root+0x112>
        lock_vdev_list();
c010d0fa:	e8 ce fe ff ff       	call   c010cfcd <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010d0ff:	c7 45 e4 b8 10 15 c0 	movl   $0xc01510b8,-0x1c(%ebp)
c010d106:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d109:	89 45 f0             	mov    %eax,-0x10(%ebp)
            while ((le = list_next(le)) != list) {
c010d10c:	e9 94 00 00 00       	jmp    c010d1a5 <vfs_get_root+0xf2>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d111:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d114:	83 e8 10             	sub    $0x10,%eax
c010d117:	89 45 e0             	mov    %eax,-0x20(%ebp)
                if (strcmp(devname, vdev->devname) == 0) {
c010d11a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d11d:	8b 00                	mov    (%eax),%eax
c010d11f:	83 ec 08             	sub    $0x8,%esp
c010d122:	50                   	push   %eax
c010d123:	ff 75 08             	pushl  0x8(%ebp)
c010d126:	e8 7b 50 00 00       	call   c01121a6 <strcmp>
c010d12b:	83 c4 10             	add    $0x10,%esp
c010d12e:	85 c0                	test   %eax,%eax
c010d130:	75 73                	jne    c010d1a5 <vfs_get_root+0xf2>
                    struct inode *found = NULL;
c010d132:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
                    if (vdev->fs != NULL) {
c010d139:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d13c:	8b 40 08             	mov    0x8(%eax),%eax
c010d13f:	85 c0                	test   %eax,%eax
c010d141:	74 1d                	je     c010d160 <vfs_get_root+0xad>
                        found = fsop_get_root(vdev->fs);
c010d143:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d146:	8b 40 08             	mov    0x8(%eax),%eax
c010d149:	8b 40 74             	mov    0x74(%eax),%eax
c010d14c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d14f:	8b 52 08             	mov    0x8(%edx),%edx
c010d152:	83 ec 0c             	sub    $0xc,%esp
c010d155:	52                   	push   %edx
c010d156:	ff d0                	call   *%eax
c010d158:	83 c4 10             	add    $0x10,%esp
c010d15b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d15e:	eb 25                	jmp    c010d185 <vfs_get_root+0xd2>
                    }
                    else if (!vdev->mountable) {
c010d160:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d163:	8b 40 0c             	mov    0xc(%eax),%eax
c010d166:	85 c0                	test   %eax,%eax
c010d168:	75 1b                	jne    c010d185 <vfs_get_root+0xd2>
                        vop_ref_inc(vdev->devnode);
c010d16a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d16d:	8b 40 04             	mov    0x4(%eax),%eax
c010d170:	83 ec 0c             	sub    $0xc,%esp
c010d173:	50                   	push   %eax
c010d174:	e8 1b 10 00 00       	call   c010e194 <inode_ref_inc>
c010d179:	83 c4 10             	add    $0x10,%esp
                        found = vdev->devnode;
c010d17c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d17f:	8b 40 04             	mov    0x4(%eax),%eax
c010d182:	89 45 ec             	mov    %eax,-0x14(%ebp)
                    }
                    if (found != NULL) {
c010d185:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d189:	74 11                	je     c010d19c <vfs_get_root+0xe9>
                        ret = 0, *node_store = found;
c010d18b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010d192:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d195:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d198:	89 10                	mov    %edx,(%eax)
                    }
                    else {
                        ret = -E_NA_DEV;
                    }
                    break;
c010d19a:	eb 24                	jmp    c010d1c0 <vfs_get_root+0x10d>
                    }
                    if (found != NULL) {
                        ret = 0, *node_store = found;
                    }
                    else {
                        ret = -E_NA_DEV;
c010d19c:	c7 45 f4 f2 ff ff ff 	movl   $0xfffffff2,-0xc(%ebp)
                    }
                    break;
c010d1a3:	eb 1b                	jmp    c010d1c0 <vfs_get_root+0x10d>
c010d1a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d1ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d1ae:	8b 40 04             	mov    0x4(%eax),%eax
    int ret = -E_NO_DEV;
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010d1b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d1b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1b7:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
c010d1ba:	0f 85 51 ff ff ff    	jne    c010d111 <vfs_get_root+0x5e>
                    }
                    break;
                }
            }
        }
        unlock_vdev_list();
c010d1c0:	e8 21 fe ff ff       	call   c010cfe6 <unlock_vdev_list>
    }
    return ret;
c010d1c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d1c8:	c9                   	leave  
c010d1c9:	c3                   	ret    

c010d1ca <vfs_get_devname>:

/*
 * vfs_get_devname - Given a filesystem, hand back the name of the device it's mounted on.
 */
const char *
vfs_get_devname(struct fs *fs) {
c010d1ca:	55                   	push   %ebp
c010d1cb:	89 e5                	mov    %esp,%ebp
c010d1cd:	83 ec 18             	sub    $0x18,%esp
    assert(fs != NULL);
c010d1d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d1d4:	75 16                	jne    c010d1ec <vfs_get_devname+0x22>
c010d1d6:	68 da 5a 11 c0       	push   $0xc0115ada
c010d1db:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d1e0:	6a 6a                	push   $0x6a
c010d1e2:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d1e7:	e8 f9 32 ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010d1ec:	c7 45 f0 b8 10 15 c0 	movl   $0xc01510b8,-0x10(%ebp)
c010d1f3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d1f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010d1f9:	eb 1b                	jmp    c010d216 <vfs_get_devname+0x4c>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d1fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d1fe:	83 e8 10             	sub    $0x10,%eax
c010d201:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->fs == fs) {
c010d204:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d207:	8b 40 08             	mov    0x8(%eax),%eax
c010d20a:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d20d:	75 07                	jne    c010d216 <vfs_get_devname+0x4c>
            return vdev->devname;
c010d20f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d212:	8b 00                	mov    (%eax),%eax
c010d214:	eb 1c                	jmp    c010d232 <vfs_get_devname+0x68>
c010d216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d219:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d21c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d21f:	8b 40 04             	mov    0x4(%eax),%eax
 */
const char *
vfs_get_devname(struct fs *fs) {
    assert(fs != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010d222:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d225:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d228:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d22b:	75 ce                	jne    c010d1fb <vfs_get_devname+0x31>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (vdev->fs == fs) {
            return vdev->devname;
        }
    }
    return NULL;
c010d22d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d232:	c9                   	leave  
c010d233:	c3                   	ret    

c010d234 <check_devname_conflict>:

/*
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
c010d234:	55                   	push   %ebp
c010d235:	89 e5                	mov    %esp,%ebp
c010d237:	83 ec 18             	sub    $0x18,%esp
    list_entry_t *list = &vdev_list, *le = list;
c010d23a:	c7 45 f0 b8 10 15 c0 	movl   $0xc01510b8,-0x10(%ebp)
c010d241:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010d247:	eb 28                	jmp    c010d271 <check_devname_conflict+0x3d>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d249:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d24c:	83 e8 10             	sub    $0x10,%eax
c010d24f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (strcmp(vdev->devname, devname) == 0) {
c010d252:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d255:	8b 00                	mov    (%eax),%eax
c010d257:	83 ec 08             	sub    $0x8,%esp
c010d25a:	ff 75 08             	pushl  0x8(%ebp)
c010d25d:	50                   	push   %eax
c010d25e:	e8 43 4f 00 00       	call   c01121a6 <strcmp>
c010d263:	83 c4 10             	add    $0x10,%esp
c010d266:	85 c0                	test   %eax,%eax
c010d268:	75 07                	jne    c010d271 <check_devname_conflict+0x3d>
            return 0;
c010d26a:	b8 00 00 00 00       	mov    $0x0,%eax
c010d26f:	eb 1c                	jmp    c010d28d <check_devname_conflict+0x59>
c010d271:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d274:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010d277:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d27a:	8b 40 04             	mov    0x4(%eax),%eax
 * check_devname_confilct - Is there alreadily device which has the same name?
 */
static bool
check_devname_conflict(const char *devname) {
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010d27d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d280:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d283:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d286:	75 c1                	jne    c010d249 <check_devname_conflict+0x15>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
        if (strcmp(vdev->devname, devname) == 0) {
            return 0;
        }
    }
    return 1;
c010d288:	b8 01 00 00 00       	mov    $0x1,%eax
}
c010d28d:	c9                   	leave  
c010d28e:	c3                   	ret    

c010d28f <vfs_do_add>:
* If "mountable" is set, the device will be treated as one that expects
* to have a filesystem mounted on it, and a raw device will be created
* for direct access.
*/
static int
vfs_do_add(const char *devname, struct inode *devnode, struct fs *fs, bool mountable) {
c010d28f:	55                   	push   %ebp
c010d290:	89 e5                	mov    %esp,%ebp
c010d292:	83 ec 38             	sub    $0x38,%esp
    assert(devname != NULL);
c010d295:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d299:	75 19                	jne    c010d2b4 <vfs_do_add+0x25>
c010d29b:	68 a0 5a 11 c0       	push   $0xc0115aa0
c010d2a0:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d2a5:	68 8e 00 00 00       	push   $0x8e
c010d2aa:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d2af:	e8 31 32 ff ff       	call   c01004e5 <__panic>
    assert((devnode == NULL && !mountable) || (devnode != NULL && check_inode_type(devnode, device)));
c010d2b4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d2b8:	75 06                	jne    c010d2c0 <vfs_do_add+0x31>
c010d2ba:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010d2be:	74 2c                	je     c010d2ec <vfs_do_add+0x5d>
c010d2c0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010d2c4:	74 0d                	je     c010d2d3 <vfs_do_add+0x44>
c010d2c6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d2c9:	8b 40 2c             	mov    0x2c(%eax),%eax
c010d2cc:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010d2d1:	74 19                	je     c010d2ec <vfs_do_add+0x5d>
c010d2d3:	68 e8 5a 11 c0       	push   $0xc0115ae8
c010d2d8:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d2dd:	68 8f 00 00 00       	push   $0x8f
c010d2e2:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d2e7:	e8 f9 31 ff ff       	call   c01004e5 <__panic>
    if (strlen(devname) > FS_MAX_DNAME_LEN) {
c010d2ec:	83 ec 0c             	sub    $0xc,%esp
c010d2ef:	ff 75 08             	pushl  0x8(%ebp)
c010d2f2:	e8 b4 4d 00 00       	call   c01120ab <strlen>
c010d2f7:	83 c4 10             	add    $0x10,%esp
c010d2fa:	83 f8 1f             	cmp    $0x1f,%eax
c010d2fd:	76 0a                	jbe    c010d309 <vfs_do_add+0x7a>
        return -E_TOO_BIG;
c010d2ff:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
c010d304:	e9 0d 01 00 00       	jmp    c010d416 <vfs_do_add+0x187>
    }

    int ret = -E_NO_MEM;
c010d309:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    char *s_devname;
    if ((s_devname = strdup(devname)) == NULL) {
c010d310:	83 ec 0c             	sub    $0xc,%esp
c010d313:	ff 75 08             	pushl  0x8(%ebp)
c010d316:	e8 2c 2f ff ff       	call   c0100247 <strdup>
c010d31b:	83 c4 10             	add    $0x10,%esp
c010d31e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d321:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d325:	75 08                	jne    c010d32f <vfs_do_add+0xa0>
        return ret;
c010d327:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d32a:	e9 e7 00 00 00       	jmp    c010d416 <vfs_do_add+0x187>
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
c010d32f:	83 ec 0c             	sub    $0xc,%esp
c010d332:	6a 18                	push   $0x18
c010d334:	e8 0b 9b ff ff       	call   c0106e44 <kmalloc>
c010d339:	83 c4 10             	add    $0x10,%esp
c010d33c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d33f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d343:	0f 84 bb 00 00 00    	je     c010d404 <vfs_do_add+0x175>
        goto failed_cleanup_name;
    }

    ret = -E_EXISTS;
c010d349:	c7 45 f4 e9 ff ff ff 	movl   $0xffffffe9,-0xc(%ebp)
    lock_vdev_list();
c010d350:	e8 78 fc ff ff       	call   c010cfcd <lock_vdev_list>
    if (!check_devname_conflict(s_devname)) {
c010d355:	83 ec 0c             	sub    $0xc,%esp
c010d358:	ff 75 f0             	pushl  -0x10(%ebp)
c010d35b:	e8 d4 fe ff ff       	call   c010d234 <check_devname_conflict>
c010d360:	83 c4 10             	add    $0x10,%esp
c010d363:	85 c0                	test   %eax,%eax
c010d365:	75 19                	jne    c010d380 <vfs_do_add+0xf1>
        unlock_vdev_list();
c010d367:	e8 7a fc ff ff       	call   c010cfe6 <unlock_vdev_list>
        goto failed_cleanup_vdev;
c010d36c:	90                   	nop
    list_add(&vdev_list, &(vdev->vdev_link));
    unlock_vdev_list();
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
c010d36d:	83 ec 0c             	sub    $0xc,%esp
c010d370:	ff 75 ec             	pushl  -0x14(%ebp)
c010d373:	e8 e4 9a ff ff       	call   c0106e5c <kfree>
c010d378:	83 c4 10             	add    $0x10,%esp
c010d37b:	e9 85 00 00 00       	jmp    c010d405 <vfs_do_add+0x176>
    lock_vdev_list();
    if (!check_devname_conflict(s_devname)) {
        unlock_vdev_list();
        goto failed_cleanup_vdev;
    }
    vdev->devname = s_devname;
c010d380:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d383:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d386:	89 10                	mov    %edx,(%eax)
    vdev->devnode = devnode;
c010d388:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d38b:	8b 55 0c             	mov    0xc(%ebp),%edx
c010d38e:	89 50 04             	mov    %edx,0x4(%eax)
    vdev->mountable = mountable;
c010d391:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d394:	8b 55 14             	mov    0x14(%ebp),%edx
c010d397:	89 50 0c             	mov    %edx,0xc(%eax)
    vdev->fs = fs;
c010d39a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d39d:	8b 55 10             	mov    0x10(%ebp),%edx
c010d3a0:	89 50 08             	mov    %edx,0x8(%eax)

    list_add(&vdev_list, &(vdev->vdev_link));
c010d3a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d3a6:	83 c0 10             	add    $0x10,%eax
c010d3a9:	c7 45 e8 b8 10 15 c0 	movl   $0xc01510b8,-0x18(%ebp)
c010d3b0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d3b3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d3b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010d3b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010d3bc:	89 45 dc             	mov    %eax,-0x24(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010d3bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d3c2:	8b 40 04             	mov    0x4(%eax),%eax
c010d3c5:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010d3c8:	89 55 d8             	mov    %edx,-0x28(%ebp)
c010d3cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010d3ce:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c010d3d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010d3d4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d3d7:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010d3da:	89 10                	mov    %edx,(%eax)
c010d3dc:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010d3df:	8b 10                	mov    (%eax),%edx
c010d3e1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010d3e4:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010d3e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d3ea:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010d3ed:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010d3f0:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010d3f3:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c010d3f6:	89 10                	mov    %edx,(%eax)
    unlock_vdev_list();
c010d3f8:	e8 e9 fb ff ff       	call   c010cfe6 <unlock_vdev_list>
    return 0;
c010d3fd:	b8 00 00 00 00       	mov    $0x0,%eax
c010d402:	eb 12                	jmp    c010d416 <vfs_do_add+0x187>
        return ret;
    }

    vfs_dev_t *vdev;
    if ((vdev = kmalloc(sizeof(vfs_dev_t))) == NULL) {
        goto failed_cleanup_name;
c010d404:	90                   	nop
    return 0;

failed_cleanup_vdev:
    kfree(vdev);
failed_cleanup_name:
    kfree(s_devname);
c010d405:	83 ec 0c             	sub    $0xc,%esp
c010d408:	ff 75 f0             	pushl  -0x10(%ebp)
c010d40b:	e8 4c 9a ff ff       	call   c0106e5c <kfree>
c010d410:	83 c4 10             	add    $0x10,%esp
    return ret;
c010d413:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d416:	c9                   	leave  
c010d417:	c3                   	ret    

c010d418 <vfs_add_fs>:
/*
 * vfs_add_fs - Add a new fs,  by name. See  vfs_do_add information for the description of
 *              mountable.
 */
int
vfs_add_fs(const char *devname, struct fs *fs) {
c010d418:	55                   	push   %ebp
c010d419:	89 e5                	mov    %esp,%ebp
c010d41b:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, NULL, fs, 0);
c010d41e:	6a 00                	push   $0x0
c010d420:	ff 75 0c             	pushl  0xc(%ebp)
c010d423:	6a 00                	push   $0x0
c010d425:	ff 75 08             	pushl  0x8(%ebp)
c010d428:	e8 62 fe ff ff       	call   c010d28f <vfs_do_add>
c010d42d:	83 c4 10             	add    $0x10,%esp
}
c010d430:	c9                   	leave  
c010d431:	c3                   	ret    

c010d432 <vfs_add_dev>:
/*
 * vfs_add_dev - Add a new device, by name. See  vfs_do_add information for the description of
 *               mountable.
 */
int
vfs_add_dev(const char *devname, struct inode *devnode, bool mountable) {
c010d432:	55                   	push   %ebp
c010d433:	89 e5                	mov    %esp,%ebp
c010d435:	83 ec 08             	sub    $0x8,%esp
    return vfs_do_add(devname, devnode, NULL, mountable);
c010d438:	ff 75 10             	pushl  0x10(%ebp)
c010d43b:	6a 00                	push   $0x0
c010d43d:	ff 75 0c             	pushl  0xc(%ebp)
c010d440:	ff 75 08             	pushl  0x8(%ebp)
c010d443:	e8 47 fe ff ff       	call   c010d28f <vfs_do_add>
c010d448:	83 c4 10             	add    $0x10,%esp
}
c010d44b:	c9                   	leave  
c010d44c:	c3                   	ret    

c010d44d <find_mount>:
/*
 * find_mount - Look for a mountable device named DEVNAME.
 *              Should already hold vdev_list lock.
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
c010d44d:	55                   	push   %ebp
c010d44e:	89 e5                	mov    %esp,%ebp
c010d450:	83 ec 18             	sub    $0x18,%esp
    assert(devname != NULL);
c010d453:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d457:	75 19                	jne    c010d472 <find_mount+0x25>
c010d459:	68 a0 5a 11 c0       	push   $0xc0115aa0
c010d45e:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d463:	68 cd 00 00 00       	push   $0xcd
c010d468:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d46d:	e8 73 30 ff ff       	call   c01004e5 <__panic>
    list_entry_t *list = &vdev_list, *le = list;
c010d472:	c7 45 f0 b8 10 15 c0 	movl   $0xc01510b8,-0x10(%ebp)
c010d479:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d47c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010d47f:	eb 3a                	jmp    c010d4bb <find_mount+0x6e>
        vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d481:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d484:	83 e8 10             	sub    $0x10,%eax
c010d487:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
c010d48a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d48d:	8b 40 0c             	mov    0xc(%eax),%eax
c010d490:	85 c0                	test   %eax,%eax
c010d492:	74 27                	je     c010d4bb <find_mount+0x6e>
c010d494:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d497:	8b 00                	mov    (%eax),%eax
c010d499:	83 ec 08             	sub    $0x8,%esp
c010d49c:	ff 75 08             	pushl  0x8(%ebp)
c010d49f:	50                   	push   %eax
c010d4a0:	e8 01 4d 00 00       	call   c01121a6 <strcmp>
c010d4a5:	83 c4 10             	add    $0x10,%esp
c010d4a8:	85 c0                	test   %eax,%eax
c010d4aa:	75 0f                	jne    c010d4bb <find_mount+0x6e>
            *vdev_store = vdev;
c010d4ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d4af:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010d4b2:	89 10                	mov    %edx,(%eax)
            return 0;
c010d4b4:	b8 00 00 00 00       	mov    $0x0,%eax
c010d4b9:	eb 1c                	jmp    c010d4d7 <find_mount+0x8a>
c010d4bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4be:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d4c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d4c4:	8b 40 04             	mov    0x4(%eax),%eax
 */
static int
find_mount(const char *devname, vfs_dev_t **vdev_store) {
    assert(devname != NULL);
    list_entry_t *list = &vdev_list, *le = list;
    while ((le = list_next(le)) != list) {
c010d4c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d4cd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010d4d0:	75 af                	jne    c010d481 <find_mount+0x34>
        if (vdev->mountable && strcmp(vdev->devname, devname) == 0) {
            *vdev_store = vdev;
            return 0;
        }
    }
    return -E_NO_DEV;
c010d4d2:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
c010d4d7:	c9                   	leave  
c010d4d8:	c3                   	ret    

c010d4d9 <vfs_mount>:
 *             set up the filesystem and hand back a struct fs.
 *
 * The DATA argument is passed through unchanged to MOUNTFUNC.
 */
int
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
c010d4d9:	55                   	push   %ebp
c010d4da:	89 e5                	mov    %esp,%ebp
c010d4dc:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010d4df:	e8 e9 fa ff ff       	call   c010cfcd <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010d4e4:	83 ec 08             	sub    $0x8,%esp
c010d4e7:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010d4ea:	50                   	push   %eax
c010d4eb:	ff 75 08             	pushl  0x8(%ebp)
c010d4ee:	e8 5a ff ff ff       	call   c010d44d <find_mount>
c010d4f3:	83 c4 10             	add    $0x10,%esp
c010d4f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d4f9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d4fd:	0f 85 d6 00 00 00    	jne    c010d5d9 <vfs_mount+0x100>
        goto out;
    }
    if (vdev->fs != NULL) {
c010d503:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d506:	8b 40 08             	mov    0x8(%eax),%eax
c010d509:	85 c0                	test   %eax,%eax
c010d50b:	74 0c                	je     c010d519 <vfs_mount+0x40>
        ret = -E_BUSY;
c010d50d:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
        goto out;
c010d514:	e9 c1 00 00 00       	jmp    c010d5da <vfs_mount+0x101>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010d519:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d51c:	8b 00                	mov    (%eax),%eax
c010d51e:	85 c0                	test   %eax,%eax
c010d520:	74 0a                	je     c010d52c <vfs_mount+0x53>
c010d522:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d525:	8b 40 0c             	mov    0xc(%eax),%eax
c010d528:	85 c0                	test   %eax,%eax
c010d52a:	75 19                	jne    c010d545 <vfs_mount+0x6c>
c010d52c:	68 44 5b 11 c0       	push   $0xc0115b44
c010d531:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d536:	68 eb 00 00 00       	push   $0xeb
c010d53b:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d540:	e8 a0 2f ff ff       	call   c01004e5 <__panic>

    struct device *dev = vop_info(vdev->devnode, device);
c010d545:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d548:	8b 40 04             	mov    0x4(%eax),%eax
c010d54b:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d54e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d552:	74 0d                	je     c010d561 <vfs_mount+0x88>
c010d554:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d557:	8b 40 2c             	mov    0x2c(%eax),%eax
c010d55a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010d55f:	74 19                	je     c010d57a <vfs_mount+0xa1>
c010d561:	68 70 5b 11 c0       	push   $0xc0115b70
c010d566:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d56b:	68 ed 00 00 00       	push   $0xed
c010d570:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d575:	e8 6b 2f ff ff       	call   c01004e5 <__panic>
c010d57a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d57d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if ((ret = mountfunc(dev, &(vdev->fs))) == 0) {
c010d580:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d583:	83 c0 08             	add    $0x8,%eax
c010d586:	83 ec 08             	sub    $0x8,%esp
c010d589:	50                   	push   %eax
c010d58a:	ff 75 ec             	pushl  -0x14(%ebp)
c010d58d:	8b 45 0c             	mov    0xc(%ebp),%eax
c010d590:	ff d0                	call   *%eax
c010d592:	83 c4 10             	add    $0x10,%esp
c010d595:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d598:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d59c:	75 3c                	jne    c010d5da <vfs_mount+0x101>
        assert(vdev->fs != NULL);
c010d59e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5a1:	8b 40 08             	mov    0x8(%eax),%eax
c010d5a4:	85 c0                	test   %eax,%eax
c010d5a6:	75 19                	jne    c010d5c1 <vfs_mount+0xe8>
c010d5a8:	68 a3 5b 11 c0       	push   $0xc0115ba3
c010d5ad:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d5b2:	68 ef 00 00 00       	push   $0xef
c010d5b7:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d5bc:	e8 24 2f ff ff       	call   c01004e5 <__panic>
        cprintf("vfs: mount %s.\n", vdev->devname);
c010d5c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d5c4:	8b 00                	mov    (%eax),%eax
c010d5c6:	83 ec 08             	sub    $0x8,%esp
c010d5c9:	50                   	push   %eax
c010d5ca:	68 b4 5b 11 c0       	push   $0xc0115bb4
c010d5cf:	e8 ab 2d ff ff       	call   c010037f <cprintf>
c010d5d4:	83 c4 10             	add    $0x10,%esp
c010d5d7:	eb 01                	jmp    c010d5da <vfs_mount+0x101>
vfs_mount(const char *devname, int (*mountfunc)(struct device *dev, struct fs **fs_store)) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010d5d9:	90                   	nop
        assert(vdev->fs != NULL);
        cprintf("vfs: mount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010d5da:	e8 07 fa ff ff       	call   c010cfe6 <unlock_vdev_list>
    return ret;
c010d5df:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d5e2:	c9                   	leave  
c010d5e3:	c3                   	ret    

c010d5e4 <vfs_unmount>:
/*
 * vfs_unmount - Unmount a filesystem/device by name.
 *               First calls FSOP_SYNC on the filesystem; then calls FSOP_UNMOUNT.
 */
int
vfs_unmount(const char *devname) {
c010d5e4:	55                   	push   %ebp
c010d5e5:	89 e5                	mov    %esp,%ebp
c010d5e7:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_vdev_list();
c010d5ea:	e8 de f9 ff ff       	call   c010cfcd <lock_vdev_list>
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
c010d5ef:	83 ec 08             	sub    $0x8,%esp
c010d5f2:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d5f5:	50                   	push   %eax
c010d5f6:	ff 75 08             	pushl  0x8(%ebp)
c010d5f9:	e8 4f fe ff ff       	call   c010d44d <find_mount>
c010d5fe:	83 c4 10             	add    $0x10,%esp
c010d601:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d604:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d608:	0f 85 a6 00 00 00    	jne    c010d6b4 <vfs_unmount+0xd0>
        goto out;
    }
    if (vdev->fs == NULL) {
c010d60e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d611:	8b 40 08             	mov    0x8(%eax),%eax
c010d614:	85 c0                	test   %eax,%eax
c010d616:	75 0c                	jne    c010d624 <vfs_unmount+0x40>
        ret = -E_INVAL;
c010d618:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)
        goto out;
c010d61f:	e9 94 00 00 00       	jmp    c010d6b8 <vfs_unmount+0xd4>
    }
    assert(vdev->devname != NULL && vdev->mountable);
c010d624:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d627:	8b 00                	mov    (%eax),%eax
c010d629:	85 c0                	test   %eax,%eax
c010d62b:	74 0a                	je     c010d637 <vfs_unmount+0x53>
c010d62d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d630:	8b 40 0c             	mov    0xc(%eax),%eax
c010d633:	85 c0                	test   %eax,%eax
c010d635:	75 19                	jne    c010d650 <vfs_unmount+0x6c>
c010d637:	68 44 5b 11 c0       	push   $0xc0115b44
c010d63c:	68 b0 5a 11 c0       	push   $0xc0115ab0
c010d641:	68 08 01 00 00       	push   $0x108
c010d646:	68 c5 5a 11 c0       	push   $0xc0115ac5
c010d64b:	e8 95 2e ff ff       	call   c01004e5 <__panic>

    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010d650:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d653:	8b 40 08             	mov    0x8(%eax),%eax
c010d656:	8b 40 70             	mov    0x70(%eax),%eax
c010d659:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d65c:	8b 52 08             	mov    0x8(%edx),%edx
c010d65f:	83 ec 0c             	sub    $0xc,%esp
c010d662:	52                   	push   %edx
c010d663:	ff d0                	call   *%eax
c010d665:	83 c4 10             	add    $0x10,%esp
c010d668:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d66b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d66f:	75 46                	jne    c010d6b7 <vfs_unmount+0xd3>
        goto out;
    }
    if ((ret = fsop_unmount(vdev->fs)) == 0) {
c010d671:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d674:	8b 40 08             	mov    0x8(%eax),%eax
c010d677:	8b 40 78             	mov    0x78(%eax),%eax
c010d67a:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010d67d:	8b 52 08             	mov    0x8(%edx),%edx
c010d680:	83 ec 0c             	sub    $0xc,%esp
c010d683:	52                   	push   %edx
c010d684:	ff d0                	call   *%eax
c010d686:	83 c4 10             	add    $0x10,%esp
c010d689:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d68c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d690:	75 26                	jne    c010d6b8 <vfs_unmount+0xd4>
        vdev->fs = NULL;
c010d692:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d695:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        cprintf("vfs: unmount %s.\n", vdev->devname);
c010d69c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d69f:	8b 00                	mov    (%eax),%eax
c010d6a1:	83 ec 08             	sub    $0x8,%esp
c010d6a4:	50                   	push   %eax
c010d6a5:	68 c4 5b 11 c0       	push   $0xc0115bc4
c010d6aa:	e8 d0 2c ff ff       	call   c010037f <cprintf>
c010d6af:	83 c4 10             	add    $0x10,%esp
c010d6b2:	eb 04                	jmp    c010d6b8 <vfs_unmount+0xd4>
vfs_unmount(const char *devname) {
    int ret;
    lock_vdev_list();
    vfs_dev_t *vdev;
    if ((ret = find_mount(devname, &vdev)) != 0) {
        goto out;
c010d6b4:	90                   	nop
c010d6b5:	eb 01                	jmp    c010d6b8 <vfs_unmount+0xd4>
        goto out;
    }
    assert(vdev->devname != NULL && vdev->mountable);

    if ((ret = fsop_sync(vdev->fs)) != 0) {
        goto out;
c010d6b7:	90                   	nop
        vdev->fs = NULL;
        cprintf("vfs: unmount %s.\n", vdev->devname);
    }

out:
    unlock_vdev_list();
c010d6b8:	e8 29 f9 ff ff       	call   c010cfe6 <unlock_vdev_list>
    return ret;
c010d6bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d6c0:	c9                   	leave  
c010d6c1:	c3                   	ret    

c010d6c2 <vfs_unmount_all>:

/*
 * vfs_unmount_all - Global unmount function.
 */
int
vfs_unmount_all(void) {
c010d6c2:	55                   	push   %ebp
c010d6c3:	89 e5                	mov    %esp,%ebp
c010d6c5:	83 ec 28             	sub    $0x28,%esp
c010d6c8:	c7 45 e0 b8 10 15 c0 	movl   $0xc01510b8,-0x20(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c010d6cf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010d6d2:	8b 40 04             	mov    0x4(%eax),%eax
c010d6d5:	39 45 e0             	cmp    %eax,-0x20(%ebp)
c010d6d8:	0f 94 c0             	sete   %al
c010d6db:	0f b6 c0             	movzbl %al,%eax
    if (!list_empty(&vdev_list)) {
c010d6de:	85 c0                	test   %eax,%eax
c010d6e0:	0f 85 f4 00 00 00    	jne    c010d7da <vfs_unmount_all+0x118>
        lock_vdev_list();
c010d6e6:	e8 e2 f8 ff ff       	call   c010cfcd <lock_vdev_list>
        {
            list_entry_t *list = &vdev_list, *le = list;
c010d6eb:	c7 45 ec b8 10 15 c0 	movl   $0xc01510b8,-0x14(%ebp)
c010d6f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d6f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
            while ((le = list_next(le)) != list) {
c010d6f8:	e9 bd 00 00 00       	jmp    c010d7ba <vfs_unmount_all+0xf8>
                vfs_dev_t *vdev = le2vdev(le, vdev_link);
c010d6fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d700:	83 e8 10             	sub    $0x10,%eax
c010d703:	89 45 e8             	mov    %eax,-0x18(%ebp)
                if (vdev->mountable && vdev->fs != NULL) {
c010d706:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d709:	8b 40 0c             	mov    0xc(%eax),%eax
c010d70c:	85 c0                	test   %eax,%eax
c010d70e:	0f 84 a6 00 00 00    	je     c010d7ba <vfs_unmount_all+0xf8>
c010d714:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d717:	8b 40 08             	mov    0x8(%eax),%eax
c010d71a:	85 c0                	test   %eax,%eax
c010d71c:	0f 84 98 00 00 00    	je     c010d7ba <vfs_unmount_all+0xf8>
                    int ret;
                    if ((ret = fsop_sync(vdev->fs)) != 0) {
c010d722:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d725:	8b 40 08             	mov    0x8(%eax),%eax
c010d728:	8b 40 70             	mov    0x70(%eax),%eax
c010d72b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d72e:	8b 52 08             	mov    0x8(%edx),%edx
c010d731:	83 ec 0c             	sub    $0xc,%esp
c010d734:	52                   	push   %edx
c010d735:	ff d0                	call   *%eax
c010d737:	83 c4 10             	add    $0x10,%esp
c010d73a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d73d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d741:	74 1b                	je     c010d75e <vfs_unmount_all+0x9c>
                        cprintf("vfs: warning: sync failed for %s: %e.\n", vdev->devname, ret);
c010d743:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d746:	8b 00                	mov    (%eax),%eax
c010d748:	83 ec 04             	sub    $0x4,%esp
c010d74b:	ff 75 e4             	pushl  -0x1c(%ebp)
c010d74e:	50                   	push   %eax
c010d74f:	68 d8 5b 11 c0       	push   $0xc0115bd8
c010d754:	e8 26 2c ff ff       	call   c010037f <cprintf>
c010d759:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010d75c:	eb 5c                	jmp    c010d7ba <vfs_unmount_all+0xf8>
                    }
                    if ((ret = fsop_unmount(vdev->fs)) != 0) {
c010d75e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d761:	8b 40 08             	mov    0x8(%eax),%eax
c010d764:	8b 40 78             	mov    0x78(%eax),%eax
c010d767:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010d76a:	8b 52 08             	mov    0x8(%edx),%edx
c010d76d:	83 ec 0c             	sub    $0xc,%esp
c010d770:	52                   	push   %edx
c010d771:	ff d0                	call   *%eax
c010d773:	83 c4 10             	add    $0x10,%esp
c010d776:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010d779:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010d77d:	74 1b                	je     c010d79a <vfs_unmount_all+0xd8>
                        cprintf("vfs: warning: unmount failed for %s: %e.\n", vdev->devname, ret);
c010d77f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d782:	8b 00                	mov    (%eax),%eax
c010d784:	83 ec 04             	sub    $0x4,%esp
c010d787:	ff 75 e4             	pushl  -0x1c(%ebp)
c010d78a:	50                   	push   %eax
c010d78b:	68 00 5c 11 c0       	push   $0xc0115c00
c010d790:	e8 ea 2b ff ff       	call   c010037f <cprintf>
c010d795:	83 c4 10             	add    $0x10,%esp
                        continue ;
c010d798:	eb 20                	jmp    c010d7ba <vfs_unmount_all+0xf8>
                    }
                    vdev->fs = NULL;
c010d79a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d79d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                    cprintf("vfs: unmount %s.\n", vdev->devname);
c010d7a4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d7a7:	8b 00                	mov    (%eax),%eax
c010d7a9:	83 ec 08             	sub    $0x8,%esp
c010d7ac:	50                   	push   %eax
c010d7ad:	68 c4 5b 11 c0       	push   $0xc0115bc4
c010d7b2:	e8 c8 2b ff ff       	call   c010037f <cprintf>
c010d7b7:	83 c4 10             	add    $0x10,%esp
c010d7ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010d7c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d7c3:	8b 40 04             	mov    0x4(%eax),%eax
vfs_unmount_all(void) {
    if (!list_empty(&vdev_list)) {
        lock_vdev_list();
        {
            list_entry_t *list = &vdev_list, *le = list;
            while ((le = list_next(le)) != list) {
c010d7c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d7c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d7cc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c010d7cf:	0f 85 28 ff ff ff    	jne    c010d6fd <vfs_unmount_all+0x3b>
                    vdev->fs = NULL;
                    cprintf("vfs: unmount %s.\n", vdev->devname);
                }
            }
        }
        unlock_vdev_list();
c010d7d5:	e8 0c f8 ff ff       	call   c010cfe6 <unlock_vdev_list>
    }
    return 0;
c010d7da:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010d7df:	c9                   	leave  
c010d7e0:	c3                   	ret    

c010d7e1 <get_cwd_nolock>:

/*
 * get_cwd_nolock - retrieve current process's working directory. without lock protect
 */
static struct inode *
get_cwd_nolock(void) {
c010d7e1:	55                   	push   %ebp
c010d7e2:	89 e5                	mov    %esp,%ebp
    return current->filesp->pwd;
c010d7e4:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010d7e9:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d7ef:	8b 00                	mov    (%eax),%eax
}
c010d7f1:	5d                   	pop    %ebp
c010d7f2:	c3                   	ret    

c010d7f3 <set_cwd_nolock>:
/*
 * set_cwd_nolock - set current working directory.
 */
static void
set_cwd_nolock(struct inode *pwd) {
c010d7f3:	55                   	push   %ebp
c010d7f4:	89 e5                	mov    %esp,%ebp
    current->filesp->pwd = pwd;
c010d7f6:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010d7fb:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d801:	8b 55 08             	mov    0x8(%ebp),%edx
c010d804:	89 10                	mov    %edx,(%eax)
}
c010d806:	90                   	nop
c010d807:	5d                   	pop    %ebp
c010d808:	c3                   	ret    

c010d809 <lock_cfs>:

/*
 * lock_cfs - lock the fs related process on current process 
 */
static void
lock_cfs(void) {
c010d809:	55                   	push   %ebp
c010d80a:	89 e5                	mov    %esp,%ebp
c010d80c:	83 ec 08             	sub    $0x8,%esp
    lock_files(current->filesp);
c010d80f:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010d814:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d81a:	83 ec 0c             	sub    $0xc,%esp
c010d81d:	50                   	push   %eax
c010d81e:	e8 f8 cf ff ff       	call   c010a81b <lock_files>
c010d823:	83 c4 10             	add    $0x10,%esp
}
c010d826:	90                   	nop
c010d827:	c9                   	leave  
c010d828:	c3                   	ret    

c010d829 <unlock_cfs>:
/*
 * unlock_cfs - unlock the fs related process on current process 
 */
static void
unlock_cfs(void) {
c010d829:	55                   	push   %ebp
c010d82a:	89 e5                	mov    %esp,%ebp
c010d82c:	83 ec 08             	sub    $0x8,%esp
    unlock_files(current->filesp);
c010d82f:	a1 28 f0 14 c0       	mov    0xc014f028,%eax
c010d834:	8b 80 c4 00 00 00    	mov    0xc4(%eax),%eax
c010d83a:	83 ec 0c             	sub    $0xc,%esp
c010d83d:	50                   	push   %eax
c010d83e:	e8 f3 cf ff ff       	call   c010a836 <unlock_files>
c010d843:	83 c4 10             	add    $0x10,%esp
}
c010d846:	90                   	nop
c010d847:	c9                   	leave  
c010d848:	c3                   	ret    

c010d849 <vfs_get_curdir>:

/*
 *  vfs_get_curdir - Get current directory as a inode.
 */
int
vfs_get_curdir(struct inode **dir_store) {
c010d849:	55                   	push   %ebp
c010d84a:	89 e5                	mov    %esp,%ebp
c010d84c:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = get_cwd_nolock()) != NULL) {
c010d84f:	e8 8d ff ff ff       	call   c010d7e1 <get_cwd_nolock>
c010d854:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d857:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d85b:	74 1d                	je     c010d87a <vfs_get_curdir+0x31>
        vop_ref_inc(node);
c010d85d:	83 ec 0c             	sub    $0xc,%esp
c010d860:	ff 75 f4             	pushl  -0xc(%ebp)
c010d863:	e8 2c 09 00 00       	call   c010e194 <inode_ref_inc>
c010d868:	83 c4 10             	add    $0x10,%esp
        *dir_store = node;
c010d86b:	8b 45 08             	mov    0x8(%ebp),%eax
c010d86e:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010d871:	89 10                	mov    %edx,(%eax)
        return 0;
c010d873:	b8 00 00 00 00       	mov    $0x0,%eax
c010d878:	eb 05                	jmp    c010d87f <vfs_get_curdir+0x36>
    }
    return -E_NOENT;
c010d87a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c010d87f:	c9                   	leave  
c010d880:	c3                   	ret    

c010d881 <vfs_set_curdir>:
/*
 * vfs_set_curdir - Set current directory as a inode.
 *                  The passed inode must in fact be a directory.
 */
int
vfs_set_curdir(struct inode *dir) {
c010d881:	55                   	push   %ebp
c010d882:	89 e5                	mov    %esp,%ebp
c010d884:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c010d887:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_cfs();
c010d88e:	e8 76 ff ff ff       	call   c010d809 <lock_cfs>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
c010d893:	e8 49 ff ff ff       	call   c010d7e1 <get_cwd_nolock>
c010d898:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010d89b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d89e:	3b 45 08             	cmp    0x8(%ebp),%eax
c010d8a1:	0f 84 c3 00 00 00    	je     c010d96a <vfs_set_curdir+0xe9>
        if (dir != NULL) {
c010d8a7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010d8ab:	0f 84 94 00 00 00    	je     c010d945 <vfs_set_curdir+0xc4>
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
c010d8b1:	8b 45 08             	mov    0x8(%ebp),%eax
c010d8b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010d8b7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010d8bb:	74 17                	je     c010d8d4 <vfs_set_curdir+0x53>
c010d8bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8c0:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d8c3:	85 c0                	test   %eax,%eax
c010d8c5:	74 0d                	je     c010d8d4 <vfs_set_curdir+0x53>
c010d8c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d8ca:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d8cd:	8b 40 28             	mov    0x28(%eax),%eax
c010d8d0:	85 c0                	test   %eax,%eax
c010d8d2:	75 16                	jne    c010d8ea <vfs_set_curdir+0x69>
c010d8d4:	68 2c 5c 11 c0       	push   $0xc0115c2c
c010d8d9:	68 7c 5c 11 c0       	push   $0xc0115c7c
c010d8de:	6a 43                	push   $0x43
c010d8e0:	68 91 5c 11 c0       	push   $0xc0115c91
c010d8e5:	e8 fb 2b ff ff       	call   c01004e5 <__panic>
c010d8ea:	83 ec 08             	sub    $0x8,%esp
c010d8ed:	68 a7 5c 11 c0       	push   $0xc0115ca7
c010d8f2:	ff 75 ec             	pushl  -0x14(%ebp)
c010d8f5:	e8 6c 0a 00 00       	call   c010e366 <inode_check>
c010d8fa:	83 c4 10             	add    $0x10,%esp
c010d8fd:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010d900:	8b 40 3c             	mov    0x3c(%eax),%eax
c010d903:	8b 40 28             	mov    0x28(%eax),%eax
c010d906:	83 ec 08             	sub    $0x8,%esp
c010d909:	8d 55 e8             	lea    -0x18(%ebp),%edx
c010d90c:	52                   	push   %edx
c010d90d:	ff 75 08             	pushl  0x8(%ebp)
c010d910:	ff d0                	call   *%eax
c010d912:	83 c4 10             	add    $0x10,%esp
c010d915:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d918:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d91c:	75 4b                	jne    c010d969 <vfs_set_curdir+0xe8>
                goto out;
            }
            if (!S_ISDIR(type)) {
c010d91e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d921:	25 00 70 00 00       	and    $0x7000,%eax
c010d926:	3d 00 20 00 00       	cmp    $0x2000,%eax
c010d92b:	74 0a                	je     c010d937 <vfs_set_curdir+0xb6>
                ret = -E_NOTDIR;
c010d92d:	c7 45 f4 ee ff ff ff 	movl   $0xffffffee,-0xc(%ebp)
                goto out;
c010d934:	90                   	nop
c010d935:	eb 33                	jmp    c010d96a <vfs_set_curdir+0xe9>
            }
            vop_ref_inc(dir);
c010d937:	83 ec 0c             	sub    $0xc,%esp
c010d93a:	ff 75 08             	pushl  0x8(%ebp)
c010d93d:	e8 52 08 00 00       	call   c010e194 <inode_ref_inc>
c010d942:	83 c4 10             	add    $0x10,%esp
        }
        set_cwd_nolock(dir);
c010d945:	83 ec 0c             	sub    $0xc,%esp
c010d948:	ff 75 08             	pushl  0x8(%ebp)
c010d94b:	e8 a3 fe ff ff       	call   c010d7f3 <set_cwd_nolock>
c010d950:	83 c4 10             	add    $0x10,%esp
        if (old_dir != NULL) {
c010d953:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010d957:	74 11                	je     c010d96a <vfs_set_curdir+0xe9>
            vop_ref_dec(old_dir);
c010d959:	83 ec 0c             	sub    $0xc,%esp
c010d95c:	ff 75 f0             	pushl  -0x10(%ebp)
c010d95f:	e8 4a 08 00 00       	call   c010e1ae <inode_ref_dec>
c010d964:	83 c4 10             	add    $0x10,%esp
c010d967:	eb 01                	jmp    c010d96a <vfs_set_curdir+0xe9>
    struct inode *old_dir;
    if ((old_dir = get_cwd_nolock()) != dir) {
        if (dir != NULL) {
            uint32_t type;
            if ((ret = vop_gettype(dir, &type)) != 0) {
                goto out;
c010d969:	90                   	nop
        if (old_dir != NULL) {
            vop_ref_dec(old_dir);
        }
    }
out:
    unlock_cfs();
c010d96a:	e8 ba fe ff ff       	call   c010d829 <unlock_cfs>
    return ret;
c010d96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d972:	c9                   	leave  
c010d973:	c3                   	ret    

c010d974 <vfs_chdir>:
/*
 * vfs_chdir - Set current directory, as a pathname. Use vfs_lookup to translate
 *             it to a inode.
 */
int
vfs_chdir(char *path) {
c010d974:	55                   	push   %ebp
c010d975:	89 e5                	mov    %esp,%ebp
c010d977:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_lookup(path, &node)) == 0) {
c010d97a:	83 ec 08             	sub    $0x8,%esp
c010d97d:	8d 45 f0             	lea    -0x10(%ebp),%eax
c010d980:	50                   	push   %eax
c010d981:	ff 75 08             	pushl  0x8(%ebp)
c010d984:	e8 05 03 00 00       	call   c010dc8e <vfs_lookup>
c010d989:	83 c4 10             	add    $0x10,%esp
c010d98c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d98f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d993:	75 21                	jne    c010d9b6 <vfs_chdir+0x42>
        ret = vfs_set_curdir(node);
c010d995:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d998:	83 ec 0c             	sub    $0xc,%esp
c010d99b:	50                   	push   %eax
c010d99c:	e8 e0 fe ff ff       	call   c010d881 <vfs_set_curdir>
c010d9a1:	83 c4 10             	add    $0x10,%esp
c010d9a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010d9a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010d9aa:	83 ec 0c             	sub    $0xc,%esp
c010d9ad:	50                   	push   %eax
c010d9ae:	e8 fb 07 00 00       	call   c010e1ae <inode_ref_dec>
c010d9b3:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c010d9b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010d9b9:	c9                   	leave  
c010d9ba:	c3                   	ret    

c010d9bb <vfs_getcwd>:
/*
 * vfs_getcwd - retrieve current working directory(cwd).
 */
int
vfs_getcwd(struct iobuf *iob) {
c010d9bb:	55                   	push   %ebp
c010d9bc:	89 e5                	mov    %esp,%ebp
c010d9be:	83 ec 28             	sub    $0x28,%esp
    int ret;
    struct inode *node;
    if ((ret = vfs_get_curdir(&node)) != 0) {
c010d9c1:	83 ec 0c             	sub    $0xc,%esp
c010d9c4:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010d9c7:	50                   	push   %eax
c010d9c8:	e8 7c fe ff ff       	call   c010d849 <vfs_get_curdir>
c010d9cd:	83 c4 10             	add    $0x10,%esp
c010d9d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010d9d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010d9d7:	74 08                	je     c010d9e1 <vfs_getcwd+0x26>
        return ret;
c010d9d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010d9dc:	e9 0a 01 00 00       	jmp    c010daeb <vfs_getcwd+0x130>
    }
    assert(node->in_fs != NULL);
c010d9e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010d9e4:	8b 40 38             	mov    0x38(%eax),%eax
c010d9e7:	85 c0                	test   %eax,%eax
c010d9e9:	75 16                	jne    c010da01 <vfs_getcwd+0x46>
c010d9eb:	68 af 5c 11 c0       	push   $0xc0115caf
c010d9f0:	68 7c 5c 11 c0       	push   $0xc0115c7c
c010d9f5:	6a 6e                	push   $0x6e
c010d9f7:	68 91 5c 11 c0       	push   $0xc0115c91
c010d9fc:	e8 e4 2a ff ff       	call   c01004e5 <__panic>

    const char *devname = vfs_get_devname(node->in_fs);
c010da01:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da04:	8b 40 38             	mov    0x38(%eax),%eax
c010da07:	83 ec 0c             	sub    $0xc,%esp
c010da0a:	50                   	push   %eax
c010da0b:	e8 ba f7 ff ff       	call   c010d1ca <vfs_get_devname>
c010da10:	83 c4 10             	add    $0x10,%esp
c010da13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
c010da16:	83 ec 0c             	sub    $0xc,%esp
c010da19:	ff 75 f0             	pushl  -0x10(%ebp)
c010da1c:	e8 8a 46 00 00       	call   c01120ab <strlen>
c010da21:	83 c4 10             	add    $0x10,%esp
c010da24:	83 ec 0c             	sub    $0xc,%esp
c010da27:	6a 00                	push   $0x0
c010da29:	6a 01                	push   $0x1
c010da2b:	50                   	push   %eax
c010da2c:	ff 75 f0             	pushl  -0x10(%ebp)
c010da2f:	ff 75 08             	pushl  0x8(%ebp)
c010da32:	e8 4c cc ff ff       	call   c010a683 <iobuf_move>
c010da37:	83 c4 20             	add    $0x20,%esp
c010da3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da3d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da41:	0f 85 8e 00 00 00    	jne    c010dad5 <vfs_getcwd+0x11a>
        goto out;
    }
    char colon = ':';
c010da47:	c6 45 e7 3a          	movb   $0x3a,-0x19(%ebp)
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
c010da4b:	83 ec 0c             	sub    $0xc,%esp
c010da4e:	6a 00                	push   $0x0
c010da50:	6a 01                	push   $0x1
c010da52:	6a 01                	push   $0x1
c010da54:	8d 45 e7             	lea    -0x19(%ebp),%eax
c010da57:	50                   	push   %eax
c010da58:	ff 75 08             	pushl  0x8(%ebp)
c010da5b:	e8 23 cc ff ff       	call   c010a683 <iobuf_move>
c010da60:	83 c4 20             	add    $0x20,%esp
c010da63:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010da66:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010da6a:	75 6c                	jne    c010dad8 <vfs_getcwd+0x11d>
        goto out;
    }
    ret = vop_namefile(node, iob);
c010da6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010da6f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010da72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010da76:	74 17                	je     c010da8f <vfs_getcwd+0xd4>
c010da78:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da7b:	8b 40 3c             	mov    0x3c(%eax),%eax
c010da7e:	85 c0                	test   %eax,%eax
c010da80:	74 0d                	je     c010da8f <vfs_getcwd+0xd4>
c010da82:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010da85:	8b 40 3c             	mov    0x3c(%eax),%eax
c010da88:	8b 40 1c             	mov    0x1c(%eax),%eax
c010da8b:	85 c0                	test   %eax,%eax
c010da8d:	75 16                	jne    c010daa5 <vfs_getcwd+0xea>
c010da8f:	68 c4 5c 11 c0       	push   $0xc0115cc4
c010da94:	68 7c 5c 11 c0       	push   $0xc0115c7c
c010da99:	6a 78                	push   $0x78
c010da9b:	68 91 5c 11 c0       	push   $0xc0115c91
c010daa0:	e8 40 2a ff ff       	call   c01004e5 <__panic>
c010daa5:	83 ec 08             	sub    $0x8,%esp
c010daa8:	68 15 5d 11 c0       	push   $0xc0115d15
c010daad:	ff 75 ec             	pushl  -0x14(%ebp)
c010dab0:	e8 b1 08 00 00       	call   c010e366 <inode_check>
c010dab5:	83 c4 10             	add    $0x10,%esp
c010dab8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dabb:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dabe:	8b 40 1c             	mov    0x1c(%eax),%eax
c010dac1:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010dac4:	83 ec 08             	sub    $0x8,%esp
c010dac7:	ff 75 08             	pushl  0x8(%ebp)
c010daca:	52                   	push   %edx
c010dacb:	ff d0                	call   *%eax
c010dacd:	83 c4 10             	add    $0x10,%esp
c010dad0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dad3:	eb 04                	jmp    c010dad9 <vfs_getcwd+0x11e>
    }
    assert(node->in_fs != NULL);

    const char *devname = vfs_get_devname(node->in_fs);
    if ((ret = iobuf_move(iob, (char *)devname, strlen(devname), 1, NULL)) != 0) {
        goto out;
c010dad5:	90                   	nop
c010dad6:	eb 01                	jmp    c010dad9 <vfs_getcwd+0x11e>
    }
    char colon = ':';
    if ((ret = iobuf_move(iob, &colon, sizeof(colon), 1, NULL)) != 0) {
        goto out;
c010dad8:	90                   	nop
    }
    ret = vop_namefile(node, iob);

out:
    vop_ref_dec(node);
c010dad9:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dadc:	83 ec 0c             	sub    $0xc,%esp
c010dadf:	50                   	push   %eax
c010dae0:	e8 c9 06 00 00       	call   c010e1ae <inode_ref_dec>
c010dae5:	83 c4 10             	add    $0x10,%esp
    return ret;
c010dae8:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010daeb:	c9                   	leave  
c010daec:	c3                   	ret    

c010daed <get_device>:
 * get_device- Common code to pull the device name, if any, off the front of a
 *             path and choose the inode to begin the name lookup relative to.
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
c010daed:	55                   	push   %ebp
c010daee:	89 e5                	mov    %esp,%ebp
c010daf0:	83 ec 28             	sub    $0x28,%esp
    int i, slash = -1, colon = -1;
c010daf3:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)
c010dafa:	c7 45 ec ff ff ff ff 	movl   $0xffffffff,-0x14(%ebp)
    for (i = 0; path[i] != '\0'; i ++) {
c010db01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c010db08:	eb 32                	jmp    c010db3c <get_device+0x4f>
        if (path[i] == ':') { colon = i; break; }
c010db0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db0d:	8b 45 08             	mov    0x8(%ebp),%eax
c010db10:	01 d0                	add    %edx,%eax
c010db12:	0f b6 00             	movzbl (%eax),%eax
c010db15:	3c 3a                	cmp    $0x3a,%al
c010db17:	75 08                	jne    c010db21 <get_device+0x34>
c010db19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010db1f:	eb 2a                	jmp    c010db4b <get_device+0x5e>
        if (path[i] == '/') { slash = i; break; }
c010db21:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db24:	8b 45 08             	mov    0x8(%ebp),%eax
c010db27:	01 d0                	add    %edx,%eax
c010db29:	0f b6 00             	movzbl (%eax),%eax
c010db2c:	3c 2f                	cmp    $0x2f,%al
c010db2e:	75 08                	jne    c010db38 <get_device+0x4b>
c010db30:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010db33:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010db36:	eb 13                	jmp    c010db4b <get_device+0x5e>
 */

static int
get_device(char *path, char **subpath, struct inode **node_store) {
    int i, slash = -1, colon = -1;
    for (i = 0; path[i] != '\0'; i ++) {
c010db38:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010db3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010db3f:	8b 45 08             	mov    0x8(%ebp),%eax
c010db42:	01 d0                	add    %edx,%eax
c010db44:	0f b6 00             	movzbl (%eax),%eax
c010db47:	84 c0                	test   %al,%al
c010db49:	75 bf                	jne    c010db0a <get_device+0x1d>
        if (path[i] == ':') { colon = i; break; }
        if (path[i] == '/') { slash = i; break; }
    }
    if (colon < 0 && slash != 0) {
c010db4b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010db4f:	79 21                	jns    c010db72 <get_device+0x85>
c010db51:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010db55:	74 1b                	je     c010db72 <get_device+0x85>
        /* *
         * No colon before a slash, so no device name specified, and the slash isn't leading
         * or is also absent, so this is a relative path or just a bare filename. Start from
         * the current directory, and use the whole thing as the subpath.
         * */
        *subpath = path;
c010db57:	8b 45 0c             	mov    0xc(%ebp),%eax
c010db5a:	8b 55 08             	mov    0x8(%ebp),%edx
c010db5d:	89 10                	mov    %edx,(%eax)
        return vfs_get_curdir(node_store);
c010db5f:	83 ec 0c             	sub    $0xc,%esp
c010db62:	ff 75 10             	pushl  0x10(%ebp)
c010db65:	e8 df fc ff ff       	call   c010d849 <vfs_get_curdir>
c010db6a:	83 c4 10             	add    $0x10,%esp
c010db6d:	e9 1a 01 00 00       	jmp    c010dc8c <get_device+0x19f>
    }
    if (colon > 0) {
c010db72:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010db76:	7e 41                	jle    c010dbb9 <get_device+0xcc>
        /* device:path - get root of device's filesystem */
        path[colon] = '\0';
c010db78:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010db7b:	8b 45 08             	mov    0x8(%ebp),%eax
c010db7e:	01 d0                	add    %edx,%eax
c010db80:	c6 00 00             	movb   $0x0,(%eax)

        /* device:/path - skip slash, treat as device:path */
        while (path[++ colon] == '/');
c010db83:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
c010db87:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010db8a:	8b 45 08             	mov    0x8(%ebp),%eax
c010db8d:	01 d0                	add    %edx,%eax
c010db8f:	0f b6 00             	movzbl (%eax),%eax
c010db92:	3c 2f                	cmp    $0x2f,%al
c010db94:	74 ed                	je     c010db83 <get_device+0x96>
        *subpath = path + colon;
c010db96:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010db99:	8b 45 08             	mov    0x8(%ebp),%eax
c010db9c:	01 c2                	add    %eax,%edx
c010db9e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dba1:	89 10                	mov    %edx,(%eax)
        return vfs_get_root(path, node_store);
c010dba3:	83 ec 08             	sub    $0x8,%esp
c010dba6:	ff 75 10             	pushl  0x10(%ebp)
c010dba9:	ff 75 08             	pushl  0x8(%ebp)
c010dbac:	e8 02 f5 ff ff       	call   c010d0b3 <vfs_get_root>
c010dbb1:	83 c4 10             	add    $0x10,%esp
c010dbb4:	e9 d3 00 00 00       	jmp    c010dc8c <get_device+0x19f>
     * we have either /path or :path
     * /path is a path relative to the root of the "boot filesystem"
     * :path is a path relative to the root of the current filesystem
     * */
    int ret;
    if (*path == '/') {
c010dbb9:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbbc:	0f b6 00             	movzbl (%eax),%eax
c010dbbf:	3c 2f                	cmp    $0x2f,%al
c010dbc1:	75 23                	jne    c010dbe6 <get_device+0xf9>
        if ((ret = vfs_get_bootfs(node_store)) != 0) {
c010dbc3:	83 ec 0c             	sub    $0xc,%esp
c010dbc6:	ff 75 10             	pushl  0x10(%ebp)
c010dbc9:	e8 9f 09 00 00       	call   c010e56d <vfs_get_bootfs>
c010dbce:	83 c4 10             	add    $0x10,%esp
c010dbd1:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dbd4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dbd8:	0f 84 93 00 00 00    	je     c010dc71 <get_device+0x184>
            return ret;
c010dbde:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dbe1:	e9 a6 00 00 00       	jmp    c010dc8c <get_device+0x19f>
        }
    }
    else {
        assert(*path == ':');
c010dbe6:	8b 45 08             	mov    0x8(%ebp),%eax
c010dbe9:	0f b6 00             	movzbl (%eax),%eax
c010dbec:	3c 3a                	cmp    $0x3a,%al
c010dbee:	74 16                	je     c010dc06 <get_device+0x119>
c010dbf0:	68 20 5d 11 c0       	push   $0xc0115d20
c010dbf5:	68 2d 5d 11 c0       	push   $0xc0115d2d
c010dbfa:	6a 33                	push   $0x33
c010dbfc:	68 42 5d 11 c0       	push   $0xc0115d42
c010dc01:	e8 df 28 ff ff       	call   c01004e5 <__panic>
        struct inode *node;
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010dc06:	83 ec 0c             	sub    $0xc,%esp
c010dc09:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c010dc0c:	50                   	push   %eax
c010dc0d:	e8 37 fc ff ff       	call   c010d849 <vfs_get_curdir>
c010dc12:	83 c4 10             	add    $0x10,%esp
c010dc15:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010dc18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010dc1c:	74 05                	je     c010dc23 <get_device+0x136>
            return ret;
c010dc1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dc21:	eb 69                	jmp    c010dc8c <get_device+0x19f>
        }
        /* The current directory may not be a device, so it must have a fs. */
        assert(node->in_fs != NULL);
c010dc23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc26:	8b 40 38             	mov    0x38(%eax),%eax
c010dc29:	85 c0                	test   %eax,%eax
c010dc2b:	75 16                	jne    c010dc43 <get_device+0x156>
c010dc2d:	68 5a 5d 11 c0       	push   $0xc0115d5a
c010dc32:	68 2d 5d 11 c0       	push   $0xc0115d2d
c010dc37:	6a 39                	push   $0x39
c010dc39:	68 42 5d 11 c0       	push   $0xc0115d42
c010dc3e:	e8 a2 28 ff ff       	call   c01004e5 <__panic>
        *node_store = fsop_get_root(node->in_fs);
c010dc43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc46:	8b 40 38             	mov    0x38(%eax),%eax
c010dc49:	8b 40 74             	mov    0x74(%eax),%eax
c010dc4c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010dc4f:	8b 52 38             	mov    0x38(%edx),%edx
c010dc52:	83 ec 0c             	sub    $0xc,%esp
c010dc55:	52                   	push   %edx
c010dc56:	ff d0                	call   *%eax
c010dc58:	83 c4 10             	add    $0x10,%esp
c010dc5b:	89 c2                	mov    %eax,%edx
c010dc5d:	8b 45 10             	mov    0x10(%ebp),%eax
c010dc60:	89 10                	mov    %edx,(%eax)
        vop_ref_dec(node);
c010dc62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010dc65:	83 ec 0c             	sub    $0xc,%esp
c010dc68:	50                   	push   %eax
c010dc69:	e8 40 05 00 00       	call   c010e1ae <inode_ref_dec>
c010dc6e:	83 c4 10             	add    $0x10,%esp
    }

    /* ///... or :/... */
    while (*(++ path) == '/');
c010dc71:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c010dc75:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc78:	0f b6 00             	movzbl (%eax),%eax
c010dc7b:	3c 2f                	cmp    $0x2f,%al
c010dc7d:	74 f2                	je     c010dc71 <get_device+0x184>
    *subpath = path;
c010dc7f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dc82:	8b 55 08             	mov    0x8(%ebp),%edx
c010dc85:	89 10                	mov    %edx,(%eax)
    return 0;
c010dc87:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dc8c:	c9                   	leave  
c010dc8d:	c3                   	ret    

c010dc8e <vfs_lookup>:

/*
 * vfs_lookup - get the inode according to the path filename
 */
int
vfs_lookup(char *path, struct inode **node_store) {
c010dc8e:	55                   	push   %ebp
c010dc8f:	89 e5                	mov    %esp,%ebp
c010dc91:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010dc94:	8b 45 08             	mov    0x8(%ebp),%eax
c010dc97:	83 ec 04             	sub    $0x4,%esp
c010dc9a:	8d 55 ec             	lea    -0x14(%ebp),%edx
c010dc9d:	52                   	push   %edx
c010dc9e:	8d 55 08             	lea    0x8(%ebp),%edx
c010dca1:	52                   	push   %edx
c010dca2:	50                   	push   %eax
c010dca3:	e8 45 fe ff ff       	call   c010daed <get_device>
c010dca8:	83 c4 10             	add    $0x10,%esp
c010dcab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dcae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dcb2:	74 08                	je     c010dcbc <vfs_lookup+0x2e>
        return ret;
c010dcb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dcb7:	e9 96 00 00 00       	jmp    c010dd52 <vfs_lookup+0xc4>
    }
    if (*path != '\0') {
c010dcbc:	8b 45 08             	mov    0x8(%ebp),%eax
c010dcbf:	0f b6 00             	movzbl (%eax),%eax
c010dcc2:	84 c0                	test   %al,%al
c010dcc4:	74 7f                	je     c010dd45 <vfs_lookup+0xb7>
        ret = vop_lookup(node, path, node_store);
c010dcc6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dcc9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010dccc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010dcd0:	74 17                	je     c010dce9 <vfs_lookup+0x5b>
c010dcd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcd5:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dcd8:	85 c0                	test   %eax,%eax
c010dcda:	74 0d                	je     c010dce9 <vfs_lookup+0x5b>
c010dcdc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dcdf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dce2:	8b 40 38             	mov    0x38(%eax),%eax
c010dce5:	85 c0                	test   %eax,%eax
c010dce7:	75 16                	jne    c010dcff <vfs_lookup+0x71>
c010dce9:	68 70 5d 11 c0       	push   $0xc0115d70
c010dcee:	68 2d 5d 11 c0       	push   $0xc0115d2d
c010dcf3:	6a 4f                	push   $0x4f
c010dcf5:	68 42 5d 11 c0       	push   $0xc0115d42
c010dcfa:	e8 e6 27 ff ff       	call   c01004e5 <__panic>
c010dcff:	83 ec 08             	sub    $0x8,%esp
c010dd02:	68 bf 5d 11 c0       	push   $0xc0115dbf
c010dd07:	ff 75 f0             	pushl  -0x10(%ebp)
c010dd0a:	e8 57 06 00 00       	call   c010e366 <inode_check>
c010dd0f:	83 c4 10             	add    $0x10,%esp
c010dd12:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010dd15:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dd18:	8b 40 38             	mov    0x38(%eax),%eax
c010dd1b:	8b 4d 08             	mov    0x8(%ebp),%ecx
c010dd1e:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dd21:	83 ec 04             	sub    $0x4,%esp
c010dd24:	ff 75 0c             	pushl  0xc(%ebp)
c010dd27:	51                   	push   %ecx
c010dd28:	52                   	push   %edx
c010dd29:	ff d0                	call   *%eax
c010dd2b:	83 c4 10             	add    $0x10,%esp
c010dd2e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        vop_ref_dec(node);
c010dd31:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010dd34:	83 ec 0c             	sub    $0xc,%esp
c010dd37:	50                   	push   %eax
c010dd38:	e8 71 04 00 00       	call   c010e1ae <inode_ref_dec>
c010dd3d:	83 c4 10             	add    $0x10,%esp
        return ret;
c010dd40:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd43:	eb 0d                	jmp    c010dd52 <vfs_lookup+0xc4>
    }
    *node_store = node;
c010dd45:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010dd48:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd4b:	89 10                	mov    %edx,(%eax)
    return 0;
c010dd4d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dd52:	c9                   	leave  
c010dd53:	c3                   	ret    

c010dd54 <vfs_lookup_parent>:
/*
 * vfs_lookup_parent - Name-to-vnode translation.
 *  (In BSD, both of these are subsumed by namei().)
 */
int
vfs_lookup_parent(char *path, struct inode **node_store, char **endp){
c010dd54:	55                   	push   %ebp
c010dd55:	89 e5                	mov    %esp,%ebp
c010dd57:	83 ec 18             	sub    $0x18,%esp
    int ret;
    struct inode *node;
    if ((ret = get_device(path, &path, &node)) != 0) {
c010dd5a:	8b 45 08             	mov    0x8(%ebp),%eax
c010dd5d:	83 ec 04             	sub    $0x4,%esp
c010dd60:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010dd63:	52                   	push   %edx
c010dd64:	8d 55 08             	lea    0x8(%ebp),%edx
c010dd67:	52                   	push   %edx
c010dd68:	50                   	push   %eax
c010dd69:	e8 7f fd ff ff       	call   c010daed <get_device>
c010dd6e:	83 c4 10             	add    $0x10,%esp
c010dd71:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010dd74:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010dd78:	74 05                	je     c010dd7f <vfs_lookup_parent+0x2b>
        return ret;
c010dd7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010dd7d:	eb 15                	jmp    c010dd94 <vfs_lookup_parent+0x40>
    }
    *endp = path;
c010dd7f:	8b 55 08             	mov    0x8(%ebp),%edx
c010dd82:	8b 45 10             	mov    0x10(%ebp),%eax
c010dd85:	89 10                	mov    %edx,(%eax)
    *node_store = node;
c010dd87:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010dd8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dd8d:	89 10                	mov    %edx,(%eax)
    return 0;
c010dd8f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010dd94:	c9                   	leave  
c010dd95:	c3                   	ret    

c010dd96 <vfs_open>:
#include <assert.h>


// open file in vfs, get/create inode for file with filename path.
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
c010dd96:	55                   	push   %ebp
c010dd97:	89 e5                	mov    %esp,%ebp
c010dd99:	53                   	push   %ebx
c010dd9a:	83 ec 34             	sub    $0x34,%esp
    bool can_write = 0;
c010dd9d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    switch (open_flags & O_ACCMODE) {
c010dda4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dda7:	83 e0 03             	and    $0x3,%eax
c010ddaa:	85 c0                	test   %eax,%eax
c010ddac:	74 18                	je     c010ddc6 <vfs_open+0x30>
c010ddae:	83 f8 02             	cmp    $0x2,%eax
c010ddb1:	77 09                	ja     c010ddbc <vfs_open+0x26>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
        can_write = 1;
c010ddb3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        break;
c010ddba:	eb 0b                	jmp    c010ddc7 <vfs_open+0x31>
    default:
        return -E_INVAL;
c010ddbc:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ddc1:	e9 83 02 00 00       	jmp    c010e049 <vfs_open+0x2b3>
int
vfs_open(char *path, uint32_t open_flags, struct inode **node_store) {
    bool can_write = 0;
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c010ddc6:	90                   	nop
        break;
    default:
        return -E_INVAL;
    }

    if (open_flags & O_TRUNC) {
c010ddc7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddca:	83 e0 10             	and    $0x10,%eax
c010ddcd:	85 c0                	test   %eax,%eax
c010ddcf:	74 10                	je     c010dde1 <vfs_open+0x4b>
        if (!can_write) {
c010ddd1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ddd5:	75 0a                	jne    c010dde1 <vfs_open+0x4b>
            return -E_INVAL;
c010ddd7:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010dddc:	e9 68 02 00 00       	jmp    c010e049 <vfs_open+0x2b3>
        }
    }

    int ret; 
    struct inode *node;
    bool excl = (open_flags & O_EXCL) != 0;
c010dde1:	8b 45 0c             	mov    0xc(%ebp),%eax
c010dde4:	83 e0 08             	and    $0x8,%eax
c010dde7:	85 c0                	test   %eax,%eax
c010dde9:	0f 95 c0             	setne  %al
c010ddec:	0f b6 c0             	movzbl %al,%eax
c010ddef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    bool create = (open_flags & O_CREAT) != 0;
c010ddf2:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ddf5:	83 e0 04             	and    $0x4,%eax
c010ddf8:	85 c0                	test   %eax,%eax
c010ddfa:	0f 95 c0             	setne  %al
c010ddfd:	0f b6 c0             	movzbl %al,%eax
c010de00:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ret = vfs_lookup(path, &node);
c010de03:	83 ec 08             	sub    $0x8,%esp
c010de06:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010de09:	50                   	push   %eax
c010de0a:	ff 75 08             	pushl  0x8(%ebp)
c010de0d:	e8 7c fe ff ff       	call   c010dc8e <vfs_lookup>
c010de12:	83 c4 10             	add    $0x10,%esp
c010de15:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (ret != 0) {
c010de18:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de1c:	0f 84 b1 00 00 00    	je     c010ded3 <vfs_open+0x13d>
        if (ret == -16 && (create)) {
c010de22:	83 7d e8 f0          	cmpl   $0xfffffff0,-0x18(%ebp)
c010de26:	0f 85 9f 00 00 00    	jne    c010decb <vfs_open+0x135>
c010de2c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010de30:	0f 84 95 00 00 00    	je     c010decb <vfs_open+0x135>
            char *name;
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
c010de36:	83 ec 04             	sub    $0x4,%esp
c010de39:	8d 45 d4             	lea    -0x2c(%ebp),%eax
c010de3c:	50                   	push   %eax
c010de3d:	8d 45 d0             	lea    -0x30(%ebp),%eax
c010de40:	50                   	push   %eax
c010de41:	ff 75 08             	pushl  0x8(%ebp)
c010de44:	e8 0b ff ff ff       	call   c010dd54 <vfs_lookup_parent>
c010de49:	83 c4 10             	add    $0x10,%esp
c010de4c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010de4f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010de53:	74 08                	je     c010de5d <vfs_open+0xc7>
                return ret;
c010de55:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010de58:	e9 ec 01 00 00       	jmp    c010e049 <vfs_open+0x2b3>
            }
            ret = vop_create(dir, name, excl, &node);
c010de5d:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010de60:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c010de63:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c010de67:	74 17                	je     c010de80 <vfs_open+0xea>
c010de69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de6c:	8b 40 3c             	mov    0x3c(%eax),%eax
c010de6f:	85 c0                	test   %eax,%eax
c010de71:	74 0d                	je     c010de80 <vfs_open+0xea>
c010de73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010de76:	8b 40 3c             	mov    0x3c(%eax),%eax
c010de79:	8b 40 34             	mov    0x34(%eax),%eax
c010de7c:	85 c0                	test   %eax,%eax
c010de7e:	75 16                	jne    c010de96 <vfs_open+0x100>
c010de80:	68 c8 5d 11 c0       	push   $0xc0115dc8
c010de85:	68 17 5e 11 c0       	push   $0xc0115e17
c010de8a:	6a 2c                	push   $0x2c
c010de8c:	68 2c 5e 11 c0       	push   $0xc0115e2c
c010de91:	e8 4f 26 ff ff       	call   c01004e5 <__panic>
c010de96:	83 ec 08             	sub    $0x8,%esp
c010de99:	68 42 5e 11 c0       	push   $0xc0115e42
c010de9e:	ff 75 e4             	pushl  -0x1c(%ebp)
c010dea1:	e8 c0 04 00 00       	call   c010e366 <inode_check>
c010dea6:	83 c4 10             	add    $0x10,%esp
c010dea9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010deac:	8b 40 3c             	mov    0x3c(%eax),%eax
c010deaf:	8b 40 34             	mov    0x34(%eax),%eax
c010deb2:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
c010deb5:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010deb8:	8d 5d d8             	lea    -0x28(%ebp),%ebx
c010debb:	53                   	push   %ebx
c010debc:	ff 75 f0             	pushl  -0x10(%ebp)
c010debf:	51                   	push   %ecx
c010dec0:	52                   	push   %edx
c010dec1:	ff d0                	call   *%eax
c010dec3:	83 c4 10             	add    $0x10,%esp
c010dec6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    bool excl = (open_flags & O_EXCL) != 0;
    bool create = (open_flags & O_CREAT) != 0;
    ret = vfs_lookup(path, &node);

    if (ret != 0) {
        if (ret == -16 && (create)) {
c010dec9:	eb 1e                	jmp    c010dee9 <vfs_open+0x153>
            struct inode *dir;
            if ((ret = vfs_lookup_parent(path, &dir, &name)) != 0) {
                return ret;
            }
            ret = vop_create(dir, name, excl, &node);
        } else return ret;
c010decb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010dece:	e9 76 01 00 00       	jmp    c010e049 <vfs_open+0x2b3>
    } else if (excl && create) {
c010ded3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ded7:	74 10                	je     c010dee9 <vfs_open+0x153>
c010ded9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010dedd:	74 0a                	je     c010dee9 <vfs_open+0x153>
        return -E_EXISTS;
c010dedf:	b8 e9 ff ff ff       	mov    $0xffffffe9,%eax
c010dee4:	e9 60 01 00 00       	jmp    c010e049 <vfs_open+0x2b3>
    }
    assert(node != NULL);
c010dee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010deec:	85 c0                	test   %eax,%eax
c010deee:	75 16                	jne    c010df06 <vfs_open+0x170>
c010def0:	68 49 5e 11 c0       	push   $0xc0115e49
c010def5:	68 17 5e 11 c0       	push   $0xc0115e17
c010defa:	6a 31                	push   $0x31
c010defc:	68 2c 5e 11 c0       	push   $0xc0115e2c
c010df01:	e8 df 25 ff ff       	call   c01004e5 <__panic>
    
    if ((ret = vop_open(node, open_flags)) != 0) {
c010df06:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010df09:	89 45 e0             	mov    %eax,-0x20(%ebp)
c010df0c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c010df10:	74 17                	je     c010df29 <vfs_open+0x193>
c010df12:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010df15:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df18:	85 c0                	test   %eax,%eax
c010df1a:	74 0d                	je     c010df29 <vfs_open+0x193>
c010df1c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010df1f:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df22:	8b 40 04             	mov    0x4(%eax),%eax
c010df25:	85 c0                	test   %eax,%eax
c010df27:	75 16                	jne    c010df3f <vfs_open+0x1a9>
c010df29:	68 58 5e 11 c0       	push   $0xc0115e58
c010df2e:	68 17 5e 11 c0       	push   $0xc0115e17
c010df33:	6a 33                	push   $0x33
c010df35:	68 2c 5e 11 c0       	push   $0xc0115e2c
c010df3a:	e8 a6 25 ff ff       	call   c01004e5 <__panic>
c010df3f:	83 ec 08             	sub    $0x8,%esp
c010df42:	68 a5 5e 11 c0       	push   $0xc0115ea5
c010df47:	ff 75 e0             	pushl  -0x20(%ebp)
c010df4a:	e8 17 04 00 00       	call   c010e366 <inode_check>
c010df4f:	83 c4 10             	add    $0x10,%esp
c010df52:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010df55:	8b 40 3c             	mov    0x3c(%eax),%eax
c010df58:	8b 40 04             	mov    0x4(%eax),%eax
c010df5b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010df5e:	83 ec 08             	sub    $0x8,%esp
c010df61:	ff 75 0c             	pushl  0xc(%ebp)
c010df64:	52                   	push   %edx
c010df65:	ff d0                	call   *%eax
c010df67:	83 c4 10             	add    $0x10,%esp
c010df6a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010df6d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010df71:	74 17                	je     c010df8a <vfs_open+0x1f4>
        vop_ref_dec(node);
c010df73:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010df76:	83 ec 0c             	sub    $0xc,%esp
c010df79:	50                   	push   %eax
c010df7a:	e8 2f 02 00 00       	call   c010e1ae <inode_ref_dec>
c010df7f:	83 c4 10             	add    $0x10,%esp
        return ret;
c010df82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010df85:	e9 bf 00 00 00       	jmp    c010e049 <vfs_open+0x2b3>
    }

    vop_open_inc(node);
c010df8a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010df8d:	83 ec 0c             	sub    $0xc,%esp
c010df90:	50                   	push   %eax
c010df91:	e8 ec 02 00 00       	call   c010e282 <inode_open_inc>
c010df96:	83 c4 10             	add    $0x10,%esp
    if (open_flags & O_TRUNC || create) {
c010df99:	8b 45 0c             	mov    0xc(%ebp),%eax
c010df9c:	83 e0 10             	and    $0x10,%eax
c010df9f:	85 c0                	test   %eax,%eax
c010dfa1:	75 0a                	jne    c010dfad <vfs_open+0x217>
c010dfa3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010dfa7:	0f 84 8f 00 00 00    	je     c010e03c <vfs_open+0x2a6>
        if ((ret = vop_truncate(node, 0)) != 0) {
c010dfad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010dfb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
c010dfb3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c010dfb7:	74 17                	je     c010dfd0 <vfs_open+0x23a>
c010dfb9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dfbc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dfbf:	85 c0                	test   %eax,%eax
c010dfc1:	74 0d                	je     c010dfd0 <vfs_open+0x23a>
c010dfc3:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dfc6:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dfc9:	8b 40 30             	mov    0x30(%eax),%eax
c010dfcc:	85 c0                	test   %eax,%eax
c010dfce:	75 16                	jne    c010dfe6 <vfs_open+0x250>
c010dfd0:	68 ac 5e 11 c0       	push   $0xc0115eac
c010dfd5:	68 17 5e 11 c0       	push   $0xc0115e17
c010dfda:	6a 3a                	push   $0x3a
c010dfdc:	68 2c 5e 11 c0       	push   $0xc0115e2c
c010dfe1:	e8 ff 24 ff ff       	call   c01004e5 <__panic>
c010dfe6:	83 ec 08             	sub    $0x8,%esp
c010dfe9:	68 fd 5e 11 c0       	push   $0xc0115efd
c010dfee:	ff 75 dc             	pushl  -0x24(%ebp)
c010dff1:	e8 70 03 00 00       	call   c010e366 <inode_check>
c010dff6:	83 c4 10             	add    $0x10,%esp
c010dff9:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010dffc:	8b 40 3c             	mov    0x3c(%eax),%eax
c010dfff:	8b 40 30             	mov    0x30(%eax),%eax
c010e002:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e005:	83 ec 08             	sub    $0x8,%esp
c010e008:	6a 00                	push   $0x0
c010e00a:	52                   	push   %edx
c010e00b:	ff d0                	call   *%eax
c010e00d:	83 c4 10             	add    $0x10,%esp
c010e010:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010e013:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010e017:	74 23                	je     c010e03c <vfs_open+0x2a6>
            vop_open_dec(node);
c010e019:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e01c:	83 ec 0c             	sub    $0xc,%esp
c010e01f:	50                   	push   %eax
c010e020:	e8 77 02 00 00       	call   c010e29c <inode_open_dec>
c010e025:	83 c4 10             	add    $0x10,%esp
            vop_ref_dec(node);
c010e028:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010e02b:	83 ec 0c             	sub    $0xc,%esp
c010e02e:	50                   	push   %eax
c010e02f:	e8 7a 01 00 00       	call   c010e1ae <inode_ref_dec>
c010e034:	83 c4 10             	add    $0x10,%esp
            return ret;
c010e037:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010e03a:	eb 0d                	jmp    c010e049 <vfs_open+0x2b3>
        }
    }
    *node_store = node;
c010e03c:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010e03f:	8b 45 10             	mov    0x10(%ebp),%eax
c010e042:	89 10                	mov    %edx,(%eax)
    return 0;
c010e044:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e049:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010e04c:	c9                   	leave  
c010e04d:	c3                   	ret    

c010e04e <vfs_close>:

// close file in vfs
int
vfs_close(struct inode *node) {
c010e04e:	55                   	push   %ebp
c010e04f:	89 e5                	mov    %esp,%ebp
c010e051:	83 ec 08             	sub    $0x8,%esp
    vop_open_dec(node);
c010e054:	83 ec 0c             	sub    $0xc,%esp
c010e057:	ff 75 08             	pushl  0x8(%ebp)
c010e05a:	e8 3d 02 00 00       	call   c010e29c <inode_open_dec>
c010e05f:	83 c4 10             	add    $0x10,%esp
    vop_ref_dec(node);
c010e062:	83 ec 0c             	sub    $0xc,%esp
c010e065:	ff 75 08             	pushl  0x8(%ebp)
c010e068:	e8 41 01 00 00       	call   c010e1ae <inode_ref_dec>
c010e06d:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e070:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e075:	c9                   	leave  
c010e076:	c3                   	ret    

c010e077 <vfs_unlink>:

// unimplement
int
vfs_unlink(char *path) {
c010e077:	55                   	push   %ebp
c010e078:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e07a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e07f:	5d                   	pop    %ebp
c010e080:	c3                   	ret    

c010e081 <vfs_rename>:

// unimplement
int
vfs_rename(char *old_path, char *new_path) {
c010e081:	55                   	push   %ebp
c010e082:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e084:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e089:	5d                   	pop    %ebp
c010e08a:	c3                   	ret    

c010e08b <vfs_link>:

// unimplement
int
vfs_link(char *old_path, char *new_path) {
c010e08b:	55                   	push   %ebp
c010e08c:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e08e:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e093:	5d                   	pop    %ebp
c010e094:	c3                   	ret    

c010e095 <vfs_symlink>:

// unimplement
int
vfs_symlink(char *old_path, char *new_path) {
c010e095:	55                   	push   %ebp
c010e096:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e098:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e09d:	5d                   	pop    %ebp
c010e09e:	c3                   	ret    

c010e09f <vfs_readlink>:

// unimplement
int
vfs_readlink(char *path, struct iobuf *iob) {
c010e09f:	55                   	push   %ebp
c010e0a0:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e0a2:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e0a7:	5d                   	pop    %ebp
c010e0a8:	c3                   	ret    

c010e0a9 <vfs_mkdir>:

// unimplement
int
vfs_mkdir(char *path){
c010e0a9:	55                   	push   %ebp
c010e0aa:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010e0ac:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010e0b1:	5d                   	pop    %ebp
c010e0b2:	c3                   	ret    

c010e0b3 <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010e0b3:	55                   	push   %ebp
c010e0b4:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010e0b6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0b9:	8b 40 30             	mov    0x30(%eax),%eax
}
c010e0bc:	5d                   	pop    %ebp
c010e0bd:	c3                   	ret    

c010e0be <inode_open_count>:

static inline int
inode_open_count(struct inode *node) {
c010e0be:	55                   	push   %ebp
c010e0bf:	89 e5                	mov    %esp,%ebp
    return node->open_count;
c010e0c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0c4:	8b 40 34             	mov    0x34(%eax),%eax
}
c010e0c7:	5d                   	pop    %ebp
c010e0c8:	c3                   	ret    

c010e0c9 <__alloc_inode>:

/* *
 * __alloc_inode - alloc a inode structure and initialize in_type
 * */
struct inode *
__alloc_inode(int type) {
c010e0c9:	55                   	push   %ebp
c010e0ca:	89 e5                	mov    %esp,%ebp
c010e0cc:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = kmalloc(sizeof(struct inode))) != NULL) {
c010e0cf:	83 ec 0c             	sub    $0xc,%esp
c010e0d2:	6a 40                	push   $0x40
c010e0d4:	e8 6b 8d ff ff       	call   c0106e44 <kmalloc>
c010e0d9:	83 c4 10             	add    $0x10,%esp
c010e0dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e0df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e0e3:	74 09                	je     c010e0ee <__alloc_inode+0x25>
        node->in_type = type;
c010e0e5:	8b 55 08             	mov    0x8(%ebp),%edx
c010e0e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e0eb:	89 50 2c             	mov    %edx,0x2c(%eax)
    }
    return node;
c010e0ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e0f1:	c9                   	leave  
c010e0f2:	c3                   	ret    

c010e0f3 <inode_init>:
/* *
 * inode_init - initialize a inode structure
 * invoked by vop_init
 * */
void
inode_init(struct inode *node, const struct inode_ops *ops, struct fs *fs) {
c010e0f3:	55                   	push   %ebp
c010e0f4:	89 e5                	mov    %esp,%ebp
c010e0f6:	83 ec 08             	sub    $0x8,%esp
    node->ref_count = 0;
c010e0f9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e0fc:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    node->open_count = 0;
c010e103:	8b 45 08             	mov    0x8(%ebp),%eax
c010e106:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    node->in_ops = ops, node->in_fs = fs;
c010e10d:	8b 45 08             	mov    0x8(%ebp),%eax
c010e110:	8b 55 0c             	mov    0xc(%ebp),%edx
c010e113:	89 50 3c             	mov    %edx,0x3c(%eax)
c010e116:	8b 45 08             	mov    0x8(%ebp),%eax
c010e119:	8b 55 10             	mov    0x10(%ebp),%edx
c010e11c:	89 50 38             	mov    %edx,0x38(%eax)
    vop_ref_inc(node);
c010e11f:	83 ec 0c             	sub    $0xc,%esp
c010e122:	ff 75 08             	pushl  0x8(%ebp)
c010e125:	e8 6a 00 00 00       	call   c010e194 <inode_ref_inc>
c010e12a:	83 c4 10             	add    $0x10,%esp
}
c010e12d:	90                   	nop
c010e12e:	c9                   	leave  
c010e12f:	c3                   	ret    

c010e130 <inode_kill>:
/* *
 * inode_kill - kill a inode structure
 * invoked by vop_kill
 * */
void
inode_kill(struct inode *node) {
c010e130:	55                   	push   %ebp
c010e131:	89 e5                	mov    %esp,%ebp
c010e133:	83 ec 08             	sub    $0x8,%esp
    assert(inode_ref_count(node) == 0);
c010e136:	ff 75 08             	pushl  0x8(%ebp)
c010e139:	e8 75 ff ff ff       	call   c010e0b3 <inode_ref_count>
c010e13e:	83 c4 04             	add    $0x4,%esp
c010e141:	85 c0                	test   %eax,%eax
c010e143:	74 16                	je     c010e15b <inode_kill+0x2b>
c010e145:	68 08 5f 11 c0       	push   $0xc0115f08
c010e14a:	68 23 5f 11 c0       	push   $0xc0115f23
c010e14f:	6a 29                	push   $0x29
c010e151:	68 38 5f 11 c0       	push   $0xc0115f38
c010e156:	e8 8a 23 ff ff       	call   c01004e5 <__panic>
    assert(inode_open_count(node) == 0);
c010e15b:	83 ec 0c             	sub    $0xc,%esp
c010e15e:	ff 75 08             	pushl  0x8(%ebp)
c010e161:	e8 58 ff ff ff       	call   c010e0be <inode_open_count>
c010e166:	83 c4 10             	add    $0x10,%esp
c010e169:	85 c0                	test   %eax,%eax
c010e16b:	74 16                	je     c010e183 <inode_kill+0x53>
c010e16d:	68 4c 5f 11 c0       	push   $0xc0115f4c
c010e172:	68 23 5f 11 c0       	push   $0xc0115f23
c010e177:	6a 2a                	push   $0x2a
c010e179:	68 38 5f 11 c0       	push   $0xc0115f38
c010e17e:	e8 62 23 ff ff       	call   c01004e5 <__panic>
    kfree(node);
c010e183:	83 ec 0c             	sub    $0xc,%esp
c010e186:	ff 75 08             	pushl  0x8(%ebp)
c010e189:	e8 ce 8c ff ff       	call   c0106e5c <kfree>
c010e18e:	83 c4 10             	add    $0x10,%esp
}
c010e191:	90                   	nop
c010e192:	c9                   	leave  
c010e193:	c3                   	ret    

c010e194 <inode_ref_inc>:
/* *
 * inode_ref_inc - increment ref_count
 * invoked by vop_ref_inc
 * */
int
inode_ref_inc(struct inode *node) {
c010e194:	55                   	push   %ebp
c010e195:	89 e5                	mov    %esp,%ebp
    node->ref_count += 1;
c010e197:	8b 45 08             	mov    0x8(%ebp),%eax
c010e19a:	8b 40 30             	mov    0x30(%eax),%eax
c010e19d:	8d 50 01             	lea    0x1(%eax),%edx
c010e1a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1a3:	89 50 30             	mov    %edx,0x30(%eax)
    return node->ref_count;
c010e1a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1a9:	8b 40 30             	mov    0x30(%eax),%eax
}
c010e1ac:	5d                   	pop    %ebp
c010e1ad:	c3                   	ret    

c010e1ae <inode_ref_dec>:
 * inode_ref_dec - decrement ref_count
 * invoked by vop_ref_dec
 * calls vop_reclaim if the ref_count hits zero
 * */
int
inode_ref_dec(struct inode *node) {
c010e1ae:	55                   	push   %ebp
c010e1af:	89 e5                	mov    %esp,%ebp
c010e1b1:	83 ec 18             	sub    $0x18,%esp
    assert(inode_ref_count(node) > 0);
c010e1b4:	ff 75 08             	pushl  0x8(%ebp)
c010e1b7:	e8 f7 fe ff ff       	call   c010e0b3 <inode_ref_count>
c010e1bc:	83 c4 04             	add    $0x4,%esp
c010e1bf:	85 c0                	test   %eax,%eax
c010e1c1:	7f 16                	jg     c010e1d9 <inode_ref_dec+0x2b>
c010e1c3:	68 68 5f 11 c0       	push   $0xc0115f68
c010e1c8:	68 23 5f 11 c0       	push   $0xc0115f23
c010e1cd:	6a 3f                	push   $0x3f
c010e1cf:	68 38 5f 11 c0       	push   $0xc0115f38
c010e1d4:	e8 0c 23 ff ff       	call   c01004e5 <__panic>
    int ref_count, ret;
    node->ref_count-= 1;
c010e1d9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1dc:	8b 40 30             	mov    0x30(%eax),%eax
c010e1df:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e1e2:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1e5:	89 50 30             	mov    %edx,0x30(%eax)
    ref_count = node->ref_count;
c010e1e8:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1eb:	8b 40 30             	mov    0x30(%eax),%eax
c010e1ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (ref_count == 0) {
c010e1f1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e1f5:	0f 85 82 00 00 00    	jne    c010e27d <inode_ref_dec+0xcf>
        if ((ret = vop_reclaim(node)) != 0 && ret != -E_BUSY) {
c010e1fb:	8b 45 08             	mov    0x8(%ebp),%eax
c010e1fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e201:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e205:	74 17                	je     c010e21e <inode_ref_dec+0x70>
c010e207:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e20a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e20d:	85 c0                	test   %eax,%eax
c010e20f:	74 0d                	je     c010e21e <inode_ref_dec+0x70>
c010e211:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e214:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e217:	8b 40 24             	mov    0x24(%eax),%eax
c010e21a:	85 c0                	test   %eax,%eax
c010e21c:	75 16                	jne    c010e234 <inode_ref_dec+0x86>
c010e21e:	68 84 5f 11 c0       	push   $0xc0115f84
c010e223:	68 23 5f 11 c0       	push   $0xc0115f23
c010e228:	6a 44                	push   $0x44
c010e22a:	68 38 5f 11 c0       	push   $0xc0115f38
c010e22f:	e8 b1 22 ff ff       	call   c01004e5 <__panic>
c010e234:	83 ec 08             	sub    $0x8,%esp
c010e237:	68 d4 5f 11 c0       	push   $0xc0115fd4
c010e23c:	ff 75 f0             	pushl  -0x10(%ebp)
c010e23f:	e8 22 01 00 00       	call   c010e366 <inode_check>
c010e244:	83 c4 10             	add    $0x10,%esp
c010e247:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e24a:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e24d:	8b 40 24             	mov    0x24(%eax),%eax
c010e250:	83 ec 0c             	sub    $0xc,%esp
c010e253:	ff 75 08             	pushl  0x8(%ebp)
c010e256:	ff d0                	call   *%eax
c010e258:	83 c4 10             	add    $0x10,%esp
c010e25b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e25e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e262:	74 19                	je     c010e27d <inode_ref_dec+0xcf>
c010e264:	83 7d ec f1          	cmpl   $0xfffffff1,-0x14(%ebp)
c010e268:	74 13                	je     c010e27d <inode_ref_dec+0xcf>
            cprintf("vfs: warning: vop_reclaim: %e.\n", ret);
c010e26a:	83 ec 08             	sub    $0x8,%esp
c010e26d:	ff 75 ec             	pushl  -0x14(%ebp)
c010e270:	68 dc 5f 11 c0       	push   $0xc0115fdc
c010e275:	e8 05 21 ff ff       	call   c010037f <cprintf>
c010e27a:	83 c4 10             	add    $0x10,%esp
        }
    }
    return ref_count;
c010e27d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e280:	c9                   	leave  
c010e281:	c3                   	ret    

c010e282 <inode_open_inc>:
/* *
 * inode_open_inc - increment the open_count
 * invoked by vop_open_inc
 * */
int
inode_open_inc(struct inode *node) {
c010e282:	55                   	push   %ebp
c010e283:	89 e5                	mov    %esp,%ebp
    node->open_count += 1;
c010e285:	8b 45 08             	mov    0x8(%ebp),%eax
c010e288:	8b 40 34             	mov    0x34(%eax),%eax
c010e28b:	8d 50 01             	lea    0x1(%eax),%edx
c010e28e:	8b 45 08             	mov    0x8(%ebp),%eax
c010e291:	89 50 34             	mov    %edx,0x34(%eax)
    return node->open_count;
c010e294:	8b 45 08             	mov    0x8(%ebp),%eax
c010e297:	8b 40 34             	mov    0x34(%eax),%eax
}
c010e29a:	5d                   	pop    %ebp
c010e29b:	c3                   	ret    

c010e29c <inode_open_dec>:
 * inode_open_dec - decrement the open_count
 * invoked by vop_open_dec
 * calls vop_close if the open_count hits zero
 * */
int
inode_open_dec(struct inode *node) {
c010e29c:	55                   	push   %ebp
c010e29d:	89 e5                	mov    %esp,%ebp
c010e29f:	83 ec 18             	sub    $0x18,%esp
    assert(inode_open_count(node) > 0);
c010e2a2:	ff 75 08             	pushl  0x8(%ebp)
c010e2a5:	e8 14 fe ff ff       	call   c010e0be <inode_open_count>
c010e2aa:	83 c4 04             	add    $0x4,%esp
c010e2ad:	85 c0                	test   %eax,%eax
c010e2af:	7f 16                	jg     c010e2c7 <inode_open_dec+0x2b>
c010e2b1:	68 fc 5f 11 c0       	push   $0xc0115ffc
c010e2b6:	68 23 5f 11 c0       	push   $0xc0115f23
c010e2bb:	6a 5c                	push   $0x5c
c010e2bd:	68 38 5f 11 c0       	push   $0xc0115f38
c010e2c2:	e8 1e 22 ff ff       	call   c01004e5 <__panic>
    int open_count, ret;
    node->open_count -= 1;
c010e2c7:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2ca:	8b 40 34             	mov    0x34(%eax),%eax
c010e2cd:	8d 50 ff             	lea    -0x1(%eax),%edx
c010e2d0:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2d3:	89 50 34             	mov    %edx,0x34(%eax)
    open_count = node->open_count;
c010e2d6:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2d9:	8b 40 34             	mov    0x34(%eax),%eax
c010e2dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (open_count == 0) {
c010e2df:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e2e3:	75 7c                	jne    c010e361 <inode_open_dec+0xc5>
        if ((ret = vop_close(node)) != 0) {
c010e2e5:	8b 45 08             	mov    0x8(%ebp),%eax
c010e2e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e2eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e2ef:	74 17                	je     c010e308 <inode_open_dec+0x6c>
c010e2f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2f4:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e2f7:	85 c0                	test   %eax,%eax
c010e2f9:	74 0d                	je     c010e308 <inode_open_dec+0x6c>
c010e2fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e2fe:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e301:	8b 40 08             	mov    0x8(%eax),%eax
c010e304:	85 c0                	test   %eax,%eax
c010e306:	75 16                	jne    c010e31e <inode_open_dec+0x82>
c010e308:	68 18 60 11 c0       	push   $0xc0116018
c010e30d:	68 23 5f 11 c0       	push   $0xc0115f23
c010e312:	6a 61                	push   $0x61
c010e314:	68 38 5f 11 c0       	push   $0xc0115f38
c010e319:	e8 c7 21 ff ff       	call   c01004e5 <__panic>
c010e31e:	83 ec 08             	sub    $0x8,%esp
c010e321:	68 66 60 11 c0       	push   $0xc0116066
c010e326:	ff 75 f0             	pushl  -0x10(%ebp)
c010e329:	e8 38 00 00 00       	call   c010e366 <inode_check>
c010e32e:	83 c4 10             	add    $0x10,%esp
c010e331:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e334:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e337:	8b 40 08             	mov    0x8(%eax),%eax
c010e33a:	83 ec 0c             	sub    $0xc,%esp
c010e33d:	ff 75 08             	pushl  0x8(%ebp)
c010e340:	ff d0                	call   *%eax
c010e342:	83 c4 10             	add    $0x10,%esp
c010e345:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e348:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e34c:	74 13                	je     c010e361 <inode_open_dec+0xc5>
            cprintf("vfs: warning: vop_close: %e.\n", ret);
c010e34e:	83 ec 08             	sub    $0x8,%esp
c010e351:	ff 75 ec             	pushl  -0x14(%ebp)
c010e354:	68 6c 60 11 c0       	push   $0xc011606c
c010e359:	e8 21 20 ff ff       	call   c010037f <cprintf>
c010e35e:	83 c4 10             	add    $0x10,%esp
        }
    }
    return open_count;
c010e361:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e364:	c9                   	leave  
c010e365:	c3                   	ret    

c010e366 <inode_check>:
/* *
 * inode_check - check the various things being valid
 * called before all vop_* calls
 * */
void
inode_check(struct inode *node, const char *opstr) {
c010e366:	55                   	push   %ebp
c010e367:	89 e5                	mov    %esp,%ebp
c010e369:	83 ec 18             	sub    $0x18,%esp
    assert(node != NULL && node->in_ops != NULL);
c010e36c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e370:	74 0a                	je     c010e37c <inode_check+0x16>
c010e372:	8b 45 08             	mov    0x8(%ebp),%eax
c010e375:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e378:	85 c0                	test   %eax,%eax
c010e37a:	75 16                	jne    c010e392 <inode_check+0x2c>
c010e37c:	68 8c 60 11 c0       	push   $0xc011608c
c010e381:	68 23 5f 11 c0       	push   $0xc0115f23
c010e386:	6a 6e                	push   $0x6e
c010e388:	68 38 5f 11 c0       	push   $0xc0115f38
c010e38d:	e8 53 21 ff ff       	call   c01004e5 <__panic>
    assert(node->in_ops->vop_magic == VOP_MAGIC);
c010e392:	8b 45 08             	mov    0x8(%ebp),%eax
c010e395:	8b 40 3c             	mov    0x3c(%eax),%eax
c010e398:	8b 00                	mov    (%eax),%eax
c010e39a:	3d 76 a4 4b 8c       	cmp    $0x8c4ba476,%eax
c010e39f:	74 16                	je     c010e3b7 <inode_check+0x51>
c010e3a1:	68 b4 60 11 c0       	push   $0xc01160b4
c010e3a6:	68 23 5f 11 c0       	push   $0xc0115f23
c010e3ab:	6a 6f                	push   $0x6f
c010e3ad:	68 38 5f 11 c0       	push   $0xc0115f38
c010e3b2:	e8 2e 21 ff ff       	call   c01004e5 <__panic>
    int ref_count = inode_ref_count(node), open_count = inode_open_count(node);
c010e3b7:	83 ec 0c             	sub    $0xc,%esp
c010e3ba:	ff 75 08             	pushl  0x8(%ebp)
c010e3bd:	e8 f1 fc ff ff       	call   c010e0b3 <inode_ref_count>
c010e3c2:	83 c4 10             	add    $0x10,%esp
c010e3c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e3c8:	83 ec 0c             	sub    $0xc,%esp
c010e3cb:	ff 75 08             	pushl  0x8(%ebp)
c010e3ce:	e8 eb fc ff ff       	call   c010e0be <inode_open_count>
c010e3d3:	83 c4 10             	add    $0x10,%esp
c010e3d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(ref_count >= open_count && open_count >= 0);
c010e3d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e3dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010e3df:	7c 06                	jl     c010e3e7 <inode_check+0x81>
c010e3e1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e3e5:	79 16                	jns    c010e3fd <inode_check+0x97>
c010e3e7:	68 dc 60 11 c0       	push   $0xc01160dc
c010e3ec:	68 23 5f 11 c0       	push   $0xc0115f23
c010e3f1:	6a 71                	push   $0x71
c010e3f3:	68 38 5f 11 c0       	push   $0xc0115f38
c010e3f8:	e8 e8 20 ff ff       	call   c01004e5 <__panic>
    assert(ref_count < MAX_INODE_COUNT && open_count < MAX_INODE_COUNT);
c010e3fd:	81 7d f4 ff ff 00 00 	cmpl   $0xffff,-0xc(%ebp)
c010e404:	7f 09                	jg     c010e40f <inode_check+0xa9>
c010e406:	81 7d f0 ff ff 00 00 	cmpl   $0xffff,-0x10(%ebp)
c010e40d:	7e 16                	jle    c010e425 <inode_check+0xbf>
c010e40f:	68 08 61 11 c0       	push   $0xc0116108
c010e414:	68 23 5f 11 c0       	push   $0xc0115f23
c010e419:	6a 72                	push   $0x72
c010e41b:	68 38 5f 11 c0       	push   $0xc0115f38
c010e420:	e8 c0 20 ff ff       	call   c01004e5 <__panic>
}
c010e425:	90                   	nop
c010e426:	c9                   	leave  
c010e427:	c3                   	ret    

c010e428 <__alloc_fs>:

extern void vfs_devlist_init(void);

// __alloc_fs - allocate memory for fs, and set fs type
struct fs *
__alloc_fs(int type) {
c010e428:	55                   	push   %ebp
c010e429:	89 e5                	mov    %esp,%ebp
c010e42b:	83 ec 18             	sub    $0x18,%esp
    struct fs *fs;
    if ((fs = kmalloc(sizeof(struct fs))) != NULL) {
c010e42e:	83 ec 0c             	sub    $0xc,%esp
c010e431:	68 80 00 00 00       	push   $0x80
c010e436:	e8 09 8a ff ff       	call   c0106e44 <kmalloc>
c010e43b:	83 c4 10             	add    $0x10,%esp
c010e43e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e441:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e445:	74 09                	je     c010e450 <__alloc_fs+0x28>
        fs->fs_type = type;
c010e447:	8b 55 08             	mov    0x8(%ebp),%edx
c010e44a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e44d:	89 50 6c             	mov    %edx,0x6c(%eax)
    }
    return fs;
c010e450:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e453:	c9                   	leave  
c010e454:	c3                   	ret    

c010e455 <vfs_init>:

// vfs_init -  vfs initialize
void
vfs_init(void) {
c010e455:	55                   	push   %ebp
c010e456:	89 e5                	mov    %esp,%ebp
c010e458:	83 ec 08             	sub    $0x8,%esp
    sem_init(&bootfs_sem, 1);
c010e45b:	83 ec 08             	sub    $0x8,%esp
c010e45e:	6a 01                	push   $0x1
c010e460:	68 cc 10 15 c0       	push   $0xc01510cc
c010e465:	e8 a8 a8 ff ff       	call   c0108d12 <sem_init>
c010e46a:	83 c4 10             	add    $0x10,%esp
    vfs_devlist_init();
c010e46d:	e8 8d eb ff ff       	call   c010cfff <vfs_devlist_init>
}
c010e472:	90                   	nop
c010e473:	c9                   	leave  
c010e474:	c3                   	ret    

c010e475 <lock_bootfs>:

// lock_bootfs - lock  for bootfs
static void
lock_bootfs(void) {
c010e475:	55                   	push   %ebp
c010e476:	89 e5                	mov    %esp,%ebp
c010e478:	83 ec 08             	sub    $0x8,%esp
    down(&bootfs_sem);
c010e47b:	83 ec 0c             	sub    $0xc,%esp
c010e47e:	68 cc 10 15 c0       	push   $0xc01510cc
c010e483:	e8 13 aa ff ff       	call   c0108e9b <down>
c010e488:	83 c4 10             	add    $0x10,%esp
}
c010e48b:	90                   	nop
c010e48c:	c9                   	leave  
c010e48d:	c3                   	ret    

c010e48e <unlock_bootfs>:
// ulock_bootfs - ulock for bootfs
static void
unlock_bootfs(void) {
c010e48e:	55                   	push   %ebp
c010e48f:	89 e5                	mov    %esp,%ebp
c010e491:	83 ec 08             	sub    $0x8,%esp
    up(&bootfs_sem);
c010e494:	83 ec 0c             	sub    $0xc,%esp
c010e497:	68 cc 10 15 c0       	push   $0xc01510cc
c010e49c:	e8 de a9 ff ff       	call   c0108e7f <up>
c010e4a1:	83 c4 10             	add    $0x10,%esp
}
c010e4a4:	90                   	nop
c010e4a5:	c9                   	leave  
c010e4a6:	c3                   	ret    

c010e4a7 <change_bootfs>:

// change_bootfs - set the new fs inode 
static void
change_bootfs(struct inode *node) {
c010e4a7:	55                   	push   %ebp
c010e4a8:	89 e5                	mov    %esp,%ebp
c010e4aa:	83 ec 18             	sub    $0x18,%esp
    struct inode *old;
    lock_bootfs();
c010e4ad:	e8 c3 ff ff ff       	call   c010e475 <lock_bootfs>
    {
        old = bootfs_node, bootfs_node = node;
c010e4b2:	a1 d8 10 15 c0       	mov    0xc01510d8,%eax
c010e4b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e4ba:	8b 45 08             	mov    0x8(%ebp),%eax
c010e4bd:	a3 d8 10 15 c0       	mov    %eax,0xc01510d8
    }
    unlock_bootfs();
c010e4c2:	e8 c7 ff ff ff       	call   c010e48e <unlock_bootfs>
    if (old != NULL) {
c010e4c7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e4cb:	74 0e                	je     c010e4db <change_bootfs+0x34>
        vop_ref_dec(old);
c010e4cd:	83 ec 0c             	sub    $0xc,%esp
c010e4d0:	ff 75 f4             	pushl  -0xc(%ebp)
c010e4d3:	e8 d6 fc ff ff       	call   c010e1ae <inode_ref_dec>
c010e4d8:	83 c4 10             	add    $0x10,%esp
    }
}
c010e4db:	90                   	nop
c010e4dc:	c9                   	leave  
c010e4dd:	c3                   	ret    

c010e4de <vfs_set_bootfs>:

// vfs_set_bootfs - change the dir of file system
int
vfs_set_bootfs(char *fsname) {
c010e4de:	55                   	push   %ebp
c010e4df:	89 e5                	mov    %esp,%ebp
c010e4e1:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010e4e4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    if (fsname != NULL) {
c010e4eb:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e4ef:	74 66                	je     c010e557 <vfs_set_bootfs+0x79>
        char *s;
        if ((s = strchr(fsname, ':')) == NULL || s[1] != '\0') {
c010e4f1:	83 ec 08             	sub    $0x8,%esp
c010e4f4:	6a 3a                	push   $0x3a
c010e4f6:	ff 75 08             	pushl  0x8(%ebp)
c010e4f9:	e8 48 3d 00 00       	call   c0112246 <strchr>
c010e4fe:	83 c4 10             	add    $0x10,%esp
c010e501:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e504:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e508:	74 0d                	je     c010e517 <vfs_set_bootfs+0x39>
c010e50a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e50d:	83 c0 01             	add    $0x1,%eax
c010e510:	0f b6 00             	movzbl (%eax),%eax
c010e513:	84 c0                	test   %al,%al
c010e515:	74 07                	je     c010e51e <vfs_set_bootfs+0x40>
            return -E_INVAL;
c010e517:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010e51c:	eb 4d                	jmp    c010e56b <vfs_set_bootfs+0x8d>
        }
        int ret;
        if ((ret = vfs_chdir(fsname)) != 0) {
c010e51e:	83 ec 0c             	sub    $0xc,%esp
c010e521:	ff 75 08             	pushl  0x8(%ebp)
c010e524:	e8 4b f4 ff ff       	call   c010d974 <vfs_chdir>
c010e529:	83 c4 10             	add    $0x10,%esp
c010e52c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e52f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e533:	74 05                	je     c010e53a <vfs_set_bootfs+0x5c>
            return ret;
c010e535:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e538:	eb 31                	jmp    c010e56b <vfs_set_bootfs+0x8d>
        }
        if ((ret = vfs_get_curdir(&node)) != 0) {
c010e53a:	83 ec 0c             	sub    $0xc,%esp
c010e53d:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010e540:	50                   	push   %eax
c010e541:	e8 03 f3 ff ff       	call   c010d849 <vfs_get_curdir>
c010e546:	83 c4 10             	add    $0x10,%esp
c010e549:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e54c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e550:	74 05                	je     c010e557 <vfs_set_bootfs+0x79>
            return ret;
c010e552:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e555:	eb 14                	jmp    c010e56b <vfs_set_bootfs+0x8d>
        }
    }
    change_bootfs(node);
c010e557:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e55a:	83 ec 0c             	sub    $0xc,%esp
c010e55d:	50                   	push   %eax
c010e55e:	e8 44 ff ff ff       	call   c010e4a7 <change_bootfs>
c010e563:	83 c4 10             	add    $0x10,%esp
    return 0;
c010e566:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e56b:	c9                   	leave  
c010e56c:	c3                   	ret    

c010e56d <vfs_get_bootfs>:

// vfs_get_bootfs - get the inode of bootfs
int
vfs_get_bootfs(struct inode **node_store) {
c010e56d:	55                   	push   %ebp
c010e56e:	89 e5                	mov    %esp,%ebp
c010e570:	83 ec 18             	sub    $0x18,%esp
    struct inode *node = NULL;
c010e573:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (bootfs_node != NULL) {
c010e57a:	a1 d8 10 15 c0       	mov    0xc01510d8,%eax
c010e57f:	85 c0                	test   %eax,%eax
c010e581:	74 29                	je     c010e5ac <vfs_get_bootfs+0x3f>
        lock_bootfs();
c010e583:	e8 ed fe ff ff       	call   c010e475 <lock_bootfs>
        {
            if ((node = bootfs_node) != NULL) {
c010e588:	a1 d8 10 15 c0       	mov    0xc01510d8,%eax
c010e58d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e590:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e594:	74 11                	je     c010e5a7 <vfs_get_bootfs+0x3a>
                vop_ref_inc(bootfs_node);
c010e596:	a1 d8 10 15 c0       	mov    0xc01510d8,%eax
c010e59b:	83 ec 0c             	sub    $0xc,%esp
c010e59e:	50                   	push   %eax
c010e59f:	e8 f0 fb ff ff       	call   c010e194 <inode_ref_inc>
c010e5a4:	83 c4 10             	add    $0x10,%esp
            }
        }
        unlock_bootfs();
c010e5a7:	e8 e2 fe ff ff       	call   c010e48e <unlock_bootfs>
    }
    if (node == NULL) {
c010e5ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e5b0:	75 07                	jne    c010e5b9 <vfs_get_bootfs+0x4c>
        return -E_NOENT;
c010e5b2:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010e5b7:	eb 0d                	jmp    c010e5c6 <vfs_get_bootfs+0x59>
    }
    *node_store = node;
c010e5b9:	8b 45 08             	mov    0x8(%ebp),%eax
c010e5bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010e5bf:	89 10                	mov    %edx,(%eax)
    return 0;
c010e5c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e5c6:	c9                   	leave  
c010e5c7:	c3                   	ret    

c010e5c8 <__intr_save>:
#include <assert.h>
#include <atomic.h>
#include <sched.h>

static inline bool
__intr_save(void) {
c010e5c8:	55                   	push   %ebp
c010e5c9:	89 e5                	mov    %esp,%ebp
c010e5cb:	83 ec 18             	sub    $0x18,%esp
}

static inline uint32_t
read_eflags(void) {
    uint32_t eflags;
    asm volatile ("pushfl; popl %0" : "=r" (eflags));
c010e5ce:	9c                   	pushf  
c010e5cf:	58                   	pop    %eax
c010e5d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return eflags;
c010e5d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
    if (read_eflags() & FL_IF) {
c010e5d6:	25 00 02 00 00       	and    $0x200,%eax
c010e5db:	85 c0                	test   %eax,%eax
c010e5dd:	74 0c                	je     c010e5eb <__intr_save+0x23>
        intr_disable();
c010e5df:	e8 04 3c ff ff       	call   c01021e8 <intr_disable>
        return 1;
c010e5e4:	b8 01 00 00 00       	mov    $0x1,%eax
c010e5e9:	eb 05                	jmp    c010e5f0 <__intr_save+0x28>
    }
    return 0;
c010e5eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e5f0:	c9                   	leave  
c010e5f1:	c3                   	ret    

c010e5f2 <__intr_restore>:

static inline void
__intr_restore(bool flag) {
c010e5f2:	55                   	push   %ebp
c010e5f3:	89 e5                	mov    %esp,%ebp
c010e5f5:	83 ec 08             	sub    $0x8,%esp
    if (flag) {
c010e5f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c010e5fc:	74 05                	je     c010e603 <__intr_restore+0x11>
        intr_enable();
c010e5fe:	e8 de 3b ff ff       	call   c01021e1 <intr_enable>
    }
}
c010e603:	90                   	nop
c010e604:	c9                   	leave  
c010e605:	c3                   	ret    

c010e606 <dev_stdin_write>:
static char stdin_buffer[STDIN_BUFSIZE];
static off_t p_rpos, p_wpos;
static wait_queue_t __wait_queue, *wait_queue = &__wait_queue;

void
dev_stdin_write(char c) {
c010e606:	55                   	push   %ebp
c010e607:	89 e5                	mov    %esp,%ebp
c010e609:	83 ec 28             	sub    $0x28,%esp
c010e60c:	8b 45 08             	mov    0x8(%ebp),%eax
c010e60f:	88 45 e4             	mov    %al,-0x1c(%ebp)
    bool intr_flag;
    if (c != '\0') {
c010e612:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
c010e616:	0f 84 84 00 00 00    	je     c010e6a0 <dev_stdin_write+0x9a>
        local_intr_save(intr_flag);
c010e61c:	e8 a7 ff ff ff       	call   c010e5c8 <__intr_save>
c010e621:	89 45 f4             	mov    %eax,-0xc(%ebp)
        {
            stdin_buffer[p_wpos % STDIN_BUFSIZE] = c;
c010e624:	a1 e4 20 15 c0       	mov    0xc01520e4,%eax
c010e629:	99                   	cltd   
c010e62a:	c1 ea 14             	shr    $0x14,%edx
c010e62d:	01 d0                	add    %edx,%eax
c010e62f:	25 ff 0f 00 00       	and    $0xfff,%eax
c010e634:	29 d0                	sub    %edx,%eax
c010e636:	89 c2                	mov    %eax,%edx
c010e638:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
c010e63c:	88 82 e0 10 15 c0    	mov    %al,-0x3feaef20(%edx)
            if (p_wpos - p_rpos < STDIN_BUFSIZE) {
c010e642:	8b 15 e4 20 15 c0    	mov    0xc01520e4,%edx
c010e648:	a1 e0 20 15 c0       	mov    0xc01520e0,%eax
c010e64d:	29 c2                	sub    %eax,%edx
c010e64f:	89 d0                	mov    %edx,%eax
c010e651:	3d ff 0f 00 00       	cmp    $0xfff,%eax
c010e656:	7f 0d                	jg     c010e665 <dev_stdin_write+0x5f>
                p_wpos ++;
c010e658:	a1 e4 20 15 c0       	mov    0xc01520e4,%eax
c010e65d:	83 c0 01             	add    $0x1,%eax
c010e660:	a3 e4 20 15 c0       	mov    %eax,0xc01520e4
            }
            if (!wait_queue_empty(wait_queue)) {
c010e665:	a1 c0 be 14 c0       	mov    0xc014bec0,%eax
c010e66a:	83 ec 0c             	sub    $0xc,%esp
c010e66d:	50                   	push   %eax
c010e66e:	e8 ce a4 ff ff       	call   c0108b41 <wait_queue_empty>
c010e673:	83 c4 10             	add    $0x10,%esp
c010e676:	85 c0                	test   %eax,%eax
c010e678:	75 18                	jne    c010e692 <dev_stdin_write+0x8c>
                wakeup_queue(wait_queue, WT_KBD, 1);
c010e67a:	a1 c0 be 14 c0       	mov    0xc014bec0,%eax
c010e67f:	83 ec 04             	sub    $0x4,%esp
c010e682:	6a 01                	push   $0x1
c010e684:	68 04 00 00 80       	push   $0x80000004
c010e689:	50                   	push   %eax
c010e68a:	e8 63 a5 ff ff       	call   c0108bf2 <wakeup_queue>
c010e68f:	83 c4 10             	add    $0x10,%esp
            }
        }
        local_intr_restore(intr_flag);
c010e692:	83 ec 0c             	sub    $0xc,%esp
c010e695:	ff 75 f4             	pushl  -0xc(%ebp)
c010e698:	e8 55 ff ff ff       	call   c010e5f2 <__intr_restore>
c010e69d:	83 c4 10             	add    $0x10,%esp
    }
}
c010e6a0:	90                   	nop
c010e6a1:	c9                   	leave  
c010e6a2:	c3                   	ret    

c010e6a3 <dev_stdin_read>:

static int
dev_stdin_read(char *buf, size_t len) {
c010e6a3:	55                   	push   %ebp
c010e6a4:	89 e5                	mov    %esp,%ebp
c010e6a6:	83 ec 28             	sub    $0x28,%esp
    int ret = 0;
c010e6a9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    bool intr_flag;
    local_intr_save(intr_flag);
c010e6b0:	e8 13 ff ff ff       	call   c010e5c8 <__intr_save>
c010e6b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010e6b8:	e9 be 00 00 00       	jmp    c010e77b <dev_stdin_read+0xd8>
        try_again:
            if (p_rpos < p_wpos) {
c010e6bd:	8b 15 e0 20 15 c0    	mov    0xc01520e0,%edx
c010e6c3:	a1 e4 20 15 c0       	mov    0xc01520e4,%eax
c010e6c8:	39 c2                	cmp    %eax,%edx
c010e6ca:	7d 2c                	jge    c010e6f8 <dev_stdin_read+0x55>
                *buf ++ = stdin_buffer[p_rpos % STDIN_BUFSIZE];
c010e6cc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e6cf:	8d 50 01             	lea    0x1(%eax),%edx
c010e6d2:	89 55 08             	mov    %edx,0x8(%ebp)
c010e6d5:	8b 15 e0 20 15 c0    	mov    0xc01520e0,%edx
c010e6db:	89 d1                	mov    %edx,%ecx
c010e6dd:	c1 f9 1f             	sar    $0x1f,%ecx
c010e6e0:	c1 e9 14             	shr    $0x14,%ecx
c010e6e3:	01 ca                	add    %ecx,%edx
c010e6e5:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
c010e6eb:	29 ca                	sub    %ecx,%edx
c010e6ed:	0f b6 92 e0 10 15 c0 	movzbl -0x3feaef20(%edx),%edx
c010e6f4:	88 10                	mov    %dl,(%eax)
c010e6f6:	eb 72                	jmp    c010e76a <dev_stdin_read+0xc7>
            }
            else {
                wait_t __wait, *wait = &__wait;
c010e6f8:	8d 45 d8             	lea    -0x28(%ebp),%eax
c010e6fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
                wait_current_set(wait_queue, wait, WT_KBD);
c010e6fe:	a1 c0 be 14 c0       	mov    0xc014bec0,%eax
c010e703:	83 ec 04             	sub    $0x4,%esp
c010e706:	68 04 00 00 80       	push   $0x80000004
c010e70b:	ff 75 ec             	pushl  -0x14(%ebp)
c010e70e:	50                   	push   %eax
c010e70f:	e8 5a a5 ff ff       	call   c0108c6e <wait_current_set>
c010e714:	83 c4 10             	add    $0x10,%esp
                local_intr_restore(intr_flag);
c010e717:	83 ec 0c             	sub    $0xc,%esp
c010e71a:	ff 75 f0             	pushl  -0x10(%ebp)
c010e71d:	e8 d0 fe ff ff       	call   c010e5f2 <__intr_restore>
c010e722:	83 c4 10             	add    $0x10,%esp

                schedule();
c010e725:	e8 88 dd ff ff       	call   c010c4b2 <schedule>

                local_intr_save(intr_flag);
c010e72a:	e8 99 fe ff ff       	call   c010e5c8 <__intr_save>
c010e72f:	89 45 f0             	mov    %eax,-0x10(%ebp)
                wait_current_del(wait_queue, wait);
c010e732:	83 ec 0c             	sub    $0xc,%esp
c010e735:	ff 75 ec             	pushl  -0x14(%ebp)
c010e738:	e8 22 a4 ff ff       	call   c0108b5f <wait_in_queue>
c010e73d:	83 c4 10             	add    $0x10,%esp
c010e740:	85 c0                	test   %eax,%eax
c010e742:	74 14                	je     c010e758 <dev_stdin_read+0xb5>
c010e744:	a1 c0 be 14 c0       	mov    0xc014bec0,%eax
c010e749:	83 ec 08             	sub    $0x8,%esp
c010e74c:	ff 75 ec             	pushl  -0x14(%ebp)
c010e74f:	50                   	push   %eax
c010e750:	e8 2d a2 ff ff       	call   c0108982 <wait_queue_del>
c010e755:	83 c4 10             	add    $0x10,%esp
                if (wait->wakeup_flags == WT_KBD) {
c010e758:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010e75b:	8b 40 04             	mov    0x4(%eax),%eax
c010e75e:	3d 04 00 00 80       	cmp    $0x80000004,%eax
c010e763:	75 24                	jne    c010e789 <dev_stdin_read+0xe6>
c010e765:	e9 53 ff ff ff       	jmp    c010e6bd <dev_stdin_read+0x1a>
dev_stdin_read(char *buf, size_t len) {
    int ret = 0;
    bool intr_flag;
    local_intr_save(intr_flag);
    {
        for (; ret < len; ret ++, p_rpos ++) {
c010e76a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c010e76e:	a1 e0 20 15 c0       	mov    0xc01520e0,%eax
c010e773:	83 c0 01             	add    $0x1,%eax
c010e776:	a3 e0 20 15 c0       	mov    %eax,0xc01520e0
c010e77b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e77e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010e781:	0f 82 36 ff ff ff    	jb     c010e6bd <dev_stdin_read+0x1a>
c010e787:	eb 01                	jmp    c010e78a <dev_stdin_read+0xe7>
                local_intr_save(intr_flag);
                wait_current_del(wait_queue, wait);
                if (wait->wakeup_flags == WT_KBD) {
                    goto try_again;
                }
                break;
c010e789:	90                   	nop
            }
        }
    }
    local_intr_restore(intr_flag);
c010e78a:	83 ec 0c             	sub    $0xc,%esp
c010e78d:	ff 75 f0             	pushl  -0x10(%ebp)
c010e790:	e8 5d fe ff ff       	call   c010e5f2 <__intr_restore>
c010e795:	83 c4 10             	add    $0x10,%esp
    return ret;
c010e798:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010e79b:	c9                   	leave  
c010e79c:	c3                   	ret    

c010e79d <stdin_open>:

static int
stdin_open(struct device *dev, uint32_t open_flags) {
c010e79d:	55                   	push   %ebp
c010e79e:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_RDONLY) {
c010e7a0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010e7a4:	74 07                	je     c010e7ad <stdin_open+0x10>
        return -E_INVAL;
c010e7a6:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010e7ab:	eb 05                	jmp    c010e7b2 <stdin_open+0x15>
    }
    return 0;
c010e7ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e7b2:	5d                   	pop    %ebp
c010e7b3:	c3                   	ret    

c010e7b4 <stdin_close>:

static int
stdin_close(struct device *dev) {
c010e7b4:	55                   	push   %ebp
c010e7b5:	89 e5                	mov    %esp,%ebp
    return 0;
c010e7b7:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e7bc:	5d                   	pop    %ebp
c010e7bd:	c3                   	ret    

c010e7be <stdin_io>:

static int
stdin_io(struct device *dev, struct iobuf *iob, bool write) {
c010e7be:	55                   	push   %ebp
c010e7bf:	89 e5                	mov    %esp,%ebp
c010e7c1:	83 ec 18             	sub    $0x18,%esp
    if (!write) {
c010e7c4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010e7c8:	75 37                	jne    c010e801 <stdin_io+0x43>
        int ret;
        if ((ret = dev_stdin_read(iob->io_base, iob->io_resid)) > 0) {
c010e7ca:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7cd:	8b 50 0c             	mov    0xc(%eax),%edx
c010e7d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7d3:	8b 00                	mov    (%eax),%eax
c010e7d5:	83 ec 08             	sub    $0x8,%esp
c010e7d8:	52                   	push   %edx
c010e7d9:	50                   	push   %eax
c010e7da:	e8 c4 fe ff ff       	call   c010e6a3 <dev_stdin_read>
c010e7df:	83 c4 10             	add    $0x10,%esp
c010e7e2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e7e5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e7e9:	7e 11                	jle    c010e7fc <stdin_io+0x3e>
            iob->io_resid -= ret;
c010e7eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7ee:	8b 50 0c             	mov    0xc(%eax),%edx
c010e7f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7f4:	29 c2                	sub    %eax,%edx
c010e7f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e7f9:	89 50 0c             	mov    %edx,0xc(%eax)
        }
        return ret;
c010e7fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e7ff:	eb 05                	jmp    c010e806 <stdin_io+0x48>
    }
    return -E_INVAL;
c010e801:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010e806:	c9                   	leave  
c010e807:	c3                   	ret    

c010e808 <stdin_ioctl>:

static int
stdin_ioctl(struct device *dev, int op, void *data) {
c010e808:	55                   	push   %ebp
c010e809:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c010e80b:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010e810:	5d                   	pop    %ebp
c010e811:	c3                   	ret    

c010e812 <stdin_device_init>:

static void
stdin_device_init(struct device *dev) {
c010e812:	55                   	push   %ebp
c010e813:	89 e5                	mov    %esp,%ebp
c010e815:	83 ec 08             	sub    $0x8,%esp
    dev->d_blocks = 0;
c010e818:	8b 45 08             	mov    0x8(%ebp),%eax
c010e81b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c010e821:	8b 45 08             	mov    0x8(%ebp),%eax
c010e824:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdin_open;
c010e82b:	8b 45 08             	mov    0x8(%ebp),%eax
c010e82e:	c7 40 08 9d e7 10 c0 	movl   $0xc010e79d,0x8(%eax)
    dev->d_close = stdin_close;
c010e835:	8b 45 08             	mov    0x8(%ebp),%eax
c010e838:	c7 40 0c b4 e7 10 c0 	movl   $0xc010e7b4,0xc(%eax)
    dev->d_io = stdin_io;
c010e83f:	8b 45 08             	mov    0x8(%ebp),%eax
c010e842:	c7 40 10 be e7 10 c0 	movl   $0xc010e7be,0x10(%eax)
    dev->d_ioctl = stdin_ioctl;
c010e849:	8b 45 08             	mov    0x8(%ebp),%eax
c010e84c:	c7 40 14 08 e8 10 c0 	movl   $0xc010e808,0x14(%eax)

    p_rpos = p_wpos = 0;
c010e853:	c7 05 e4 20 15 c0 00 	movl   $0x0,0xc01520e4
c010e85a:	00 00 00 
c010e85d:	a1 e4 20 15 c0       	mov    0xc01520e4,%eax
c010e862:	a3 e0 20 15 c0       	mov    %eax,0xc01520e0
    wait_queue_init(wait_queue);
c010e867:	a1 c0 be 14 c0       	mov    0xc014bec0,%eax
c010e86c:	83 ec 0c             	sub    $0xc,%esp
c010e86f:	50                   	push   %eax
c010e870:	e8 56 a0 ff ff       	call   c01088cb <wait_queue_init>
c010e875:	83 c4 10             	add    $0x10,%esp
}
c010e878:	90                   	nop
c010e879:	c9                   	leave  
c010e87a:	c3                   	ret    

c010e87b <dev_init_stdin>:

void
dev_init_stdin(void) {
c010e87b:	55                   	push   %ebp
c010e87c:	89 e5                	mov    %esp,%ebp
c010e87e:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c010e881:	e8 ab 09 00 00       	call   c010f231 <dev_create_inode>
c010e886:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e889:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010e88d:	75 14                	jne    c010e8a3 <dev_init_stdin+0x28>
        panic("stdin: dev_create_node.\n");
c010e88f:	83 ec 04             	sub    $0x4,%esp
c010e892:	68 44 61 11 c0       	push   $0xc0116144
c010e897:	6a 75                	push   $0x75
c010e899:	68 5d 61 11 c0       	push   $0xc011615d
c010e89e:	e8 42 1c ff ff       	call   c01004e5 <__panic>
    }
    stdin_device_init(vop_info(node, device));
c010e8a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010e8a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010e8a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010e8ad:	74 0d                	je     c010e8bc <dev_init_stdin+0x41>
c010e8af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8b2:	8b 40 2c             	mov    0x2c(%eax),%eax
c010e8b5:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010e8ba:	74 16                	je     c010e8d2 <dev_init_stdin+0x57>
c010e8bc:	68 78 61 11 c0       	push   $0xc0116178
c010e8c1:	68 ab 61 11 c0       	push   $0xc01161ab
c010e8c6:	6a 77                	push   $0x77
c010e8c8:	68 5d 61 11 c0       	push   $0xc011615d
c010e8cd:	e8 13 1c ff ff       	call   c01004e5 <__panic>
c010e8d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010e8d5:	83 ec 0c             	sub    $0xc,%esp
c010e8d8:	50                   	push   %eax
c010e8d9:	e8 34 ff ff ff       	call   c010e812 <stdin_device_init>
c010e8de:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdin", node, 0)) != 0) {
c010e8e1:	83 ec 04             	sub    $0x4,%esp
c010e8e4:	6a 00                	push   $0x0
c010e8e6:	ff 75 f4             	pushl  -0xc(%ebp)
c010e8e9:	68 c0 61 11 c0       	push   $0xc01161c0
c010e8ee:	e8 3f eb ff ff       	call   c010d432 <vfs_add_dev>
c010e8f3:	83 c4 10             	add    $0x10,%esp
c010e8f6:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e8f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e8fd:	74 14                	je     c010e913 <dev_init_stdin+0x98>
        panic("stdin: vfs_add_dev: %e.\n", ret);
c010e8ff:	ff 75 ec             	pushl  -0x14(%ebp)
c010e902:	68 c6 61 11 c0       	push   $0xc01161c6
c010e907:	6a 7b                	push   $0x7b
c010e909:	68 5d 61 11 c0       	push   $0xc011615d
c010e90e:	e8 d2 1b ff ff       	call   c01004e5 <__panic>
    }
}
c010e913:	90                   	nop
c010e914:	c9                   	leave  
c010e915:	c3                   	ret    

c010e916 <lock_disk0>:

static char *disk0_buffer;
static semaphore_t disk0_sem;

static void
lock_disk0(void) {
c010e916:	55                   	push   %ebp
c010e917:	89 e5                	mov    %esp,%ebp
c010e919:	83 ec 08             	sub    $0x8,%esp
    down(&(disk0_sem));
c010e91c:	83 ec 0c             	sub    $0xc,%esp
c010e91f:	68 f4 20 15 c0       	push   $0xc01520f4
c010e924:	e8 72 a5 ff ff       	call   c0108e9b <down>
c010e929:	83 c4 10             	add    $0x10,%esp
}
c010e92c:	90                   	nop
c010e92d:	c9                   	leave  
c010e92e:	c3                   	ret    

c010e92f <unlock_disk0>:

static void
unlock_disk0(void) {
c010e92f:	55                   	push   %ebp
c010e930:	89 e5                	mov    %esp,%ebp
c010e932:	83 ec 08             	sub    $0x8,%esp
    up(&(disk0_sem));
c010e935:	83 ec 0c             	sub    $0xc,%esp
c010e938:	68 f4 20 15 c0       	push   $0xc01520f4
c010e93d:	e8 3d a5 ff ff       	call   c0108e7f <up>
c010e942:	83 c4 10             	add    $0x10,%esp
}
c010e945:	90                   	nop
c010e946:	c9                   	leave  
c010e947:	c3                   	ret    

c010e948 <disk0_open>:

static int
disk0_open(struct device *dev, uint32_t open_flags) {
c010e948:	55                   	push   %ebp
c010e949:	89 e5                	mov    %esp,%ebp
    return 0;
c010e94b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e950:	5d                   	pop    %ebp
c010e951:	c3                   	ret    

c010e952 <disk0_close>:

static int
disk0_close(struct device *dev) {
c010e952:	55                   	push   %ebp
c010e953:	89 e5                	mov    %esp,%ebp
    return 0;
c010e955:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010e95a:	5d                   	pop    %ebp
c010e95b:	c3                   	ret    

c010e95c <disk0_read_blks_nolock>:

static void
disk0_read_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010e95c:	55                   	push   %ebp
c010e95d:	89 e5                	mov    %esp,%ebp
c010e95f:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010e962:	8b 45 08             	mov    0x8(%ebp),%eax
c010e965:	c1 e0 03             	shl    $0x3,%eax
c010e968:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e96b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e96e:	c1 e0 03             	shl    $0x3,%eax
c010e971:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_read_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010e974:	a1 f0 20 15 c0       	mov    0xc01520f0,%eax
c010e979:	ff 75 f0             	pushl  -0x10(%ebp)
c010e97c:	50                   	push   %eax
c010e97d:	ff 75 f4             	pushl  -0xc(%ebp)
c010e980:	6a 02                	push   $0x2
c010e982:	e8 f4 28 ff ff       	call   c010127b <ide_read_secs>
c010e987:	83 c4 10             	add    $0x10,%esp
c010e98a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e98d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e991:	74 20                	je     c010e9b3 <disk0_read_blks_nolock+0x57>
        panic("disk0: read blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010e993:	ff 75 ec             	pushl  -0x14(%ebp)
c010e996:	ff 75 f0             	pushl  -0x10(%ebp)
c010e999:	ff 75 0c             	pushl  0xc(%ebp)
c010e99c:	ff 75 f4             	pushl  -0xc(%ebp)
c010e99f:	ff 75 08             	pushl  0x8(%ebp)
c010e9a2:	68 e0 61 11 c0       	push   $0xc01161e0
c010e9a7:	6a 2e                	push   $0x2e
c010e9a9:	68 28 62 11 c0       	push   $0xc0116228
c010e9ae:	e8 32 1b ff ff       	call   c01004e5 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010e9b3:	90                   	nop
c010e9b4:	c9                   	leave  
c010e9b5:	c3                   	ret    

c010e9b6 <disk0_write_blks_nolock>:

static void
disk0_write_blks_nolock(uint32_t blkno, uint32_t nblks) {
c010e9b6:	55                   	push   %ebp
c010e9b7:	89 e5                	mov    %esp,%ebp
c010e9b9:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t sectno = blkno * DISK0_BLK_NSECT, nsecs = nblks * DISK0_BLK_NSECT;
c010e9bc:	8b 45 08             	mov    0x8(%ebp),%eax
c010e9bf:	c1 e0 03             	shl    $0x3,%eax
c010e9c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010e9c5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010e9c8:	c1 e0 03             	shl    $0x3,%eax
c010e9cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = ide_write_secs(DISK0_DEV_NO, sectno, disk0_buffer, nsecs)) != 0) {
c010e9ce:	a1 f0 20 15 c0       	mov    0xc01520f0,%eax
c010e9d3:	ff 75 f0             	pushl  -0x10(%ebp)
c010e9d6:	50                   	push   %eax
c010e9d7:	ff 75 f4             	pushl  -0xc(%ebp)
c010e9da:	6a 02                	push   $0x2
c010e9dc:	e8 c4 2a ff ff       	call   c01014a5 <ide_write_secs>
c010e9e1:	83 c4 10             	add    $0x10,%esp
c010e9e4:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010e9e7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010e9eb:	74 20                	je     c010ea0d <disk0_write_blks_nolock+0x57>
        panic("disk0: write blkno = %d (sectno = %d), nblks = %d (nsecs = %d): 0x%08x.\n",
c010e9ed:	ff 75 ec             	pushl  -0x14(%ebp)
c010e9f0:	ff 75 f0             	pushl  -0x10(%ebp)
c010e9f3:	ff 75 0c             	pushl  0xc(%ebp)
c010e9f6:	ff 75 f4             	pushl  -0xc(%ebp)
c010e9f9:	ff 75 08             	pushl  0x8(%ebp)
c010e9fc:	68 44 62 11 c0       	push   $0xc0116244
c010ea01:	6a 38                	push   $0x38
c010ea03:	68 28 62 11 c0       	push   $0xc0116228
c010ea08:	e8 d8 1a ff ff       	call   c01004e5 <__panic>
                blkno, sectno, nblks, nsecs, ret);
    }
}
c010ea0d:	90                   	nop
c010ea0e:	c9                   	leave  
c010ea0f:	c3                   	ret    

c010ea10 <disk0_io>:

static int
disk0_io(struct device *dev, struct iobuf *iob, bool write) {
c010ea10:	55                   	push   %ebp
c010ea11:	89 e5                	mov    %esp,%ebp
c010ea13:	83 ec 28             	sub    $0x28,%esp
    off_t offset = iob->io_offset;
c010ea16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea19:	8b 40 04             	mov    0x4(%eax),%eax
c010ea1c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    size_t resid = iob->io_resid;
c010ea1f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ea22:	8b 40 0c             	mov    0xc(%eax),%eax
c010ea25:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t blkno = offset / DISK0_BLKSIZE;
c010ea28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ea2b:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c010ea31:	85 c0                	test   %eax,%eax
c010ea33:	0f 48 c2             	cmovs  %edx,%eax
c010ea36:	c1 f8 0c             	sar    $0xc,%eax
c010ea39:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t nblks = resid / DISK0_BLKSIZE;
c010ea3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea3f:	c1 e8 0c             	shr    $0xc,%eax
c010ea42:	89 45 ec             	mov    %eax,-0x14(%ebp)

    /* don't allow I/O that isn't block-aligned */
    if ((offset % DISK0_BLKSIZE) != 0 || (resid % DISK0_BLKSIZE) != 0) {
c010ea45:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010ea48:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ea4d:	85 c0                	test   %eax,%eax
c010ea4f:	75 0c                	jne    c010ea5d <disk0_io+0x4d>
c010ea51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ea54:	25 ff 0f 00 00       	and    $0xfff,%eax
c010ea59:	85 c0                	test   %eax,%eax
c010ea5b:	74 0a                	je     c010ea67 <disk0_io+0x57>
        return -E_INVAL;
c010ea5d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ea62:	e9 3b 01 00 00       	jmp    c010eba2 <disk0_io+0x192>
    }

    /* don't allow I/O past the end of disk0 */
    if (blkno + nblks > dev->d_blocks) {
c010ea67:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ea6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ea6d:	01 c2                	add    %eax,%edx
c010ea6f:	8b 45 08             	mov    0x8(%ebp),%eax
c010ea72:	8b 00                	mov    (%eax),%eax
c010ea74:	39 c2                	cmp    %eax,%edx
c010ea76:	76 0a                	jbe    c010ea82 <disk0_io+0x72>
        return -E_INVAL;
c010ea78:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ea7d:	e9 20 01 00 00       	jmp    c010eba2 <disk0_io+0x192>
    }

    /* read/write nothing ? */
    if (nblks == 0) {
c010ea82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ea86:	75 0a                	jne    c010ea92 <disk0_io+0x82>
        return 0;
c010ea88:	b8 00 00 00 00       	mov    $0x0,%eax
c010ea8d:	e9 10 01 00 00       	jmp    c010eba2 <disk0_io+0x192>
    }

    lock_disk0();
c010ea92:	e8 7f fe ff ff       	call   c010e916 <lock_disk0>
    while (resid != 0) {
c010ea97:	e9 f2 00 00 00       	jmp    c010eb8e <disk0_io+0x17e>
        size_t copied, alen = DISK0_BUFSIZE;
c010ea9c:	c7 45 e8 00 40 00 00 	movl   $0x4000,-0x18(%ebp)
        if (write) {
c010eaa3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010eaa7:	74 6a                	je     c010eb13 <disk0_io+0x103>
            iobuf_move(iob, disk0_buffer, alen, 0, &copied);
c010eaa9:	a1 f0 20 15 c0       	mov    0xc01520f0,%eax
c010eaae:	83 ec 0c             	sub    $0xc,%esp
c010eab1:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010eab4:	52                   	push   %edx
c010eab5:	6a 00                	push   $0x0
c010eab7:	ff 75 e8             	pushl  -0x18(%ebp)
c010eaba:	50                   	push   %eax
c010eabb:	ff 75 0c             	pushl  0xc(%ebp)
c010eabe:	e8 c0 bb ff ff       	call   c010a683 <iobuf_move>
c010eac3:	83 c4 20             	add    $0x20,%esp
            assert(copied != 0 && copied <= resid && copied % DISK0_BLKSIZE == 0);
c010eac6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eac9:	85 c0                	test   %eax,%eax
c010eacb:	74 14                	je     c010eae1 <disk0_io+0xd1>
c010eacd:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ead0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010ead3:	77 0c                	ja     c010eae1 <disk0_io+0xd1>
c010ead5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010ead8:	25 ff 0f 00 00       	and    $0xfff,%eax
c010eadd:	85 c0                	test   %eax,%eax
c010eadf:	74 16                	je     c010eaf7 <disk0_io+0xe7>
c010eae1:	68 90 62 11 c0       	push   $0xc0116290
c010eae6:	68 ce 62 11 c0       	push   $0xc01162ce
c010eaeb:	6a 57                	push   $0x57
c010eaed:	68 28 62 11 c0       	push   $0xc0116228
c010eaf2:	e8 ee 19 ff ff       	call   c01004e5 <__panic>
            nblks = copied / DISK0_BLKSIZE;
c010eaf7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eafa:	c1 e8 0c             	shr    $0xc,%eax
c010eafd:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_write_blks_nolock(blkno, nblks);
c010eb00:	83 ec 08             	sub    $0x8,%esp
c010eb03:	ff 75 ec             	pushl  -0x14(%ebp)
c010eb06:	ff 75 f0             	pushl  -0x10(%ebp)
c010eb09:	e8 a8 fe ff ff       	call   c010e9b6 <disk0_write_blks_nolock>
c010eb0e:	83 c4 10             	add    $0x10,%esp
c010eb11:	eb 6f                	jmp    c010eb82 <disk0_io+0x172>
        }
        else {
            if (alen > resid) {
c010eb13:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb16:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c010eb19:	76 06                	jbe    c010eb21 <disk0_io+0x111>
                alen = resid;
c010eb1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eb1e:	89 45 e8             	mov    %eax,-0x18(%ebp)
            }
            nblks = alen / DISK0_BLKSIZE;
c010eb21:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010eb24:	c1 e8 0c             	shr    $0xc,%eax
c010eb27:	89 45 ec             	mov    %eax,-0x14(%ebp)
            disk0_read_blks_nolock(blkno, nblks);
c010eb2a:	83 ec 08             	sub    $0x8,%esp
c010eb2d:	ff 75 ec             	pushl  -0x14(%ebp)
c010eb30:	ff 75 f0             	pushl  -0x10(%ebp)
c010eb33:	e8 24 fe ff ff       	call   c010e95c <disk0_read_blks_nolock>
c010eb38:	83 c4 10             	add    $0x10,%esp
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
c010eb3b:	a1 f0 20 15 c0       	mov    0xc01520f0,%eax
c010eb40:	83 ec 0c             	sub    $0xc,%esp
c010eb43:	8d 55 e0             	lea    -0x20(%ebp),%edx
c010eb46:	52                   	push   %edx
c010eb47:	6a 01                	push   $0x1
c010eb49:	ff 75 e8             	pushl  -0x18(%ebp)
c010eb4c:	50                   	push   %eax
c010eb4d:	ff 75 0c             	pushl  0xc(%ebp)
c010eb50:	e8 2e bb ff ff       	call   c010a683 <iobuf_move>
c010eb55:	83 c4 20             	add    $0x20,%esp
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
c010eb58:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb5b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c010eb5e:	75 0c                	jne    c010eb6c <disk0_io+0x15c>
c010eb60:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb63:	25 ff 0f 00 00       	and    $0xfff,%eax
c010eb68:	85 c0                	test   %eax,%eax
c010eb6a:	74 16                	je     c010eb82 <disk0_io+0x172>
c010eb6c:	68 e4 62 11 c0       	push   $0xc01162e4
c010eb71:	68 ce 62 11 c0       	push   $0xc01162ce
c010eb76:	6a 62                	push   $0x62
c010eb78:	68 28 62 11 c0       	push   $0xc0116228
c010eb7d:	e8 63 19 ff ff       	call   c01004e5 <__panic>
        }
        resid -= copied, blkno += nblks;
c010eb82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010eb85:	29 45 f4             	sub    %eax,-0xc(%ebp)
c010eb88:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010eb8b:	01 45 f0             	add    %eax,-0x10(%ebp)
    if (nblks == 0) {
        return 0;
    }

    lock_disk0();
    while (resid != 0) {
c010eb8e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eb92:	0f 85 04 ff ff ff    	jne    c010ea9c <disk0_io+0x8c>
            iobuf_move(iob, disk0_buffer, alen, 1, &copied);
            assert(copied == alen && copied % DISK0_BLKSIZE == 0);
        }
        resid -= copied, blkno += nblks;
    }
    unlock_disk0();
c010eb98:	e8 92 fd ff ff       	call   c010e92f <unlock_disk0>
    return 0;
c010eb9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010eba2:	c9                   	leave  
c010eba3:	c3                   	ret    

c010eba4 <disk0_ioctl>:

static int
disk0_ioctl(struct device *dev, int op, void *data) {
c010eba4:	55                   	push   %ebp
c010eba5:	89 e5                	mov    %esp,%ebp
    return -E_UNIMP;
c010eba7:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
}
c010ebac:	5d                   	pop    %ebp
c010ebad:	c3                   	ret    

c010ebae <disk0_device_init>:

static void
disk0_device_init(struct device *dev) {
c010ebae:	55                   	push   %ebp
c010ebaf:	89 e5                	mov    %esp,%ebp
c010ebb1:	83 ec 08             	sub    $0x8,%esp
    static_assert(DISK0_BLKSIZE % SECTSIZE == 0);
    if (!ide_device_valid(DISK0_DEV_NO)) {
c010ebb4:	83 ec 0c             	sub    $0xc,%esp
c010ebb7:	6a 02                	push   $0x2
c010ebb9:	e8 3d 26 ff ff       	call   c01011fb <ide_device_valid>
c010ebbe:	83 c4 10             	add    $0x10,%esp
c010ebc1:	85 c0                	test   %eax,%eax
c010ebc3:	75 14                	jne    c010ebd9 <disk0_device_init+0x2b>
        panic("disk0 device isn't available.\n");
c010ebc5:	83 ec 04             	sub    $0x4,%esp
c010ebc8:	68 14 63 11 c0       	push   $0xc0116314
c010ebcd:	6a 73                	push   $0x73
c010ebcf:	68 28 62 11 c0       	push   $0xc0116228
c010ebd4:	e8 0c 19 ff ff       	call   c01004e5 <__panic>
    }
    dev->d_blocks = ide_device_size(DISK0_DEV_NO) / DISK0_BLK_NSECT;
c010ebd9:	83 ec 0c             	sub    $0xc,%esp
c010ebdc:	6a 02                	push   $0x2
c010ebde:	e8 58 26 ff ff       	call   c010123b <ide_device_size>
c010ebe3:	83 c4 10             	add    $0x10,%esp
c010ebe6:	c1 e8 03             	shr    $0x3,%eax
c010ebe9:	89 c2                	mov    %eax,%edx
c010ebeb:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebee:	89 10                	mov    %edx,(%eax)
    dev->d_blocksize = DISK0_BLKSIZE;
c010ebf0:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebf3:	c7 40 04 00 10 00 00 	movl   $0x1000,0x4(%eax)
    dev->d_open = disk0_open;
c010ebfa:	8b 45 08             	mov    0x8(%ebp),%eax
c010ebfd:	c7 40 08 48 e9 10 c0 	movl   $0xc010e948,0x8(%eax)
    dev->d_close = disk0_close;
c010ec04:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec07:	c7 40 0c 52 e9 10 c0 	movl   $0xc010e952,0xc(%eax)
    dev->d_io = disk0_io;
c010ec0e:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec11:	c7 40 10 10 ea 10 c0 	movl   $0xc010ea10,0x10(%eax)
    dev->d_ioctl = disk0_ioctl;
c010ec18:	8b 45 08             	mov    0x8(%ebp),%eax
c010ec1b:	c7 40 14 a4 eb 10 c0 	movl   $0xc010eba4,0x14(%eax)
    sem_init(&(disk0_sem), 1);
c010ec22:	83 ec 08             	sub    $0x8,%esp
c010ec25:	6a 01                	push   $0x1
c010ec27:	68 f4 20 15 c0       	push   $0xc01520f4
c010ec2c:	e8 e1 a0 ff ff       	call   c0108d12 <sem_init>
c010ec31:	83 c4 10             	add    $0x10,%esp

    static_assert(DISK0_BUFSIZE % DISK0_BLKSIZE == 0);
    if ((disk0_buffer = kmalloc(DISK0_BUFSIZE)) == NULL) {
c010ec34:	83 ec 0c             	sub    $0xc,%esp
c010ec37:	68 00 40 00 00       	push   $0x4000
c010ec3c:	e8 03 82 ff ff       	call   c0106e44 <kmalloc>
c010ec41:	83 c4 10             	add    $0x10,%esp
c010ec44:	a3 f0 20 15 c0       	mov    %eax,0xc01520f0
c010ec49:	a1 f0 20 15 c0       	mov    0xc01520f0,%eax
c010ec4e:	85 c0                	test   %eax,%eax
c010ec50:	75 14                	jne    c010ec66 <disk0_device_init+0xb8>
        panic("disk0 alloc buffer failed.\n");
c010ec52:	83 ec 04             	sub    $0x4,%esp
c010ec55:	68 33 63 11 c0       	push   $0xc0116333
c010ec5a:	6a 7f                	push   $0x7f
c010ec5c:	68 28 62 11 c0       	push   $0xc0116228
c010ec61:	e8 7f 18 ff ff       	call   c01004e5 <__panic>
    }
}
c010ec66:	90                   	nop
c010ec67:	c9                   	leave  
c010ec68:	c3                   	ret    

c010ec69 <dev_init_disk0>:

void
dev_init_disk0(void) {
c010ec69:	55                   	push   %ebp
c010ec6a:	89 e5                	mov    %esp,%ebp
c010ec6c:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c010ec6f:	e8 bd 05 00 00       	call   c010f231 <dev_create_inode>
c010ec74:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ec77:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ec7b:	75 17                	jne    c010ec94 <dev_init_disk0+0x2b>
        panic("disk0: dev_create_node.\n");
c010ec7d:	83 ec 04             	sub    $0x4,%esp
c010ec80:	68 4f 63 11 c0       	push   $0xc011634f
c010ec85:	68 87 00 00 00       	push   $0x87
c010ec8a:	68 28 62 11 c0       	push   $0xc0116228
c010ec8f:	e8 51 18 ff ff       	call   c01004e5 <__panic>
    }
    disk0_device_init(vop_info(node, device));
c010ec94:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ec97:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010ec9a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ec9e:	74 0d                	je     c010ecad <dev_init_disk0+0x44>
c010eca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eca3:	8b 40 2c             	mov    0x2c(%eax),%eax
c010eca6:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ecab:	74 19                	je     c010ecc6 <dev_init_disk0+0x5d>
c010ecad:	68 68 63 11 c0       	push   $0xc0116368
c010ecb2:	68 ce 62 11 c0       	push   $0xc01162ce
c010ecb7:	68 89 00 00 00       	push   $0x89
c010ecbc:	68 28 62 11 c0       	push   $0xc0116228
c010ecc1:	e8 1f 18 ff ff       	call   c01004e5 <__panic>
c010ecc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ecc9:	83 ec 0c             	sub    $0xc,%esp
c010eccc:	50                   	push   %eax
c010eccd:	e8 dc fe ff ff       	call   c010ebae <disk0_device_init>
c010ecd2:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("disk0", node, 1)) != 0) {
c010ecd5:	83 ec 04             	sub    $0x4,%esp
c010ecd8:	6a 01                	push   $0x1
c010ecda:	ff 75 f4             	pushl  -0xc(%ebp)
c010ecdd:	68 9b 63 11 c0       	push   $0xc011639b
c010ece2:	e8 4b e7 ff ff       	call   c010d432 <vfs_add_dev>
c010ece7:	83 c4 10             	add    $0x10,%esp
c010ecea:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010eced:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ecf1:	74 17                	je     c010ed0a <dev_init_disk0+0xa1>
        panic("disk0: vfs_add_dev: %e.\n", ret);
c010ecf3:	ff 75 ec             	pushl  -0x14(%ebp)
c010ecf6:	68 a1 63 11 c0       	push   $0xc01163a1
c010ecfb:	68 8d 00 00 00       	push   $0x8d
c010ed00:	68 28 62 11 c0       	push   $0xc0116228
c010ed05:	e8 db 17 ff ff       	call   c01004e5 <__panic>
    }
}
c010ed0a:	90                   	nop
c010ed0b:	c9                   	leave  
c010ed0c:	c3                   	ret    

c010ed0d <stdout_open>:
#include <unistd.h>
#include <error.h>
#include <assert.h>

static int
stdout_open(struct device *dev, uint32_t open_flags) {
c010ed0d:	55                   	push   %ebp
c010ed0e:	89 e5                	mov    %esp,%ebp
    if (open_flags != O_WRONLY) {
c010ed10:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c010ed14:	74 07                	je     c010ed1d <stdout_open+0x10>
        return -E_INVAL;
c010ed16:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ed1b:	eb 05                	jmp    c010ed22 <stdout_open+0x15>
    }
    return 0;
c010ed1d:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ed22:	5d                   	pop    %ebp
c010ed23:	c3                   	ret    

c010ed24 <stdout_close>:

static int
stdout_close(struct device *dev) {
c010ed24:	55                   	push   %ebp
c010ed25:	89 e5                	mov    %esp,%ebp
    return 0;
c010ed27:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ed2c:	5d                   	pop    %ebp
c010ed2d:	c3                   	ret    

c010ed2e <stdout_io>:

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
c010ed2e:	55                   	push   %ebp
c010ed2f:	89 e5                	mov    %esp,%ebp
c010ed31:	83 ec 18             	sub    $0x18,%esp
    if (write) {
c010ed34:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010ed38:	74 45                	je     c010ed7f <stdout_io+0x51>
        char *data = iob->io_base;
c010ed3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ed3d:	8b 00                	mov    (%eax),%eax
c010ed3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        for (; iob->io_resid != 0; iob->io_resid --) {
c010ed42:	eb 2a                	jmp    c010ed6e <stdout_io+0x40>
            cputchar(*data ++);
c010ed44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ed47:	8d 50 01             	lea    0x1(%eax),%edx
c010ed4a:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010ed4d:	0f b6 00             	movzbl (%eax),%eax
c010ed50:	0f be c0             	movsbl %al,%eax
c010ed53:	83 ec 0c             	sub    $0xc,%esp
c010ed56:	50                   	push   %eax
c010ed57:	e8 49 16 ff ff       	call   c01003a5 <cputchar>
c010ed5c:	83 c4 10             	add    $0x10,%esp

static int
stdout_io(struct device *dev, struct iobuf *iob, bool write) {
    if (write) {
        char *data = iob->io_base;
        for (; iob->io_resid != 0; iob->io_resid --) {
c010ed5f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ed62:	8b 40 0c             	mov    0xc(%eax),%eax
c010ed65:	8d 50 ff             	lea    -0x1(%eax),%edx
c010ed68:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ed6b:	89 50 0c             	mov    %edx,0xc(%eax)
c010ed6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ed71:	8b 40 0c             	mov    0xc(%eax),%eax
c010ed74:	85 c0                	test   %eax,%eax
c010ed76:	75 cc                	jne    c010ed44 <stdout_io+0x16>
            cputchar(*data ++);
        }
        return 0;
c010ed78:	b8 00 00 00 00       	mov    $0x0,%eax
c010ed7d:	eb 05                	jmp    c010ed84 <stdout_io+0x56>
    }
    return -E_INVAL;
c010ed7f:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010ed84:	c9                   	leave  
c010ed85:	c3                   	ret    

c010ed86 <stdout_ioctl>:

static int
stdout_ioctl(struct device *dev, int op, void *data) {
c010ed86:	55                   	push   %ebp
c010ed87:	89 e5                	mov    %esp,%ebp
    return -E_INVAL;
c010ed89:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010ed8e:	5d                   	pop    %ebp
c010ed8f:	c3                   	ret    

c010ed90 <stdout_device_init>:

static void
stdout_device_init(struct device *dev) {
c010ed90:	55                   	push   %ebp
c010ed91:	89 e5                	mov    %esp,%ebp
    dev->d_blocks = 0;
c010ed93:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed96:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    dev->d_blocksize = 1;
c010ed9c:	8b 45 08             	mov    0x8(%ebp),%eax
c010ed9f:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    dev->d_open = stdout_open;
c010eda6:	8b 45 08             	mov    0x8(%ebp),%eax
c010eda9:	c7 40 08 0d ed 10 c0 	movl   $0xc010ed0d,0x8(%eax)
    dev->d_close = stdout_close;
c010edb0:	8b 45 08             	mov    0x8(%ebp),%eax
c010edb3:	c7 40 0c 24 ed 10 c0 	movl   $0xc010ed24,0xc(%eax)
    dev->d_io = stdout_io;
c010edba:	8b 45 08             	mov    0x8(%ebp),%eax
c010edbd:	c7 40 10 2e ed 10 c0 	movl   $0xc010ed2e,0x10(%eax)
    dev->d_ioctl = stdout_ioctl;
c010edc4:	8b 45 08             	mov    0x8(%ebp),%eax
c010edc7:	c7 40 14 86 ed 10 c0 	movl   $0xc010ed86,0x14(%eax)
}
c010edce:	90                   	nop
c010edcf:	5d                   	pop    %ebp
c010edd0:	c3                   	ret    

c010edd1 <dev_init_stdout>:

void
dev_init_stdout(void) {
c010edd1:	55                   	push   %ebp
c010edd2:	89 e5                	mov    %esp,%ebp
c010edd4:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = dev_create_inode()) == NULL) {
c010edd7:	e8 55 04 00 00       	call   c010f231 <dev_create_inode>
c010eddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eddf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ede3:	75 14                	jne    c010edf9 <dev_init_stdout+0x28>
        panic("stdout: dev_create_node.\n");
c010ede5:	83 ec 04             	sub    $0x4,%esp
c010ede8:	68 bc 63 11 c0       	push   $0xc01163bc
c010eded:	6a 37                	push   $0x37
c010edef:	68 d6 63 11 c0       	push   $0xc01163d6
c010edf4:	e8 ec 16 ff ff       	call   c01004e5 <__panic>
    }
    stdout_device_init(vop_info(node, device));
c010edf9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010edfc:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010edff:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010ee03:	74 0d                	je     c010ee12 <dev_init_stdout+0x41>
c010ee05:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee08:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ee0b:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ee10:	74 16                	je     c010ee28 <dev_init_stdout+0x57>
c010ee12:	68 f0 63 11 c0       	push   $0xc01163f0
c010ee17:	68 23 64 11 c0       	push   $0xc0116423
c010ee1c:	6a 39                	push   $0x39
c010ee1e:	68 d6 63 11 c0       	push   $0xc01163d6
c010ee23:	e8 bd 16 ff ff       	call   c01004e5 <__panic>
c010ee28:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ee2b:	83 ec 0c             	sub    $0xc,%esp
c010ee2e:	50                   	push   %eax
c010ee2f:	e8 5c ff ff ff       	call   c010ed90 <stdout_device_init>
c010ee34:	83 c4 10             	add    $0x10,%esp

    int ret;
    if ((ret = vfs_add_dev("stdout", node, 0)) != 0) {
c010ee37:	83 ec 04             	sub    $0x4,%esp
c010ee3a:	6a 00                	push   $0x0
c010ee3c:	ff 75 f4             	pushl  -0xc(%ebp)
c010ee3f:	68 38 64 11 c0       	push   $0xc0116438
c010ee44:	e8 e9 e5 ff ff       	call   c010d432 <vfs_add_dev>
c010ee49:	83 c4 10             	add    $0x10,%esp
c010ee4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ee4f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ee53:	74 14                	je     c010ee69 <dev_init_stdout+0x98>
        panic("stdout: vfs_add_dev: %e.\n", ret);
c010ee55:	ff 75 ec             	pushl  -0x14(%ebp)
c010ee58:	68 3f 64 11 c0       	push   $0xc011643f
c010ee5d:	6a 3d                	push   $0x3d
c010ee5f:	68 d6 63 11 c0       	push   $0xc01163d6
c010ee64:	e8 7c 16 ff ff       	call   c01004e5 <__panic>
    }
}
c010ee69:	90                   	nop
c010ee6a:	c9                   	leave  
c010ee6b:	c3                   	ret    

c010ee6c <dev_open>:

/*
 * dev_open - Called for each open().
 */
static int
dev_open(struct inode *node, uint32_t open_flags) {
c010ee6c:	55                   	push   %ebp
c010ee6d:	89 e5                	mov    %esp,%ebp
c010ee6f:	83 ec 18             	sub    $0x18,%esp
    if (open_flags & (O_CREAT | O_TRUNC | O_EXCL | O_APPEND)) {
c010ee72:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ee75:	83 e0 3c             	and    $0x3c,%eax
c010ee78:	85 c0                	test   %eax,%eax
c010ee7a:	74 07                	je     c010ee83 <dev_open+0x17>
        return -E_INVAL;
c010ee7c:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c010ee81:	eb 49                	jmp    c010eecc <dev_open+0x60>
    }
    struct device *dev = vop_info(node, device);
c010ee83:	8b 45 08             	mov    0x8(%ebp),%eax
c010ee86:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ee89:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ee8d:	74 0d                	je     c010ee9c <dev_open+0x30>
c010ee8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ee92:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ee95:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ee9a:	74 16                	je     c010eeb2 <dev_open+0x46>
c010ee9c:	68 60 64 11 c0       	push   $0xc0116460
c010eea1:	68 93 64 11 c0       	push   $0xc0116493
c010eea6:	6a 11                	push   $0x11
c010eea8:	68 a8 64 11 c0       	push   $0xc01164a8
c010eead:	e8 33 16 ff ff       	call   c01004e5 <__panic>
c010eeb2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eeb5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_open(dev, open_flags);
c010eeb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010eebb:	8b 40 08             	mov    0x8(%eax),%eax
c010eebe:	83 ec 08             	sub    $0x8,%esp
c010eec1:	ff 75 0c             	pushl  0xc(%ebp)
c010eec4:	ff 75 f0             	pushl  -0x10(%ebp)
c010eec7:	ff d0                	call   *%eax
c010eec9:	83 c4 10             	add    $0x10,%esp
}
c010eecc:	c9                   	leave  
c010eecd:	c3                   	ret    

c010eece <dev_close>:

/*
 * dev_close - Called on the last close(). Just pass through.
 */
static int
dev_close(struct inode *node) {
c010eece:	55                   	push   %ebp
c010eecf:	89 e5                	mov    %esp,%ebp
c010eed1:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010eed4:	8b 45 08             	mov    0x8(%ebp),%eax
c010eed7:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010eeda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010eede:	74 0d                	je     c010eeed <dev_close+0x1f>
c010eee0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010eee3:	8b 40 2c             	mov    0x2c(%eax),%eax
c010eee6:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010eeeb:	74 16                	je     c010ef03 <dev_close+0x35>
c010eeed:	68 60 64 11 c0       	push   $0xc0116460
c010eef2:	68 93 64 11 c0       	push   $0xc0116493
c010eef7:	6a 1a                	push   $0x1a
c010eef9:	68 a8 64 11 c0       	push   $0xc01164a8
c010eefe:	e8 e2 15 ff ff       	call   c01004e5 <__panic>
c010ef03:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_close(dev);
c010ef09:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef0c:	8b 40 0c             	mov    0xc(%eax),%eax
c010ef0f:	83 ec 0c             	sub    $0xc,%esp
c010ef12:	ff 75 f0             	pushl  -0x10(%ebp)
c010ef15:	ff d0                	call   *%eax
c010ef17:	83 c4 10             	add    $0x10,%esp
}
c010ef1a:	c9                   	leave  
c010ef1b:	c3                   	ret    

c010ef1c <dev_read>:

/*
 * dev_read -Called for read. Hand off to iobuf.
 */
static int
dev_read(struct inode *node, struct iobuf *iob) {
c010ef1c:	55                   	push   %ebp
c010ef1d:	89 e5                	mov    %esp,%ebp
c010ef1f:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010ef22:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef25:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef2c:	74 0d                	je     c010ef3b <dev_read+0x1f>
c010ef2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef31:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ef34:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ef39:	74 16                	je     c010ef51 <dev_read+0x35>
c010ef3b:	68 60 64 11 c0       	push   $0xc0116460
c010ef40:	68 93 64 11 c0       	push   $0xc0116493
c010ef45:	6a 23                	push   $0x23
c010ef47:	68 a8 64 11 c0       	push   $0xc01164a8
c010ef4c:	e8 94 15 ff ff       	call   c01004e5 <__panic>
c010ef51:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef54:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 0);
c010ef57:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010ef5a:	8b 40 10             	mov    0x10(%eax),%eax
c010ef5d:	83 ec 04             	sub    $0x4,%esp
c010ef60:	6a 00                	push   $0x0
c010ef62:	ff 75 0c             	pushl  0xc(%ebp)
c010ef65:	ff 75 f0             	pushl  -0x10(%ebp)
c010ef68:	ff d0                	call   *%eax
c010ef6a:	83 c4 10             	add    $0x10,%esp
}
c010ef6d:	c9                   	leave  
c010ef6e:	c3                   	ret    

c010ef6f <dev_write>:

/*
 * dev_write -Called for write. Hand off to iobuf.
 */
static int
dev_write(struct inode *node, struct iobuf *iob) {
c010ef6f:	55                   	push   %ebp
c010ef70:	89 e5                	mov    %esp,%ebp
c010ef72:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010ef75:	8b 45 08             	mov    0x8(%ebp),%eax
c010ef78:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ef7b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ef7f:	74 0d                	je     c010ef8e <dev_write+0x1f>
c010ef81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ef84:	8b 40 2c             	mov    0x2c(%eax),%eax
c010ef87:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010ef8c:	74 16                	je     c010efa4 <dev_write+0x35>
c010ef8e:	68 60 64 11 c0       	push   $0xc0116460
c010ef93:	68 93 64 11 c0       	push   $0xc0116493
c010ef98:	6a 2c                	push   $0x2c
c010ef9a:	68 a8 64 11 c0       	push   $0xc01164a8
c010ef9f:	e8 41 15 ff ff       	call   c01004e5 <__panic>
c010efa4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efa7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_io(dev, iob, 1);
c010efaa:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010efad:	8b 40 10             	mov    0x10(%eax),%eax
c010efb0:	83 ec 04             	sub    $0x4,%esp
c010efb3:	6a 01                	push   $0x1
c010efb5:	ff 75 0c             	pushl  0xc(%ebp)
c010efb8:	ff 75 f0             	pushl  -0x10(%ebp)
c010efbb:	ff d0                	call   *%eax
c010efbd:	83 c4 10             	add    $0x10,%esp
}
c010efc0:	c9                   	leave  
c010efc1:	c3                   	ret    

c010efc2 <dev_ioctl>:

/*
 * dev_ioctl - Called for ioctl(). Just pass through.
 */
static int
dev_ioctl(struct inode *node, int op, void *data) {
c010efc2:	55                   	push   %ebp
c010efc3:	89 e5                	mov    %esp,%ebp
c010efc5:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010efc8:	8b 45 08             	mov    0x8(%ebp),%eax
c010efcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010efce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010efd2:	74 0d                	je     c010efe1 <dev_ioctl+0x1f>
c010efd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010efd7:	8b 40 2c             	mov    0x2c(%eax),%eax
c010efda:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010efdf:	74 16                	je     c010eff7 <dev_ioctl+0x35>
c010efe1:	68 60 64 11 c0       	push   $0xc0116460
c010efe6:	68 93 64 11 c0       	push   $0xc0116493
c010efeb:	6a 35                	push   $0x35
c010efed:	68 a8 64 11 c0       	push   $0xc01164a8
c010eff2:	e8 ee 14 ff ff       	call   c01004e5 <__panic>
c010eff7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010effa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return dop_ioctl(dev, op, data);
c010effd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f000:	8b 40 14             	mov    0x14(%eax),%eax
c010f003:	83 ec 04             	sub    $0x4,%esp
c010f006:	ff 75 10             	pushl  0x10(%ebp)
c010f009:	ff 75 0c             	pushl  0xc(%ebp)
c010f00c:	ff 75 f0             	pushl  -0x10(%ebp)
c010f00f:	ff d0                	call   *%eax
c010f011:	83 c4 10             	add    $0x10,%esp
}
c010f014:	c9                   	leave  
c010f015:	c3                   	ret    

c010f016 <dev_fstat>:
 * dev_fstat - Called for stat().
 *             Set the type and the size (block devices only).
 *             The link count for a device is always 1.
 */
static int
dev_fstat(struct inode *node, struct stat *stat) {
c010f016:	55                   	push   %ebp
c010f017:	89 e5                	mov    %esp,%ebp
c010f019:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c010f01c:	83 ec 04             	sub    $0x4,%esp
c010f01f:	6a 10                	push   $0x10
c010f021:	6a 00                	push   $0x0
c010f023:	ff 75 0c             	pushl  0xc(%ebp)
c010f026:	e8 da 33 00 00       	call   c0112405 <memset>
c010f02b:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c010f02e:	8b 45 08             	mov    0x8(%ebp),%eax
c010f031:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f034:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f038:	74 17                	je     c010f051 <dev_fstat+0x3b>
c010f03a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f03d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f040:	85 c0                	test   %eax,%eax
c010f042:	74 0d                	je     c010f051 <dev_fstat+0x3b>
c010f044:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f047:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f04a:	8b 40 28             	mov    0x28(%eax),%eax
c010f04d:	85 c0                	test   %eax,%eax
c010f04f:	75 16                	jne    c010f067 <dev_fstat+0x51>
c010f051:	68 bc 64 11 c0       	push   $0xc01164bc
c010f056:	68 93 64 11 c0       	push   $0xc0116493
c010f05b:	6a 42                	push   $0x42
c010f05d:	68 a8 64 11 c0       	push   $0xc01164a8
c010f062:	e8 7e 14 ff ff       	call   c01004e5 <__panic>
c010f067:	83 ec 08             	sub    $0x8,%esp
c010f06a:	68 0c 65 11 c0       	push   $0xc011650c
c010f06f:	ff 75 f4             	pushl  -0xc(%ebp)
c010f072:	e8 ef f2 ff ff       	call   c010e366 <inode_check>
c010f077:	83 c4 10             	add    $0x10,%esp
c010f07a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f07d:	8b 40 3c             	mov    0x3c(%eax),%eax
c010f080:	8b 40 28             	mov    0x28(%eax),%eax
c010f083:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f086:	83 ec 08             	sub    $0x8,%esp
c010f089:	52                   	push   %edx
c010f08a:	ff 75 08             	pushl  0x8(%ebp)
c010f08d:	ff d0                	call   *%eax
c010f08f:	83 c4 10             	add    $0x10,%esp
c010f092:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f095:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f099:	74 05                	je     c010f0a0 <dev_fstat+0x8a>
        return ret;
c010f09b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f09e:	eb 64                	jmp    c010f104 <dev_fstat+0xee>
    }
    struct device *dev = vop_info(node, device);
c010f0a0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f0a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f0a6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f0aa:	74 0d                	je     c010f0b9 <dev_fstat+0xa3>
c010f0ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0af:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f0b2:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f0b7:	74 16                	je     c010f0cf <dev_fstat+0xb9>
c010f0b9:	68 60 64 11 c0       	push   $0xc0116460
c010f0be:	68 93 64 11 c0       	push   $0xc0116493
c010f0c3:	6a 45                	push   $0x45
c010f0c5:	68 a8 64 11 c0       	push   $0xc01164a8
c010f0ca:	e8 16 14 ff ff       	call   c01004e5 <__panic>
c010f0cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f0d2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = 1;
c010f0d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0d8:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
    stat->st_blocks = dev->d_blocks;
c010f0df:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0e2:	8b 10                	mov    (%eax),%edx
c010f0e4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0e7:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = stat->st_blocks * dev->d_blocksize;
c010f0ea:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0ed:	8b 50 08             	mov    0x8(%eax),%edx
c010f0f0:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f0f3:	8b 40 04             	mov    0x4(%eax),%eax
c010f0f6:	0f af d0             	imul   %eax,%edx
c010f0f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f0fc:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c010f0ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f104:	c9                   	leave  
c010f105:	c3                   	ret    

c010f106 <dev_gettype>:
 * dev_gettype - Return the type. A device is a "block device" if it has a known
 *               length. A device that generates data in a stream is a "character
 *               device".
 */
static int
dev_gettype(struct inode *node, uint32_t *type_store) {
c010f106:	55                   	push   %ebp
c010f107:	89 e5                	mov    %esp,%ebp
c010f109:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010f10c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f10f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f112:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f116:	74 0d                	je     c010f125 <dev_gettype+0x1f>
c010f118:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f11b:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f11e:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f123:	74 16                	je     c010f13b <dev_gettype+0x35>
c010f125:	68 60 64 11 c0       	push   $0xc0116460
c010f12a:	68 93 64 11 c0       	push   $0xc0116493
c010f12f:	6a 53                	push   $0x53
c010f131:	68 a8 64 11 c0       	push   $0xc01164a8
c010f136:	e8 aa 13 ff ff       	call   c01004e5 <__panic>
c010f13b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f13e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *type_store = (dev->d_blocks > 0) ? S_IFBLK : S_IFCHR;
c010f141:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f144:	8b 00                	mov    (%eax),%eax
c010f146:	85 c0                	test   %eax,%eax
c010f148:	74 07                	je     c010f151 <dev_gettype+0x4b>
c010f14a:	ba 00 50 00 00       	mov    $0x5000,%edx
c010f14f:	eb 05                	jmp    c010f156 <dev_gettype+0x50>
c010f151:	ba 00 40 00 00       	mov    $0x4000,%edx
c010f156:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f159:	89 10                	mov    %edx,(%eax)
    return 0;
c010f15b:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f160:	c9                   	leave  
c010f161:	c3                   	ret    

c010f162 <dev_tryseek>:
 * dev_tryseek - Attempt a seek.
 *               For block devices, require block alignment.
 *               For character devices, prohibit seeking entirely.
 */
static int
dev_tryseek(struct inode *node, off_t pos) {
c010f162:	55                   	push   %ebp
c010f163:	89 e5                	mov    %esp,%ebp
c010f165:	83 ec 18             	sub    $0x18,%esp
    struct device *dev = vop_info(node, device);
c010f168:	8b 45 08             	mov    0x8(%ebp),%eax
c010f16b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f16e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f172:	74 0d                	je     c010f181 <dev_tryseek+0x1f>
c010f174:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f177:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f17a:	3d 34 12 00 00       	cmp    $0x1234,%eax
c010f17f:	74 16                	je     c010f197 <dev_tryseek+0x35>
c010f181:	68 60 64 11 c0       	push   $0xc0116460
c010f186:	68 93 64 11 c0       	push   $0xc0116493
c010f18b:	6a 5f                	push   $0x5f
c010f18d:	68 a8 64 11 c0       	push   $0xc01164a8
c010f192:	e8 4e 13 ff ff       	call   c01004e5 <__panic>
c010f197:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f19a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (dev->d_blocks > 0) {
c010f19d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1a0:	8b 00                	mov    (%eax),%eax
c010f1a2:	85 c0                	test   %eax,%eax
c010f1a4:	74 38                	je     c010f1de <dev_tryseek+0x7c>
        if ((pos % dev->d_blocksize) == 0) {
c010f1a6:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f1a9:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f1ac:	8b 4a 04             	mov    0x4(%edx),%ecx
c010f1af:	ba 00 00 00 00       	mov    $0x0,%edx
c010f1b4:	f7 f1                	div    %ecx
c010f1b6:	89 d0                	mov    %edx,%eax
c010f1b8:	85 c0                	test   %eax,%eax
c010f1ba:	75 22                	jne    c010f1de <dev_tryseek+0x7c>
            if (pos >= 0 && pos < dev->d_blocks * dev->d_blocksize) {
c010f1bc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f1c0:	78 1c                	js     c010f1de <dev_tryseek+0x7c>
c010f1c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1c5:	8b 10                	mov    (%eax),%edx
c010f1c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f1ca:	8b 40 04             	mov    0x4(%eax),%eax
c010f1cd:	0f af d0             	imul   %eax,%edx
c010f1d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f1d3:	39 c2                	cmp    %eax,%edx
c010f1d5:	76 07                	jbe    c010f1de <dev_tryseek+0x7c>
                return 0;
c010f1d7:	b8 00 00 00 00       	mov    $0x0,%eax
c010f1dc:	eb 05                	jmp    c010f1e3 <dev_tryseek+0x81>
            }
        }
    }
    return -E_INVAL;
c010f1de:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
c010f1e3:	c9                   	leave  
c010f1e4:	c3                   	ret    

c010f1e5 <dev_lookup>:
 * mode.
 *
 * However, we have no support for this in the base system.
 */
static int
dev_lookup(struct inode *node, char *path, struct inode **node_store) {
c010f1e5:	55                   	push   %ebp
c010f1e6:	89 e5                	mov    %esp,%ebp
c010f1e8:	83 ec 08             	sub    $0x8,%esp
    if (*path != '\0') {
c010f1eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f1ee:	0f b6 00             	movzbl (%eax),%eax
c010f1f1:	84 c0                	test   %al,%al
c010f1f3:	74 07                	je     c010f1fc <dev_lookup+0x17>
        return -E_NOENT;
c010f1f5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c010f1fa:	eb 1b                	jmp    c010f217 <dev_lookup+0x32>
    }
    vop_ref_inc(node);
c010f1fc:	83 ec 0c             	sub    $0xc,%esp
c010f1ff:	ff 75 08             	pushl  0x8(%ebp)
c010f202:	e8 8d ef ff ff       	call   c010e194 <inode_ref_inc>
c010f207:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c010f20a:	8b 45 10             	mov    0x10(%ebp),%eax
c010f20d:	8b 55 08             	mov    0x8(%ebp),%edx
c010f210:	89 10                	mov    %edx,(%eax)
    return 0;
c010f212:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f217:	c9                   	leave  
c010f218:	c3                   	ret    

c010f219 <dev_init>:
        dev_init_##x();                                 \
    } while (0)

/* dev_init - Initialization functions for builtin vfs-level devices. */
void
dev_init(void) {
c010f219:	55                   	push   %ebp
c010f21a:	89 e5                	mov    %esp,%ebp
c010f21c:	83 ec 08             	sub    $0x8,%esp
   // init_device(null);
    init_device(stdin);
c010f21f:	e8 57 f6 ff ff       	call   c010e87b <dev_init_stdin>
    init_device(stdout);
c010f224:	e8 a8 fb ff ff       	call   c010edd1 <dev_init_stdout>
    init_device(disk0);
c010f229:	e8 3b fa ff ff       	call   c010ec69 <dev_init_disk0>
}
c010f22e:	90                   	nop
c010f22f:	c9                   	leave  
c010f230:	c3                   	ret    

c010f231 <dev_create_inode>:
/* dev_create_inode - Create inode for a vfs-level device. */
struct inode *
dev_create_inode(void) {
c010f231:	55                   	push   %ebp
c010f232:	89 e5                	mov    %esp,%ebp
c010f234:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(device)) != NULL) {
c010f237:	83 ec 0c             	sub    $0xc,%esp
c010f23a:	68 34 12 00 00       	push   $0x1234
c010f23f:	e8 85 ee ff ff       	call   c010e0c9 <__alloc_inode>
c010f244:	83 c4 10             	add    $0x10,%esp
c010f247:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f24a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f24e:	74 15                	je     c010f265 <dev_create_inode+0x34>
        vop_init(node, &dev_node_ops, NULL);
c010f250:	83 ec 04             	sub    $0x4,%esp
c010f253:	6a 00                	push   $0x0
c010f255:	68 20 65 11 c0       	push   $0xc0116520
c010f25a:	ff 75 f4             	pushl  -0xc(%ebp)
c010f25d:	e8 91 ee ff ff       	call   c010e0f3 <inode_init>
c010f262:	83 c4 10             	add    $0x10,%esp
    }
    return node;
c010f265:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f268:	c9                   	leave  
c010f269:	c3                   	ret    

c010f26a <sfs_init>:
 *
 * CALL GRAPH:
 *   kern_init-->fs_init-->sfs_init
 */
void
sfs_init(void) {
c010f26a:	55                   	push   %ebp
c010f26b:	89 e5                	mov    %esp,%ebp
c010f26d:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = sfs_mount("disk0")) != 0) {
c010f270:	83 ec 0c             	sub    $0xc,%esp
c010f273:	68 60 65 11 c0       	push   $0xc0116560
c010f278:	e8 d7 26 00 00       	call   c0111954 <sfs_mount>
c010f27d:	83 c4 10             	add    $0x10,%esp
c010f280:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f283:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f287:	74 14                	je     c010f29d <sfs_init+0x33>
        panic("failed: sfs: sfs_mount: %e.\n", ret);
c010f289:	ff 75 f4             	pushl  -0xc(%ebp)
c010f28c:	68 66 65 11 c0       	push   $0xc0116566
c010f291:	6a 10                	push   $0x10
c010f293:	68 83 65 11 c0       	push   $0xc0116583
c010f298:	e8 48 12 ff ff       	call   c01004e5 <__panic>
    }
}
c010f29d:	90                   	nop
c010f29e:	c9                   	leave  
c010f29f:	c3                   	ret    

c010f2a0 <lock_sfs_fs>:
 * lock_sfs_fs - lock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
lock_sfs_fs(struct sfs_fs *sfs) {
c010f2a0:	55                   	push   %ebp
c010f2a1:	89 e5                	mov    %esp,%ebp
c010f2a3:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->fs_sem));
c010f2a6:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2a9:	83 c0 3c             	add    $0x3c,%eax
c010f2ac:	83 ec 0c             	sub    $0xc,%esp
c010f2af:	50                   	push   %eax
c010f2b0:	e8 e6 9b ff ff       	call   c0108e9b <down>
c010f2b5:	83 c4 10             	add    $0x10,%esp
}
c010f2b8:	90                   	nop
c010f2b9:	c9                   	leave  
c010f2ba:	c3                   	ret    

c010f2bb <lock_sfs_io>:
 * lock_sfs_io - lock the process of SFS File Rd/Wr Disk Block
 *
 * called by: sfs_rwblock, sfs_clear_block, sfs_sync_super
 */
void
lock_sfs_io(struct sfs_fs *sfs) {
c010f2bb:	55                   	push   %ebp
c010f2bc:	89 e5                	mov    %esp,%ebp
c010f2be:	83 ec 08             	sub    $0x8,%esp
    down(&(sfs->io_sem));
c010f2c1:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2c4:	83 c0 48             	add    $0x48,%eax
c010f2c7:	83 ec 0c             	sub    $0xc,%esp
c010f2ca:	50                   	push   %eax
c010f2cb:	e8 cb 9b ff ff       	call   c0108e9b <down>
c010f2d0:	83 c4 10             	add    $0x10,%esp
}
c010f2d3:	90                   	nop
c010f2d4:	c9                   	leave  
c010f2d5:	c3                   	ret    

c010f2d6 <unlock_sfs_fs>:
 * unlock_sfs_fs - unlock the process of  SFS Filesystem Rd/Wr Disk Block
 *
 * called by: sfs_load_inode, sfs_sync, sfs_reclaim
 */
void
unlock_sfs_fs(struct sfs_fs *sfs) {
c010f2d6:	55                   	push   %ebp
c010f2d7:	89 e5                	mov    %esp,%ebp
c010f2d9:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->fs_sem));
c010f2dc:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2df:	83 c0 3c             	add    $0x3c,%eax
c010f2e2:	83 ec 0c             	sub    $0xc,%esp
c010f2e5:	50                   	push   %eax
c010f2e6:	e8 94 9b ff ff       	call   c0108e7f <up>
c010f2eb:	83 c4 10             	add    $0x10,%esp
}
c010f2ee:	90                   	nop
c010f2ef:	c9                   	leave  
c010f2f0:	c3                   	ret    

c010f2f1 <unlock_sfs_io>:
 * unlock_sfs_io - unlock the process of sfs Rd/Wr Disk Block
 *
 * called by: sfs_rwblock sfs_clear_block sfs_sync_super
 */
void
unlock_sfs_io(struct sfs_fs *sfs) {
c010f2f1:	55                   	push   %ebp
c010f2f2:	89 e5                	mov    %esp,%ebp
c010f2f4:	83 ec 08             	sub    $0x8,%esp
    up(&(sfs->io_sem));
c010f2f7:	8b 45 08             	mov    0x8(%ebp),%eax
c010f2fa:	83 c0 48             	add    $0x48,%eax
c010f2fd:	83 ec 0c             	sub    $0xc,%esp
c010f300:	50                   	push   %eax
c010f301:	e8 79 9b ff ff       	call   c0108e7f <up>
c010f306:	83 c4 10             	add    $0x10,%esp
}
c010f309:	90                   	nop
c010f30a:	c9                   	leave  
c010f30b:	c3                   	ret    

c010f30c <inode_ref_count>:
#define vop_open_inc(node)                                          inode_open_inc(node)
#define vop_open_dec(node)                                          inode_open_dec(node)


static inline int
inode_ref_count(struct inode *node) {
c010f30c:	55                   	push   %ebp
c010f30d:	89 e5                	mov    %esp,%ebp
    return node->ref_count;
c010f30f:	8b 45 08             	mov    0x8(%ebp),%eax
c010f312:	8b 40 30             	mov    0x30(%eax),%eax
}
c010f315:	5d                   	pop    %ebp
c010f316:	c3                   	ret    

c010f317 <lock_sin>:

/*
 * lock_sin - lock the process of inode Rd/Wr
 */
static void
lock_sin(struct sfs_inode *sin) {
c010f317:	55                   	push   %ebp
c010f318:	89 e5                	mov    %esp,%ebp
c010f31a:	83 ec 08             	sub    $0x8,%esp
    down(&(sin->sem));
c010f31d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f320:	83 c0 10             	add    $0x10,%eax
c010f323:	83 ec 0c             	sub    $0xc,%esp
c010f326:	50                   	push   %eax
c010f327:	e8 6f 9b ff ff       	call   c0108e9b <down>
c010f32c:	83 c4 10             	add    $0x10,%esp
}
c010f32f:	90                   	nop
c010f330:	c9                   	leave  
c010f331:	c3                   	ret    

c010f332 <unlock_sin>:

/*
 * unlock_sin - unlock the process of inode Rd/Wr
 */
static void
unlock_sin(struct sfs_inode *sin) {
c010f332:	55                   	push   %ebp
c010f333:	89 e5                	mov    %esp,%ebp
c010f335:	83 ec 08             	sub    $0x8,%esp
    up(&(sin->sem));
c010f338:	8b 45 08             	mov    0x8(%ebp),%eax
c010f33b:	83 c0 10             	add    $0x10,%eax
c010f33e:	83 ec 0c             	sub    $0xc,%esp
c010f341:	50                   	push   %eax
c010f342:	e8 38 9b ff ff       	call   c0108e7f <up>
c010f347:	83 c4 10             	add    $0x10,%esp
}
c010f34a:	90                   	nop
c010f34b:	c9                   	leave  
c010f34c:	c3                   	ret    

c010f34d <sfs_get_ops>:

/*
 * sfs_get_ops - return function addr of fs_node_dirops/sfs_node_fileops
 */
static const struct inode_ops *
sfs_get_ops(uint16_t type) {
c010f34d:	55                   	push   %ebp
c010f34e:	89 e5                	mov    %esp,%ebp
c010f350:	83 ec 18             	sub    $0x18,%esp
c010f353:	8b 45 08             	mov    0x8(%ebp),%eax
c010f356:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
    switch (type) {
c010f35a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010f35e:	83 f8 01             	cmp    $0x1,%eax
c010f361:	74 0c                	je     c010f36f <sfs_get_ops+0x22>
c010f363:	83 f8 02             	cmp    $0x2,%eax
c010f366:	75 0e                	jne    c010f376 <sfs_get_ops+0x29>
    case SFS_TYPE_DIR:
        return &sfs_node_dirops;
c010f368:	b8 a0 65 11 c0       	mov    $0xc01165a0,%eax
c010f36d:	eb 1d                	jmp    c010f38c <sfs_get_ops+0x3f>
    case SFS_TYPE_FILE:
        return &sfs_node_fileops;
c010f36f:	b8 e0 65 11 c0       	mov    $0xc01165e0,%eax
c010f374:	eb 16                	jmp    c010f38c <sfs_get_ops+0x3f>
    }
    panic("invalid file type %d.\n", type);
c010f376:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
c010f37a:	50                   	push   %eax
c010f37b:	68 20 66 11 c0       	push   $0xc0116620
c010f380:	6a 2e                	push   $0x2e
c010f382:	68 37 66 11 c0       	push   $0xc0116637
c010f387:	e8 59 11 ff ff       	call   c01004e5 <__panic>
}
c010f38c:	c9                   	leave  
c010f38d:	c3                   	ret    

c010f38e <sfs_hash_list>:

/*
 * sfs_hash_list - return inode entry in sfs->hash_list
 */
static list_entry_t *
sfs_hash_list(struct sfs_fs *sfs, uint32_t ino) {
c010f38e:	55                   	push   %ebp
c010f38f:	89 e5                	mov    %esp,%ebp
c010f391:	53                   	push   %ebx
c010f392:	83 ec 04             	sub    $0x4,%esp
    return sfs->hash_list + sin_hashfn(ino);
c010f395:	8b 45 08             	mov    0x8(%ebp),%eax
c010f398:	8b 58 68             	mov    0x68(%eax),%ebx
c010f39b:	83 ec 08             	sub    $0x8,%esp
c010f39e:	6a 0a                	push   $0xa
c010f3a0:	ff 75 0c             	pushl  0xc(%ebp)
c010f3a3:	e8 38 38 00 00       	call   c0112be0 <hash32>
c010f3a8:	83 c4 10             	add    $0x10,%esp
c010f3ab:	c1 e0 03             	shl    $0x3,%eax
c010f3ae:	01 d8                	add    %ebx,%eax
}
c010f3b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f3b3:	c9                   	leave  
c010f3b4:	c3                   	ret    

c010f3b5 <sfs_set_links>:

/*
 * sfs_set_links - link inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_set_links(struct sfs_fs *sfs, struct sfs_inode *sin) {
c010f3b5:	55                   	push   %ebp
c010f3b6:	89 e5                	mov    %esp,%ebp
c010f3b8:	53                   	push   %ebx
c010f3b9:	83 ec 44             	sub    $0x44,%esp
    list_add(&(sfs->inode_list), &(sin->inode_link));
c010f3bc:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f3bf:	83 c0 1c             	add    $0x1c,%eax
c010f3c2:	8b 55 08             	mov    0x8(%ebp),%edx
c010f3c5:	83 c2 60             	add    $0x60,%edx
c010f3c8:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f3cb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c010f3ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f3d1:	89 45 d0             	mov    %eax,-0x30(%ebp)
c010f3d4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c010f3d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f3da:	8b 45 d0             	mov    -0x30(%ebp),%eax
c010f3dd:	8b 40 04             	mov    0x4(%eax),%eax
c010f3e0:	8b 55 cc             	mov    -0x34(%ebp),%edx
c010f3e3:	89 55 c8             	mov    %edx,-0x38(%ebp)
c010f3e6:	8b 55 d0             	mov    -0x30(%ebp),%edx
c010f3e9:	89 55 c4             	mov    %edx,-0x3c(%ebp)
c010f3ec:	89 45 c0             	mov    %eax,-0x40(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f3ef:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010f3f2:	8b 55 c8             	mov    -0x38(%ebp),%edx
c010f3f5:	89 10                	mov    %edx,(%eax)
c010f3f7:	8b 45 c0             	mov    -0x40(%ebp),%eax
c010f3fa:	8b 10                	mov    (%eax),%edx
c010f3fc:	8b 45 c4             	mov    -0x3c(%ebp),%eax
c010f3ff:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f402:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010f405:	8b 55 c0             	mov    -0x40(%ebp),%edx
c010f408:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f40b:	8b 45 c8             	mov    -0x38(%ebp),%eax
c010f40e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
c010f411:	89 10                	mov    %edx,(%eax)
    list_add(sfs_hash_list(sfs, sin->ino), &(sin->hash_link));
c010f413:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f416:	8d 58 24             	lea    0x24(%eax),%ebx
c010f419:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f41c:	8b 40 04             	mov    0x4(%eax),%eax
c010f41f:	83 ec 08             	sub    $0x8,%esp
c010f422:	50                   	push   %eax
c010f423:	ff 75 08             	pushl  0x8(%ebp)
c010f426:	e8 63 ff ff ff       	call   c010f38e <sfs_hash_list>
c010f42b:	83 c4 10             	add    $0x10,%esp
c010f42e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f431:	89 5d ec             	mov    %ebx,-0x14(%ebp)
c010f434:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f437:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f43a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f43d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * Insert the new element @elm *after* the element @listelm which
 * is already in the list.
 * */
static inline void
list_add_after(list_entry_t *listelm, list_entry_t *elm) {
    __list_add(elm, listelm, listelm->next);
c010f440:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f443:	8b 40 04             	mov    0x4(%eax),%eax
c010f446:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c010f449:	89 55 e0             	mov    %edx,-0x20(%ebp)
c010f44c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f44f:	89 55 dc             	mov    %edx,-0x24(%ebp)
c010f452:	89 45 d8             	mov    %eax,-0x28(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) {
    prev->next = next->prev = elm;
c010f455:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f458:	8b 55 e0             	mov    -0x20(%ebp),%edx
c010f45b:	89 10                	mov    %edx,(%eax)
c010f45d:	8b 45 d8             	mov    -0x28(%ebp),%eax
c010f460:	8b 10                	mov    (%eax),%edx
c010f462:	8b 45 dc             	mov    -0x24(%ebp),%eax
c010f465:	89 50 04             	mov    %edx,0x4(%eax)
    elm->next = next;
c010f468:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f46b:	8b 55 d8             	mov    -0x28(%ebp),%edx
c010f46e:	89 50 04             	mov    %edx,0x4(%eax)
    elm->prev = prev;
c010f471:	8b 45 e0             	mov    -0x20(%ebp),%eax
c010f474:	8b 55 dc             	mov    -0x24(%ebp),%edx
c010f477:	89 10                	mov    %edx,(%eax)
}
c010f479:	90                   	nop
c010f47a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
c010f47d:	c9                   	leave  
c010f47e:	c3                   	ret    

c010f47f <sfs_remove_links>:

/*
 * sfs_remove_links - unlink inode sin in sfs->linked-list AND sfs->hash_link
 */
static void
sfs_remove_links(struct sfs_inode *sin) {
c010f47f:	55                   	push   %ebp
c010f480:	89 e5                	mov    %esp,%ebp
c010f482:	83 ec 20             	sub    $0x20,%esp
    list_del(&(sin->inode_link));
c010f485:	8b 45 08             	mov    0x8(%ebp),%eax
c010f488:	83 c0 1c             	add    $0x1c,%eax
c010f48b:	89 45 fc             	mov    %eax,-0x4(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010f48e:	8b 45 fc             	mov    -0x4(%ebp),%eax
c010f491:	8b 40 04             	mov    0x4(%eax),%eax
c010f494:	8b 55 fc             	mov    -0x4(%ebp),%edx
c010f497:	8b 12                	mov    (%edx),%edx
c010f499:	89 55 ec             	mov    %edx,-0x14(%ebp)
c010f49c:	89 45 e8             	mov    %eax,-0x18(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010f49f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f4a2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f4a5:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010f4a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f4ab:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010f4ae:	89 10                	mov    %edx,(%eax)
    list_del(&(sin->hash_link));
c010f4b0:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4b3:	83 c0 24             	add    $0x24,%eax
c010f4b6:	89 45 f8             	mov    %eax,-0x8(%ebp)
 * Note: list_empty() on @listelm does not return true after this, the entry is
 * in an undefined state.
 * */
static inline void
list_del(list_entry_t *listelm) {
    __list_del(listelm->prev, listelm->next);
c010f4b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c010f4bc:	8b 40 04             	mov    0x4(%eax),%eax
c010f4bf:	8b 55 f8             	mov    -0x8(%ebp),%edx
c010f4c2:	8b 12                	mov    (%edx),%edx
c010f4c4:	89 55 f4             	mov    %edx,-0xc(%ebp)
c010f4c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 * */
static inline void
__list_del(list_entry_t *prev, list_entry_t *next) {
    prev->next = next;
c010f4ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f4cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010f4d0:	89 50 04             	mov    %edx,0x4(%eax)
    next->prev = prev;
c010f4d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f4d6:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f4d9:	89 10                	mov    %edx,(%eax)
}
c010f4db:	90                   	nop
c010f4dc:	c9                   	leave  
c010f4dd:	c3                   	ret    

c010f4de <sfs_block_inuse>:

/*
 * sfs_block_inuse - check the inode with NO. ino inuse info in bitmap
 */
static bool
sfs_block_inuse(struct sfs_fs *sfs, uint32_t ino) {
c010f4de:	55                   	push   %ebp
c010f4df:	89 e5                	mov    %esp,%ebp
c010f4e1:	83 ec 08             	sub    $0x8,%esp
    if (ino != 0 && ino < sfs->super.blocks) {
c010f4e4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c010f4e8:	74 2a                	je     c010f514 <sfs_block_inuse+0x36>
c010f4ea:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4ed:	8b 40 04             	mov    0x4(%eax),%eax
c010f4f0:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f4f3:	76 1f                	jbe    c010f514 <sfs_block_inuse+0x36>
        return !bitmap_test(sfs->freemap, ino);
c010f4f5:	8b 45 08             	mov    0x8(%ebp),%eax
c010f4f8:	8b 40 30             	mov    0x30(%eax),%eax
c010f4fb:	83 ec 08             	sub    $0x8,%esp
c010f4fe:	ff 75 0c             	pushl  0xc(%ebp)
c010f501:	50                   	push   %eax
c010f502:	e8 2d 27 00 00       	call   c0111c34 <bitmap_test>
c010f507:	83 c4 10             	add    $0x10,%esp
c010f50a:	85 c0                	test   %eax,%eax
c010f50c:	0f 94 c0             	sete   %al
c010f50f:	0f b6 c0             	movzbl %al,%eax
c010f512:	eb 1e                	jmp    c010f532 <sfs_block_inuse+0x54>
    }
    panic("sfs_block_inuse: called out of range (0, %u) %u.\n", sfs->super.blocks, ino);
c010f514:	8b 45 08             	mov    0x8(%ebp),%eax
c010f517:	8b 40 04             	mov    0x4(%eax),%eax
c010f51a:	83 ec 0c             	sub    $0xc,%esp
c010f51d:	ff 75 0c             	pushl  0xc(%ebp)
c010f520:	50                   	push   %eax
c010f521:	68 50 66 11 c0       	push   $0xc0116650
c010f526:	6a 53                	push   $0x53
c010f528:	68 37 66 11 c0       	push   $0xc0116637
c010f52d:	e8 b3 0f ff ff       	call   c01004e5 <__panic>
}
c010f532:	c9                   	leave  
c010f533:	c3                   	ret    

c010f534 <sfs_block_alloc>:

/*
 * sfs_block_alloc -  check and get a free disk block
 */
static int
sfs_block_alloc(struct sfs_fs *sfs, uint32_t *ino_store) {
c010f534:	55                   	push   %ebp
c010f535:	89 e5                	mov    %esp,%ebp
c010f537:	83 ec 18             	sub    $0x18,%esp
    int ret;
    if ((ret = bitmap_alloc(sfs->freemap, ino_store)) != 0) {
c010f53a:	8b 45 08             	mov    0x8(%ebp),%eax
c010f53d:	8b 40 30             	mov    0x30(%eax),%eax
c010f540:	83 ec 08             	sub    $0x8,%esp
c010f543:	ff 75 0c             	pushl  0xc(%ebp)
c010f546:	50                   	push   %eax
c010f547:	e8 a1 25 00 00       	call   c0111aed <bitmap_alloc>
c010f54c:	83 c4 10             	add    $0x10,%esp
c010f54f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f552:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f556:	74 05                	je     c010f55d <sfs_block_alloc+0x29>
        return ret;
c010f558:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f55b:	eb 7d                	jmp    c010f5da <sfs_block_alloc+0xa6>
    }
    assert(sfs->super.unused_blocks > 0);
c010f55d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f560:	8b 40 08             	mov    0x8(%eax),%eax
c010f563:	85 c0                	test   %eax,%eax
c010f565:	75 16                	jne    c010f57d <sfs_block_alloc+0x49>
c010f567:	68 82 66 11 c0       	push   $0xc0116682
c010f56c:	68 9f 66 11 c0       	push   $0xc011669f
c010f571:	6a 5f                	push   $0x5f
c010f573:	68 37 66 11 c0       	push   $0xc0116637
c010f578:	e8 68 0f ff ff       	call   c01004e5 <__panic>
    sfs->super.unused_blocks --, sfs->super_dirty = 1;
c010f57d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f580:	8b 40 08             	mov    0x8(%eax),%eax
c010f583:	8d 50 ff             	lea    -0x1(%eax),%edx
c010f586:	8b 45 08             	mov    0x8(%ebp),%eax
c010f589:	89 50 08             	mov    %edx,0x8(%eax)
c010f58c:	8b 45 08             	mov    0x8(%ebp),%eax
c010f58f:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
    assert(sfs_block_inuse(sfs, *ino_store));
c010f596:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f599:	8b 00                	mov    (%eax),%eax
c010f59b:	83 ec 08             	sub    $0x8,%esp
c010f59e:	50                   	push   %eax
c010f59f:	ff 75 08             	pushl  0x8(%ebp)
c010f5a2:	e8 37 ff ff ff       	call   c010f4de <sfs_block_inuse>
c010f5a7:	83 c4 10             	add    $0x10,%esp
c010f5aa:	85 c0                	test   %eax,%eax
c010f5ac:	75 16                	jne    c010f5c4 <sfs_block_alloc+0x90>
c010f5ae:	68 b4 66 11 c0       	push   $0xc01166b4
c010f5b3:	68 9f 66 11 c0       	push   $0xc011669f
c010f5b8:	6a 61                	push   $0x61
c010f5ba:	68 37 66 11 c0       	push   $0xc0116637
c010f5bf:	e8 21 0f ff ff       	call   c01004e5 <__panic>
    return sfs_clear_block(sfs, *ino_store, 1);
c010f5c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f5c7:	8b 00                	mov    (%eax),%eax
c010f5c9:	83 ec 04             	sub    $0x4,%esp
c010f5cc:	6a 01                	push   $0x1
c010f5ce:	50                   	push   %eax
c010f5cf:	ff 75 08             	pushl  0x8(%ebp)
c010f5d2:	e8 5c 2a 00 00       	call   c0112033 <sfs_clear_block>
c010f5d7:	83 c4 10             	add    $0x10,%esp
}
c010f5da:	c9                   	leave  
c010f5db:	c3                   	ret    

c010f5dc <sfs_block_free>:

/*
 * sfs_block_free - set related bits for ino block to 1(means free) in bitmap, add sfs->super.unused_blocks, set superblock dirty *
 */
static void
sfs_block_free(struct sfs_fs *sfs, uint32_t ino) {
c010f5dc:	55                   	push   %ebp
c010f5dd:	89 e5                	mov    %esp,%ebp
c010f5df:	83 ec 08             	sub    $0x8,%esp
    assert(sfs_block_inuse(sfs, ino));
c010f5e2:	83 ec 08             	sub    $0x8,%esp
c010f5e5:	ff 75 0c             	pushl  0xc(%ebp)
c010f5e8:	ff 75 08             	pushl  0x8(%ebp)
c010f5eb:	e8 ee fe ff ff       	call   c010f4de <sfs_block_inuse>
c010f5f0:	83 c4 10             	add    $0x10,%esp
c010f5f3:	85 c0                	test   %eax,%eax
c010f5f5:	75 16                	jne    c010f60d <sfs_block_free+0x31>
c010f5f7:	68 d5 66 11 c0       	push   $0xc01166d5
c010f5fc:	68 9f 66 11 c0       	push   $0xc011669f
c010f601:	6a 6a                	push   $0x6a
c010f603:	68 37 66 11 c0       	push   $0xc0116637
c010f608:	e8 d8 0e ff ff       	call   c01004e5 <__panic>
    bitmap_free(sfs->freemap, ino);
c010f60d:	8b 45 08             	mov    0x8(%ebp),%eax
c010f610:	8b 40 30             	mov    0x30(%eax),%eax
c010f613:	83 ec 08             	sub    $0x8,%esp
c010f616:	ff 75 0c             	pushl  0xc(%ebp)
c010f619:	50                   	push   %eax
c010f61a:	e8 3d 26 00 00       	call   c0111c5c <bitmap_free>
c010f61f:	83 c4 10             	add    $0x10,%esp
    sfs->super.unused_blocks ++, sfs->super_dirty = 1;
c010f622:	8b 45 08             	mov    0x8(%ebp),%eax
c010f625:	8b 40 08             	mov    0x8(%eax),%eax
c010f628:	8d 50 01             	lea    0x1(%eax),%edx
c010f62b:	8b 45 08             	mov    0x8(%ebp),%eax
c010f62e:	89 50 08             	mov    %edx,0x8(%eax)
c010f631:	8b 45 08             	mov    0x8(%ebp),%eax
c010f634:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
}
c010f63b:	90                   	nop
c010f63c:	c9                   	leave  
c010f63d:	c3                   	ret    

c010f63e <sfs_create_inode>:

/*
 * sfs_create_inode - alloc a inode in memroy, and init din/ino/dirty/reclian_count/sem fields in sfs_inode in inode
 */
static int
sfs_create_inode(struct sfs_fs *sfs, struct sfs_disk_inode *din, uint32_t ino, struct inode **node_store) {
c010f63e:	55                   	push   %ebp
c010f63f:	89 e5                	mov    %esp,%ebp
c010f641:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    if ((node = alloc_inode(sfs_inode)) != NULL) {
c010f644:	83 ec 0c             	sub    $0xc,%esp
c010f647:	68 35 12 00 00       	push   $0x1235
c010f64c:	e8 78 ea ff ff       	call   c010e0c9 <__alloc_inode>
c010f651:	83 c4 10             	add    $0x10,%esp
c010f654:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f657:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f65b:	0f 84 a5 00 00 00    	je     c010f706 <sfs_create_inode+0xc8>
        vop_init(node, sfs_get_ops(din->type), info2fs(sfs, sfs));
c010f661:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f664:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c010f668:	0f b7 c0             	movzwl %ax,%eax
c010f66b:	83 ec 0c             	sub    $0xc,%esp
c010f66e:	50                   	push   %eax
c010f66f:	e8 d9 fc ff ff       	call   c010f34d <sfs_get_ops>
c010f674:	83 c4 10             	add    $0x10,%esp
c010f677:	83 ec 04             	sub    $0x4,%esp
c010f67a:	ff 75 08             	pushl  0x8(%ebp)
c010f67d:	50                   	push   %eax
c010f67e:	ff 75 f4             	pushl  -0xc(%ebp)
c010f681:	e8 6d ea ff ff       	call   c010e0f3 <inode_init>
c010f686:	83 c4 10             	add    $0x10,%esp
        struct sfs_inode *sin = vop_info(node, sfs_inode);
c010f689:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f68c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f68f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f693:	74 0d                	je     c010f6a2 <sfs_create_inode+0x64>
c010f695:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f698:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f69b:	3d 35 12 00 00       	cmp    $0x1235,%eax
c010f6a0:	74 16                	je     c010f6b8 <sfs_create_inode+0x7a>
c010f6a2:	68 f0 66 11 c0       	push   $0xc01166f0
c010f6a7:	68 9f 66 11 c0       	push   $0xc011669f
c010f6ac:	6a 77                	push   $0x77
c010f6ae:	68 37 66 11 c0       	push   $0xc0116637
c010f6b3:	e8 2d 0e ff ff       	call   c01004e5 <__panic>
c010f6b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f6bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
        sin->din = din, sin->ino = ino, sin->dirty = 0, sin->reclaim_count = 1;
c010f6be:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6c1:	8b 55 0c             	mov    0xc(%ebp),%edx
c010f6c4:	89 10                	mov    %edx,(%eax)
c010f6c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6c9:	8b 55 10             	mov    0x10(%ebp),%edx
c010f6cc:	89 50 04             	mov    %edx,0x4(%eax)
c010f6cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6d2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
c010f6d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6dc:	c7 40 0c 01 00 00 00 	movl   $0x1,0xc(%eax)
        sem_init(&(sin->sem), 1);
c010f6e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f6e6:	83 c0 10             	add    $0x10,%eax
c010f6e9:	83 ec 08             	sub    $0x8,%esp
c010f6ec:	6a 01                	push   $0x1
c010f6ee:	50                   	push   %eax
c010f6ef:	e8 1e 96 ff ff       	call   c0108d12 <sem_init>
c010f6f4:	83 c4 10             	add    $0x10,%esp
        *node_store = node;
c010f6f7:	8b 45 14             	mov    0x14(%ebp),%eax
c010f6fa:	8b 55 f4             	mov    -0xc(%ebp),%edx
c010f6fd:	89 10                	mov    %edx,(%eax)
        return 0;
c010f6ff:	b8 00 00 00 00       	mov    $0x0,%eax
c010f704:	eb 05                	jmp    c010f70b <sfs_create_inode+0xcd>
    }
    return -E_NO_MEM;
c010f706:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c010f70b:	c9                   	leave  
c010f70c:	c3                   	ret    

c010f70d <lookup_sfs_nolock>:
 * lookup_sfs_nolock - according ino, find related inode
 *
 * NOTICE: le2sin, info2node MACRO
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
c010f70d:	55                   	push   %ebp
c010f70e:	89 e5                	mov    %esp,%ebp
c010f710:	83 ec 28             	sub    $0x28,%esp
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
c010f713:	83 ec 08             	sub    $0x8,%esp
c010f716:	ff 75 0c             	pushl  0xc(%ebp)
c010f719:	ff 75 08             	pushl  0x8(%ebp)
c010f71c:	e8 6d fc ff ff       	call   c010f38e <sfs_hash_list>
c010f721:	83 c4 10             	add    $0x10,%esp
c010f724:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f727:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f72a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while ((le = list_next(le)) != list) {
c010f72d:	eb 41                	jmp    c010f770 <lookup_sfs_nolock+0x63>
        struct sfs_inode *sin = le2sin(le, hash_link);
c010f72f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f732:	83 e8 24             	sub    $0x24,%eax
c010f735:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (sin->ino == ino) {
c010f738:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f73b:	8b 40 04             	mov    0x4(%eax),%eax
c010f73e:	3b 45 0c             	cmp    0xc(%ebp),%eax
c010f741:	75 2d                	jne    c010f770 <lookup_sfs_nolock+0x63>
            node = info2node(sin, sfs_inode);
c010f743:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f746:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (vop_ref_inc(node) == 1) {
c010f749:	83 ec 0c             	sub    $0xc,%esp
c010f74c:	ff 75 e8             	pushl  -0x18(%ebp)
c010f74f:	e8 40 ea ff ff       	call   c010e194 <inode_ref_inc>
c010f754:	83 c4 10             	add    $0x10,%esp
c010f757:	83 f8 01             	cmp    $0x1,%eax
c010f75a:	75 0f                	jne    c010f76b <lookup_sfs_nolock+0x5e>
                sin->reclaim_count ++;
c010f75c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f75f:	8b 40 0c             	mov    0xc(%eax),%eax
c010f762:	8d 50 01             	lea    0x1(%eax),%edx
c010f765:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f768:	89 50 0c             	mov    %edx,0xc(%eax)
            }
            return node;
c010f76b:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f76e:	eb 1c                	jmp    c010f78c <lookup_sfs_nolock+0x7f>
c010f770:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f773:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 * list_next - get the next entry
 * @listelm:    the list head
 **/
static inline list_entry_t *
list_next(list_entry_t *listelm) {
    return listelm->next;
c010f776:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c010f779:	8b 40 04             	mov    0x4(%eax),%eax
 */
static struct inode *
lookup_sfs_nolock(struct sfs_fs *sfs, uint32_t ino) {
    struct inode *node;
    list_entry_t *list = sfs_hash_list(sfs, ino), *le = list;
    while ((le = list_next(le)) != list) {
c010f77c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f77f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f782:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c010f785:	75 a8                	jne    c010f72f <lookup_sfs_nolock+0x22>
                sin->reclaim_count ++;
            }
            return node;
        }
    }
    return NULL;
c010f787:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010f78c:	c9                   	leave  
c010f78d:	c3                   	ret    

c010f78e <sfs_load_inode>:
/*
 * sfs_load_inode - If the inode isn't existed, load inode related ino disk block data into a new created inode.
 *                  If the inode is in memory alreadily, then do nothing
 */
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
c010f78e:	55                   	push   %ebp
c010f78f:	89 e5                	mov    %esp,%ebp
c010f791:	83 ec 18             	sub    $0x18,%esp
    lock_sfs_fs(sfs);
c010f794:	83 ec 0c             	sub    $0xc,%esp
c010f797:	ff 75 08             	pushl  0x8(%ebp)
c010f79a:	e8 01 fb ff ff       	call   c010f2a0 <lock_sfs_fs>
c010f79f:	83 c4 10             	add    $0x10,%esp
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
c010f7a2:	83 ec 08             	sub    $0x8,%esp
c010f7a5:	ff 75 10             	pushl  0x10(%ebp)
c010f7a8:	ff 75 08             	pushl  0x8(%ebp)
c010f7ab:	e8 5d ff ff ff       	call   c010f70d <lookup_sfs_nolock>
c010f7b0:	83 c4 10             	add    $0x10,%esp
c010f7b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010f7b6:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f7b9:	85 c0                	test   %eax,%eax
c010f7bb:	0f 85 fd 00 00 00    	jne    c010f8be <sfs_load_inode+0x130>
        goto out_unlock;
    }

    int ret = -E_NO_MEM;
c010f7c1:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
c010f7c8:	83 ec 0c             	sub    $0xc,%esp
c010f7cb:	6a 40                	push   $0x40
c010f7cd:	e8 72 76 ff ff       	call   c0106e44 <kmalloc>
c010f7d2:	83 c4 10             	add    $0x10,%esp
c010f7d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010f7d8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010f7dc:	0f 84 0e 01 00 00    	je     c010f8f0 <sfs_load_inode+0x162>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
c010f7e2:	83 ec 08             	sub    $0x8,%esp
c010f7e5:	ff 75 10             	pushl  0x10(%ebp)
c010f7e8:	ff 75 08             	pushl  0x8(%ebp)
c010f7eb:	e8 ee fc ff ff       	call   c010f4de <sfs_block_inuse>
c010f7f0:	83 c4 10             	add    $0x10,%esp
c010f7f3:	85 c0                	test   %eax,%eax
c010f7f5:	75 19                	jne    c010f810 <sfs_load_inode+0x82>
c010f7f7:	68 d5 66 11 c0       	push   $0xc01166d5
c010f7fc:	68 9f 66 11 c0       	push   $0xc011669f
c010f801:	68 a8 00 00 00       	push   $0xa8
c010f806:	68 37 66 11 c0       	push   $0xc0116637
c010f80b:	e8 d5 0c ff ff       	call   c01004e5 <__panic>
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
c010f810:	83 ec 0c             	sub    $0xc,%esp
c010f813:	6a 00                	push   $0x0
c010f815:	ff 75 10             	pushl  0x10(%ebp)
c010f818:	6a 40                	push   $0x40
c010f81a:	ff 75 f0             	pushl  -0x10(%ebp)
c010f81d:	ff 75 08             	pushl  0x8(%ebp)
c010f820:	e8 f2 25 00 00       	call   c0111e17 <sfs_rbuf>
c010f825:	83 c4 20             	add    $0x20,%esp
c010f828:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f82b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f82f:	0f 85 a7 00 00 00    	jne    c010f8dc <sfs_load_inode+0x14e>
        goto failed_cleanup_din;
    }

    assert(din->nlinks != 0);
c010f835:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010f838:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c010f83c:	66 85 c0             	test   %ax,%ax
c010f83f:	75 19                	jne    c010f85a <sfs_load_inode+0xcc>
c010f841:	68 26 67 11 c0       	push   $0xc0116726
c010f846:	68 9f 66 11 c0       	push   $0xc011669f
c010f84b:	68 ad 00 00 00       	push   $0xad
c010f850:	68 37 66 11 c0       	push   $0xc0116637
c010f855:	e8 8b 0c ff ff       	call   c01004e5 <__panic>
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
c010f85a:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f85d:	50                   	push   %eax
c010f85e:	ff 75 10             	pushl  0x10(%ebp)
c010f861:	ff 75 f0             	pushl  -0x10(%ebp)
c010f864:	ff 75 08             	pushl  0x8(%ebp)
c010f867:	e8 d2 fd ff ff       	call   c010f63e <sfs_create_inode>
c010f86c:	83 c4 10             	add    $0x10,%esp
c010f86f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f872:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f876:	75 67                	jne    c010f8df <sfs_load_inode+0x151>
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));
c010f878:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f87b:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f87e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010f882:	74 0d                	je     c010f891 <sfs_load_inode+0x103>
c010f884:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f887:	8b 40 2c             	mov    0x2c(%eax),%eax
c010f88a:	3d 35 12 00 00       	cmp    $0x1235,%eax
c010f88f:	74 19                	je     c010f8aa <sfs_load_inode+0x11c>
c010f891:	68 f0 66 11 c0       	push   $0xc01166f0
c010f896:	68 9f 66 11 c0       	push   $0xc011669f
c010f89b:	68 b1 00 00 00       	push   $0xb1
c010f8a0:	68 37 66 11 c0       	push   $0xc0116637
c010f8a5:	e8 3b 0c ff ff       	call   c01004e5 <__panic>
c010f8aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f8ad:	83 ec 08             	sub    $0x8,%esp
c010f8b0:	50                   	push   %eax
c010f8b1:	ff 75 08             	pushl  0x8(%ebp)
c010f8b4:	e8 fc fa ff ff       	call   c010f3b5 <sfs_set_links>
c010f8b9:	83 c4 10             	add    $0x10,%esp
c010f8bc:	eb 01                	jmp    c010f8bf <sfs_load_inode+0x131>
int
sfs_load_inode(struct sfs_fs *sfs, struct inode **node_store, uint32_t ino) {
    lock_sfs_fs(sfs);
    struct inode *node;
    if ((node = lookup_sfs_nolock(sfs, ino)) != NULL) {
        goto out_unlock;
c010f8be:	90                   	nop
        goto failed_cleanup_din;
    }
    sfs_set_links(sfs, vop_info(node, sfs_inode));

out_unlock:
    unlock_sfs_fs(sfs);
c010f8bf:	83 ec 0c             	sub    $0xc,%esp
c010f8c2:	ff 75 08             	pushl  0x8(%ebp)
c010f8c5:	e8 0c fa ff ff       	call   c010f2d6 <unlock_sfs_fs>
c010f8ca:	83 c4 10             	add    $0x10,%esp
    *node_store = node;
c010f8cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010f8d0:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f8d3:	89 10                	mov    %edx,(%eax)
    return 0;
c010f8d5:	b8 00 00 00 00       	mov    $0x0,%eax
c010f8da:	eb 26                	jmp    c010f902 <sfs_load_inode+0x174>
        goto failed_unlock;
    }

    assert(sfs_block_inuse(sfs, ino));
    if ((ret = sfs_rbuf(sfs, din, sizeof(struct sfs_disk_inode), ino, 0)) != 0) {
        goto failed_cleanup_din;
c010f8dc:	90                   	nop
c010f8dd:	eb 01                	jmp    c010f8e0 <sfs_load_inode+0x152>
    }

    assert(din->nlinks != 0);
    if ((ret = sfs_create_inode(sfs, din, ino, &node)) != 0) {
        goto failed_cleanup_din;
c010f8df:	90                   	nop
    unlock_sfs_fs(sfs);
    *node_store = node;
    return 0;

failed_cleanup_din:
    kfree(din);
c010f8e0:	83 ec 0c             	sub    $0xc,%esp
c010f8e3:	ff 75 f0             	pushl  -0x10(%ebp)
c010f8e6:	e8 71 75 ff ff       	call   c0106e5c <kfree>
c010f8eb:	83 c4 10             	add    $0x10,%esp
c010f8ee:	eb 01                	jmp    c010f8f1 <sfs_load_inode+0x163>
    }

    int ret = -E_NO_MEM;
    struct sfs_disk_inode *din;
    if ((din = kmalloc(sizeof(struct sfs_disk_inode))) == NULL) {
        goto failed_unlock;
c010f8f0:	90                   	nop
    return 0;

failed_cleanup_din:
    kfree(din);
failed_unlock:
    unlock_sfs_fs(sfs);
c010f8f1:	83 ec 0c             	sub    $0xc,%esp
c010f8f4:	ff 75 08             	pushl  0x8(%ebp)
c010f8f7:	e8 da f9 ff ff       	call   c010f2d6 <unlock_sfs_fs>
c010f8fc:	83 c4 10             	add    $0x10,%esp
    return ret;
c010f8ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010f902:	c9                   	leave  
c010f903:	c3                   	ret    

c010f904 <sfs_bmap_get_sub_nolock>:
 * @index:    the index of block in indrect block
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_sub_nolock(struct sfs_fs *sfs, uint32_t *entp, uint32_t index, bool create, uint32_t *ino_store) {
c010f904:	55                   	push   %ebp
c010f905:	89 e5                	mov    %esp,%ebp
c010f907:	83 ec 18             	sub    $0x18,%esp
    assert(index < SFS_BLK_NENTRY);
c010f90a:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c010f911:	76 19                	jbe    c010f92c <sfs_bmap_get_sub_nolock+0x28>
c010f913:	68 37 67 11 c0       	push   $0xc0116737
c010f918:	68 9f 66 11 c0       	push   $0xc011669f
c010f91d:	68 ca 00 00 00       	push   $0xca
c010f922:	68 37 66 11 c0       	push   $0xc0116637
c010f927:	e8 b9 0b ff ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ent, ino = 0;
c010f92c:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);  // the offset of entry in entry block
c010f933:	8b 45 10             	mov    0x10(%ebp),%eax
c010f936:	c1 e0 02             	shl    $0x2,%eax
c010f939:	89 45 f0             	mov    %eax,-0x10(%ebp)
	// if entry block is existd, read the content of entry block into  sfs->sfs_buffer
    if ((ent = *entp) != 0) {
c010f93c:	8b 45 0c             	mov    0xc(%ebp),%eax
c010f93f:	8b 00                	mov    (%eax),%eax
c010f941:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010f944:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f947:	85 c0                	test   %eax,%eax
c010f949:	74 3f                	je     c010f98a <sfs_bmap_get_sub_nolock+0x86>
        if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c010f94b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f94e:	83 ec 0c             	sub    $0xc,%esp
c010f951:	ff 75 f0             	pushl  -0x10(%ebp)
c010f954:	50                   	push   %eax
c010f955:	6a 04                	push   $0x4
c010f957:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f95a:	50                   	push   %eax
c010f95b:	ff 75 08             	pushl  0x8(%ebp)
c010f95e:	e8 b4 24 00 00       	call   c0111e17 <sfs_rbuf>
c010f963:	83 c4 20             	add    $0x20,%esp
c010f966:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f969:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f96d:	74 08                	je     c010f977 <sfs_bmap_get_sub_nolock+0x73>
            return ret;
c010f96f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f972:	e9 d5 00 00 00       	jmp    c010fa4c <sfs_bmap_get_sub_nolock+0x148>
        }
        if (ino != 0 || !create) {
c010f977:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f97a:	85 c0                	test   %eax,%eax
c010f97c:	0f 85 85 00 00 00    	jne    c010fa07 <sfs_bmap_get_sub_nolock+0x103>
c010f982:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f986:	74 7f                	je     c010fa07 <sfs_bmap_get_sub_nolock+0x103>
c010f988:	eb 29                	jmp    c010f9b3 <sfs_bmap_get_sub_nolock+0xaf>
            goto out;
        }
    }
    else {
        if (!create) {
c010f98a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010f98e:	74 76                	je     c010fa06 <sfs_bmap_get_sub_nolock+0x102>
            goto out;
        }
		//if entry block isn't existd, allocated a entry block (for indrect block)
        if ((ret = sfs_block_alloc(sfs, &ent)) != 0) {
c010f990:	83 ec 08             	sub    $0x8,%esp
c010f993:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010f996:	50                   	push   %eax
c010f997:	ff 75 08             	pushl  0x8(%ebp)
c010f99a:	e8 95 fb ff ff       	call   c010f534 <sfs_block_alloc>
c010f99f:	83 c4 10             	add    $0x10,%esp
c010f9a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9a5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9a9:	74 08                	je     c010f9b3 <sfs_bmap_get_sub_nolock+0xaf>
            return ret;
c010f9ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010f9ae:	e9 99 00 00 00       	jmp    c010fa4c <sfs_bmap_get_sub_nolock+0x148>
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c010f9b3:	83 ec 08             	sub    $0x8,%esp
c010f9b6:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f9b9:	50                   	push   %eax
c010f9ba:	ff 75 08             	pushl  0x8(%ebp)
c010f9bd:	e8 72 fb ff ff       	call   c010f534 <sfs_block_alloc>
c010f9c2:	83 c4 10             	add    $0x10,%esp
c010f9c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9cc:	75 5c                	jne    c010fa2a <sfs_bmap_get_sub_nolock+0x126>
        goto failed_cleanup;
    }
    if ((ret = sfs_wbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c010f9ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010f9d1:	83 ec 0c             	sub    $0xc,%esp
c010f9d4:	ff 75 f0             	pushl  -0x10(%ebp)
c010f9d7:	50                   	push   %eax
c010f9d8:	6a 04                	push   $0x4
c010f9da:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010f9dd:	50                   	push   %eax
c010f9de:	ff 75 08             	pushl  0x8(%ebp)
c010f9e1:	e8 ce 24 00 00       	call   c0111eb4 <sfs_wbuf>
c010f9e6:	83 c4 20             	add    $0x20,%esp
c010f9e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010f9ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010f9f0:	74 15                	je     c010fa07 <sfs_bmap_get_sub_nolock+0x103>
        sfs_block_free(sfs, ino);
c010f9f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010f9f5:	83 ec 08             	sub    $0x8,%esp
c010f9f8:	50                   	push   %eax
c010f9f9:	ff 75 08             	pushl  0x8(%ebp)
c010f9fc:	e8 db fb ff ff       	call   c010f5dc <sfs_block_free>
c010fa01:	83 c4 10             	add    $0x10,%esp
        goto failed_cleanup;
c010fa04:	eb 25                	jmp    c010fa2b <sfs_bmap_get_sub_nolock+0x127>
            goto out;
        }
    }
    else {
        if (!create) {
            goto out;
c010fa06:	90                   	nop
        sfs_block_free(sfs, ino);
        goto failed_cleanup;
    }

out:
    if (ent != *entp) {
c010fa07:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa0a:	8b 10                	mov    (%eax),%edx
c010fa0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa0f:	39 c2                	cmp    %eax,%edx
c010fa11:	74 08                	je     c010fa1b <sfs_bmap_get_sub_nolock+0x117>
        *entp = ent;
c010fa13:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fa16:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa19:	89 10                	mov    %edx,(%eax)
    }
    *ino_store = ino;
c010fa1b:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fa1e:	8b 45 18             	mov    0x18(%ebp),%eax
c010fa21:	89 10                	mov    %edx,(%eax)
    return 0;
c010fa23:	b8 00 00 00 00       	mov    $0x0,%eax
c010fa28:	eb 22                	jmp    c010fa4c <sfs_bmap_get_sub_nolock+0x148>
            return ret;
        }
    }
    
    if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
        goto failed_cleanup;
c010fa2a:	90                   	nop
    }
    *ino_store = ino;
    return 0;

failed_cleanup:
    if (ent != *entp) {
c010fa2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa2e:	8b 10                	mov    (%eax),%edx
c010fa30:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa33:	39 c2                	cmp    %eax,%edx
c010fa35:	74 12                	je     c010fa49 <sfs_bmap_get_sub_nolock+0x145>
        sfs_block_free(sfs, ent);
c010fa37:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fa3a:	83 ec 08             	sub    $0x8,%esp
c010fa3d:	50                   	push   %eax
c010fa3e:	ff 75 08             	pushl  0x8(%ebp)
c010fa41:	e8 96 fb ff ff       	call   c010f5dc <sfs_block_free>
c010fa46:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c010fa49:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c010fa4c:	c9                   	leave  
c010fa4d:	c3                   	ret    

c010fa4e <sfs_bmap_get_nolock>:
 * @index:    the index of block in inode
 * @create:   BOOL, if the block isn't allocated, if create = 1 the alloc a block,  otherwise just do nothing
 * @ino_store: 0 OR the index of already inused block or new allocated block.
 */
static int
sfs_bmap_get_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, bool create, uint32_t *ino_store) {
c010fa4e:	55                   	push   %ebp
c010fa4f:	89 e5                	mov    %esp,%ebp
c010fa51:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c010fa54:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fa57:	8b 00                	mov    (%eax),%eax
c010fa59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
	// the index of disk block is in the fist SFS_NDIRECT  direct blocks
    if (index < SFS_NDIRECT) {
c010fa5c:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c010fa60:	77 61                	ja     c010fac3 <sfs_bmap_get_nolock+0x75>
        if ((ino = din->direct[index]) == 0 && create) {
c010fa62:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fa65:	8b 55 10             	mov    0x10(%ebp),%edx
c010fa68:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c010fa6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fa6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fa72:	85 c0                	test   %eax,%eax
c010fa74:	0f 85 e8 00 00 00    	jne    c010fb62 <sfs_bmap_get_nolock+0x114>
c010fa7a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010fa7e:	0f 84 de 00 00 00    	je     c010fb62 <sfs_bmap_get_nolock+0x114>
            if ((ret = sfs_block_alloc(sfs, &ino)) != 0) {
c010fa84:	83 ec 08             	sub    $0x8,%esp
c010fa87:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fa8a:	50                   	push   %eax
c010fa8b:	ff 75 08             	pushl  0x8(%ebp)
c010fa8e:	e8 a1 fa ff ff       	call   c010f534 <sfs_block_alloc>
c010fa93:	83 c4 10             	add    $0x10,%esp
c010fa96:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fa99:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fa9d:	74 08                	je     c010faa7 <sfs_bmap_get_nolock+0x59>
                return ret;
c010fa9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010faa2:	e9 02 01 00 00       	jmp    c010fba9 <sfs_bmap_get_nolock+0x15b>
            }
            din->direct[index] = ino;
c010faa7:	8b 4d e8             	mov    -0x18(%ebp),%ecx
c010faaa:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010faad:	8b 55 10             	mov    0x10(%ebp),%edx
c010fab0:	89 4c 90 0c          	mov    %ecx,0xc(%eax,%edx,4)
            sin->dirty = 1;
c010fab4:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fab7:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c010fabe:	e9 9f 00 00 00       	jmp    c010fb62 <sfs_bmap_get_nolock+0x114>
    }
    // the index of disk block is in the indirect blocks.
    index -= SFS_NDIRECT;
c010fac3:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c010fac7:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c010face:	77 7b                	ja     c010fb4b <sfs_bmap_get_nolock+0xfd>
        ent = din->indirect;
c010fad0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fad3:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fad6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((ret = sfs_bmap_get_sub_nolock(sfs, &ent, index, create, &ino)) != 0) {
c010fad9:	83 ec 0c             	sub    $0xc,%esp
c010fadc:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fadf:	50                   	push   %eax
c010fae0:	ff 75 14             	pushl  0x14(%ebp)
c010fae3:	ff 75 10             	pushl  0x10(%ebp)
c010fae6:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010fae9:	50                   	push   %eax
c010faea:	ff 75 08             	pushl  0x8(%ebp)
c010faed:	e8 12 fe ff ff       	call   c010f904 <sfs_bmap_get_sub_nolock>
c010faf2:	83 c4 20             	add    $0x20,%esp
c010faf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010faf8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fafc:	74 08                	je     c010fb06 <sfs_bmap_get_nolock+0xb8>
            return ret;
c010fafe:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fb01:	e9 a3 00 00 00       	jmp    c010fba9 <sfs_bmap_get_nolock+0x15b>
        }
        if (ent != din->indirect) {
c010fb06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb09:	8b 50 3c             	mov    0x3c(%eax),%edx
c010fb0c:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fb0f:	39 c2                	cmp    %eax,%edx
c010fb11:	74 52                	je     c010fb65 <sfs_bmap_get_nolock+0x117>
            assert(din->indirect == 0);
c010fb13:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb16:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fb19:	85 c0                	test   %eax,%eax
c010fb1b:	74 19                	je     c010fb36 <sfs_bmap_get_nolock+0xe8>
c010fb1d:	68 4e 67 11 c0       	push   $0xc011674e
c010fb22:	68 9f 66 11 c0       	push   $0xc011669f
c010fb27:	68 18 01 00 00       	push   $0x118
c010fb2c:	68 37 66 11 c0       	push   $0xc0116637
c010fb31:	e8 af 09 ff ff       	call   c01004e5 <__panic>
            din->indirect = ent;
c010fb36:	8b 55 ec             	mov    -0x14(%ebp),%edx
c010fb39:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fb3c:	89 50 3c             	mov    %edx,0x3c(%eax)
            sin->dirty = 1;
c010fb3f:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fb42:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        goto out;
c010fb49:	eb 1a                	jmp    c010fb65 <sfs_bmap_get_nolock+0x117>
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
c010fb4b:	83 ec 04             	sub    $0x4,%esp
c010fb4e:	68 64 67 11 c0       	push   $0xc0116764
c010fb53:	68 1e 01 00 00       	push   $0x11e
c010fb58:	68 37 66 11 c0       	push   $0xc0116637
c010fb5d:	e8 83 09 ff ff       	call   c01004e5 <__panic>
                return ret;
            }
            din->direct[index] = ino;
            sin->dirty = 1;
        }
        goto out;
c010fb62:	90                   	nop
c010fb63:	eb 01                	jmp    c010fb66 <sfs_bmap_get_nolock+0x118>
        if (ent != din->indirect) {
            assert(din->indirect == 0);
            din->indirect = ent;
            sin->dirty = 1;
        }
        goto out;
c010fb65:	90                   	nop
    } else {
		panic ("sfs_bmap_get_nolock - index out of range");
	}
out:
    assert(ino == 0 || sfs_block_inuse(sfs, ino));
c010fb66:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb69:	85 c0                	test   %eax,%eax
c010fb6b:	74 2f                	je     c010fb9c <sfs_bmap_get_nolock+0x14e>
c010fb6d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fb70:	83 ec 08             	sub    $0x8,%esp
c010fb73:	50                   	push   %eax
c010fb74:	ff 75 08             	pushl  0x8(%ebp)
c010fb77:	e8 62 f9 ff ff       	call   c010f4de <sfs_block_inuse>
c010fb7c:	83 c4 10             	add    $0x10,%esp
c010fb7f:	85 c0                	test   %eax,%eax
c010fb81:	75 19                	jne    c010fb9c <sfs_bmap_get_nolock+0x14e>
c010fb83:	68 90 67 11 c0       	push   $0xc0116790
c010fb88:	68 9f 66 11 c0       	push   $0xc011669f
c010fb8d:	68 21 01 00 00       	push   $0x121
c010fb92:	68 37 66 11 c0       	push   $0xc0116637
c010fb97:	e8 49 09 ff ff       	call   c01004e5 <__panic>
    *ino_store = ino;
c010fb9c:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fb9f:	8b 45 18             	mov    0x18(%ebp),%eax
c010fba2:	89 10                	mov    %edx,(%eax)
    return 0;
c010fba4:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fba9:	c9                   	leave  
c010fbaa:	c3                   	ret    

c010fbab <sfs_bmap_free_sub_nolock>:

/*
 * sfs_bmap_free_sub_nolock - set the entry item to 0 (free) in the indirect block
 */
static int
sfs_bmap_free_sub_nolock(struct sfs_fs *sfs, uint32_t ent, uint32_t index) {
c010fbab:	55                   	push   %ebp
c010fbac:	89 e5                	mov    %esp,%ebp
c010fbae:	83 ec 18             	sub    $0x18,%esp
    assert(sfs_block_inuse(sfs, ent) && index < SFS_BLK_NENTRY);
c010fbb1:	83 ec 08             	sub    $0x8,%esp
c010fbb4:	ff 75 0c             	pushl  0xc(%ebp)
c010fbb7:	ff 75 08             	pushl  0x8(%ebp)
c010fbba:	e8 1f f9 ff ff       	call   c010f4de <sfs_block_inuse>
c010fbbf:	83 c4 10             	add    $0x10,%esp
c010fbc2:	85 c0                	test   %eax,%eax
c010fbc4:	74 09                	je     c010fbcf <sfs_bmap_free_sub_nolock+0x24>
c010fbc6:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c010fbcd:	76 19                	jbe    c010fbe8 <sfs_bmap_free_sub_nolock+0x3d>
c010fbcf:	68 b8 67 11 c0       	push   $0xc01167b8
c010fbd4:	68 9f 66 11 c0       	push   $0xc011669f
c010fbd9:	68 2b 01 00 00       	push   $0x12b
c010fbde:	68 37 66 11 c0       	push   $0xc0116637
c010fbe3:	e8 fd 08 ff ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino, zero = 0;
c010fbe8:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
    off_t offset = index * sizeof(uint32_t);
c010fbef:	8b 45 10             	mov    0x10(%ebp),%eax
c010fbf2:	c1 e0 02             	shl    $0x2,%eax
c010fbf5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((ret = sfs_rbuf(sfs, &ino, sizeof(uint32_t), ent, offset)) != 0) {
c010fbf8:	83 ec 0c             	sub    $0xc,%esp
c010fbfb:	ff 75 f4             	pushl  -0xc(%ebp)
c010fbfe:	ff 75 0c             	pushl  0xc(%ebp)
c010fc01:	6a 04                	push   $0x4
c010fc03:	8d 45 ec             	lea    -0x14(%ebp),%eax
c010fc06:	50                   	push   %eax
c010fc07:	ff 75 08             	pushl  0x8(%ebp)
c010fc0a:	e8 08 22 00 00       	call   c0111e17 <sfs_rbuf>
c010fc0f:	83 c4 20             	add    $0x20,%esp
c010fc12:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc15:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc19:	74 05                	je     c010fc20 <sfs_bmap_free_sub_nolock+0x75>
        return ret;
c010fc1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc1e:	eb 46                	jmp    c010fc66 <sfs_bmap_free_sub_nolock+0xbb>
    }
    if (ino != 0) {
c010fc20:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc23:	85 c0                	test   %eax,%eax
c010fc25:	74 3a                	je     c010fc61 <sfs_bmap_free_sub_nolock+0xb6>
        if ((ret = sfs_wbuf(sfs, &zero, sizeof(uint32_t), ent, offset)) != 0) {
c010fc27:	83 ec 0c             	sub    $0xc,%esp
c010fc2a:	ff 75 f4             	pushl  -0xc(%ebp)
c010fc2d:	ff 75 0c             	pushl  0xc(%ebp)
c010fc30:	6a 04                	push   $0x4
c010fc32:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fc35:	50                   	push   %eax
c010fc36:	ff 75 08             	pushl  0x8(%ebp)
c010fc39:	e8 76 22 00 00       	call   c0111eb4 <sfs_wbuf>
c010fc3e:	83 c4 20             	add    $0x20,%esp
c010fc41:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc44:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc48:	74 05                	je     c010fc4f <sfs_bmap_free_sub_nolock+0xa4>
            return ret;
c010fc4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fc4d:	eb 17                	jmp    c010fc66 <sfs_bmap_free_sub_nolock+0xbb>
        }
        sfs_block_free(sfs, ino);
c010fc4f:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fc52:	83 ec 08             	sub    $0x8,%esp
c010fc55:	50                   	push   %eax
c010fc56:	ff 75 08             	pushl  0x8(%ebp)
c010fc59:	e8 7e f9 ff ff       	call   c010f5dc <sfs_block_free>
c010fc5e:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
c010fc61:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fc66:	c9                   	leave  
c010fc67:	c3                   	ret    

c010fc68 <sfs_bmap_free_nolock>:

/*
 * sfs_bmap_free_nolock - free a block with logical index in inode and reset the inode's fields
 */
static int
sfs_bmap_free_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index) {
c010fc68:	55                   	push   %ebp
c010fc69:	89 e5                	mov    %esp,%ebp
c010fc6b:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c010fc6e:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fc71:	8b 00                	mov    (%eax),%eax
c010fc73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int ret;
    uint32_t ent, ino;
    if (index < SFS_NDIRECT) {
c010fc76:	83 7d 10 0b          	cmpl   $0xb,0x10(%ebp)
c010fc7a:	77 43                	ja     c010fcbf <sfs_bmap_free_nolock+0x57>
        if ((ino = din->direct[index]) != 0) {
c010fc7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fc7f:	8b 55 10             	mov    0x10(%ebp),%edx
c010fc82:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
c010fc86:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fc89:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fc8d:	74 29                	je     c010fcb8 <sfs_bmap_free_nolock+0x50>
			// free the block
            sfs_block_free(sfs, ino);
c010fc8f:	83 ec 08             	sub    $0x8,%esp
c010fc92:	ff 75 f0             	pushl  -0x10(%ebp)
c010fc95:	ff 75 08             	pushl  0x8(%ebp)
c010fc98:	e8 3f f9 ff ff       	call   c010f5dc <sfs_block_free>
c010fc9d:	83 c4 10             	add    $0x10,%esp
            din->direct[index] = 0;
c010fca0:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fca3:	8b 55 10             	mov    0x10(%ebp),%edx
c010fca6:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
c010fcad:	00 
            sin->dirty = 1;
c010fcae:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fcb1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
        }
        return 0;
c010fcb8:	b8 00 00 00 00       	mov    $0x0,%eax
c010fcbd:	eb 4a                	jmp    c010fd09 <sfs_bmap_free_nolock+0xa1>
    }

    index -= SFS_NDIRECT;
c010fcbf:	83 6d 10 0c          	subl   $0xc,0x10(%ebp)
    if (index < SFS_BLK_NENTRY) {
c010fcc3:	81 7d 10 ff 03 00 00 	cmpl   $0x3ff,0x10(%ebp)
c010fcca:	77 38                	ja     c010fd04 <sfs_bmap_free_nolock+0x9c>
        if ((ent = din->indirect) != 0) {
c010fccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fccf:	8b 40 3c             	mov    0x3c(%eax),%eax
c010fcd2:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fcd5:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fcd9:	74 22                	je     c010fcfd <sfs_bmap_free_nolock+0x95>
			// set the entry item to 0 in the indirect block
            if ((ret = sfs_bmap_free_sub_nolock(sfs, ent, index)) != 0) {
c010fcdb:	83 ec 04             	sub    $0x4,%esp
c010fcde:	ff 75 10             	pushl  0x10(%ebp)
c010fce1:	ff 75 ec             	pushl  -0x14(%ebp)
c010fce4:	ff 75 08             	pushl  0x8(%ebp)
c010fce7:	e8 bf fe ff ff       	call   c010fbab <sfs_bmap_free_sub_nolock>
c010fcec:	83 c4 10             	add    $0x10,%esp
c010fcef:	89 45 e8             	mov    %eax,-0x18(%ebp)
c010fcf2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c010fcf6:	74 05                	je     c010fcfd <sfs_bmap_free_nolock+0x95>
                return ret;
c010fcf8:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fcfb:	eb 0c                	jmp    c010fd09 <sfs_bmap_free_nolock+0xa1>
            }
        }
        return 0;
c010fcfd:	b8 00 00 00 00       	mov    $0x0,%eax
c010fd02:	eb 05                	jmp    c010fd09 <sfs_bmap_free_nolock+0xa1>
    }
    return 0;
c010fd04:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fd09:	c9                   	leave  
c010fd0a:	c3                   	ret    

c010fd0b <sfs_bmap_load_nolock>:
 * @sin:      sfs inode in memory
 * @index:    the logical index of disk block in inode
 * @ino_store:the NO. of disk block
 */
static int
sfs_bmap_load_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t index, uint32_t *ino_store) {
c010fd0b:	55                   	push   %ebp
c010fd0c:	89 e5                	mov    %esp,%ebp
c010fd0e:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c010fd11:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fd14:	8b 00                	mov    (%eax),%eax
c010fd16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(index <= din->blocks);
c010fd19:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd1c:	8b 40 08             	mov    0x8(%eax),%eax
c010fd1f:	3b 45 10             	cmp    0x10(%ebp),%eax
c010fd22:	73 19                	jae    c010fd3d <sfs_bmap_load_nolock+0x32>
c010fd24:	68 ec 67 11 c0       	push   $0xc01167ec
c010fd29:	68 9f 66 11 c0       	push   $0xc011669f
c010fd2e:	68 64 01 00 00       	push   $0x164
c010fd33:	68 37 66 11 c0       	push   $0xc0116637
c010fd38:	e8 a8 07 ff ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino;
    bool create = (index == din->blocks);
c010fd3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fd40:	8b 40 08             	mov    0x8(%eax),%eax
c010fd43:	3b 45 10             	cmp    0x10(%ebp),%eax
c010fd46:	0f 94 c0             	sete   %al
c010fd49:	0f b6 c0             	movzbl %al,%eax
c010fd4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if ((ret = sfs_bmap_get_nolock(sfs, sin, index, create, &ino)) != 0) {
c010fd4f:	83 ec 0c             	sub    $0xc,%esp
c010fd52:	8d 45 e8             	lea    -0x18(%ebp),%eax
c010fd55:	50                   	push   %eax
c010fd56:	ff 75 f0             	pushl  -0x10(%ebp)
c010fd59:	ff 75 10             	pushl  0x10(%ebp)
c010fd5c:	ff 75 0c             	pushl  0xc(%ebp)
c010fd5f:	ff 75 08             	pushl  0x8(%ebp)
c010fd62:	e8 e7 fc ff ff       	call   c010fa4e <sfs_bmap_get_nolock>
c010fd67:	83 c4 20             	add    $0x20,%esp
c010fd6a:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010fd6d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010fd71:	74 05                	je     c010fd78 <sfs_bmap_load_nolock+0x6d>
        return ret;
c010fd73:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fd76:	eb 57                	jmp    c010fdcf <sfs_bmap_load_nolock+0xc4>
    }
    assert(sfs_block_inuse(sfs, ino));
c010fd78:	8b 45 e8             	mov    -0x18(%ebp),%eax
c010fd7b:	83 ec 08             	sub    $0x8,%esp
c010fd7e:	50                   	push   %eax
c010fd7f:	ff 75 08             	pushl  0x8(%ebp)
c010fd82:	e8 57 f7 ff ff       	call   c010f4de <sfs_block_inuse>
c010fd87:	83 c4 10             	add    $0x10,%esp
c010fd8a:	85 c0                	test   %eax,%eax
c010fd8c:	75 19                	jne    c010fda7 <sfs_bmap_load_nolock+0x9c>
c010fd8e:	68 d5 66 11 c0       	push   $0xc01166d5
c010fd93:	68 9f 66 11 c0       	push   $0xc011669f
c010fd98:	68 6b 01 00 00       	push   $0x16b
c010fd9d:	68 37 66 11 c0       	push   $0xc0116637
c010fda2:	e8 3e 07 ff ff       	call   c01004e5 <__panic>
    if (create) {
c010fda7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fdab:	74 0f                	je     c010fdbc <sfs_bmap_load_nolock+0xb1>
        din->blocks ++;
c010fdad:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fdb0:	8b 40 08             	mov    0x8(%eax),%eax
c010fdb3:	8d 50 01             	lea    0x1(%eax),%edx
c010fdb6:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fdb9:	89 50 08             	mov    %edx,0x8(%eax)
    }
    if (ino_store != NULL) {
c010fdbc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010fdc0:	74 08                	je     c010fdca <sfs_bmap_load_nolock+0xbf>
        *ino_store = ino;
c010fdc2:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010fdc5:	8b 45 14             	mov    0x14(%ebp),%eax
c010fdc8:	89 10                	mov    %edx,(%eax)
    }
    return 0;
c010fdca:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fdcf:	c9                   	leave  
c010fdd0:	c3                   	ret    

c010fdd1 <sfs_bmap_truncate_nolock>:

/*
 * sfs_bmap_truncate_nolock - free the disk block at the end of file
 */
static int
sfs_bmap_truncate_nolock(struct sfs_fs *sfs, struct sfs_inode *sin) {
c010fdd1:	55                   	push   %ebp
c010fdd2:	89 e5                	mov    %esp,%ebp
c010fdd4:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = sin->din;
c010fdd7:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fdda:	8b 00                	mov    (%eax),%eax
c010fddc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(din->blocks != 0);
c010fddf:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fde2:	8b 40 08             	mov    0x8(%eax),%eax
c010fde5:	85 c0                	test   %eax,%eax
c010fde7:	75 19                	jne    c010fe02 <sfs_bmap_truncate_nolock+0x31>
c010fde9:	68 01 68 11 c0       	push   $0xc0116801
c010fdee:	68 9f 66 11 c0       	push   $0xc011669f
c010fdf3:	68 7b 01 00 00       	push   $0x17b
c010fdf8:	68 37 66 11 c0       	push   $0xc0116637
c010fdfd:	e8 e3 06 ff ff       	call   c01004e5 <__panic>
    int ret;
    if ((ret = sfs_bmap_free_nolock(sfs, sin, din->blocks - 1)) != 0) {
c010fe02:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe05:	8b 40 08             	mov    0x8(%eax),%eax
c010fe08:	83 e8 01             	sub    $0x1,%eax
c010fe0b:	83 ec 04             	sub    $0x4,%esp
c010fe0e:	50                   	push   %eax
c010fe0f:	ff 75 0c             	pushl  0xc(%ebp)
c010fe12:	ff 75 08             	pushl  0x8(%ebp)
c010fe15:	e8 4e fe ff ff       	call   c010fc68 <sfs_bmap_free_nolock>
c010fe1a:	83 c4 10             	add    $0x10,%esp
c010fe1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
c010fe20:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c010fe24:	74 05                	je     c010fe2b <sfs_bmap_truncate_nolock+0x5a>
        return ret;
c010fe26:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fe29:	eb 1e                	jmp    c010fe49 <sfs_bmap_truncate_nolock+0x78>
    }
    din->blocks --;
c010fe2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe2e:	8b 40 08             	mov    0x8(%eax),%eax
c010fe31:	8d 50 ff             	lea    -0x1(%eax),%edx
c010fe34:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010fe37:	89 50 08             	mov    %edx,0x8(%eax)
    sin->dirty = 1;
c010fe3a:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe3d:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    return 0;
c010fe44:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010fe49:	c9                   	leave  
c010fe4a:	c3                   	ret    

c010fe4b <sfs_dirent_read_nolock>:
 * @sin:      sfs inode in memory
 * @slot:     the index of file entry
 * @entry:    file entry
 */
static int
sfs_dirent_read_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c010fe4b:	55                   	push   %ebp
c010fe4c:	89 e5                	mov    %esp,%ebp
c010fe4e:	83 ec 18             	sub    $0x18,%esp
    assert(sin->din->type == SFS_TYPE_DIR && (slot >= 0 && slot < sin->din->blocks));
c010fe51:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe54:	8b 00                	mov    (%eax),%eax
c010fe56:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c010fe5a:	66 83 f8 02          	cmp    $0x2,%ax
c010fe5e:	75 15                	jne    c010fe75 <sfs_dirent_read_nolock+0x2a>
c010fe60:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c010fe64:	78 0f                	js     c010fe75 <sfs_dirent_read_nolock+0x2a>
c010fe66:	8b 45 0c             	mov    0xc(%ebp),%eax
c010fe69:	8b 00                	mov    (%eax),%eax
c010fe6b:	8b 50 08             	mov    0x8(%eax),%edx
c010fe6e:	8b 45 10             	mov    0x10(%ebp),%eax
c010fe71:	39 c2                	cmp    %eax,%edx
c010fe73:	77 19                	ja     c010fe8e <sfs_dirent_read_nolock+0x43>
c010fe75:	68 14 68 11 c0       	push   $0xc0116814
c010fe7a:	68 9f 66 11 c0       	push   $0xc011669f
c010fe7f:	68 8e 01 00 00       	push   $0x18e
c010fe84:	68 37 66 11 c0       	push   $0xc0116637
c010fe89:	e8 57 06 ff ff       	call   c01004e5 <__panic>
    int ret;
    uint32_t ino;
	// according to the DIR's inode and the slot of file entry, find the index of disk block which contains this file entry
    if ((ret = sfs_bmap_load_nolock(sfs, sin, slot, &ino)) != 0) {
c010fe8e:	8b 45 10             	mov    0x10(%ebp),%eax
c010fe91:	8d 55 f0             	lea    -0x10(%ebp),%edx
c010fe94:	52                   	push   %edx
c010fe95:	50                   	push   %eax
c010fe96:	ff 75 0c             	pushl  0xc(%ebp)
c010fe99:	ff 75 08             	pushl  0x8(%ebp)
c010fe9c:	e8 6a fe ff ff       	call   c010fd0b <sfs_bmap_load_nolock>
c010fea1:	83 c4 10             	add    $0x10,%esp
c010fea4:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010fea7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010feab:	74 05                	je     c010feb2 <sfs_dirent_read_nolock+0x67>
        return ret;
c010fead:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010feb0:	eb 68                	jmp    c010ff1a <sfs_dirent_read_nolock+0xcf>
    }
    assert(sfs_block_inuse(sfs, ino));
c010feb2:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010feb5:	83 ec 08             	sub    $0x8,%esp
c010feb8:	50                   	push   %eax
c010feb9:	ff 75 08             	pushl  0x8(%ebp)
c010febc:	e8 1d f6 ff ff       	call   c010f4de <sfs_block_inuse>
c010fec1:	83 c4 10             	add    $0x10,%esp
c010fec4:	85 c0                	test   %eax,%eax
c010fec6:	75 19                	jne    c010fee1 <sfs_dirent_read_nolock+0x96>
c010fec8:	68 d5 66 11 c0       	push   $0xc01166d5
c010fecd:	68 9f 66 11 c0       	push   $0xc011669f
c010fed2:	68 95 01 00 00       	push   $0x195
c010fed7:	68 37 66 11 c0       	push   $0xc0116637
c010fedc:	e8 04 06 ff ff       	call   c01004e5 <__panic>
	// read the content of file entry in the disk block 
    if ((ret = sfs_rbuf(sfs, entry, sizeof(struct sfs_disk_entry), ino, 0)) != 0) {
c010fee1:	8b 45 f0             	mov    -0x10(%ebp),%eax
c010fee4:	83 ec 0c             	sub    $0xc,%esp
c010fee7:	6a 00                	push   $0x0
c010fee9:	50                   	push   %eax
c010feea:	68 04 01 00 00       	push   $0x104
c010feef:	ff 75 14             	pushl  0x14(%ebp)
c010fef2:	ff 75 08             	pushl  0x8(%ebp)
c010fef5:	e8 1d 1f 00 00       	call   c0111e17 <sfs_rbuf>
c010fefa:	83 c4 20             	add    $0x20,%esp
c010fefd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ff00:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ff04:	74 05                	je     c010ff0b <sfs_dirent_read_nolock+0xc0>
        return ret;
c010ff06:	8b 45 f4             	mov    -0xc(%ebp),%eax
c010ff09:	eb 0f                	jmp    c010ff1a <sfs_dirent_read_nolock+0xcf>
    }
    entry->name[SFS_MAX_FNAME_LEN] = '\0';
c010ff0b:	8b 45 14             	mov    0x14(%ebp),%eax
c010ff0e:	c6 80 03 01 00 00 00 	movb   $0x0,0x103(%eax)
    return 0;
c010ff15:	b8 00 00 00 00       	mov    $0x0,%eax
}
c010ff1a:	c9                   	leave  
c010ff1b:	c3                   	ret    

c010ff1c <sfs_dirent_search_nolock>:
 * @ino_store:  NO. of disk of this file (with the filename)'s inode
 * @slot:       logical index of file entry (NOTICE: each file entry ocupied one  disk block)
 * @empty_slot: the empty logical index of file entry.
 */
static int
sfs_dirent_search_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, uint32_t *ino_store, int *slot, int *empty_slot) {
c010ff1c:	55                   	push   %ebp
c010ff1d:	89 e5                	mov    %esp,%ebp
c010ff1f:	83 ec 18             	sub    $0x18,%esp
    assert(strlen(name) <= SFS_MAX_FNAME_LEN);
c010ff22:	83 ec 0c             	sub    $0xc,%esp
c010ff25:	ff 75 10             	pushl  0x10(%ebp)
c010ff28:	e8 7e 21 00 00       	call   c01120ab <strlen>
c010ff2d:	83 c4 10             	add    $0x10,%esp
c010ff30:	3d ff 00 00 00       	cmp    $0xff,%eax
c010ff35:	76 19                	jbe    c010ff50 <sfs_dirent_search_nolock+0x34>
c010ff37:	68 60 68 11 c0       	push   $0xc0116860
c010ff3c:	68 9f 66 11 c0       	push   $0xc011669f
c010ff41:	68 ba 01 00 00       	push   $0x1ba
c010ff46:	68 37 66 11 c0       	push   $0xc0116637
c010ff4b:	e8 95 05 ff ff       	call   c01004e5 <__panic>
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c010ff50:	83 ec 0c             	sub    $0xc,%esp
c010ff53:	68 04 01 00 00       	push   $0x104
c010ff58:	e8 e7 6e ff ff       	call   c0106e44 <kmalloc>
c010ff5d:	83 c4 10             	add    $0x10,%esp
c010ff60:	89 45 ec             	mov    %eax,-0x14(%ebp)
c010ff63:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c010ff67:	75 0a                	jne    c010ff73 <sfs_dirent_search_nolock+0x57>
        return -E_NO_MEM;
c010ff69:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c010ff6e:	e9 bc 00 00 00       	jmp    c011002f <sfs_dirent_search_nolock+0x113>
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
c010ff73:	8b 45 0c             	mov    0xc(%ebp),%eax
c010ff76:	8b 00                	mov    (%eax),%eax
c010ff78:	8b 40 08             	mov    0x8(%eax),%eax
c010ff7b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    set_pvalue(empty_slot, nslots);
c010ff7e:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010ff82:	74 08                	je     c010ff8c <sfs_dirent_search_nolock+0x70>
c010ff84:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010ff87:	8b 55 e8             	mov    -0x18(%ebp),%edx
c010ff8a:	89 10                	mov    %edx,(%eax)
    for (i = 0; i < nslots; i ++) {
c010ff8c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c010ff93:	eb 74                	jmp    c0110009 <sfs_dirent_search_nolock+0xed>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c010ff95:	ff 75 ec             	pushl  -0x14(%ebp)
c010ff98:	ff 75 f0             	pushl  -0x10(%ebp)
c010ff9b:	ff 75 0c             	pushl  0xc(%ebp)
c010ff9e:	ff 75 08             	pushl  0x8(%ebp)
c010ffa1:	e8 a5 fe ff ff       	call   c010fe4b <sfs_dirent_read_nolock>
c010ffa6:	83 c4 10             	add    $0x10,%esp
c010ffa9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c010ffac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c010ffb0:	75 68                	jne    c011001a <sfs_dirent_search_nolock+0xfe>
            goto out;
        }
        if (entry->ino == 0) {
c010ffb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ffb5:	8b 00                	mov    (%eax),%eax
c010ffb7:	85 c0                	test   %eax,%eax
c010ffb9:	75 10                	jne    c010ffcb <sfs_dirent_search_nolock+0xaf>
            set_pvalue(empty_slot, i);
c010ffbb:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c010ffbf:	74 43                	je     c0110004 <sfs_dirent_search_nolock+0xe8>
c010ffc1:	8b 45 1c             	mov    0x1c(%ebp),%eax
c010ffc4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010ffc7:	89 10                	mov    %edx,(%eax)
            continue ;
c010ffc9:	eb 39                	jmp    c0110004 <sfs_dirent_search_nolock+0xe8>
        }
        if (strcmp(name, entry->name) == 0) {
c010ffcb:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010ffce:	83 c0 04             	add    $0x4,%eax
c010ffd1:	83 ec 08             	sub    $0x8,%esp
c010ffd4:	50                   	push   %eax
c010ffd5:	ff 75 10             	pushl  0x10(%ebp)
c010ffd8:	e8 c9 21 00 00       	call   c01121a6 <strcmp>
c010ffdd:	83 c4 10             	add    $0x10,%esp
c010ffe0:	85 c0                	test   %eax,%eax
c010ffe2:	75 21                	jne    c0110005 <sfs_dirent_search_nolock+0xe9>
            set_pvalue(slot, i);
c010ffe4:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c010ffe8:	74 08                	je     c010fff2 <sfs_dirent_search_nolock+0xd6>
c010ffea:	8b 45 18             	mov    0x18(%ebp),%eax
c010ffed:	8b 55 f0             	mov    -0x10(%ebp),%edx
c010fff0:	89 10                	mov    %edx,(%eax)
            set_pvalue(ino_store, entry->ino);
c010fff2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c010fff6:	74 25                	je     c011001d <sfs_dirent_search_nolock+0x101>
c010fff8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c010fffb:	8b 10                	mov    (%eax),%edx
c010fffd:	8b 45 14             	mov    0x14(%ebp),%eax
c0110000:	89 10                	mov    %edx,(%eax)
            goto out;
c0110002:	eb 19                	jmp    c011001d <sfs_dirent_search_nolock+0x101>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
        }
        if (entry->ino == 0) {
            set_pvalue(empty_slot, i);
            continue ;
c0110004:	90                   	nop
    }

#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
c0110005:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0110009:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011000c:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011000f:	7c 84                	jl     c010ff95 <sfs_dirent_search_nolock+0x79>
            set_pvalue(ino_store, entry->ino);
            goto out;
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
c0110011:	c7 45 f4 f0 ff ff ff 	movl   $0xfffffff0,-0xc(%ebp)
c0110018:	eb 04                	jmp    c011001e <sfs_dirent_search_nolock+0x102>
#define set_pvalue(x, v)            do { if ((x) != NULL) { *(x) = (v); } } while (0)
    int ret, i, nslots = sin->din->blocks;
    set_pvalue(empty_slot, nslots);
    for (i = 0; i < nslots; i ++) {
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
            goto out;
c011001a:	90                   	nop
c011001b:	eb 01                	jmp    c011001e <sfs_dirent_search_nolock+0x102>
            continue ;
        }
        if (strcmp(name, entry->name) == 0) {
            set_pvalue(slot, i);
            set_pvalue(ino_store, entry->ino);
            goto out;
c011001d:	90                   	nop
        }
    }
#undef set_pvalue
    ret = -E_NOENT;
out:
    kfree(entry);
c011001e:	83 ec 0c             	sub    $0xc,%esp
c0110021:	ff 75 ec             	pushl  -0x14(%ebp)
c0110024:	e8 33 6e ff ff       	call   c0106e5c <kfree>
c0110029:	83 c4 10             	add    $0x10,%esp
    return ret;
c011002c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011002f:	c9                   	leave  
c0110030:	c3                   	ret    

c0110031 <sfs_dirent_findino_nolock>:
/*
 * sfs_dirent_findino_nolock - read all file entries in DIR's inode and find a entry->ino == ino
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
c0110031:	55                   	push   %ebp
c0110032:	89 e5                	mov    %esp,%ebp
c0110034:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c0110037:	8b 45 0c             	mov    0xc(%ebp),%eax
c011003a:	8b 00                	mov    (%eax),%eax
c011003c:	8b 40 08             	mov    0x8(%eax),%eax
c011003f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c0110042:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0110049:	eb 37                	jmp    c0110082 <sfs_dirent_findino_nolock+0x51>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c011004b:	ff 75 14             	pushl  0x14(%ebp)
c011004e:	ff 75 f4             	pushl  -0xc(%ebp)
c0110051:	ff 75 0c             	pushl  0xc(%ebp)
c0110054:	ff 75 08             	pushl  0x8(%ebp)
c0110057:	e8 ef fd ff ff       	call   c010fe4b <sfs_dirent_read_nolock>
c011005c:	83 c4 10             	add    $0x10,%esp
c011005f:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110062:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110066:	74 05                	je     c011006d <sfs_dirent_findino_nolock+0x3c>
            return ret;
c0110068:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011006b:	eb 22                	jmp    c011008f <sfs_dirent_findino_nolock+0x5e>
        }
        if (entry->ino == ino) {
c011006d:	8b 45 14             	mov    0x14(%ebp),%eax
c0110070:	8b 00                	mov    (%eax),%eax
c0110072:	3b 45 10             	cmp    0x10(%ebp),%eax
c0110075:	75 07                	jne    c011007e <sfs_dirent_findino_nolock+0x4d>
            return 0;
c0110077:	b8 00 00 00 00       	mov    $0x0,%eax
c011007c:	eb 11                	jmp    c011008f <sfs_dirent_findino_nolock+0x5e>
 */

static int
sfs_dirent_findino_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, uint32_t ino, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c011007e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110082:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110085:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110088:	7c c1                	jl     c011004b <sfs_dirent_findino_nolock+0x1a>
        }
        if (entry->ino == ino) {
            return 0;
        }
    }
    return -E_NOENT;
c011008a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c011008f:	c9                   	leave  
c0110090:	c3                   	ret    

c0110091 <sfs_lookup_once>:
 * @name:       the file name in DIR
 * @node_store: the inode corresponding the file name in DIR
 * @slot:       the logical index of file entry
 */
static int
sfs_lookup_once(struct sfs_fs *sfs, struct sfs_inode *sin, const char *name, struct inode **node_store, int *slot) {
c0110091:	55                   	push   %ebp
c0110092:	89 e5                	mov    %esp,%ebp
c0110094:	83 ec 18             	sub    $0x18,%esp
    int ret;
    uint32_t ino;
    lock_sin(sin);
c0110097:	83 ec 0c             	sub    $0xc,%esp
c011009a:	ff 75 0c             	pushl  0xc(%ebp)
c011009d:	e8 75 f2 ff ff       	call   c010f317 <lock_sin>
c01100a2:	83 c4 10             	add    $0x10,%esp
    {   // find the NO. of disk block and logical index of file entry
        ret = sfs_dirent_search_nolock(sfs, sin, name, &ino, slot, NULL);
c01100a5:	83 ec 08             	sub    $0x8,%esp
c01100a8:	6a 00                	push   $0x0
c01100aa:	ff 75 18             	pushl  0x18(%ebp)
c01100ad:	8d 45 f0             	lea    -0x10(%ebp),%eax
c01100b0:	50                   	push   %eax
c01100b1:	ff 75 10             	pushl  0x10(%ebp)
c01100b4:	ff 75 0c             	pushl  0xc(%ebp)
c01100b7:	ff 75 08             	pushl  0x8(%ebp)
c01100ba:	e8 5d fe ff ff       	call   c010ff1c <sfs_dirent_search_nolock>
c01100bf:	83 c4 20             	add    $0x20,%esp
c01100c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sin(sin);
c01100c5:	83 ec 0c             	sub    $0xc,%esp
c01100c8:	ff 75 0c             	pushl  0xc(%ebp)
c01100cb:	e8 62 f2 ff ff       	call   c010f332 <unlock_sin>
c01100d0:	83 c4 10             	add    $0x10,%esp
    if (ret == 0) {
c01100d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01100d7:	75 18                	jne    c01100f1 <sfs_lookup_once+0x60>
		// load the content of inode with the the NO. of disk block
        ret = sfs_load_inode(sfs, node_store, ino);
c01100d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01100dc:	83 ec 04             	sub    $0x4,%esp
c01100df:	50                   	push   %eax
c01100e0:	ff 75 14             	pushl  0x14(%ebp)
c01100e3:	ff 75 08             	pushl  0x8(%ebp)
c01100e6:	e8 a3 f6 ff ff       	call   c010f78e <sfs_load_inode>
c01100eb:	83 c4 10             	add    $0x10,%esp
c01100ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    return ret;
c01100f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01100f4:	c9                   	leave  
c01100f5:	c3                   	ret    

c01100f6 <sfs_opendir>:

// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
c01100f6:	55                   	push   %ebp
c01100f7:	89 e5                	mov    %esp,%ebp
    switch (open_flags & O_ACCMODE) {
c01100f9:	8b 45 0c             	mov    0xc(%ebp),%eax
c01100fc:	83 e0 03             	and    $0x3,%eax
c01100ff:	85 c0                	test   %eax,%eax
c0110101:	74 07                	je     c011010a <sfs_opendir+0x14>
    case O_RDONLY:
        break;
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
c0110103:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c0110108:	eb 17                	jmp    c0110121 <sfs_opendir+0x2b>
// sfs_opendir - just check the opne_flags, now support readonly
static int
sfs_opendir(struct inode *node, uint32_t open_flags) {
    switch (open_flags & O_ACCMODE) {
    case O_RDONLY:
        break;
c011010a:	90                   	nop
    case O_WRONLY:
    case O_RDWR:
    default:
        return -E_ISDIR;
    }
    if (open_flags & O_APPEND) {
c011010b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011010e:	83 e0 20             	and    $0x20,%eax
c0110111:	85 c0                	test   %eax,%eax
c0110113:	74 07                	je     c011011c <sfs_opendir+0x26>
        return -E_ISDIR;
c0110115:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
c011011a:	eb 05                	jmp    c0110121 <sfs_opendir+0x2b>
    }
    return 0;
c011011c:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110121:	5d                   	pop    %ebp
c0110122:	c3                   	ret    

c0110123 <sfs_openfile>:

// sfs_openfile - open file (no use)
static int
sfs_openfile(struct inode *node, uint32_t open_flags) {
c0110123:	55                   	push   %ebp
c0110124:	89 e5                	mov    %esp,%ebp
    return 0;
c0110126:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011012b:	5d                   	pop    %ebp
c011012c:	c3                   	ret    

c011012d <sfs_close>:

// sfs_close - close file
static int
sfs_close(struct inode *node) {
c011012d:	55                   	push   %ebp
c011012e:	89 e5                	mov    %esp,%ebp
c0110130:	83 ec 18             	sub    $0x18,%esp
    return vop_fsync(node);
c0110133:	8b 45 08             	mov    0x8(%ebp),%eax
c0110136:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110139:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c011013d:	74 17                	je     c0110156 <sfs_close+0x29>
c011013f:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110142:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110145:	85 c0                	test   %eax,%eax
c0110147:	74 0d                	je     c0110156 <sfs_close+0x29>
c0110149:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011014c:	8b 40 3c             	mov    0x3c(%eax),%eax
c011014f:	8b 40 18             	mov    0x18(%eax),%eax
c0110152:	85 c0                	test   %eax,%eax
c0110154:	75 19                	jne    c011016f <sfs_close+0x42>
c0110156:	68 84 68 11 c0       	push   $0xc0116884
c011015b:	68 9f 66 11 c0       	push   $0xc011669f
c0110160:	68 1c 02 00 00       	push   $0x21c
c0110165:	68 37 66 11 c0       	push   $0xc0116637
c011016a:	e8 76 03 ff ff       	call   c01004e5 <__panic>
c011016f:	83 ec 08             	sub    $0x8,%esp
c0110172:	68 d2 68 11 c0       	push   $0xc01168d2
c0110177:	ff 75 f4             	pushl  -0xc(%ebp)
c011017a:	e8 e7 e1 ff ff       	call   c010e366 <inode_check>
c011017f:	83 c4 10             	add    $0x10,%esp
c0110182:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110185:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110188:	8b 40 18             	mov    0x18(%eax),%eax
c011018b:	83 ec 0c             	sub    $0xc,%esp
c011018e:	ff 75 08             	pushl  0x8(%ebp)
c0110191:	ff d0                	call   *%eax
c0110193:	83 c4 10             	add    $0x10,%esp
}
c0110196:	c9                   	leave  
c0110197:	c3                   	ret    

c0110198 <sfs_io_nolock>:
 * @offset:   the offset of file
 * @alenp:    the length need to read (is a pointer). and will RETURN the really Rd/Wr lenght
 * @write:    BOOL, 0 read, 1 write
 */
static int
sfs_io_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, void *buf, off_t offset, size_t *alenp, bool write) {
c0110198:	55                   	push   %ebp
c0110199:	89 e5                	mov    %esp,%ebp
c011019b:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_inode *din = sin->din;
c011019e:	8b 45 0c             	mov    0xc(%ebp),%eax
c01101a1:	8b 00                	mov    (%eax),%eax
c01101a3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(din->type != SFS_TYPE_DIR);
c01101a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01101a9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01101ad:	66 83 f8 02          	cmp    $0x2,%ax
c01101b1:	75 19                	jne    c01101cc <sfs_io_nolock+0x34>
c01101b3:	68 d8 68 11 c0       	push   $0xc01168d8
c01101b8:	68 9f 66 11 c0       	push   $0xc011669f
c01101bd:	68 2b 02 00 00       	push   $0x22b
c01101c2:	68 37 66 11 c0       	push   $0xc0116637
c01101c7:	e8 19 03 ff ff       	call   c01004e5 <__panic>
    off_t endpos = offset + *alenp, blkoff;
c01101cc:	8b 45 18             	mov    0x18(%ebp),%eax
c01101cf:	8b 10                	mov    (%eax),%edx
c01101d1:	8b 45 14             	mov    0x14(%ebp),%eax
c01101d4:	01 d0                	add    %edx,%eax
c01101d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *alenp = 0;
c01101d9:	8b 45 18             	mov    0x18(%ebp),%eax
c01101dc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// calculate the Rd/Wr end position
    if (offset < 0 || offset >= SFS_MAX_FILE_SIZE || offset > endpos) {
c01101e2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c01101e6:	78 12                	js     c01101fa <sfs_io_nolock+0x62>
c01101e8:	8b 45 14             	mov    0x14(%ebp),%eax
c01101eb:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c01101f0:	77 08                	ja     c01101fa <sfs_io_nolock+0x62>
c01101f2:	8b 45 14             	mov    0x14(%ebp),%eax
c01101f5:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c01101f8:	7e 0a                	jle    c0110204 <sfs_io_nolock+0x6c>
        return -E_INVAL;
c01101fa:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01101ff:	e9 e7 00 00 00       	jmp    c01102eb <sfs_io_nolock+0x153>
    }
    if (offset == endpos) {
c0110204:	8b 45 14             	mov    0x14(%ebp),%eax
c0110207:	3b 45 f4             	cmp    -0xc(%ebp),%eax
c011020a:	75 0a                	jne    c0110216 <sfs_io_nolock+0x7e>
        return 0;
c011020c:	b8 00 00 00 00       	mov    $0x0,%eax
c0110211:	e9 d5 00 00 00       	jmp    c01102eb <sfs_io_nolock+0x153>
    }
    if (endpos > SFS_MAX_FILE_SIZE) {
c0110216:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110219:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c011021e:	76 07                	jbe    c0110227 <sfs_io_nolock+0x8f>
        endpos = SFS_MAX_FILE_SIZE;
c0110220:	c7 45 f4 00 00 00 08 	movl   $0x8000000,-0xc(%ebp)
    }
    if (!write) {
c0110227:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011022b:	75 2a                	jne    c0110257 <sfs_io_nolock+0xbf>
        if (offset >= din->size) {
c011022d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110230:	8b 10                	mov    (%eax),%edx
c0110232:	8b 45 14             	mov    0x14(%ebp),%eax
c0110235:	39 c2                	cmp    %eax,%edx
c0110237:	77 0a                	ja     c0110243 <sfs_io_nolock+0xab>
            return 0;
c0110239:	b8 00 00 00 00       	mov    $0x0,%eax
c011023e:	e9 a8 00 00 00       	jmp    c01102eb <sfs_io_nolock+0x153>
        }
        if (endpos > din->size) {
c0110243:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110246:	8b 10                	mov    (%eax),%edx
c0110248:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011024b:	39 c2                	cmp    %eax,%edx
c011024d:	73 08                	jae    c0110257 <sfs_io_nolock+0xbf>
            endpos = din->size;
c011024f:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110252:	8b 00                	mov    (%eax),%eax
c0110254:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }

    int (*sfs_buf_op)(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset);
    int (*sfs_block_op)(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks);
    if (write) {
c0110257:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
c011025b:	74 10                	je     c011026d <sfs_io_nolock+0xd5>
        sfs_buf_op = sfs_wbuf, sfs_block_op = sfs_wblock;
c011025d:	c7 45 ec b4 1e 11 c0 	movl   $0xc0111eb4,-0x14(%ebp)
c0110264:	c7 45 e8 f6 1d 11 c0 	movl   $0xc0111df6,-0x18(%ebp)
c011026b:	eb 0e                	jmp    c011027b <sfs_io_nolock+0xe3>
    }
    else {
        sfs_buf_op = sfs_rbuf, sfs_block_op = sfs_rblock;
c011026d:	c7 45 ec 17 1e 11 c0 	movl   $0xc0111e17,-0x14(%ebp)
c0110274:	c7 45 e8 d5 1d 11 c0 	movl   $0xc0111dd5,-0x18(%ebp)
    }

    int ret = 0;
c011027b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
    size_t size, alen = 0;
c0110282:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
    uint32_t ino;
    uint32_t blkno = offset / SFS_BLKSIZE;          // The NO. of Rd/Wr begin block
c0110289:	8b 45 14             	mov    0x14(%ebp),%eax
c011028c:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c0110292:	85 c0                	test   %eax,%eax
c0110294:	0f 48 c2             	cmovs  %edx,%eax
c0110297:	c1 f8 0c             	sar    $0xc,%eax
c011029a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    uint32_t nblks = endpos / SFS_BLKSIZE - blkno;  // The size of Rd/Wr blocks
c011029d:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01102a0:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
c01102a6:	85 c0                	test   %eax,%eax
c01102a8:	0f 48 c2             	cmovs  %edx,%eax
c01102ab:	c1 f8 0c             	sar    $0xc,%eax
c01102ae:	2b 45 dc             	sub    -0x24(%ebp),%eax
c01102b1:	89 45 d8             	mov    %eax,-0x28(%ebp)
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_block_op
     * (3) If end position isn't aligned with the last block, Rd/Wr some content from begin to the (endpos % SFS_BLKSIZE) of the last block
	 *       NOTICE: useful function: sfs_bmap_load_nolock, sfs_buf_op	
	*/
out:
    *alenp = alen;
c01102b4:	8b 45 18             	mov    0x18(%ebp),%eax
c01102b7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01102ba:	89 10                	mov    %edx,(%eax)
    if (offset + alen > sin->din->size) {
c01102bc:	8b 55 14             	mov    0x14(%ebp),%edx
c01102bf:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01102c2:	01 c2                	add    %eax,%edx
c01102c4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102c7:	8b 00                	mov    (%eax),%eax
c01102c9:	8b 00                	mov    (%eax),%eax
c01102cb:	39 c2                	cmp    %eax,%edx
c01102cd:	76 19                	jbe    c01102e8 <sfs_io_nolock+0x150>
        sin->din->size = offset + alen;
c01102cf:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102d2:	8b 00                	mov    (%eax),%eax
c01102d4:	8b 4d 14             	mov    0x14(%ebp),%ecx
c01102d7:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01102da:	01 ca                	add    %ecx,%edx
c01102dc:	89 10                	mov    %edx,(%eax)
        sin->dirty = 1;
c01102de:	8b 45 0c             	mov    0xc(%ebp),%eax
c01102e1:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
    }
    return ret;
c01102e8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c01102eb:	c9                   	leave  
c01102ec:	c3                   	ret    

c01102ed <sfs_io>:
/*
 * sfs_io - Rd/Wr file. the wrapper of sfs_io_nolock
            with lock protect
 */
static inline int
sfs_io(struct inode *node, struct iobuf *iob, bool write) {
c01102ed:	55                   	push   %ebp
c01102ee:	89 e5                	mov    %esp,%ebp
c01102f0:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01102f3:	8b 45 08             	mov    0x8(%ebp),%eax
c01102f6:	8b 40 38             	mov    0x38(%eax),%eax
c01102f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01102fc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110300:	74 0a                	je     c011030c <sfs_io+0x1f>
c0110302:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110305:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110308:	85 c0                	test   %eax,%eax
c011030a:	74 19                	je     c0110325 <sfs_io+0x38>
c011030c:	68 f4 68 11 c0       	push   $0xc01168f4
c0110311:	68 9f 66 11 c0       	push   $0xc011669f
c0110316:	68 69 02 00 00       	push   $0x269
c011031b:	68 37 66 11 c0       	push   $0xc0116637
c0110320:	e8 c0 01 ff ff       	call   c01004e5 <__panic>
c0110325:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110328:	89 45 f0             	mov    %eax,-0x10(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c011032b:	8b 45 08             	mov    0x8(%ebp),%eax
c011032e:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110331:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110335:	74 0d                	je     c0110344 <sfs_io+0x57>
c0110337:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011033a:	8b 40 2c             	mov    0x2c(%eax),%eax
c011033d:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110342:	74 19                	je     c011035d <sfs_io+0x70>
c0110344:	68 f0 66 11 c0       	push   $0xc01166f0
c0110349:	68 9f 66 11 c0       	push   $0xc011669f
c011034e:	68 6a 02 00 00       	push   $0x26a
c0110353:	68 37 66 11 c0       	push   $0xc0116637
c0110358:	e8 88 01 ff ff       	call   c01004e5 <__panic>
c011035d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110360:	89 45 e8             	mov    %eax,-0x18(%ebp)
    int ret;
    lock_sin(sin);
c0110363:	83 ec 0c             	sub    $0xc,%esp
c0110366:	ff 75 e8             	pushl  -0x18(%ebp)
c0110369:	e8 a9 ef ff ff       	call   c010f317 <lock_sin>
c011036e:	83 c4 10             	add    $0x10,%esp
    {
        size_t alen = iob->io_resid;
c0110371:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110374:	8b 40 0c             	mov    0xc(%eax),%eax
c0110377:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ret = sfs_io_nolock(sfs, sin, iob->io_base, iob->io_offset, &alen, write);
c011037a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011037d:	8b 50 04             	mov    0x4(%eax),%edx
c0110380:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110383:	8b 00                	mov    (%eax),%eax
c0110385:	83 ec 08             	sub    $0x8,%esp
c0110388:	ff 75 10             	pushl  0x10(%ebp)
c011038b:	8d 4d e0             	lea    -0x20(%ebp),%ecx
c011038e:	51                   	push   %ecx
c011038f:	52                   	push   %edx
c0110390:	50                   	push   %eax
c0110391:	ff 75 e8             	pushl  -0x18(%ebp)
c0110394:	ff 75 f0             	pushl  -0x10(%ebp)
c0110397:	e8 fc fd ff ff       	call   c0110198 <sfs_io_nolock>
c011039c:	83 c4 20             	add    $0x20,%esp
c011039f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (alen != 0) {
c01103a2:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01103a5:	85 c0                	test   %eax,%eax
c01103a7:	74 12                	je     c01103bb <sfs_io+0xce>
            iobuf_skip(iob, alen);
c01103a9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01103ac:	83 ec 08             	sub    $0x8,%esp
c01103af:	50                   	push   %eax
c01103b0:	ff 75 0c             	pushl  0xc(%ebp)
c01103b3:	e8 d3 a3 ff ff       	call   c010a78b <iobuf_skip>
c01103b8:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sin(sin);
c01103bb:	83 ec 0c             	sub    $0xc,%esp
c01103be:	ff 75 e8             	pushl  -0x18(%ebp)
c01103c1:	e8 6c ef ff ff       	call   c010f332 <unlock_sin>
c01103c6:	83 c4 10             	add    $0x10,%esp
    return ret;
c01103c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
c01103cc:	c9                   	leave  
c01103cd:	c3                   	ret    

c01103ce <sfs_read>:

// sfs_read - read file
static int
sfs_read(struct inode *node, struct iobuf *iob) {
c01103ce:	55                   	push   %ebp
c01103cf:	89 e5                	mov    %esp,%ebp
c01103d1:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 0);
c01103d4:	83 ec 04             	sub    $0x4,%esp
c01103d7:	6a 00                	push   $0x0
c01103d9:	ff 75 0c             	pushl  0xc(%ebp)
c01103dc:	ff 75 08             	pushl  0x8(%ebp)
c01103df:	e8 09 ff ff ff       	call   c01102ed <sfs_io>
c01103e4:	83 c4 10             	add    $0x10,%esp
}
c01103e7:	c9                   	leave  
c01103e8:	c3                   	ret    

c01103e9 <sfs_write>:

// sfs_write - write file
static int
sfs_write(struct inode *node, struct iobuf *iob) {
c01103e9:	55                   	push   %ebp
c01103ea:	89 e5                	mov    %esp,%ebp
c01103ec:	83 ec 08             	sub    $0x8,%esp
    return sfs_io(node, iob, 1);
c01103ef:	83 ec 04             	sub    $0x4,%esp
c01103f2:	6a 01                	push   $0x1
c01103f4:	ff 75 0c             	pushl  0xc(%ebp)
c01103f7:	ff 75 08             	pushl  0x8(%ebp)
c01103fa:	e8 ee fe ff ff       	call   c01102ed <sfs_io>
c01103ff:	83 c4 10             	add    $0x10,%esp
}
c0110402:	c9                   	leave  
c0110403:	c3                   	ret    

c0110404 <sfs_fstat>:

/*
 * sfs_fstat - Return nlinks/block/size, etc. info about a file. The pointer is a pointer to struct stat;
 */
static int
sfs_fstat(struct inode *node, struct stat *stat) {
c0110404:	55                   	push   %ebp
c0110405:	89 e5                	mov    %esp,%ebp
c0110407:	83 ec 18             	sub    $0x18,%esp
    int ret;
    memset(stat, 0, sizeof(struct stat));
c011040a:	83 ec 04             	sub    $0x4,%esp
c011040d:	6a 10                	push   $0x10
c011040f:	6a 00                	push   $0x0
c0110411:	ff 75 0c             	pushl  0xc(%ebp)
c0110414:	e8 ec 1f 00 00       	call   c0112405 <memset>
c0110419:	83 c4 10             	add    $0x10,%esp
    if ((ret = vop_gettype(node, &(stat->st_mode))) != 0) {
c011041c:	8b 45 08             	mov    0x8(%ebp),%eax
c011041f:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110422:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110426:	74 17                	je     c011043f <sfs_fstat+0x3b>
c0110428:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011042b:	8b 40 3c             	mov    0x3c(%eax),%eax
c011042e:	85 c0                	test   %eax,%eax
c0110430:	74 0d                	je     c011043f <sfs_fstat+0x3b>
c0110432:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110435:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110438:	8b 40 28             	mov    0x28(%eax),%eax
c011043b:	85 c0                	test   %eax,%eax
c011043d:	75 19                	jne    c0110458 <sfs_fstat+0x54>
c011043f:	68 20 69 11 c0       	push   $0xc0116920
c0110444:	68 9f 66 11 c0       	push   $0xc011669f
c0110449:	68 8b 02 00 00       	push   $0x28b
c011044e:	68 37 66 11 c0       	push   $0xc0116637
c0110453:	e8 8d 00 ff ff       	call   c01004e5 <__panic>
c0110458:	83 ec 08             	sub    $0x8,%esp
c011045b:	68 70 69 11 c0       	push   $0xc0116970
c0110460:	ff 75 f4             	pushl  -0xc(%ebp)
c0110463:	e8 fe de ff ff       	call   c010e366 <inode_check>
c0110468:	83 c4 10             	add    $0x10,%esp
c011046b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011046e:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110471:	8b 40 28             	mov    0x28(%eax),%eax
c0110474:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110477:	83 ec 08             	sub    $0x8,%esp
c011047a:	52                   	push   %edx
c011047b:	ff 75 08             	pushl  0x8(%ebp)
c011047e:	ff d0                	call   *%eax
c0110480:	83 c4 10             	add    $0x10,%esp
c0110483:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011048a:	74 05                	je     c0110491 <sfs_fstat+0x8d>
        return ret;
c011048c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011048f:	eb 66                	jmp    c01104f7 <sfs_fstat+0xf3>
    }
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0110491:	8b 45 08             	mov    0x8(%ebp),%eax
c0110494:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110497:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c011049b:	74 0d                	je     c01104aa <sfs_fstat+0xa6>
c011049d:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104a0:	8b 40 2c             	mov    0x2c(%eax),%eax
c01104a3:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01104a8:	74 19                	je     c01104c3 <sfs_fstat+0xbf>
c01104aa:	68 f0 66 11 c0       	push   $0xc01166f0
c01104af:	68 9f 66 11 c0       	push   $0xc011669f
c01104b4:	68 8e 02 00 00       	push   $0x28e
c01104b9:	68 37 66 11 c0       	push   $0xc0116637
c01104be:	e8 22 00 ff ff       	call   c01004e5 <__panic>
c01104c3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01104c6:	8b 00                	mov    (%eax),%eax
c01104c8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    stat->st_nlinks = din->nlinks;
c01104cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104ce:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c01104d2:	0f b7 d0             	movzwl %ax,%edx
c01104d5:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104d8:	89 50 04             	mov    %edx,0x4(%eax)
    stat->st_blocks = din->blocks;
c01104db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104de:	8b 50 08             	mov    0x8(%eax),%edx
c01104e1:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104e4:	89 50 08             	mov    %edx,0x8(%eax)
    stat->st_size = din->size;
c01104e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01104ea:	8b 10                	mov    (%eax),%edx
c01104ec:	8b 45 0c             	mov    0xc(%ebp),%eax
c01104ef:	89 50 0c             	mov    %edx,0xc(%eax)
    return 0;
c01104f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01104f7:	c9                   	leave  
c01104f8:	c3                   	ret    

c01104f9 <sfs_fsync>:

/*
 * sfs_fsync - Force any dirty inode info associated with this file to stable storage.
 */
static int
sfs_fsync(struct inode *node) {
c01104f9:	55                   	push   %ebp
c01104fa:	89 e5                	mov    %esp,%ebp
c01104fc:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c01104ff:	8b 45 08             	mov    0x8(%ebp),%eax
c0110502:	8b 40 38             	mov    0x38(%eax),%eax
c0110505:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110508:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011050c:	74 0a                	je     c0110518 <sfs_fsync+0x1f>
c011050e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110511:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110514:	85 c0                	test   %eax,%eax
c0110516:	74 19                	je     c0110531 <sfs_fsync+0x38>
c0110518:	68 f4 68 11 c0       	push   $0xc01168f4
c011051d:	68 9f 66 11 c0       	push   $0xc011669f
c0110522:	68 9a 02 00 00       	push   $0x29a
c0110527:	68 37 66 11 c0       	push   $0xc0116637
c011052c:	e8 b4 ff fe ff       	call   c01004e5 <__panic>
c0110531:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110534:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110537:	8b 45 08             	mov    0x8(%ebp),%eax
c011053a:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011053d:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110541:	74 0d                	je     c0110550 <sfs_fsync+0x57>
c0110543:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110546:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110549:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011054e:	74 19                	je     c0110569 <sfs_fsync+0x70>
c0110550:	68 f0 66 11 c0       	push   $0xc01166f0
c0110555:	68 9f 66 11 c0       	push   $0xc011669f
c011055a:	68 9b 02 00 00       	push   $0x29b
c011055f:	68 37 66 11 c0       	push   $0xc0116637
c0110564:	e8 7c ff fe ff       	call   c01004e5 <__panic>
c0110569:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011056c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int ret = 0;
c011056f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (sin->dirty) {
c0110576:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110579:	8b 40 08             	mov    0x8(%eax),%eax
c011057c:	85 c0                	test   %eax,%eax
c011057e:	74 62                	je     c01105e2 <sfs_fsync+0xe9>
        lock_sin(sin);
c0110580:	83 ec 0c             	sub    $0xc,%esp
c0110583:	ff 75 e4             	pushl  -0x1c(%ebp)
c0110586:	e8 8c ed ff ff       	call   c010f317 <lock_sin>
c011058b:	83 c4 10             	add    $0x10,%esp
        {
            if (sin->dirty) {
c011058e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110591:	8b 40 08             	mov    0x8(%eax),%eax
c0110594:	85 c0                	test   %eax,%eax
c0110596:	74 3c                	je     c01105d4 <sfs_fsync+0xdb>
                sin->dirty = 0;
c0110598:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011059b:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
                if ((ret = sfs_wbuf(sfs, sin->din, sizeof(struct sfs_disk_inode), sin->ino, 0)) != 0) {
c01105a2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01105a5:	8b 50 04             	mov    0x4(%eax),%edx
c01105a8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01105ab:	8b 00                	mov    (%eax),%eax
c01105ad:	83 ec 0c             	sub    $0xc,%esp
c01105b0:	6a 00                	push   $0x0
c01105b2:	52                   	push   %edx
c01105b3:	6a 40                	push   $0x40
c01105b5:	50                   	push   %eax
c01105b6:	ff 75 ec             	pushl  -0x14(%ebp)
c01105b9:	e8 f6 18 00 00       	call   c0111eb4 <sfs_wbuf>
c01105be:	83 c4 20             	add    $0x20,%esp
c01105c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01105c4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01105c8:	74 0a                	je     c01105d4 <sfs_fsync+0xdb>
                    sin->dirty = 1;
c01105ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01105cd:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
                }
            }
        }
        unlock_sin(sin);
c01105d4:	83 ec 0c             	sub    $0xc,%esp
c01105d7:	ff 75 e4             	pushl  -0x1c(%ebp)
c01105da:	e8 53 ed ff ff       	call   c010f332 <unlock_sin>
c01105df:	83 c4 10             	add    $0x10,%esp
    }
    return ret;
c01105e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01105e5:	c9                   	leave  
c01105e6:	c3                   	ret    

c01105e7 <sfs_namefile>:
/*
 *sfs_namefile -Compute pathname relative to filesystem root of the file and copy to the specified io buffer.
 *  
 */
static int
sfs_namefile(struct inode *node, struct iobuf *iob) {
c01105e7:	55                   	push   %ebp
c01105e8:	89 e5                	mov    %esp,%ebp
c01105ea:	83 ec 38             	sub    $0x38,%esp
    struct sfs_disk_entry *entry;
    if (iob->io_resid <= 2 || (entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c01105ed:	8b 45 0c             	mov    0xc(%ebp),%eax
c01105f0:	8b 40 0c             	mov    0xc(%eax),%eax
c01105f3:	83 f8 02             	cmp    $0x2,%eax
c01105f6:	76 19                	jbe    c0110611 <sfs_namefile+0x2a>
c01105f8:	83 ec 0c             	sub    $0xc,%esp
c01105fb:	68 04 01 00 00       	push   $0x104
c0110600:	e8 3f 68 ff ff       	call   c0106e44 <kmalloc>
c0110605:	83 c4 10             	add    $0x10,%esp
c0110608:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011060b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011060f:	75 0a                	jne    c011061b <sfs_namefile+0x34>
        return -E_NO_MEM;
c0110611:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0110616:	e9 8d 02 00 00       	jmp    c01108a8 <sfs_namefile+0x2c1>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011061b:	8b 45 08             	mov    0x8(%ebp),%eax
c011061e:	8b 40 38             	mov    0x38(%eax),%eax
c0110621:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0110624:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0110628:	74 0a                	je     c0110634 <sfs_namefile+0x4d>
c011062a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011062d:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110630:	85 c0                	test   %eax,%eax
c0110632:	74 19                	je     c011064d <sfs_namefile+0x66>
c0110634:	68 f4 68 11 c0       	push   $0xc01168f4
c0110639:	68 9f 66 11 c0       	push   $0xc011669f
c011063e:	68 b7 02 00 00       	push   $0x2b7
c0110643:	68 37 66 11 c0       	push   $0xc0116637
c0110648:	e8 98 fe fe ff       	call   c01004e5 <__panic>
c011064d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110650:	89 45 dc             	mov    %eax,-0x24(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110653:	8b 45 08             	mov    0x8(%ebp),%eax
c0110656:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0110659:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c011065d:	74 0d                	je     c011066c <sfs_namefile+0x85>
c011065f:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110662:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110665:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011066a:	74 19                	je     c0110685 <sfs_namefile+0x9e>
c011066c:	68 f0 66 11 c0       	push   $0xc01166f0
c0110671:	68 9f 66 11 c0       	push   $0xc011669f
c0110676:	68 b8 02 00 00       	push   $0x2b8
c011067b:	68 37 66 11 c0       	push   $0xc0116637
c0110680:	e8 60 fe fe ff       	call   c01004e5 <__panic>
c0110685:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110688:	89 45 f4             	mov    %eax,-0xc(%ebp)

    int ret;
    char *ptr = iob->io_base + iob->io_resid;
c011068b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011068e:	8b 10                	mov    (%eax),%edx
c0110690:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110693:	8b 40 0c             	mov    0xc(%eax),%eax
c0110696:	01 d0                	add    %edx,%eax
c0110698:	89 45 ec             	mov    %eax,-0x14(%ebp)
    size_t alen, resid = iob->io_resid - 2;
c011069b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011069e:	8b 40 0c             	mov    0xc(%eax),%eax
c01106a1:	83 e8 02             	sub    $0x2,%eax
c01106a4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    vop_ref_inc(node);
c01106a7:	83 ec 0c             	sub    $0xc,%esp
c01106aa:	ff 75 08             	pushl  0x8(%ebp)
c01106ad:	e8 e2 da ff ff       	call   c010e194 <inode_ref_inc>
c01106b2:	83 c4 10             	add    $0x10,%esp
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
c01106b5:	83 ec 0c             	sub    $0xc,%esp
c01106b8:	6a 00                	push   $0x0
c01106ba:	8d 45 c8             	lea    -0x38(%ebp),%eax
c01106bd:	50                   	push   %eax
c01106be:	68 78 69 11 c0       	push   $0xc0116978
c01106c3:	ff 75 f4             	pushl  -0xc(%ebp)
c01106c6:	ff 75 dc             	pushl  -0x24(%ebp)
c01106c9:	e8 c3 f9 ff ff       	call   c0110091 <sfs_lookup_once>
c01106ce:	83 c4 20             	add    $0x20,%esp
c01106d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01106d4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01106d8:	0f 85 a7 01 00 00    	jne    c0110885 <sfs_namefile+0x29e>
            goto failed;
        }

        uint32_t ino = sin->ino;
c01106de:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01106e1:	8b 40 04             	mov    0x4(%eax),%eax
c01106e4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        vop_ref_dec(node);
c01106e7:	83 ec 0c             	sub    $0xc,%esp
c01106ea:	ff 75 08             	pushl  0x8(%ebp)
c01106ed:	e8 bc da ff ff       	call   c010e1ae <inode_ref_dec>
c01106f2:	83 c4 10             	add    $0x10,%esp
        if (node == parent) {
c01106f5:	8b 45 c8             	mov    -0x38(%ebp),%eax
c01106f8:	39 45 08             	cmp    %eax,0x8(%ebp)
c01106fb:	75 77                	jne    c0110774 <sfs_namefile+0x18d>
            vop_ref_dec(node);
c01106fd:	83 ec 0c             	sub    $0xc,%esp
c0110700:	ff 75 08             	pushl  0x8(%ebp)
c0110703:	e8 a6 da ff ff       	call   c010e1ae <inode_ref_dec>
c0110708:	83 c4 10             	add    $0x10,%esp
        }
        resid -= alen, ptr -= alen;
        memcpy(ptr, entry->name, alen - 1);
        ptr[alen - 1] = '/';
    }
    alen = iob->io_resid - resid - 2;
c011070b:	8b 45 0c             	mov    0xc(%ebp),%eax
c011070e:	8b 40 0c             	mov    0xc(%eax),%eax
c0110711:	2b 45 e8             	sub    -0x18(%ebp),%eax
c0110714:	83 e8 02             	sub    $0x2,%eax
c0110717:	89 45 cc             	mov    %eax,-0x34(%ebp)
    ptr = memmove(iob->io_base + 1, ptr, alen);
c011071a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011071d:	8b 00                	mov    (%eax),%eax
c011071f:	83 c0 01             	add    $0x1,%eax
c0110722:	83 ec 04             	sub    $0x4,%esp
c0110725:	ff 75 cc             	pushl  -0x34(%ebp)
c0110728:	ff 75 ec             	pushl  -0x14(%ebp)
c011072b:	50                   	push   %eax
c011072c:	e8 14 1d 00 00       	call   c0112445 <memmove>
c0110731:	83 c4 10             	add    $0x10,%esp
c0110734:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ptr[-1] = '/', ptr[alen] = '\0';
c0110737:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011073a:	83 e8 01             	sub    $0x1,%eax
c011073d:	c6 00 2f             	movb   $0x2f,(%eax)
c0110740:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0110743:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110746:	01 d0                	add    %edx,%eax
c0110748:	c6 00 00             	movb   $0x0,(%eax)
    iobuf_skip(iob, alen);
c011074b:	83 ec 08             	sub    $0x8,%esp
c011074e:	ff 75 cc             	pushl  -0x34(%ebp)
c0110751:	ff 75 0c             	pushl  0xc(%ebp)
c0110754:	e8 32 a0 ff ff       	call   c010a78b <iobuf_skip>
c0110759:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c011075c:	83 ec 0c             	sub    $0xc,%esp
c011075f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0110762:	e8 f5 66 ff ff       	call   c0106e5c <kfree>
c0110767:	83 c4 10             	add    $0x10,%esp
    return 0;
c011076a:	b8 00 00 00 00       	mov    $0x0,%eax
c011076f:	e9 34 01 00 00       	jmp    c01108a8 <sfs_namefile+0x2c1>
        if (node == parent) {
            vop_ref_dec(node);
            break;
        }

        node = parent, sin = vop_info(node, sfs_inode);
c0110774:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0110777:	89 45 08             	mov    %eax,0x8(%ebp)
c011077a:	8b 45 08             	mov    0x8(%ebp),%eax
c011077d:	89 45 d0             	mov    %eax,-0x30(%ebp)
c0110780:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
c0110784:	74 0d                	je     c0110793 <sfs_namefile+0x1ac>
c0110786:	8b 45 d0             	mov    -0x30(%ebp),%eax
c0110789:	8b 40 2c             	mov    0x2c(%eax),%eax
c011078c:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110791:	74 19                	je     c01107ac <sfs_namefile+0x1c5>
c0110793:	68 f0 66 11 c0       	push   $0xc01166f0
c0110798:	68 9f 66 11 c0       	push   $0xc011669f
c011079d:	68 cb 02 00 00       	push   $0x2cb
c01107a2:	68 37 66 11 c0       	push   $0xc0116637
c01107a7:	e8 39 fd fe ff       	call   c01004e5 <__panic>
c01107ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01107af:	89 45 f4             	mov    %eax,-0xc(%ebp)
        assert(ino != sin->ino && sin->din->type == SFS_TYPE_DIR);
c01107b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107b5:	8b 40 04             	mov    0x4(%eax),%eax
c01107b8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c01107bb:	74 0f                	je     c01107cc <sfs_namefile+0x1e5>
c01107bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01107c0:	8b 00                	mov    (%eax),%eax
c01107c2:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01107c6:	66 83 f8 02          	cmp    $0x2,%ax
c01107ca:	74 19                	je     c01107e5 <sfs_namefile+0x1fe>
c01107cc:	68 7c 69 11 c0       	push   $0xc011697c
c01107d1:	68 9f 66 11 c0       	push   $0xc011669f
c01107d6:	68 cc 02 00 00       	push   $0x2cc
c01107db:	68 37 66 11 c0       	push   $0xc0116637
c01107e0:	e8 00 fd fe ff       	call   c01004e5 <__panic>

        lock_sin(sin);
c01107e5:	83 ec 0c             	sub    $0xc,%esp
c01107e8:	ff 75 f4             	pushl  -0xc(%ebp)
c01107eb:	e8 27 eb ff ff       	call   c010f317 <lock_sin>
c01107f0:	83 c4 10             	add    $0x10,%esp
        {
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
c01107f3:	ff 75 e4             	pushl  -0x1c(%ebp)
c01107f6:	ff 75 d4             	pushl  -0x2c(%ebp)
c01107f9:	ff 75 f4             	pushl  -0xc(%ebp)
c01107fc:	ff 75 dc             	pushl  -0x24(%ebp)
c01107ff:	e8 2d f8 ff ff       	call   c0110031 <sfs_dirent_findino_nolock>
c0110804:	83 c4 10             	add    $0x10,%esp
c0110807:	89 45 f0             	mov    %eax,-0x10(%ebp)
        }
        unlock_sin(sin);
c011080a:	83 ec 0c             	sub    $0xc,%esp
c011080d:	ff 75 f4             	pushl  -0xc(%ebp)
c0110810:	e8 1d eb ff ff       	call   c010f332 <unlock_sin>
c0110815:	83 c4 10             	add    $0x10,%esp

        if (ret != 0) {
c0110818:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011081c:	75 6a                	jne    c0110888 <sfs_namefile+0x2a1>
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
c011081e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110821:	83 c0 04             	add    $0x4,%eax
c0110824:	83 ec 0c             	sub    $0xc,%esp
c0110827:	50                   	push   %eax
c0110828:	e8 7e 18 00 00       	call   c01120ab <strlen>
c011082d:	83 c4 10             	add    $0x10,%esp
c0110830:	83 c0 01             	add    $0x1,%eax
c0110833:	89 45 cc             	mov    %eax,-0x34(%ebp)
c0110836:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110839:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c011083c:	77 3d                	ja     c011087b <sfs_namefile+0x294>
            goto failed_nomem;
        }
        resid -= alen, ptr -= alen;
c011083e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110841:	29 45 e8             	sub    %eax,-0x18(%ebp)
c0110844:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0110847:	f7 d8                	neg    %eax
c0110849:	01 45 ec             	add    %eax,-0x14(%ebp)
        memcpy(ptr, entry->name, alen - 1);
c011084c:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011084f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0110852:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110855:	83 c0 04             	add    $0x4,%eax
c0110858:	83 ec 04             	sub    $0x4,%esp
c011085b:	52                   	push   %edx
c011085c:	50                   	push   %eax
c011085d:	ff 75 ec             	pushl  -0x14(%ebp)
c0110860:	e8 83 1c 00 00       	call   c01124e8 <memcpy>
c0110865:	83 c4 10             	add    $0x10,%esp
        ptr[alen - 1] = '/';
c0110868:	8b 45 cc             	mov    -0x34(%ebp),%eax
c011086b:	8d 50 ff             	lea    -0x1(%eax),%edx
c011086e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110871:	01 d0                	add    %edx,%eax
c0110873:	c6 00 2f             	movb   $0x2f,(%eax)
    }
c0110876:	e9 3a fe ff ff       	jmp    c01106b5 <sfs_namefile+0xce>
        if (ret != 0) {
            goto failed;
        }

        if ((alen = strlen(entry->name) + 1) > resid) {
            goto failed_nomem;
c011087b:	90                   	nop
    iobuf_skip(iob, alen);
    kfree(entry);
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
c011087c:	c7 45 f0 fc ff ff ff 	movl   $0xfffffffc,-0x10(%ebp)
c0110883:	eb 04                	jmp    c0110889 <sfs_namefile+0x2a2>
    size_t alen, resid = iob->io_resid - 2;
    vop_ref_inc(node);
    while (1) {
        struct inode *parent;
        if ((ret = sfs_lookup_once(sfs, sin, "..", &parent, NULL)) != 0) {
            goto failed;
c0110885:	90                   	nop
c0110886:	eb 01                	jmp    c0110889 <sfs_namefile+0x2a2>
            ret = sfs_dirent_findino_nolock(sfs, sin, ino, entry);
        }
        unlock_sin(sin);

        if (ret != 0) {
            goto failed;
c0110888:	90                   	nop
    return 0;

failed_nomem:
    ret = -E_NO_MEM;
failed:
    vop_ref_dec(node);
c0110889:	83 ec 0c             	sub    $0xc,%esp
c011088c:	ff 75 08             	pushl  0x8(%ebp)
c011088f:	e8 1a d9 ff ff       	call   c010e1ae <inode_ref_dec>
c0110894:	83 c4 10             	add    $0x10,%esp
    kfree(entry);
c0110897:	83 ec 0c             	sub    $0xc,%esp
c011089a:	ff 75 e4             	pushl  -0x1c(%ebp)
c011089d:	e8 ba 65 ff ff       	call   c0106e5c <kfree>
c01108a2:	83 c4 10             	add    $0x10,%esp
    return ret;
c01108a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c01108a8:	c9                   	leave  
c01108a9:	c3                   	ret    

c01108aa <sfs_getdirentry_sub_nolock>:

/*
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
c01108aa:	55                   	push   %ebp
c01108ab:	89 e5                	mov    %esp,%ebp
c01108ad:	83 ec 18             	sub    $0x18,%esp
    int ret, i, nslots = sin->din->blocks;
c01108b0:	8b 45 0c             	mov    0xc(%ebp),%eax
c01108b3:	8b 00                	mov    (%eax),%eax
c01108b5:	8b 40 08             	mov    0x8(%eax),%eax
c01108b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (i = 0; i < nslots; i ++) {
c01108bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c01108c2:	eb 40                	jmp    c0110904 <sfs_getdirentry_sub_nolock+0x5a>
        if ((ret = sfs_dirent_read_nolock(sfs, sin, i, entry)) != 0) {
c01108c4:	ff 75 14             	pushl  0x14(%ebp)
c01108c7:	ff 75 f4             	pushl  -0xc(%ebp)
c01108ca:	ff 75 0c             	pushl  0xc(%ebp)
c01108cd:	ff 75 08             	pushl  0x8(%ebp)
c01108d0:	e8 76 f5 ff ff       	call   c010fe4b <sfs_dirent_read_nolock>
c01108d5:	83 c4 10             	add    $0x10,%esp
c01108d8:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01108db:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01108df:	74 05                	je     c01108e6 <sfs_getdirentry_sub_nolock+0x3c>
            return ret;
c01108e1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01108e4:	eb 2b                	jmp    c0110911 <sfs_getdirentry_sub_nolock+0x67>
        }
        if (entry->ino != 0) {
c01108e6:	8b 45 14             	mov    0x14(%ebp),%eax
c01108e9:	8b 00                	mov    (%eax),%eax
c01108eb:	85 c0                	test   %eax,%eax
c01108ed:	74 11                	je     c0110900 <sfs_getdirentry_sub_nolock+0x56>
            if (slot == 0) {
c01108ef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01108f3:	75 07                	jne    c01108fc <sfs_getdirentry_sub_nolock+0x52>
                return 0;
c01108f5:	b8 00 00 00 00       	mov    $0x0,%eax
c01108fa:	eb 15                	jmp    c0110911 <sfs_getdirentry_sub_nolock+0x67>
            }
            slot --;
c01108fc:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * sfs_getdirentry_sub_noblock - get the content of file entry in DIR
 */
static int
sfs_getdirentry_sub_nolock(struct sfs_fs *sfs, struct sfs_inode *sin, int slot, struct sfs_disk_entry *entry) {
    int ret, i, nslots = sin->din->blocks;
    for (i = 0; i < nslots; i ++) {
c0110900:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0110904:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110907:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c011090a:	7c b8                	jl     c01108c4 <sfs_getdirentry_sub_nolock+0x1a>
                return 0;
            }
            slot --;
        }
    }
    return -E_NOENT;
c011090c:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
c0110911:	c9                   	leave  
c0110912:	c3                   	ret    

c0110913 <sfs_getdirentry>:
/*
 * sfs_getdirentry - according to the iob->io_offset, calculate the dir entry's slot in disk block,
                     get dir entry content from the disk 
 */
static int
sfs_getdirentry(struct inode *node, struct iobuf *iob) {
c0110913:	55                   	push   %ebp
c0110914:	89 e5                	mov    %esp,%ebp
c0110916:	83 ec 28             	sub    $0x28,%esp
    struct sfs_disk_entry *entry;
    if ((entry = kmalloc(sizeof(struct sfs_disk_entry))) == NULL) {
c0110919:	83 ec 0c             	sub    $0xc,%esp
c011091c:	68 04 01 00 00       	push   $0x104
c0110921:	e8 1e 65 ff ff       	call   c0106e44 <kmalloc>
c0110926:	83 c4 10             	add    $0x10,%esp
c0110929:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011092c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110930:	75 0a                	jne    c011093c <sfs_getdirentry+0x29>
        return -E_NO_MEM;
c0110932:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0110937:	e9 49 01 00 00       	jmp    c0110a85 <sfs_getdirentry+0x172>
    }

    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c011093c:	8b 45 08             	mov    0x8(%ebp),%eax
c011093f:	8b 40 38             	mov    0x38(%eax),%eax
c0110942:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110945:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110949:	74 0a                	je     c0110955 <sfs_getdirentry+0x42>
c011094b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011094e:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110951:	85 c0                	test   %eax,%eax
c0110953:	74 19                	je     c011096e <sfs_getdirentry+0x5b>
c0110955:	68 f4 68 11 c0       	push   $0xc01168f4
c011095a:	68 9f 66 11 c0       	push   $0xc011669f
c011095f:	68 0d 03 00 00       	push   $0x30d
c0110964:	68 37 66 11 c0       	push   $0xc0116637
c0110969:	e8 77 fb fe ff       	call   c01004e5 <__panic>
c011096e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110971:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110974:	8b 45 08             	mov    0x8(%ebp),%eax
c0110977:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011097a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011097e:	74 0d                	je     c011098d <sfs_getdirentry+0x7a>
c0110980:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110983:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110986:	3d 35 12 00 00       	cmp    $0x1235,%eax
c011098b:	74 19                	je     c01109a6 <sfs_getdirentry+0x93>
c011098d:	68 f0 66 11 c0       	push   $0xc01166f0
c0110992:	68 9f 66 11 c0       	push   $0xc011669f
c0110997:	68 0e 03 00 00       	push   $0x30e
c011099c:	68 37 66 11 c0       	push   $0xc0116637
c01109a1:	e8 3f fb fe ff       	call   c01004e5 <__panic>
c01109a6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01109a9:	89 45 e0             	mov    %eax,-0x20(%ebp)

    int ret, slot;
    off_t offset = iob->io_offset;
c01109ac:	8b 45 0c             	mov    0xc(%ebp),%eax
c01109af:	8b 40 04             	mov    0x4(%eax),%eax
c01109b2:	89 45 dc             	mov    %eax,-0x24(%ebp)
    if (offset < 0 || offset % sfs_dentry_size != 0) {
c01109b5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c01109b9:	78 0a                	js     c01109c5 <sfs_getdirentry+0xb2>
c01109bb:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01109be:	0f b6 c0             	movzbl %al,%eax
c01109c1:	85 c0                	test   %eax,%eax
c01109c3:	74 18                	je     c01109dd <sfs_getdirentry+0xca>
        kfree(entry);
c01109c5:	83 ec 0c             	sub    $0xc,%esp
c01109c8:	ff 75 f0             	pushl  -0x10(%ebp)
c01109cb:	e8 8c 64 ff ff       	call   c0106e5c <kfree>
c01109d0:	83 c4 10             	add    $0x10,%esp
        return -E_INVAL;
c01109d3:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c01109d8:	e9 a8 00 00 00       	jmp    c0110a85 <sfs_getdirentry+0x172>
    }
    if ((slot = offset / sfs_dentry_size) > sin->din->blocks) {
c01109dd:	8b 45 dc             	mov    -0x24(%ebp),%eax
c01109e0:	c1 e8 08             	shr    $0x8,%eax
c01109e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
c01109e6:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01109e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01109ec:	8b 00                	mov    (%eax),%eax
c01109ee:	8b 40 08             	mov    0x8(%eax),%eax
c01109f1:	39 c2                	cmp    %eax,%edx
c01109f3:	76 15                	jbe    c0110a0a <sfs_getdirentry+0xf7>
        kfree(entry);
c01109f5:	83 ec 0c             	sub    $0xc,%esp
c01109f8:	ff 75 f0             	pushl  -0x10(%ebp)
c01109fb:	e8 5c 64 ff ff       	call   c0106e5c <kfree>
c0110a00:	83 c4 10             	add    $0x10,%esp
        return -E_NOENT;
c0110a03:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
c0110a08:	eb 7b                	jmp    c0110a85 <sfs_getdirentry+0x172>
    }
    lock_sin(sin);
c0110a0a:	83 ec 0c             	sub    $0xc,%esp
c0110a0d:	ff 75 e0             	pushl  -0x20(%ebp)
c0110a10:	e8 02 e9 ff ff       	call   c010f317 <lock_sin>
c0110a15:	83 c4 10             	add    $0x10,%esp
    if ((ret = sfs_getdirentry_sub_nolock(sfs, sin, slot, entry)) != 0) {
c0110a18:	ff 75 f0             	pushl  -0x10(%ebp)
c0110a1b:	ff 75 d8             	pushl  -0x28(%ebp)
c0110a1e:	ff 75 e0             	pushl  -0x20(%ebp)
c0110a21:	ff 75 e8             	pushl  -0x18(%ebp)
c0110a24:	e8 81 fe ff ff       	call   c01108aa <sfs_getdirentry_sub_nolock>
c0110a29:	83 c4 10             	add    $0x10,%esp
c0110a2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110a2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110a33:	74 10                	je     c0110a45 <sfs_getdirentry+0x132>
        unlock_sin(sin);
c0110a35:	83 ec 0c             	sub    $0xc,%esp
c0110a38:	ff 75 e0             	pushl  -0x20(%ebp)
c0110a3b:	e8 f2 e8 ff ff       	call   c010f332 <unlock_sin>
c0110a40:	83 c4 10             	add    $0x10,%esp
        goto out;
c0110a43:	eb 2f                	jmp    c0110a74 <sfs_getdirentry+0x161>
    }
    unlock_sin(sin);
c0110a45:	83 ec 0c             	sub    $0xc,%esp
c0110a48:	ff 75 e0             	pushl  -0x20(%ebp)
c0110a4b:	e8 e2 e8 ff ff       	call   c010f332 <unlock_sin>
c0110a50:	83 c4 10             	add    $0x10,%esp
    ret = iobuf_move(iob, entry->name, sfs_dentry_size, 1, NULL);
c0110a53:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a56:	83 c0 04             	add    $0x4,%eax
c0110a59:	83 ec 0c             	sub    $0xc,%esp
c0110a5c:	6a 00                	push   $0x0
c0110a5e:	6a 01                	push   $0x1
c0110a60:	68 00 01 00 00       	push   $0x100
c0110a65:	50                   	push   %eax
c0110a66:	ff 75 0c             	pushl  0xc(%ebp)
c0110a69:	e8 15 9c ff ff       	call   c010a683 <iobuf_move>
c0110a6e:	83 c4 20             	add    $0x20,%esp
c0110a71:	89 45 f4             	mov    %eax,-0xc(%ebp)
out:
    kfree(entry);
c0110a74:	83 ec 0c             	sub    $0xc,%esp
c0110a77:	ff 75 f0             	pushl  -0x10(%ebp)
c0110a7a:	e8 dd 63 ff ff       	call   c0106e5c <kfree>
c0110a7f:	83 c4 10             	add    $0x10,%esp
    return ret;
c0110a82:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110a85:	c9                   	leave  
c0110a86:	c3                   	ret    

c0110a87 <sfs_reclaim>:

/*
 * sfs_reclaim - Free all resources inode occupied . Called when inode is no longer in use. 
 */
static int
sfs_reclaim(struct inode *node) {
c0110a87:	55                   	push   %ebp
c0110a88:	89 e5                	mov    %esp,%ebp
c0110a8a:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0110a8d:	8b 45 08             	mov    0x8(%ebp),%eax
c0110a90:	8b 40 38             	mov    0x38(%eax),%eax
c0110a93:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0110a96:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0110a9a:	74 0a                	je     c0110aa6 <sfs_reclaim+0x1f>
c0110a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110a9f:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110aa2:	85 c0                	test   %eax,%eax
c0110aa4:	74 19                	je     c0110abf <sfs_reclaim+0x38>
c0110aa6:	68 f4 68 11 c0       	push   $0xc01168f4
c0110aab:	68 9f 66 11 c0       	push   $0xc011669f
c0110ab0:	68 2b 03 00 00       	push   $0x32b
c0110ab5:	68 37 66 11 c0       	push   $0xc0116637
c0110aba:	e8 26 fa fe ff       	call   c01004e5 <__panic>
c0110abf:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110ac2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110ac5:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ac8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0110acb:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0110acf:	74 0d                	je     c0110ade <sfs_reclaim+0x57>
c0110ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110ad4:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110ad7:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110adc:	74 19                	je     c0110af7 <sfs_reclaim+0x70>
c0110ade:	68 f0 66 11 c0       	push   $0xc01166f0
c0110ae3:	68 9f 66 11 c0       	push   $0xc011669f
c0110ae8:	68 2c 03 00 00       	push   $0x32c
c0110aed:	68 37 66 11 c0       	push   $0xc0116637
c0110af2:	e8 ee f9 fe ff       	call   c01004e5 <__panic>
c0110af7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0110afa:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int  ret = -E_BUSY;
c0110afd:	c7 45 f4 f1 ff ff ff 	movl   $0xfffffff1,-0xc(%ebp)
    uint32_t ent;
    lock_sfs_fs(sfs);
c0110b04:	83 ec 0c             	sub    $0xc,%esp
c0110b07:	ff 75 ec             	pushl  -0x14(%ebp)
c0110b0a:	e8 91 e7 ff ff       	call   c010f2a0 <lock_sfs_fs>
c0110b0f:	83 c4 10             	add    $0x10,%esp
    assert(sin->reclaim_count > 0);
c0110b12:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110b15:	8b 40 0c             	mov    0xc(%eax),%eax
c0110b18:	85 c0                	test   %eax,%eax
c0110b1a:	7f 19                	jg     c0110b35 <sfs_reclaim+0xae>
c0110b1c:	68 ae 69 11 c0       	push   $0xc01169ae
c0110b21:	68 9f 66 11 c0       	push   $0xc011669f
c0110b26:	68 31 03 00 00       	push   $0x331
c0110b2b:	68 37 66 11 c0       	push   $0xc0116637
c0110b30:	e8 b0 f9 fe ff       	call   c01004e5 <__panic>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
c0110b35:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110b38:	8b 40 0c             	mov    0xc(%eax),%eax
c0110b3b:	8d 50 ff             	lea    -0x1(%eax),%edx
c0110b3e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110b41:	89 50 0c             	mov    %edx,0xc(%eax)
c0110b44:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110b47:	8b 40 0c             	mov    0xc(%eax),%eax
c0110b4a:	85 c0                	test   %eax,%eax
c0110b4c:	0f 85 9b 01 00 00    	jne    c0110ced <sfs_reclaim+0x266>
c0110b52:	83 ec 0c             	sub    $0xc,%esp
c0110b55:	ff 75 08             	pushl  0x8(%ebp)
c0110b58:	e8 af e7 ff ff       	call   c010f30c <inode_ref_count>
c0110b5d:	83 c4 10             	add    $0x10,%esp
c0110b60:	85 c0                	test   %eax,%eax
c0110b62:	0f 85 85 01 00 00    	jne    c0110ced <sfs_reclaim+0x266>
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
c0110b68:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110b6b:	8b 00                	mov    (%eax),%eax
c0110b6d:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0110b71:	66 85 c0             	test   %ax,%ax
c0110b74:	75 72                	jne    c0110be8 <sfs_reclaim+0x161>
        if ((ret = vop_truncate(node, 0)) != 0) {
c0110b76:	8b 45 08             	mov    0x8(%ebp),%eax
c0110b79:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0110b7c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c0110b80:	74 17                	je     c0110b99 <sfs_reclaim+0x112>
c0110b82:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110b85:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b88:	85 c0                	test   %eax,%eax
c0110b8a:	74 0d                	je     c0110b99 <sfs_reclaim+0x112>
c0110b8c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110b8f:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110b92:	8b 40 30             	mov    0x30(%eax),%eax
c0110b95:	85 c0                	test   %eax,%eax
c0110b97:	75 19                	jne    c0110bb2 <sfs_reclaim+0x12b>
c0110b99:	68 c8 69 11 c0       	push   $0xc01169c8
c0110b9e:	68 9f 66 11 c0       	push   $0xc011669f
c0110ba3:	68 36 03 00 00       	push   $0x336
c0110ba8:	68 37 66 11 c0       	push   $0xc0116637
c0110bad:	e8 33 f9 fe ff       	call   c01004e5 <__panic>
c0110bb2:	83 ec 08             	sub    $0x8,%esp
c0110bb5:	68 19 6a 11 c0       	push   $0xc0116a19
c0110bba:	ff 75 e0             	pushl  -0x20(%ebp)
c0110bbd:	e8 a4 d7 ff ff       	call   c010e366 <inode_check>
c0110bc2:	83 c4 10             	add    $0x10,%esp
c0110bc5:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110bc8:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110bcb:	8b 40 30             	mov    0x30(%eax),%eax
c0110bce:	83 ec 08             	sub    $0x8,%esp
c0110bd1:	6a 00                	push   $0x0
c0110bd3:	ff 75 08             	pushl  0x8(%ebp)
c0110bd6:	ff d0                	call   *%eax
c0110bd8:	83 c4 10             	add    $0x10,%esp
c0110bdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110bde:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110be2:	0f 85 01 01 00 00    	jne    c0110ce9 <sfs_reclaim+0x262>
            goto failed_unlock;
        }
    }
    if (sin->dirty) {
c0110be8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110beb:	8b 40 08             	mov    0x8(%eax),%eax
c0110bee:	85 c0                	test   %eax,%eax
c0110bf0:	74 70                	je     c0110c62 <sfs_reclaim+0x1db>
        if ((ret = vop_fsync(node)) != 0) {
c0110bf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0110bf5:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0110bf8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0110bfc:	74 17                	je     c0110c15 <sfs_reclaim+0x18e>
c0110bfe:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110c01:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110c04:	85 c0                	test   %eax,%eax
c0110c06:	74 0d                	je     c0110c15 <sfs_reclaim+0x18e>
c0110c08:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110c0b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110c0e:	8b 40 18             	mov    0x18(%eax),%eax
c0110c11:	85 c0                	test   %eax,%eax
c0110c13:	75 19                	jne    c0110c2e <sfs_reclaim+0x1a7>
c0110c15:	68 84 68 11 c0       	push   $0xc0116884
c0110c1a:	68 9f 66 11 c0       	push   $0xc011669f
c0110c1f:	68 3b 03 00 00       	push   $0x33b
c0110c24:	68 37 66 11 c0       	push   $0xc0116637
c0110c29:	e8 b7 f8 fe ff       	call   c01004e5 <__panic>
c0110c2e:	83 ec 08             	sub    $0x8,%esp
c0110c31:	68 d2 68 11 c0       	push   $0xc01168d2
c0110c36:	ff 75 dc             	pushl  -0x24(%ebp)
c0110c39:	e8 28 d7 ff ff       	call   c010e366 <inode_check>
c0110c3e:	83 c4 10             	add    $0x10,%esp
c0110c41:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110c44:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110c47:	8b 40 18             	mov    0x18(%eax),%eax
c0110c4a:	83 ec 0c             	sub    $0xc,%esp
c0110c4d:	ff 75 08             	pushl  0x8(%ebp)
c0110c50:	ff d0                	call   *%eax
c0110c52:	83 c4 10             	add    $0x10,%esp
c0110c55:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110c58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110c5c:	0f 85 8a 00 00 00    	jne    c0110cec <sfs_reclaim+0x265>
            goto failed_unlock;
        }
    }
    sfs_remove_links(sin);
c0110c62:	83 ec 0c             	sub    $0xc,%esp
c0110c65:	ff 75 e4             	pushl  -0x1c(%ebp)
c0110c68:	e8 12 e8 ff ff       	call   c010f47f <sfs_remove_links>
c0110c6d:	83 c4 10             	add    $0x10,%esp
    unlock_sfs_fs(sfs);
c0110c70:	83 ec 0c             	sub    $0xc,%esp
c0110c73:	ff 75 ec             	pushl  -0x14(%ebp)
c0110c76:	e8 5b e6 ff ff       	call   c010f2d6 <unlock_sfs_fs>
c0110c7b:	83 c4 10             	add    $0x10,%esp

    if (sin->din->nlinks == 0) {
c0110c7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c81:	8b 00                	mov    (%eax),%eax
c0110c83:	0f b7 40 06          	movzwl 0x6(%eax),%eax
c0110c87:	66 85 c0             	test   %ax,%ax
c0110c8a:	75 37                	jne    c0110cc3 <sfs_reclaim+0x23c>
        sfs_block_free(sfs, sin->ino);
c0110c8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110c8f:	8b 40 04             	mov    0x4(%eax),%eax
c0110c92:	83 ec 08             	sub    $0x8,%esp
c0110c95:	50                   	push   %eax
c0110c96:	ff 75 ec             	pushl  -0x14(%ebp)
c0110c99:	e8 3e e9 ff ff       	call   c010f5dc <sfs_block_free>
c0110c9e:	83 c4 10             	add    $0x10,%esp
        if ((ent = sin->din->indirect) != 0) {
c0110ca1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110ca4:	8b 00                	mov    (%eax),%eax
c0110ca6:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110ca9:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0110cac:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
c0110cb0:	74 11                	je     c0110cc3 <sfs_reclaim+0x23c>
            sfs_block_free(sfs, ent);
c0110cb2:	83 ec 08             	sub    $0x8,%esp
c0110cb5:	ff 75 d8             	pushl  -0x28(%ebp)
c0110cb8:	ff 75 ec             	pushl  -0x14(%ebp)
c0110cbb:	e8 1c e9 ff ff       	call   c010f5dc <sfs_block_free>
c0110cc0:	83 c4 10             	add    $0x10,%esp
        }
    }
    kfree(sin->din);
c0110cc3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110cc6:	8b 00                	mov    (%eax),%eax
c0110cc8:	83 ec 0c             	sub    $0xc,%esp
c0110ccb:	50                   	push   %eax
c0110ccc:	e8 8b 61 ff ff       	call   c0106e5c <kfree>
c0110cd1:	83 c4 10             	add    $0x10,%esp
    vop_kill(node);
c0110cd4:	83 ec 0c             	sub    $0xc,%esp
c0110cd7:	ff 75 08             	pushl  0x8(%ebp)
c0110cda:	e8 51 d4 ff ff       	call   c010e130 <inode_kill>
c0110cdf:	83 c4 10             	add    $0x10,%esp
    return 0;
c0110ce2:	b8 00 00 00 00       	mov    $0x0,%eax
c0110ce7:	eb 15                	jmp    c0110cfe <sfs_reclaim+0x277>
    if ((-- sin->reclaim_count) != 0 || inode_ref_count(node) != 0) {
        goto failed_unlock;
    }
    if (sin->din->nlinks == 0) {
        if ((ret = vop_truncate(node, 0)) != 0) {
            goto failed_unlock;
c0110ce9:	90                   	nop
c0110cea:	eb 01                	jmp    c0110ced <sfs_reclaim+0x266>
        }
    }
    if (sin->dirty) {
        if ((ret = vop_fsync(node)) != 0) {
            goto failed_unlock;
c0110cec:	90                   	nop
    kfree(sin->din);
    vop_kill(node);
    return 0;

failed_unlock:
    unlock_sfs_fs(sfs);
c0110ced:	83 ec 0c             	sub    $0xc,%esp
c0110cf0:	ff 75 ec             	pushl  -0x14(%ebp)
c0110cf3:	e8 de e5 ff ff       	call   c010f2d6 <unlock_sfs_fs>
c0110cf8:	83 c4 10             	add    $0x10,%esp
    return ret;
c0110cfb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0110cfe:	c9                   	leave  
c0110cff:	c3                   	ret    

c0110d00 <sfs_gettype>:

/*
 * sfs_gettype - Return type of file. The values for file types are in sfs.h.
 */
static int
sfs_gettype(struct inode *node, uint32_t *type_store) {
c0110d00:	55                   	push   %ebp
c0110d01:	89 e5                	mov    %esp,%ebp
c0110d03:	83 ec 18             	sub    $0x18,%esp
    struct sfs_disk_inode *din = vop_info(node, sfs_inode)->din;
c0110d06:	8b 45 08             	mov    0x8(%ebp),%eax
c0110d09:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110d0c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110d10:	74 0d                	je     c0110d1f <sfs_gettype+0x1f>
c0110d12:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d15:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110d18:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110d1d:	74 19                	je     c0110d38 <sfs_gettype+0x38>
c0110d1f:	68 f0 66 11 c0       	push   $0xc01166f0
c0110d24:	68 9f 66 11 c0       	push   $0xc011669f
c0110d29:	68 56 03 00 00       	push   $0x356
c0110d2e:	68 37 66 11 c0       	push   $0xc0116637
c0110d33:	e8 ad f7 fe ff       	call   c01004e5 <__panic>
c0110d38:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110d3b:	8b 00                	mov    (%eax),%eax
c0110d3d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    switch (din->type) {
c0110d40:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d43:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0110d47:	0f b7 c0             	movzwl %ax,%eax
c0110d4a:	83 f8 02             	cmp    $0x2,%eax
c0110d4d:	74 0c                	je     c0110d5b <sfs_gettype+0x5b>
c0110d4f:	83 f8 03             	cmp    $0x3,%eax
c0110d52:	74 27                	je     c0110d7b <sfs_gettype+0x7b>
c0110d54:	83 f8 01             	cmp    $0x1,%eax
c0110d57:	74 12                	je     c0110d6b <sfs_gettype+0x6b>
c0110d59:	eb 30                	jmp    c0110d8b <sfs_gettype+0x8b>
    case SFS_TYPE_DIR:
        *type_store = S_IFDIR;
c0110d5b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d5e:	c7 00 00 20 00 00    	movl   $0x2000,(%eax)
        return 0;
c0110d64:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d69:	eb 3f                	jmp    c0110daa <sfs_gettype+0xaa>
    case SFS_TYPE_FILE:
        *type_store = S_IFREG;
c0110d6b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d6e:	c7 00 00 10 00 00    	movl   $0x1000,(%eax)
        return 0;
c0110d74:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d79:	eb 2f                	jmp    c0110daa <sfs_gettype+0xaa>
    case SFS_TYPE_LINK:
        *type_store = S_IFLNK;
c0110d7b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110d7e:	c7 00 00 30 00 00    	movl   $0x3000,(%eax)
        return 0;
c0110d84:	b8 00 00 00 00       	mov    $0x0,%eax
c0110d89:	eb 1f                	jmp    c0110daa <sfs_gettype+0xaa>
    }
    panic("invalid file type %d.\n", din->type);
c0110d8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110d8e:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c0110d92:	0f b7 c0             	movzwl %ax,%eax
c0110d95:	50                   	push   %eax
c0110d96:	68 20 66 11 c0       	push   $0xc0116620
c0110d9b:	68 62 03 00 00       	push   $0x362
c0110da0:	68 37 66 11 c0       	push   $0xc0116637
c0110da5:	e8 3b f7 fe ff       	call   c01004e5 <__panic>
}
c0110daa:	c9                   	leave  
c0110dab:	c3                   	ret    

c0110dac <sfs_tryseek>:

/* 
 * sfs_tryseek - Check if seeking to the specified position within the file is legal.
 */
static int
sfs_tryseek(struct inode *node, off_t pos) {
c0110dac:	55                   	push   %ebp
c0110dad:	89 e5                	mov    %esp,%ebp
c0110daf:	83 ec 18             	sub    $0x18,%esp
    if (pos < 0 || pos >= SFS_MAX_FILE_SIZE) {
c0110db2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110db6:	78 0a                	js     c0110dc2 <sfs_tryseek+0x16>
c0110db8:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110dbb:	3d ff ff ff 07       	cmp    $0x7ffffff,%eax
c0110dc0:	76 0a                	jbe    c0110dcc <sfs_tryseek+0x20>
        return -E_INVAL;
c0110dc2:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110dc7:	e9 b3 00 00 00       	jmp    c0110e7f <sfs_tryseek+0xd3>
    }
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110dcc:	8b 45 08             	mov    0x8(%ebp),%eax
c0110dcf:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110dd2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110dd6:	74 0d                	je     c0110de5 <sfs_tryseek+0x39>
c0110dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110ddb:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110dde:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110de3:	74 19                	je     c0110dfe <sfs_tryseek+0x52>
c0110de5:	68 f0 66 11 c0       	push   $0xc01166f0
c0110dea:	68 9f 66 11 c0       	push   $0xc011669f
c0110def:	68 6d 03 00 00       	push   $0x36d
c0110df4:	68 37 66 11 c0       	push   $0xc0116637
c0110df9:	e8 e7 f6 fe ff       	call   c01004e5 <__panic>
c0110dfe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0110e01:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pos > sin->din->size) {
c0110e04:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110e07:	8b 00                	mov    (%eax),%eax
c0110e09:	8b 10                	mov    (%eax),%edx
c0110e0b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e0e:	39 c2                	cmp    %eax,%edx
c0110e10:	73 68                	jae    c0110e7a <sfs_tryseek+0xce>
        return vop_truncate(node, pos);
c0110e12:	8b 45 08             	mov    0x8(%ebp),%eax
c0110e15:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110e18:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110e1c:	74 17                	je     c0110e35 <sfs_tryseek+0x89>
c0110e1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e21:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110e24:	85 c0                	test   %eax,%eax
c0110e26:	74 0d                	je     c0110e35 <sfs_tryseek+0x89>
c0110e28:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e2b:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110e2e:	8b 40 30             	mov    0x30(%eax),%eax
c0110e31:	85 c0                	test   %eax,%eax
c0110e33:	75 19                	jne    c0110e4e <sfs_tryseek+0xa2>
c0110e35:	68 c8 69 11 c0       	push   $0xc01169c8
c0110e3a:	68 9f 66 11 c0       	push   $0xc011669f
c0110e3f:	68 6f 03 00 00       	push   $0x36f
c0110e44:	68 37 66 11 c0       	push   $0xc0116637
c0110e49:	e8 97 f6 fe ff       	call   c01004e5 <__panic>
c0110e4e:	83 ec 08             	sub    $0x8,%esp
c0110e51:	68 19 6a 11 c0       	push   $0xc0116a19
c0110e56:	ff 75 ec             	pushl  -0x14(%ebp)
c0110e59:	e8 08 d5 ff ff       	call   c010e366 <inode_check>
c0110e5e:	83 c4 10             	add    $0x10,%esp
c0110e61:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110e64:	8b 40 3c             	mov    0x3c(%eax),%eax
c0110e67:	8b 40 30             	mov    0x30(%eax),%eax
c0110e6a:	83 ec 08             	sub    $0x8,%esp
c0110e6d:	ff 75 0c             	pushl  0xc(%ebp)
c0110e70:	ff 75 08             	pushl  0x8(%ebp)
c0110e73:	ff d0                	call   *%eax
c0110e75:	83 c4 10             	add    $0x10,%esp
c0110e78:	eb 05                	jmp    c0110e7f <sfs_tryseek+0xd3>
    }
    return 0;
c0110e7a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0110e7f:	c9                   	leave  
c0110e80:	c3                   	ret    

c0110e81 <sfs_truncfile>:

/*
 * sfs_truncfile : reszie the file with new length
 */
static int
sfs_truncfile(struct inode *node, off_t len) {
c0110e81:	55                   	push   %ebp
c0110e82:	89 e5                	mov    %esp,%ebp
c0110e84:	83 ec 38             	sub    $0x38,%esp
    if (len < 0 || len > SFS_MAX_FILE_SIZE) {
c0110e87:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0110e8b:	78 0a                	js     c0110e97 <sfs_truncfile+0x16>
c0110e8d:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110e90:	3d 00 00 00 08       	cmp    $0x8000000,%eax
c0110e95:	76 0a                	jbe    c0110ea1 <sfs_truncfile+0x20>
        return -E_INVAL;
c0110e97:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0110e9c:	e9 9e 01 00 00       	jmp    c011103f <sfs_truncfile+0x1be>
    }
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0110ea1:	8b 45 08             	mov    0x8(%ebp),%eax
c0110ea4:	8b 40 38             	mov    0x38(%eax),%eax
c0110ea7:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0110eaa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c0110eae:	74 0a                	je     c0110eba <sfs_truncfile+0x39>
c0110eb0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110eb3:	8b 40 6c             	mov    0x6c(%eax),%eax
c0110eb6:	85 c0                	test   %eax,%eax
c0110eb8:	74 19                	je     c0110ed3 <sfs_truncfile+0x52>
c0110eba:	68 f4 68 11 c0       	push   $0xc01168f4
c0110ebf:	68 9f 66 11 c0       	push   $0xc011669f
c0110ec4:	68 7c 03 00 00       	push   $0x37c
c0110ec9:	68 37 66 11 c0       	push   $0xc0116637
c0110ece:	e8 12 f6 fe ff       	call   c01004e5 <__panic>
c0110ed3:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0110ed6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c0110ed9:	8b 45 08             	mov    0x8(%ebp),%eax
c0110edc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0110edf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0110ee3:	74 0d                	je     c0110ef2 <sfs_truncfile+0x71>
c0110ee5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110ee8:	8b 40 2c             	mov    0x2c(%eax),%eax
c0110eeb:	3d 35 12 00 00       	cmp    $0x1235,%eax
c0110ef0:	74 19                	je     c0110f0b <sfs_truncfile+0x8a>
c0110ef2:	68 f0 66 11 c0       	push   $0xc01166f0
c0110ef7:	68 9f 66 11 c0       	push   $0xc011669f
c0110efc:	68 7d 03 00 00       	push   $0x37d
c0110f01:	68 37 66 11 c0       	push   $0xc0116637
c0110f06:	e8 da f5 fe ff       	call   c01004e5 <__panic>
c0110f0b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0110f0e:	89 45 e0             	mov    %eax,-0x20(%ebp)
    struct sfs_disk_inode *din = sin->din;
c0110f11:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0110f14:	8b 00                	mov    (%eax),%eax
c0110f16:	89 45 dc             	mov    %eax,-0x24(%ebp)

    int ret = 0;
c0110f19:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//new number of disk blocks of file
    uint32_t nblks, tblks = ROUNDUP_DIV(len, SFS_BLKSIZE);
c0110f20:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
c0110f27:	8b 55 0c             	mov    0xc(%ebp),%edx
c0110f2a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0110f2d:	01 d0                	add    %edx,%eax
c0110f2f:	83 e8 01             	sub    $0x1,%eax
c0110f32:	ba 00 00 00 00       	mov    $0x0,%edx
c0110f37:	f7 75 d8             	divl   -0x28(%ebp)
c0110f3a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    if (din->size == len) {
c0110f3d:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110f40:	8b 10                	mov    (%eax),%edx
c0110f42:	8b 45 0c             	mov    0xc(%ebp),%eax
c0110f45:	39 c2                	cmp    %eax,%edx
c0110f47:	75 2e                	jne    c0110f77 <sfs_truncfile+0xf6>
        assert(tblks == din->blocks);
c0110f49:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110f4c:	8b 40 08             	mov    0x8(%eax),%eax
c0110f4f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0110f52:	74 19                	je     c0110f6d <sfs_truncfile+0xec>
c0110f54:	68 22 6a 11 c0       	push   $0xc0116a22
c0110f59:	68 9f 66 11 c0       	push   $0xc011669f
c0110f5e:	68 84 03 00 00       	push   $0x384
c0110f63:	68 37 66 11 c0       	push   $0xc0116637
c0110f68:	e8 78 f5 fe ff       	call   c01004e5 <__panic>
        return 0;
c0110f6d:	b8 00 00 00 00       	mov    $0x0,%eax
c0110f72:	e9 c8 00 00 00       	jmp    c011103f <sfs_truncfile+0x1be>
    }

    lock_sin(sin);
c0110f77:	83 ec 0c             	sub    $0xc,%esp
c0110f7a:	ff 75 e0             	pushl  -0x20(%ebp)
c0110f7d:	e8 95 e3 ff ff       	call   c010f317 <lock_sin>
c0110f82:	83 c4 10             	add    $0x10,%esp
	// old number of disk blocks of file
    nblks = din->blocks;
c0110f85:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110f88:	8b 40 08             	mov    0x8(%eax),%eax
c0110f8b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (nblks < tblks) {
c0110f8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110f91:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0110f94:	73 2c                	jae    c0110fc2 <sfs_truncfile+0x141>
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0110f96:	eb 20                	jmp    c0110fb8 <sfs_truncfile+0x137>
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
c0110f98:	6a 00                	push   $0x0
c0110f9a:	ff 75 f0             	pushl  -0x10(%ebp)
c0110f9d:	ff 75 e0             	pushl  -0x20(%ebp)
c0110fa0:	ff 75 e8             	pushl  -0x18(%ebp)
c0110fa3:	e8 63 ed ff ff       	call   c010fd0b <sfs_bmap_load_nolock>
c0110fa8:	83 c4 10             	add    $0x10,%esp
c0110fab:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110fae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110fb2:	75 76                	jne    c011102a <sfs_truncfile+0x1a9>
                goto out_unlock;
            }
            nblks ++;
c0110fb4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
    lock_sin(sin);
	// old number of disk blocks of file
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
c0110fb8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0110fbb:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0110fbe:	75 d8                	jne    c0110f98 <sfs_truncfile+0x117>
c0110fc0:	eb 30                	jmp    c0110ff2 <sfs_truncfile+0x171>
                goto out_unlock;
            }
            nblks ++;
        }
    }
    else if (tblks < nblks) {
c0110fc2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0110fc5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110fc8:	73 28                	jae    c0110ff2 <sfs_truncfile+0x171>
		// try to reduce the file size 
        while (tblks != nblks) {
c0110fca:	eb 1e                	jmp    c0110fea <sfs_truncfile+0x169>
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
c0110fcc:	83 ec 08             	sub    $0x8,%esp
c0110fcf:	ff 75 e0             	pushl  -0x20(%ebp)
c0110fd2:	ff 75 e8             	pushl  -0x18(%ebp)
c0110fd5:	e8 f7 ed ff ff       	call   c010fdd1 <sfs_bmap_truncate_nolock>
c0110fda:	83 c4 10             	add    $0x10,%esp
c0110fdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0110fe0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0110fe4:	75 47                	jne    c011102d <sfs_truncfile+0x1ac>
                goto out_unlock;
            }
            nblks --;
c0110fe6:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            nblks ++;
        }
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
c0110fea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c0110fed:	3b 45 f0             	cmp    -0x10(%ebp),%eax
c0110ff0:	75 da                	jne    c0110fcc <sfs_truncfile+0x14b>
                goto out_unlock;
            }
            nblks --;
        }
    }
    assert(din->blocks == tblks);
c0110ff2:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0110ff5:	8b 40 08             	mov    0x8(%eax),%eax
c0110ff8:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
c0110ffb:	74 19                	je     c0111016 <sfs_truncfile+0x195>
c0110ffd:	68 37 6a 11 c0       	push   $0xc0116a37
c0111002:	68 9f 66 11 c0       	push   $0xc011669f
c0111007:	68 9d 03 00 00       	push   $0x39d
c011100c:	68 37 66 11 c0       	push   $0xc0116637
c0111011:	e8 cf f4 fe ff       	call   c01004e5 <__panic>
    din->size = len;
c0111016:	8b 55 0c             	mov    0xc(%ebp),%edx
c0111019:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011101c:	89 10                	mov    %edx,(%eax)
    sin->dirty = 1;
c011101e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111021:	c7 40 08 01 00 00 00 	movl   $0x1,0x8(%eax)
c0111028:	eb 04                	jmp    c011102e <sfs_truncfile+0x1ad>
    nblks = din->blocks;
    if (nblks < tblks) {
		// try to enlarge the file size by add new disk block at the end of file
        while (nblks != tblks) {
            if ((ret = sfs_bmap_load_nolock(sfs, sin, nblks, NULL)) != 0) {
                goto out_unlock;
c011102a:	90                   	nop
c011102b:	eb 01                	jmp    c011102e <sfs_truncfile+0x1ad>
    }
    else if (tblks < nblks) {
		// try to reduce the file size 
        while (tblks != nblks) {
            if ((ret = sfs_bmap_truncate_nolock(sfs, sin)) != 0) {
                goto out_unlock;
c011102d:	90                   	nop
    assert(din->blocks == tblks);
    din->size = len;
    sin->dirty = 1;

out_unlock:
    unlock_sin(sin);
c011102e:	83 ec 0c             	sub    $0xc,%esp
c0111031:	ff 75 e0             	pushl  -0x20(%ebp)
c0111034:	e8 f9 e2 ff ff       	call   c010f332 <unlock_sin>
c0111039:	83 c4 10             	add    $0x10,%esp
    return ret;
c011103c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c011103f:	c9                   	leave  
c0111040:	c3                   	ret    

c0111041 <sfs_lookup>:
 * sfs_lookup - Parse path relative to the passed directory
 *              DIR, and hand back the inode for the file it
 *              refers to.
 */
static int
sfs_lookup(struct inode *node, char *path, struct inode **node_store) {
c0111041:	55                   	push   %ebp
c0111042:	89 e5                	mov    %esp,%ebp
c0111044:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(vop_fs(node), sfs);
c0111047:	8b 45 08             	mov    0x8(%ebp),%eax
c011104a:	8b 40 38             	mov    0x38(%eax),%eax
c011104d:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111050:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111054:	74 0a                	je     c0111060 <sfs_lookup+0x1f>
c0111056:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111059:	8b 40 6c             	mov    0x6c(%eax),%eax
c011105c:	85 c0                	test   %eax,%eax
c011105e:	74 19                	je     c0111079 <sfs_lookup+0x38>
c0111060:	68 f4 68 11 c0       	push   $0xc01168f4
c0111065:	68 9f 66 11 c0       	push   $0xc011669f
c011106a:	68 ad 03 00 00       	push   $0x3ad
c011106f:	68 37 66 11 c0       	push   $0xc0116637
c0111074:	e8 6c f4 fe ff       	call   c01004e5 <__panic>
c0111079:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011107c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    assert(*path != '\0' && *path != '/');
c011107f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111082:	0f b6 00             	movzbl (%eax),%eax
c0111085:	84 c0                	test   %al,%al
c0111087:	74 0a                	je     c0111093 <sfs_lookup+0x52>
c0111089:	8b 45 0c             	mov    0xc(%ebp),%eax
c011108c:	0f b6 00             	movzbl (%eax),%eax
c011108f:	3c 2f                	cmp    $0x2f,%al
c0111091:	75 19                	jne    c01110ac <sfs_lookup+0x6b>
c0111093:	68 4c 6a 11 c0       	push   $0xc0116a4c
c0111098:	68 9f 66 11 c0       	push   $0xc011669f
c011109d:	68 ae 03 00 00       	push   $0x3ae
c01110a2:	68 37 66 11 c0       	push   $0xc0116637
c01110a7:	e8 39 f4 fe ff       	call   c01004e5 <__panic>
    vop_ref_inc(node);
c01110ac:	83 ec 0c             	sub    $0xc,%esp
c01110af:	ff 75 08             	pushl  0x8(%ebp)
c01110b2:	e8 dd d0 ff ff       	call   c010e194 <inode_ref_inc>
c01110b7:	83 c4 10             	add    $0x10,%esp
    struct sfs_inode *sin = vop_info(node, sfs_inode);
c01110ba:	8b 45 08             	mov    0x8(%ebp),%eax
c01110bd:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01110c0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01110c4:	74 0d                	je     c01110d3 <sfs_lookup+0x92>
c01110c6:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110c9:	8b 40 2c             	mov    0x2c(%eax),%eax
c01110cc:	3d 35 12 00 00       	cmp    $0x1235,%eax
c01110d1:	74 19                	je     c01110ec <sfs_lookup+0xab>
c01110d3:	68 f0 66 11 c0       	push   $0xc01166f0
c01110d8:	68 9f 66 11 c0       	push   $0xc011669f
c01110dd:	68 b0 03 00 00       	push   $0x3b0
c01110e2:	68 37 66 11 c0       	push   $0xc0116637
c01110e7:	e8 f9 f3 fe ff       	call   c01004e5 <__panic>
c01110ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01110ef:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sin->din->type != SFS_TYPE_DIR) {
c01110f2:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01110f5:	8b 00                	mov    (%eax),%eax
c01110f7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
c01110fb:	66 83 f8 02          	cmp    $0x2,%ax
c01110ff:	74 15                	je     c0111116 <sfs_lookup+0xd5>
        vop_ref_dec(node);
c0111101:	83 ec 0c             	sub    $0xc,%esp
c0111104:	ff 75 08             	pushl  0x8(%ebp)
c0111107:	e8 a2 d0 ff ff       	call   c010e1ae <inode_ref_dec>
c011110c:	83 c4 10             	add    $0x10,%esp
        return -E_NOTDIR;
c011110f:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
c0111114:	eb 43                	jmp    c0111159 <sfs_lookup+0x118>
    }
    struct inode *subnode;
    int ret = sfs_lookup_once(sfs, sin, path, &subnode, NULL);
c0111116:	83 ec 0c             	sub    $0xc,%esp
c0111119:	6a 00                	push   $0x0
c011111b:	8d 45 e0             	lea    -0x20(%ebp),%eax
c011111e:	50                   	push   %eax
c011111f:	ff 75 0c             	pushl  0xc(%ebp)
c0111122:	ff 75 e8             	pushl  -0x18(%ebp)
c0111125:	ff 75 f0             	pushl  -0x10(%ebp)
c0111128:	e8 64 ef ff ff       	call   c0110091 <sfs_lookup_once>
c011112d:	83 c4 20             	add    $0x20,%esp
c0111130:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    vop_ref_dec(node);
c0111133:	83 ec 0c             	sub    $0xc,%esp
c0111136:	ff 75 08             	pushl  0x8(%ebp)
c0111139:	e8 70 d0 ff ff       	call   c010e1ae <inode_ref_dec>
c011113e:	83 c4 10             	add    $0x10,%esp
    if (ret != 0) {
c0111141:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0111145:	74 05                	je     c011114c <sfs_lookup+0x10b>
        return ret;
c0111147:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011114a:	eb 0d                	jmp    c0111159 <sfs_lookup+0x118>
    }
    *node_store = subnode;
c011114c:	8b 55 e0             	mov    -0x20(%ebp),%edx
c011114f:	8b 45 10             	mov    0x10(%ebp),%eax
c0111152:	89 10                	mov    %edx,(%eax)
    return 0;
c0111154:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0111159:	c9                   	leave  
c011115a:	c3                   	ret    

c011115b <sfs_sync>:

/*
 * sfs_sync - sync sfs's superblock and freemap in memroy into disk
 */
static int
sfs_sync(struct fs *fs) {
c011115b:	55                   	push   %ebp
c011115c:	89 e5                	mov    %esp,%ebp
c011115e:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111161:	8b 45 08             	mov    0x8(%ebp),%eax
c0111164:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111167:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011116b:	74 0a                	je     c0111177 <sfs_sync+0x1c>
c011116d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111170:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111173:	85 c0                	test   %eax,%eax
c0111175:	74 16                	je     c011118d <sfs_sync+0x32>
c0111177:	68 6c 6a 11 c0       	push   $0xc0116a6c
c011117c:	68 95 6a 11 c0       	push   $0xc0116a95
c0111181:	6a 15                	push   $0x15
c0111183:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111188:	e8 58 f3 fe ff       	call   c01004e5 <__panic>
c011118d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111190:	89 45 ec             	mov    %eax,-0x14(%ebp)
    lock_sfs_fs(sfs);
c0111193:	83 ec 0c             	sub    $0xc,%esp
c0111196:	ff 75 ec             	pushl  -0x14(%ebp)
c0111199:	e8 02 e1 ff ff       	call   c010f2a0 <lock_sfs_fs>
c011119e:	83 c4 10             	add    $0x10,%esp
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
c01111a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01111a4:	83 c0 60             	add    $0x60,%eax
c01111a7:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01111aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01111ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
        while ((le = list_next(le)) != list) {
c01111b0:	eb 69                	jmp    c011121b <sfs_sync+0xc0>
            struct sfs_inode *sin = le2sin(le, inode_link);
c01111b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01111b5:	83 e8 1c             	sub    $0x1c,%eax
c01111b8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            vop_fsync(info2node(sin, sfs_inode));
c01111bb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01111be:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01111c1:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
c01111c5:	74 17                	je     c01111de <sfs_sync+0x83>
c01111c7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01111ca:	8b 40 3c             	mov    0x3c(%eax),%eax
c01111cd:	85 c0                	test   %eax,%eax
c01111cf:	74 0d                	je     c01111de <sfs_sync+0x83>
c01111d1:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01111d4:	8b 40 3c             	mov    0x3c(%eax),%eax
c01111d7:	8b 40 18             	mov    0x18(%eax),%eax
c01111da:	85 c0                	test   %eax,%eax
c01111dc:	75 16                	jne    c01111f4 <sfs_sync+0x99>
c01111de:	68 c0 6a 11 c0       	push   $0xc0116ac0
c01111e3:	68 95 6a 11 c0       	push   $0xc0116a95
c01111e8:	6a 1b                	push   $0x1b
c01111ea:	68 aa 6a 11 c0       	push   $0xc0116aaa
c01111ef:	e8 f1 f2 fe ff       	call   c01004e5 <__panic>
c01111f4:	83 ec 08             	sub    $0x8,%esp
c01111f7:	68 0e 6b 11 c0       	push   $0xc0116b0e
c01111fc:	ff 75 e0             	pushl  -0x20(%ebp)
c01111ff:	e8 62 d1 ff ff       	call   c010e366 <inode_check>
c0111204:	83 c4 10             	add    $0x10,%esp
c0111207:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011120a:	8b 40 3c             	mov    0x3c(%eax),%eax
c011120d:	8b 40 18             	mov    0x18(%eax),%eax
c0111210:	83 ec 0c             	sub    $0xc,%esp
c0111213:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111216:	ff d0                	call   *%eax
c0111218:	83 c4 10             	add    $0x10,%esp
c011121b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011121e:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0111221:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111224:	8b 40 04             	mov    0x4(%eax),%eax
sfs_sync(struct fs *fs) {
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    lock_sfs_fs(sfs);
    {
        list_entry_t *list = &(sfs->inode_list), *le = list;
        while ((le = list_next(le)) != list) {
c0111227:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011122a:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011122d:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111230:	75 80                	jne    c01111b2 <sfs_sync+0x57>
            struct sfs_inode *sin = le2sin(le, inode_link);
            vop_fsync(info2node(sin, sfs_inode));
        }
    }
    unlock_sfs_fs(sfs);
c0111232:	83 ec 0c             	sub    $0xc,%esp
c0111235:	ff 75 ec             	pushl  -0x14(%ebp)
c0111238:	e8 99 e0 ff ff       	call   c010f2d6 <unlock_sfs_fs>
c011123d:	83 c4 10             	add    $0x10,%esp

    int ret;
    if (sfs->super_dirty) {
c0111240:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111243:	8b 40 34             	mov    0x34(%eax),%eax
c0111246:	85 c0                	test   %eax,%eax
c0111248:	74 56                	je     c01112a0 <sfs_sync+0x145>
        sfs->super_dirty = 0;
c011124a:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011124d:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
        if ((ret = sfs_sync_super(sfs)) != 0) {
c0111254:	83 ec 0c             	sub    $0xc,%esp
c0111257:	ff 75 ec             	pushl  -0x14(%ebp)
c011125a:	e8 11 0d 00 00       	call   c0111f70 <sfs_sync_super>
c011125f:	83 c4 10             	add    $0x10,%esp
c0111262:	89 45 dc             	mov    %eax,-0x24(%ebp)
c0111265:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0111269:	74 0f                	je     c011127a <sfs_sync+0x11f>
            sfs->super_dirty = 1;
c011126b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011126e:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c0111275:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111278:	eb 2b                	jmp    c01112a5 <sfs_sync+0x14a>
        }
        if ((ret = sfs_sync_freemap(sfs)) != 0) {
c011127a:	83 ec 0c             	sub    $0xc,%esp
c011127d:	ff 75 ec             	pushl  -0x14(%ebp)
c0111280:	e8 61 0d 00 00       	call   c0111fe6 <sfs_sync_freemap>
c0111285:	83 c4 10             	add    $0x10,%esp
c0111288:	89 45 dc             	mov    %eax,-0x24(%ebp)
c011128b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c011128f:	74 0f                	je     c01112a0 <sfs_sync+0x145>
            sfs->super_dirty = 1;
c0111291:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111294:	c7 40 34 01 00 00 00 	movl   $0x1,0x34(%eax)
            return ret;
c011129b:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011129e:	eb 05                	jmp    c01112a5 <sfs_sync+0x14a>
        }
    }
    return 0;
c01112a0:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01112a5:	c9                   	leave  
c01112a6:	c3                   	ret    

c01112a7 <sfs_get_root>:

/*
 * sfs_get_root - get the root directory inode  from disk (SFS_BLKN_ROOT,1)
 */
static struct inode *
sfs_get_root(struct fs *fs) {
c01112a7:	55                   	push   %ebp
c01112a8:	89 e5                	mov    %esp,%ebp
c01112aa:	83 ec 18             	sub    $0x18,%esp
    struct inode *node;
    int ret;
    if ((ret = sfs_load_inode(fsop_info(fs, sfs), &node, SFS_BLKN_ROOT)) != 0) {
c01112ad:	8b 45 08             	mov    0x8(%ebp),%eax
c01112b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01112b3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01112b7:	74 0a                	je     c01112c3 <sfs_get_root+0x1c>
c01112b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112bc:	8b 40 6c             	mov    0x6c(%eax),%eax
c01112bf:	85 c0                	test   %eax,%eax
c01112c1:	74 16                	je     c01112d9 <sfs_get_root+0x32>
c01112c3:	68 6c 6a 11 c0       	push   $0xc0116a6c
c01112c8:	68 95 6a 11 c0       	push   $0xc0116a95
c01112cd:	6a 36                	push   $0x36
c01112cf:	68 aa 6a 11 c0       	push   $0xc0116aaa
c01112d4:	e8 0c f2 fe ff       	call   c01004e5 <__panic>
c01112d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01112dc:	83 ec 04             	sub    $0x4,%esp
c01112df:	6a 01                	push   $0x1
c01112e1:	8d 55 ec             	lea    -0x14(%ebp),%edx
c01112e4:	52                   	push   %edx
c01112e5:	50                   	push   %eax
c01112e6:	e8 a3 e4 ff ff       	call   c010f78e <sfs_load_inode>
c01112eb:	83 c4 10             	add    $0x10,%esp
c01112ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01112f1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01112f5:	74 14                	je     c011130b <sfs_get_root+0x64>
        panic("load sfs root failed: %e", ret);
c01112f7:	ff 75 f0             	pushl  -0x10(%ebp)
c01112fa:	68 14 6b 11 c0       	push   $0xc0116b14
c01112ff:	6a 37                	push   $0x37
c0111301:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111306:	e8 da f1 fe ff       	call   c01004e5 <__panic>
    }
    return node;
c011130b:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
c011130e:	c9                   	leave  
c011130f:	c3                   	ret    

c0111310 <sfs_unmount>:

/*
 * sfs_unmount - unmount sfs, and free the memorys contain sfs->freemap/sfs_buffer/hash_liskt and sfs itself.
 */
static int
sfs_unmount(struct fs *fs) {
c0111310:	55                   	push   %ebp
c0111311:	89 e5                	mov    %esp,%ebp
c0111313:	83 ec 18             	sub    $0x18,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c0111316:	8b 45 08             	mov    0x8(%ebp),%eax
c0111319:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011131c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111320:	74 0a                	je     c011132c <sfs_unmount+0x1c>
c0111322:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111325:	8b 40 6c             	mov    0x6c(%eax),%eax
c0111328:	85 c0                	test   %eax,%eax
c011132a:	74 16                	je     c0111342 <sfs_unmount+0x32>
c011132c:	68 6c 6a 11 c0       	push   $0xc0116a6c
c0111331:	68 95 6a 11 c0       	push   $0xc0116a95
c0111336:	6a 41                	push   $0x41
c0111338:	68 aa 6a 11 c0       	push   $0xc0116aaa
c011133d:	e8 a3 f1 fe ff       	call   c01004e5 <__panic>
c0111342:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111345:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!list_empty(&(sfs->inode_list))) {
c0111348:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011134b:	83 c0 60             	add    $0x60,%eax
c011134e:	89 45 ec             	mov    %eax,-0x14(%ebp)
 * list_empty - tests whether a list is empty
 * @list:       the list to test.
 * */
static inline bool
list_empty(list_entry_t *list) {
    return list->next == list;
c0111351:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111354:	8b 40 04             	mov    0x4(%eax),%eax
c0111357:	39 45 ec             	cmp    %eax,-0x14(%ebp)
c011135a:	0f 94 c0             	sete   %al
c011135d:	0f b6 c0             	movzbl %al,%eax
c0111360:	85 c0                	test   %eax,%eax
c0111362:	75 07                	jne    c011136b <sfs_unmount+0x5b>
        return -E_BUSY;
c0111364:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
c0111369:	eb 69                	jmp    c01113d4 <sfs_unmount+0xc4>
    }
    assert(!sfs->super_dirty);
c011136b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011136e:	8b 40 34             	mov    0x34(%eax),%eax
c0111371:	85 c0                	test   %eax,%eax
c0111373:	74 16                	je     c011138b <sfs_unmount+0x7b>
c0111375:	68 2d 6b 11 c0       	push   $0xc0116b2d
c011137a:	68 95 6a 11 c0       	push   $0xc0116a95
c011137f:	6a 45                	push   $0x45
c0111381:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111386:	e8 5a f1 fe ff       	call   c01004e5 <__panic>
    bitmap_destroy(sfs->freemap);
c011138b:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011138e:	8b 40 30             	mov    0x30(%eax),%eax
c0111391:	83 ec 0c             	sub    $0xc,%esp
c0111394:	50                   	push   %eax
c0111395:	e8 14 09 00 00       	call   c0111cae <bitmap_destroy>
c011139a:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->sfs_buffer);
c011139d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113a0:	8b 40 38             	mov    0x38(%eax),%eax
c01113a3:	83 ec 0c             	sub    $0xc,%esp
c01113a6:	50                   	push   %eax
c01113a7:	e8 b0 5a ff ff       	call   c0106e5c <kfree>
c01113ac:	83 c4 10             	add    $0x10,%esp
    kfree(sfs->hash_list);
c01113af:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01113b2:	8b 40 68             	mov    0x68(%eax),%eax
c01113b5:	83 ec 0c             	sub    $0xc,%esp
c01113b8:	50                   	push   %eax
c01113b9:	e8 9e 5a ff ff       	call   c0106e5c <kfree>
c01113be:	83 c4 10             	add    $0x10,%esp
    kfree(sfs);
c01113c1:	83 ec 0c             	sub    $0xc,%esp
c01113c4:	ff 75 f0             	pushl  -0x10(%ebp)
c01113c7:	e8 90 5a ff ff       	call   c0106e5c <kfree>
c01113cc:	83 c4 10             	add    $0x10,%esp
    return 0;
c01113cf:	b8 00 00 00 00       	mov    $0x0,%eax
}
c01113d4:	c9                   	leave  
c01113d5:	c3                   	ret    

c01113d6 <sfs_cleanup>:
 * sfs_cleanup - when sfs failed, then should call this function to sync sfs by calling sfs_sync
 *
 * NOTICE: nouse now.
 */
static void
sfs_cleanup(struct fs *fs) {
c01113d6:	55                   	push   %ebp
c01113d7:	89 e5                	mov    %esp,%ebp
c01113d9:	83 ec 28             	sub    $0x28,%esp
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c01113dc:	8b 45 08             	mov    0x8(%ebp),%eax
c01113df:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01113e2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
c01113e6:	74 0a                	je     c01113f2 <sfs_cleanup+0x1c>
c01113e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01113eb:	8b 40 6c             	mov    0x6c(%eax),%eax
c01113ee:	85 c0                	test   %eax,%eax
c01113f0:	74 16                	je     c0111408 <sfs_cleanup+0x32>
c01113f2:	68 6c 6a 11 c0       	push   $0xc0116a6c
c01113f7:	68 95 6a 11 c0       	push   $0xc0116a95
c01113fc:	6a 54                	push   $0x54
c01113fe:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111403:	e8 dd f0 fe ff       	call   c01004e5 <__panic>
c0111408:	8b 45 ec             	mov    -0x14(%ebp),%eax
c011140b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
c011140e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111411:	8b 40 04             	mov    0x4(%eax),%eax
c0111414:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c0111417:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011141a:	8b 40 08             	mov    0x8(%eax),%eax
c011141d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
c0111420:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c0111423:	2b 45 e0             	sub    -0x20(%ebp),%eax
c0111426:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111429:	83 c2 0c             	add    $0xc,%edx
c011142c:	83 ec 0c             	sub    $0xc,%esp
c011142f:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111432:	ff 75 e0             	pushl  -0x20(%ebp)
c0111435:	50                   	push   %eax
c0111436:	52                   	push   %edx
c0111437:	68 40 6b 11 c0       	push   $0xc0116b40
c011143c:	e8 3e ef fe ff       	call   c010037f <cprintf>
c0111441:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c011144b:	eb 1e                	jmp    c011146b <sfs_cleanup+0x95>
        if ((ret = fsop_sync(fs)) == 0) {
c011144d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111450:	8b 40 70             	mov    0x70(%eax),%eax
c0111453:	83 ec 0c             	sub    $0xc,%esp
c0111456:	ff 75 08             	pushl  0x8(%ebp)
c0111459:	ff d0                	call   *%eax
c011145b:	83 c4 10             	add    $0x10,%esp
c011145e:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0111461:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111465:	74 0c                	je     c0111473 <sfs_cleanup+0x9d>
    struct sfs_fs *sfs = fsop_info(fs, sfs);
    uint32_t blocks = sfs->super.blocks, unused_blocks = sfs->super.unused_blocks;
    cprintf("sfs: cleanup: '%s' (%d/%d/%d)\n", sfs->super.info,
            blocks - unused_blocks, unused_blocks, blocks);
    int i, ret;
    for (i = 0; i < 32; i ++) {
c0111467:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c011146b:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c011146f:	7e dc                	jle    c011144d <sfs_cleanup+0x77>
c0111471:	eb 01                	jmp    c0111474 <sfs_cleanup+0x9e>
        if ((ret = fsop_sync(fs)) == 0) {
            break;
c0111473:	90                   	nop
        }
    }
    if (ret != 0) {
c0111474:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c0111478:	74 21                	je     c011149b <sfs_cleanup+0xc5>
        warn("sfs: sync error: '%s': %e.\n", sfs->super.info, ret);
c011147a:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011147d:	83 c0 0c             	add    $0xc,%eax
c0111480:	83 ec 0c             	sub    $0xc,%esp
c0111483:	ff 75 f0             	pushl  -0x10(%ebp)
c0111486:	50                   	push   %eax
c0111487:	68 5f 6b 11 c0       	push   $0xc0116b5f
c011148c:	6a 5f                	push   $0x5f
c011148e:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111493:	e8 d0 f0 fe ff       	call   c0100568 <__warn>
c0111498:	83 c4 20             	add    $0x20,%esp
    }
}
c011149b:	90                   	nop
c011149c:	c9                   	leave  
c011149d:	c3                   	ret    

c011149e <sfs_init_read>:
 *
 *      (1) init iobuf
 *      (2) read dev into iobuf
 */
static int
sfs_init_read(struct device *dev, uint32_t blkno, void *blk_buffer) {
c011149e:	55                   	push   %ebp
c011149f:	89 e5                	mov    %esp,%ebp
c01114a1:	83 ec 28             	sub    $0x28,%esp
    struct iobuf __iob, *iob = iobuf_init(&__iob, blk_buffer, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c01114a4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01114a7:	c1 e0 0c             	shl    $0xc,%eax
c01114aa:	50                   	push   %eax
c01114ab:	68 00 10 00 00       	push   $0x1000
c01114b0:	ff 75 10             	pushl  0x10(%ebp)
c01114b3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c01114b6:	50                   	push   %eax
c01114b7:	e8 99 91 ff ff       	call   c010a655 <iobuf_init>
c01114bc:	83 c4 10             	add    $0x10,%esp
c01114bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(dev, iob, 0);
c01114c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01114c5:	8b 40 10             	mov    0x10(%eax),%eax
c01114c8:	83 ec 04             	sub    $0x4,%esp
c01114cb:	6a 00                	push   $0x0
c01114cd:	ff 75 f4             	pushl  -0xc(%ebp)
c01114d0:	ff 75 08             	pushl  0x8(%ebp)
c01114d3:	ff d0                	call   *%eax
c01114d5:	83 c4 10             	add    $0x10,%esp
}
c01114d8:	c9                   	leave  
c01114d9:	c3                   	ret    

c01114da <sfs_init_freemap>:
 *
 *      (1) get data addr in bitmap
 *      (2) read dev into iobuf
 */
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
c01114da:	55                   	push   %ebp
c01114db:	89 e5                	mov    %esp,%ebp
c01114dd:	83 ec 18             	sub    $0x18,%esp
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
c01114e0:	83 ec 08             	sub    $0x8,%esp
c01114e3:	8d 45 ec             	lea    -0x14(%ebp),%eax
c01114e6:	50                   	push   %eax
c01114e7:	ff 75 0c             	pushl  0xc(%ebp)
c01114ea:	e8 e8 07 00 00       	call   c0111cd7 <bitmap_getdata>
c01114ef:	83 c4 10             	add    $0x10,%esp
c01114f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
c01114f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01114f9:	74 0f                	je     c011150a <sfs_init_freemap+0x30>
c01114fb:	8b 45 14             	mov    0x14(%ebp),%eax
c01114fe:	c1 e0 0c             	shl    $0xc,%eax
c0111501:	89 c2                	mov    %eax,%edx
c0111503:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111506:	39 c2                	cmp    %eax,%edx
c0111508:	74 4a                	je     c0111554 <sfs_init_freemap+0x7a>
c011150a:	68 7c 6b 11 c0       	push   $0xc0116b7c
c011150f:	68 95 6a 11 c0       	push   $0xc0116a95
c0111514:	68 83 00 00 00       	push   $0x83
c0111519:	68 aa 6a 11 c0       	push   $0xc0116aaa
c011151e:	e8 c2 ef fe ff       	call   c01004e5 <__panic>
    while (nblks != 0) {
        int ret;
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
c0111523:	83 ec 04             	sub    $0x4,%esp
c0111526:	ff 75 f4             	pushl  -0xc(%ebp)
c0111529:	ff 75 10             	pushl  0x10(%ebp)
c011152c:	ff 75 08             	pushl  0x8(%ebp)
c011152f:	e8 6a ff ff ff       	call   c011149e <sfs_init_read>
c0111534:	83 c4 10             	add    $0x10,%esp
c0111537:	89 45 f0             	mov    %eax,-0x10(%ebp)
c011153a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c011153e:	74 05                	je     c0111545 <sfs_init_freemap+0x6b>
            return ret;
c0111540:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111543:	eb 1a                	jmp    c011155f <sfs_init_freemap+0x85>
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
c0111545:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111549:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c011154d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
static int
sfs_init_freemap(struct device *dev, struct bitmap *freemap, uint32_t blkno, uint32_t nblks, void *blk_buffer) {
    size_t len;
    void *data = bitmap_getdata(freemap, &len);
    assert(data != NULL && len == nblks * SFS_BLKSIZE);
    while (nblks != 0) {
c0111554:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111558:	75 c9                	jne    c0111523 <sfs_init_freemap+0x49>
        if ((ret = sfs_init_read(dev, blkno, data)) != 0) {
            return ret;
        }
        blkno ++, nblks --, data += SFS_BLKSIZE;
    }
    return 0;
c011155a:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011155f:	c9                   	leave  
c0111560:	c3                   	ret    

c0111561 <sfs_do_mount>:
 *
 * @dev:        the block device contains sfs file system
 * @fs_store:   the fs struct in memroy
 */
static int
sfs_do_mount(struct device *dev, struct fs **fs_store) {
c0111561:	55                   	push   %ebp
c0111562:	89 e5                	mov    %esp,%ebp
c0111564:	83 ec 58             	sub    $0x58,%esp
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_super));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_inode));
    static_assert(SFS_BLKSIZE >= sizeof(struct sfs_disk_entry));

    if (dev->d_blocksize != SFS_BLKSIZE) {
c0111567:	8b 45 08             	mov    0x8(%ebp),%eax
c011156a:	8b 40 04             	mov    0x4(%eax),%eax
c011156d:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111572:	74 0a                	je     c011157e <sfs_do_mount+0x1d>
        return -E_NA_DEV;
c0111574:	b8 f2 ff ff ff       	mov    $0xfffffff2,%eax
c0111579:	e9 d4 03 00 00       	jmp    c0111952 <sfs_do_mount+0x3f1>
    }

    /* allocate fs structure */
    struct fs *fs;
    if ((fs = alloc_fs(sfs)) == NULL) {
c011157e:	83 ec 0c             	sub    $0xc,%esp
c0111581:	6a 00                	push   $0x0
c0111583:	e8 a0 ce ff ff       	call   c010e428 <__alloc_fs>
c0111588:	83 c4 10             	add    $0x10,%esp
c011158b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c011158e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0111592:	75 0a                	jne    c011159e <sfs_do_mount+0x3d>
        return -E_NO_MEM;
c0111594:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
c0111599:	e9 b4 03 00 00       	jmp    c0111952 <sfs_do_mount+0x3f1>
    }
    struct sfs_fs *sfs = fsop_info(fs, sfs);
c011159e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01115a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01115a4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01115a8:	74 0a                	je     c01115b4 <sfs_do_mount+0x53>
c01115aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01115ad:	8b 40 6c             	mov    0x6c(%eax),%eax
c01115b0:	85 c0                	test   %eax,%eax
c01115b2:	74 19                	je     c01115cd <sfs_do_mount+0x6c>
c01115b4:	68 6c 6a 11 c0       	push   $0xc0116a6c
c01115b9:	68 95 6a 11 c0       	push   $0xc0116a95
c01115be:	68 a3 00 00 00       	push   $0xa3
c01115c3:	68 aa 6a 11 c0       	push   $0xc0116aaa
c01115c8:	e8 18 ef fe ff       	call   c01004e5 <__panic>
c01115cd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01115d0:	89 45 e0             	mov    %eax,-0x20(%ebp)
    sfs->dev = dev;
c01115d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01115d6:	8b 55 08             	mov    0x8(%ebp),%edx
c01115d9:	89 50 2c             	mov    %edx,0x2c(%eax)

    int ret = -E_NO_MEM;
c01115dc:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
c01115e3:	83 ec 0c             	sub    $0xc,%esp
c01115e6:	68 00 10 00 00       	push   $0x1000
c01115eb:	e8 54 58 ff ff       	call   c0106e44 <kmalloc>
c01115f0:	83 c4 10             	add    $0x10,%esp
c01115f3:	89 45 dc             	mov    %eax,-0x24(%ebp)
c01115f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01115f9:	8b 55 dc             	mov    -0x24(%ebp),%edx
c01115fc:	89 50 38             	mov    %edx,0x38(%eax)
c01115ff:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111602:	8b 40 38             	mov    0x38(%eax),%eax
c0111605:	85 c0                	test   %eax,%eax
c0111607:	0f 84 33 03 00 00    	je     c0111940 <sfs_do_mount+0x3df>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
c011160d:	83 ec 04             	sub    $0x4,%esp
c0111610:	ff 75 dc             	pushl  -0x24(%ebp)
c0111613:	6a 00                	push   $0x0
c0111615:	ff 75 08             	pushl  0x8(%ebp)
c0111618:	e8 81 fe ff ff       	call   c011149e <sfs_init_read>
c011161d:	83 c4 10             	add    $0x10,%esp
c0111620:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111623:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111627:	0f 85 ff 02 00 00    	jne    c011192c <sfs_do_mount+0x3cb>
        goto failed_cleanup_sfs_buffer;
    }

    ret = -E_INVAL;
c011162d:	c7 45 f4 fd ff ff ff 	movl   $0xfffffffd,-0xc(%ebp)

    struct sfs_super *super = sfs_buffer;
c0111634:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0111637:	89 45 d8             	mov    %eax,-0x28(%ebp)
    if (super->magic != SFS_MAGIC) {
c011163a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011163d:	8b 00                	mov    (%eax),%eax
c011163f:	3d 2a be 8d 2f       	cmp    $0x2f8dbe2a,%eax
c0111644:	74 20                	je     c0111666 <sfs_do_mount+0x105>
        cprintf("sfs: wrong magic in superblock. (%08x should be %08x).\n",
c0111646:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111649:	8b 00                	mov    (%eax),%eax
c011164b:	83 ec 04             	sub    $0x4,%esp
c011164e:	68 2a be 8d 2f       	push   $0x2f8dbe2a
c0111653:	50                   	push   %eax
c0111654:	68 a8 6b 11 c0       	push   $0xc0116ba8
c0111659:	e8 21 ed fe ff       	call   c010037f <cprintf>
c011165e:	83 c4 10             	add    $0x10,%esp
                super->magic, SFS_MAGIC);
        goto failed_cleanup_sfs_buffer;
c0111661:	e9 ca 02 00 00       	jmp    c0111930 <sfs_do_mount+0x3cf>
    }
    if (super->blocks > dev->d_blocks) {
c0111666:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0111669:	8b 50 04             	mov    0x4(%eax),%edx
c011166c:	8b 45 08             	mov    0x8(%ebp),%eax
c011166f:	8b 00                	mov    (%eax),%eax
c0111671:	39 c2                	cmp    %eax,%edx
c0111673:	76 22                	jbe    c0111697 <sfs_do_mount+0x136>
        cprintf("sfs: fs has %u blocks, device has %u blocks.\n",
c0111675:	8b 45 08             	mov    0x8(%ebp),%eax
c0111678:	8b 10                	mov    (%eax),%edx
c011167a:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011167d:	8b 40 04             	mov    0x4(%eax),%eax
c0111680:	83 ec 04             	sub    $0x4,%esp
c0111683:	52                   	push   %edx
c0111684:	50                   	push   %eax
c0111685:	68 e0 6b 11 c0       	push   $0xc0116be0
c011168a:	e8 f0 ec fe ff       	call   c010037f <cprintf>
c011168f:	83 c4 10             	add    $0x10,%esp
                super->blocks, dev->d_blocks);
        goto failed_cleanup_sfs_buffer;
c0111692:	e9 99 02 00 00       	jmp    c0111930 <sfs_do_mount+0x3cf>
    }
    super->info[SFS_MAX_INFO_LEN] = '\0';
c0111697:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011169a:	c6 40 2b 00          	movb   $0x0,0x2b(%eax)
    sfs->super = *super;
c011169e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01116a1:	8b 55 d8             	mov    -0x28(%ebp),%edx
c01116a4:	8b 0a                	mov    (%edx),%ecx
c01116a6:	89 08                	mov    %ecx,(%eax)
c01116a8:	8b 4a 04             	mov    0x4(%edx),%ecx
c01116ab:	89 48 04             	mov    %ecx,0x4(%eax)
c01116ae:	8b 4a 08             	mov    0x8(%edx),%ecx
c01116b1:	89 48 08             	mov    %ecx,0x8(%eax)
c01116b4:	8b 4a 0c             	mov    0xc(%edx),%ecx
c01116b7:	89 48 0c             	mov    %ecx,0xc(%eax)
c01116ba:	8b 4a 10             	mov    0x10(%edx),%ecx
c01116bd:	89 48 10             	mov    %ecx,0x10(%eax)
c01116c0:	8b 4a 14             	mov    0x14(%edx),%ecx
c01116c3:	89 48 14             	mov    %ecx,0x14(%eax)
c01116c6:	8b 4a 18             	mov    0x18(%edx),%ecx
c01116c9:	89 48 18             	mov    %ecx,0x18(%eax)
c01116cc:	8b 4a 1c             	mov    0x1c(%edx),%ecx
c01116cf:	89 48 1c             	mov    %ecx,0x1c(%eax)
c01116d2:	8b 4a 20             	mov    0x20(%edx),%ecx
c01116d5:	89 48 20             	mov    %ecx,0x20(%eax)
c01116d8:	8b 4a 24             	mov    0x24(%edx),%ecx
c01116db:	89 48 24             	mov    %ecx,0x24(%eax)
c01116de:	8b 52 28             	mov    0x28(%edx),%edx
c01116e1:	89 50 28             	mov    %edx,0x28(%eax)

    ret = -E_NO_MEM;
c01116e4:	c7 45 f4 fc ff ff ff 	movl   $0xfffffffc,-0xc(%ebp)

    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
c01116eb:	83 ec 0c             	sub    $0xc,%esp
c01116ee:	68 00 20 00 00       	push   $0x2000
c01116f3:	e8 4c 57 ff ff       	call   c0106e44 <kmalloc>
c01116f8:	83 c4 10             	add    $0x10,%esp
c01116fb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
c01116fe:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111701:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c0111704:	89 50 68             	mov    %edx,0x68(%eax)
c0111707:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011170a:	8b 40 68             	mov    0x68(%eax),%eax
c011170d:	85 c0                	test   %eax,%eax
c011170f:	0f 84 1a 02 00 00    	je     c011192f <sfs_do_mount+0x3ce>
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111715:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c011171c:	eb 2a                	jmp    c0111748 <sfs_do_mount+0x1e7>
        list_init(hash_list + i);
c011171e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111721:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
c0111728:	8b 45 d4             	mov    -0x2c(%ebp),%eax
c011172b:	01 d0                	add    %edx,%eax
c011172d:	89 45 b0             	mov    %eax,-0x50(%ebp)
 * list_init - initialize a new entry
 * @elm:        new entry to be initialized
 * */
static inline void
list_init(list_entry_t *elm) {
    elm->prev = elm->next = elm;
c0111730:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0111733:	8b 55 b0             	mov    -0x50(%ebp),%edx
c0111736:	89 50 04             	mov    %edx,0x4(%eax)
c0111739:	8b 45 b0             	mov    -0x50(%ebp),%eax
c011173c:	8b 50 04             	mov    0x4(%eax),%edx
c011173f:	8b 45 b0             	mov    -0x50(%ebp),%eax
c0111742:	89 10                	mov    %edx,(%eax)
    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
    }
    for (i = 0; i < SFS_HLIST_SIZE; i ++) {
c0111744:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111748:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
c011174f:	76 cd                	jbe    c011171e <sfs_do_mount+0x1bd>
        list_init(hash_list + i);
    }

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
c0111751:	c7 45 cc 00 80 00 00 	movl   $0x8000,-0x34(%ebp)
c0111758:	8b 45 d8             	mov    -0x28(%ebp),%eax
c011175b:	8b 50 04             	mov    0x4(%eax),%edx
c011175e:	8b 45 cc             	mov    -0x34(%ebp),%eax
c0111761:	01 d0                	add    %edx,%eax
c0111763:	83 e8 01             	sub    $0x1,%eax
c0111766:	89 45 c8             	mov    %eax,-0x38(%ebp)
c0111769:	8b 45 c8             	mov    -0x38(%ebp),%eax
c011176c:	ba 00 00 00 00       	mov    $0x0,%edx
c0111771:	f7 75 cc             	divl   -0x34(%ebp)
c0111774:	8b 45 c8             	mov    -0x38(%ebp),%eax
c0111777:	29 d0                	sub    %edx,%eax
c0111779:	89 45 c4             	mov    %eax,-0x3c(%ebp)
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
c011177c:	83 ec 0c             	sub    $0xc,%esp
c011177f:	ff 75 c4             	pushl  -0x3c(%ebp)
c0111782:	e8 e8 01 00 00       	call   c011196f <bitmap_create>
c0111787:	83 c4 10             	add    $0x10,%esp
c011178a:	89 45 c0             	mov    %eax,-0x40(%ebp)
c011178d:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111790:	8b 55 c0             	mov    -0x40(%ebp),%edx
c0111793:	89 50 30             	mov    %edx,0x30(%eax)
c0111796:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111799:	8b 40 30             	mov    0x30(%eax),%eax
c011179c:	85 c0                	test   %eax,%eax
c011179e:	0f 84 77 01 00 00    	je     c011191b <sfs_do_mount+0x3ba>
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
c01117a4:	c7 45 bc 00 80 00 00 	movl   $0x8000,-0x44(%ebp)
c01117ab:	8b 45 d8             	mov    -0x28(%ebp),%eax
c01117ae:	8b 50 04             	mov    0x4(%eax),%edx
c01117b1:	8b 45 bc             	mov    -0x44(%ebp),%eax
c01117b4:	01 d0                	add    %edx,%eax
c01117b6:	83 e8 01             	sub    $0x1,%eax
c01117b9:	ba 00 00 00 00       	mov    $0x0,%edx
c01117be:	f7 75 bc             	divl   -0x44(%ebp)
c01117c1:	89 45 b8             	mov    %eax,-0x48(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
c01117c4:	83 ec 0c             	sub    $0xc,%esp
c01117c7:	ff 75 dc             	pushl  -0x24(%ebp)
c01117ca:	ff 75 b8             	pushl  -0x48(%ebp)
c01117cd:	6a 02                	push   $0x2
c01117cf:	ff 75 c0             	pushl  -0x40(%ebp)
c01117d2:	ff 75 08             	pushl  0x8(%ebp)
c01117d5:	e8 00 fd ff ff       	call   c01114da <sfs_init_freemap>
c01117da:	83 c4 20             	add    $0x20,%esp
c01117dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01117e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c01117e4:	0f 85 20 01 00 00    	jne    c011190a <sfs_do_mount+0x3a9>
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
c01117ea:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01117ed:	8b 40 04             	mov    0x4(%eax),%eax
c01117f0:	89 45 b4             	mov    %eax,-0x4c(%ebp)
c01117f3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (i = 0; i < freemap_size_nbits; i ++) {
c01117fa:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111801:	eb 1d                	jmp    c0111820 <sfs_do_mount+0x2bf>
        if (bitmap_test(freemap, i)) {
c0111803:	83 ec 08             	sub    $0x8,%esp
c0111806:	ff 75 f0             	pushl  -0x10(%ebp)
c0111809:	ff 75 c0             	pushl  -0x40(%ebp)
c011180c:	e8 23 04 00 00       	call   c0111c34 <bitmap_test>
c0111811:	83 c4 10             	add    $0x10,%esp
c0111814:	85 c0                	test   %eax,%eax
c0111816:	74 04                	je     c011181c <sfs_do_mount+0x2bb>
            unused_blocks ++;
c0111818:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
    }

    uint32_t blocks = sfs->super.blocks, unused_blocks = 0;
    for (i = 0; i < freemap_size_nbits; i ++) {
c011181c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111820:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111823:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
c0111826:	72 db                	jb     c0111803 <sfs_do_mount+0x2a2>
        if (bitmap_test(freemap, i)) {
            unused_blocks ++;
        }
    }
    assert(unused_blocks == sfs->super.unused_blocks);
c0111828:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011182b:	8b 40 08             	mov    0x8(%eax),%eax
c011182e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0111831:	74 19                	je     c011184c <sfs_do_mount+0x2eb>
c0111833:	68 10 6c 11 c0       	push   $0xc0116c10
c0111838:	68 95 6a 11 c0       	push   $0xc0116a95
c011183d:	68 e0 00 00 00       	push   $0xe0
c0111842:	68 aa 6a 11 c0       	push   $0xc0116aaa
c0111847:	e8 99 ec fe ff       	call   c01004e5 <__panic>

    /* and other fields */
    sfs->super_dirty = 0;
c011184c:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011184f:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    sem_init(&(sfs->fs_sem), 1);
c0111856:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111859:	83 c0 3c             	add    $0x3c,%eax
c011185c:	83 ec 08             	sub    $0x8,%esp
c011185f:	6a 01                	push   $0x1
c0111861:	50                   	push   %eax
c0111862:	e8 ab 74 ff ff       	call   c0108d12 <sem_init>
c0111867:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->io_sem), 1);
c011186a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c011186d:	83 c0 48             	add    $0x48,%eax
c0111870:	83 ec 08             	sub    $0x8,%esp
c0111873:	6a 01                	push   $0x1
c0111875:	50                   	push   %eax
c0111876:	e8 97 74 ff ff       	call   c0108d12 <sem_init>
c011187b:	83 c4 10             	add    $0x10,%esp
    sem_init(&(sfs->mutex_sem), 1);
c011187e:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111881:	83 c0 54             	add    $0x54,%eax
c0111884:	83 ec 08             	sub    $0x8,%esp
c0111887:	6a 01                	push   $0x1
c0111889:	50                   	push   %eax
c011188a:	e8 83 74 ff ff       	call   c0108d12 <sem_init>
c011188f:	83 c4 10             	add    $0x10,%esp
    list_init(&(sfs->inode_list));
c0111892:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111895:	83 c0 60             	add    $0x60,%eax
c0111898:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011189b:	8b 45 d0             	mov    -0x30(%ebp),%eax
c011189e:	8b 55 d0             	mov    -0x30(%ebp),%edx
c01118a1:	89 50 04             	mov    %edx,0x4(%eax)
c01118a4:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01118a7:	8b 50 04             	mov    0x4(%eax),%edx
c01118aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01118ad:	89 10                	mov    %edx,(%eax)
    cprintf("sfs: mount: '%s' (%d/%d/%d)\n", sfs->super.info,
c01118af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
c01118b2:	2b 45 ec             	sub    -0x14(%ebp),%eax
c01118b5:	8b 55 e0             	mov    -0x20(%ebp),%edx
c01118b8:	83 c2 0c             	add    $0xc,%edx
c01118bb:	83 ec 0c             	sub    $0xc,%esp
c01118be:	ff 75 b4             	pushl  -0x4c(%ebp)
c01118c1:	ff 75 ec             	pushl  -0x14(%ebp)
c01118c4:	50                   	push   %eax
c01118c5:	52                   	push   %edx
c01118c6:	68 3a 6c 11 c0       	push   $0xc0116c3a
c01118cb:	e8 af ea fe ff       	call   c010037f <cprintf>
c01118d0:	83 c4 20             	add    $0x20,%esp
            blocks - unused_blocks, unused_blocks, blocks);

    /* link addr of sync/get_root/unmount/cleanup funciton  fs's function pointers*/
    fs->fs_sync = sfs_sync;
c01118d3:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118d6:	c7 40 70 5b 11 11 c0 	movl   $0xc011115b,0x70(%eax)
    fs->fs_get_root = sfs_get_root;
c01118dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118e0:	c7 40 74 a7 12 11 c0 	movl   $0xc01112a7,0x74(%eax)
    fs->fs_unmount = sfs_unmount;
c01118e7:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118ea:	c7 40 78 10 13 11 c0 	movl   $0xc0111310,0x78(%eax)
    fs->fs_cleanup = sfs_cleanup;
c01118f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01118f4:	c7 40 7c d6 13 11 c0 	movl   $0xc01113d6,0x7c(%eax)
    *fs_store = fs;
c01118fb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01118fe:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111901:	89 10                	mov    %edx,(%eax)
    return 0;
c0111903:	b8 00 00 00 00       	mov    $0x0,%eax
c0111908:	eb 48                	jmp    c0111952 <sfs_do_mount+0x3f1>
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
    }
    uint32_t freemap_size_nblks = sfs_freemap_blocks(super);
    if ((ret = sfs_init_freemap(dev, freemap, SFS_BLKN_FREEMAP, freemap_size_nblks, sfs_buffer)) != 0) {
        goto failed_cleanup_freemap;
c011190a:	90                   	nop
    fs->fs_cleanup = sfs_cleanup;
    *fs_store = fs;
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
c011190b:	83 ec 0c             	sub    $0xc,%esp
c011190e:	ff 75 c0             	pushl  -0x40(%ebp)
c0111911:	e8 98 03 00 00       	call   c0111cae <bitmap_destroy>
c0111916:	83 c4 10             	add    $0x10,%esp
c0111919:	eb 01                	jmp    c011191c <sfs_do_mount+0x3bb>

    /* load and check freemap */
    struct bitmap *freemap;
    uint32_t freemap_size_nbits = sfs_freemap_bits(super);
    if ((sfs->freemap = freemap = bitmap_create(freemap_size_nbits)) == NULL) {
        goto failed_cleanup_hash_list;
c011191b:	90                   	nop
    return 0;

failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
c011191c:	83 ec 0c             	sub    $0xc,%esp
c011191f:	ff 75 d4             	pushl  -0x2c(%ebp)
c0111922:	e8 35 55 ff ff       	call   c0106e5c <kfree>
c0111927:	83 c4 10             	add    $0x10,%esp
c011192a:	eb 04                	jmp    c0111930 <sfs_do_mount+0x3cf>
        goto failed_cleanup_fs;
    }

    /* load and check superblock */
    if ((ret = sfs_init_read(dev, SFS_BLKN_SUPER, sfs_buffer)) != 0) {
        goto failed_cleanup_sfs_buffer;
c011192c:	90                   	nop
c011192d:	eb 01                	jmp    c0111930 <sfs_do_mount+0x3cf>
    uint32_t i;

    /* alloc and initialize hash list */
    list_entry_t *hash_list;
    if ((sfs->hash_list = hash_list = kmalloc(sizeof(list_entry_t) * SFS_HLIST_SIZE)) == NULL) {
        goto failed_cleanup_sfs_buffer;
c011192f:	90                   	nop
failed_cleanup_freemap:
    bitmap_destroy(freemap);
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
c0111930:	83 ec 0c             	sub    $0xc,%esp
c0111933:	ff 75 dc             	pushl  -0x24(%ebp)
c0111936:	e8 21 55 ff ff       	call   c0106e5c <kfree>
c011193b:	83 c4 10             	add    $0x10,%esp
c011193e:	eb 01                	jmp    c0111941 <sfs_do_mount+0x3e0>

    int ret = -E_NO_MEM;

    void *sfs_buffer;
    if ((sfs->sfs_buffer = sfs_buffer = kmalloc(SFS_BLKSIZE)) == NULL) {
        goto failed_cleanup_fs;
c0111940:	90                   	nop
failed_cleanup_hash_list:
    kfree(hash_list);
failed_cleanup_sfs_buffer:
    kfree(sfs_buffer);
failed_cleanup_fs:
    kfree(fs);
c0111941:	83 ec 0c             	sub    $0xc,%esp
c0111944:	ff 75 e8             	pushl  -0x18(%ebp)
c0111947:	e8 10 55 ff ff       	call   c0106e5c <kfree>
c011194c:	83 c4 10             	add    $0x10,%esp
    return ret;
c011194f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111952:	c9                   	leave  
c0111953:	c3                   	ret    

c0111954 <sfs_mount>:

int
sfs_mount(const char *devname) {
c0111954:	55                   	push   %ebp
c0111955:	89 e5                	mov    %esp,%ebp
c0111957:	83 ec 08             	sub    $0x8,%esp
    return vfs_mount(devname, sfs_do_mount);
c011195a:	83 ec 08             	sub    $0x8,%esp
c011195d:	68 61 15 11 c0       	push   $0xc0111561
c0111962:	ff 75 08             	pushl  0x8(%ebp)
c0111965:	e8 6f bb ff ff       	call   c010d4d9 <vfs_mount>
c011196a:	83 c4 10             	add    $0x10,%esp
}
c011196d:	c9                   	leave  
c011196e:	c3                   	ret    

c011196f <bitmap_create>:
    WORD_TYPE *map;
};

// bitmap_create - allocate a new bitmap object.
struct bitmap *
bitmap_create(uint32_t nbits) {
c011196f:	55                   	push   %ebp
c0111970:	89 e5                	mov    %esp,%ebp
c0111972:	56                   	push   %esi
c0111973:	53                   	push   %ebx
c0111974:	83 ec 20             	sub    $0x20,%esp
    static_assert(WORD_BITS != 0);
    assert(nbits != 0 && nbits + WORD_BITS > nbits);
c0111977:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c011197b:	74 0b                	je     c0111988 <bitmap_create+0x19>
c011197d:	8b 45 08             	mov    0x8(%ebp),%eax
c0111980:	83 c0 20             	add    $0x20,%eax
c0111983:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111986:	77 16                	ja     c011199e <bitmap_create+0x2f>
c0111988:	68 58 6c 11 c0       	push   $0xc0116c58
c011198d:	68 80 6c 11 c0       	push   $0xc0116c80
c0111992:	6a 15                	push   $0x15
c0111994:	68 95 6c 11 c0       	push   $0xc0116c95
c0111999:	e8 47 eb fe ff       	call   c01004e5 <__panic>

    struct bitmap *bitmap;
    if ((bitmap = kmalloc(sizeof(struct bitmap))) == NULL) {
c011199e:	83 ec 0c             	sub    $0xc,%esp
c01119a1:	6a 0c                	push   $0xc
c01119a3:	e8 9c 54 ff ff       	call   c0106e44 <kmalloc>
c01119a8:	83 c4 10             	add    $0x10,%esp
c01119ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01119ae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01119b2:	75 0a                	jne    c01119be <bitmap_create+0x4f>
        return NULL;
c01119b4:	b8 00 00 00 00       	mov    $0x0,%eax
c01119b9:	e9 28 01 00 00       	jmp    c0111ae6 <bitmap_create+0x177>
    }

    uint32_t nwords = ROUNDUP_DIV(nbits, WORD_BITS);
c01119be:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
c01119c5:	8b 55 08             	mov    0x8(%ebp),%edx
c01119c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01119cb:	01 d0                	add    %edx,%eax
c01119cd:	83 e8 01             	sub    $0x1,%eax
c01119d0:	ba 00 00 00 00       	mov    $0x0,%edx
c01119d5:	f7 75 ec             	divl   -0x14(%ebp)
c01119d8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    WORD_TYPE *map;
    if ((map = kmalloc(sizeof(WORD_TYPE) * nwords)) == NULL) {
c01119db:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01119de:	c1 e0 02             	shl    $0x2,%eax
c01119e1:	83 ec 0c             	sub    $0xc,%esp
c01119e4:	50                   	push   %eax
c01119e5:	e8 5a 54 ff ff       	call   c0106e44 <kmalloc>
c01119ea:	83 c4 10             	add    $0x10,%esp
c01119ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01119f0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c01119f4:	75 18                	jne    c0111a0e <bitmap_create+0x9f>
        kfree(bitmap);
c01119f6:	83 ec 0c             	sub    $0xc,%esp
c01119f9:	ff 75 f0             	pushl  -0x10(%ebp)
c01119fc:	e8 5b 54 ff ff       	call   c0106e5c <kfree>
c0111a01:	83 c4 10             	add    $0x10,%esp
        return NULL;
c0111a04:	b8 00 00 00 00       	mov    $0x0,%eax
c0111a09:	e9 d8 00 00 00       	jmp    c0111ae6 <bitmap_create+0x177>
    }

    bitmap->nbits = nbits, bitmap->nwords = nwords;
c0111a0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a11:	8b 55 08             	mov    0x8(%ebp),%edx
c0111a14:	89 10                	mov    %edx,(%eax)
c0111a16:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a19:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0111a1c:	89 50 04             	mov    %edx,0x4(%eax)
    bitmap->map = memset(map, 0xFF, sizeof(WORD_TYPE) * nwords);
c0111a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a22:	c1 e0 02             	shl    $0x2,%eax
c0111a25:	83 ec 04             	sub    $0x4,%esp
c0111a28:	50                   	push   %eax
c0111a29:	6a ff                	push   $0xffffffff
c0111a2b:	ff 75 e4             	pushl  -0x1c(%ebp)
c0111a2e:	e8 d2 09 00 00       	call   c0112405 <memset>
c0111a33:	83 c4 10             	add    $0x10,%esp
c0111a36:	89 c2                	mov    %eax,%edx
c0111a38:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111a3b:	89 50 08             	mov    %edx,0x8(%eax)

    /* mark any leftover bits at the end in use(0) */
    if (nbits != nwords * WORD_BITS) {
c0111a3e:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a41:	c1 e0 05             	shl    $0x5,%eax
c0111a44:	3b 45 08             	cmp    0x8(%ebp),%eax
c0111a47:	0f 84 96 00 00 00    	je     c0111ae3 <bitmap_create+0x174>
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;
c0111a4d:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0111a50:	83 e8 01             	sub    $0x1,%eax
c0111a53:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0111a56:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0111a59:	c1 e0 05             	shl    $0x5,%eax
c0111a5c:	89 c2                	mov    %eax,%edx
c0111a5e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a61:	29 d0                	sub    %edx,%eax
c0111a63:	89 45 f4             	mov    %eax,-0xc(%ebp)

        assert(nbits / WORD_BITS == ix);
c0111a66:	8b 45 08             	mov    0x8(%ebp),%eax
c0111a69:	c1 e8 05             	shr    $0x5,%eax
c0111a6c:	3b 45 e0             	cmp    -0x20(%ebp),%eax
c0111a6f:	74 16                	je     c0111a87 <bitmap_create+0x118>
c0111a71:	68 aa 6c 11 c0       	push   $0xc0116caa
c0111a76:	68 80 6c 11 c0       	push   $0xc0116c80
c0111a7b:	6a 2a                	push   $0x2a
c0111a7d:	68 95 6c 11 c0       	push   $0xc0116c95
c0111a82:	e8 5e ea fe ff       	call   c01004e5 <__panic>
        assert(overbits > 0 && overbits < WORD_BITS);
c0111a87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111a8b:	74 06                	je     c0111a93 <bitmap_create+0x124>
c0111a8d:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111a91:	76 4a                	jbe    c0111add <bitmap_create+0x16e>
c0111a93:	68 c4 6c 11 c0       	push   $0xc0116cc4
c0111a98:	68 80 6c 11 c0       	push   $0xc0116c80
c0111a9d:	6a 2b                	push   $0x2b
c0111a9f:	68 95 6c 11 c0       	push   $0xc0116c95
c0111aa4:	e8 3c ea fe ff       	call   c01004e5 <__panic>

        for (; overbits < WORD_BITS; overbits ++) {
            bitmap->map[ix] ^= (1 << overbits);
c0111aa9:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aac:	8b 40 08             	mov    0x8(%eax),%eax
c0111aaf:	8b 55 e0             	mov    -0x20(%ebp),%edx
c0111ab2:	c1 e2 02             	shl    $0x2,%edx
c0111ab5:	01 c2                	add    %eax,%edx
c0111ab7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111aba:	8b 40 08             	mov    0x8(%eax),%eax
c0111abd:	8b 4d e0             	mov    -0x20(%ebp),%ecx
c0111ac0:	c1 e1 02             	shl    $0x2,%ecx
c0111ac3:	01 c8                	add    %ecx,%eax
c0111ac5:	8b 18                	mov    (%eax),%ebx
c0111ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111aca:	be 01 00 00 00       	mov    $0x1,%esi
c0111acf:	89 c1                	mov    %eax,%ecx
c0111ad1:	d3 e6                	shl    %cl,%esi
c0111ad3:	89 f0                	mov    %esi,%eax
c0111ad5:	31 d8                	xor    %ebx,%eax
c0111ad7:	89 02                	mov    %eax,(%edx)
        uint32_t ix = nwords - 1, overbits = nbits - ix * WORD_BITS;

        assert(nbits / WORD_BITS == ix);
        assert(overbits > 0 && overbits < WORD_BITS);

        for (; overbits < WORD_BITS; overbits ++) {
c0111ad9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111add:	83 7d f4 1f          	cmpl   $0x1f,-0xc(%ebp)
c0111ae1:	76 c6                	jbe    c0111aa9 <bitmap_create+0x13a>
            bitmap->map[ix] ^= (1 << overbits);
        }
    }
    return bitmap;
c0111ae3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
c0111ae6:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0111ae9:	5b                   	pop    %ebx
c0111aea:	5e                   	pop    %esi
c0111aeb:	5d                   	pop    %ebp
c0111aec:	c3                   	ret    

c0111aed <bitmap_alloc>:

// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
c0111aed:	55                   	push   %ebp
c0111aee:	89 e5                	mov    %esp,%ebp
c0111af0:	83 ec 28             	sub    $0x28,%esp
    WORD_TYPE *map = bitmap->map;
c0111af3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111af6:	8b 40 08             	mov    0x8(%eax),%eax
c0111af9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    uint32_t ix, offset, nwords = bitmap->nwords;
c0111afc:	8b 45 08             	mov    0x8(%ebp),%eax
c0111aff:	8b 40 04             	mov    0x4(%eax),%eax
c0111b02:	89 45 e8             	mov    %eax,-0x18(%ebp)
    for (ix = 0; ix < nwords; ix ++) {
c0111b05:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
c0111b0c:	e9 ad 00 00 00       	jmp    c0111bbe <bitmap_alloc+0xd1>
        if (map[ix] != 0) {
c0111b11:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b14:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111b1b:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b1e:	01 d0                	add    %edx,%eax
c0111b20:	8b 00                	mov    (%eax),%eax
c0111b22:	85 c0                	test   %eax,%eax
c0111b24:	0f 84 90 00 00 00    	je     c0111bba <bitmap_alloc+0xcd>
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111b2a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
c0111b31:	eb 6b                	jmp    c0111b9e <bitmap_alloc+0xb1>
                WORD_TYPE mask = (1 << offset);
c0111b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b36:	ba 01 00 00 00       	mov    $0x1,%edx
c0111b3b:	89 c1                	mov    %eax,%ecx
c0111b3d:	d3 e2                	shl    %cl,%edx
c0111b3f:	89 d0                	mov    %edx,%eax
c0111b41:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (map[ix] & mask) {
c0111b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b47:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111b4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b51:	01 d0                	add    %edx,%eax
c0111b53:	8b 00                	mov    (%eax),%eax
c0111b55:	23 45 e4             	and    -0x1c(%ebp),%eax
c0111b58:	85 c0                	test   %eax,%eax
c0111b5a:	74 3e                	je     c0111b9a <bitmap_alloc+0xad>
                    map[ix] ^= mask;
c0111b5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b5f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111b66:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b69:	01 c2                	add    %eax,%edx
c0111b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b6e:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
c0111b75:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0111b78:	01 c8                	add    %ecx,%eax
c0111b7a:	8b 00                	mov    (%eax),%eax
c0111b7c:	33 45 e4             	xor    -0x1c(%ebp),%eax
c0111b7f:	89 02                	mov    %eax,(%edx)
                    *index_store = ix * WORD_BITS + offset;
c0111b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111b84:	c1 e0 05             	shl    $0x5,%eax
c0111b87:	89 c2                	mov    %eax,%edx
c0111b89:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111b8c:	01 c2                	add    %eax,%edx
c0111b8e:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111b91:	89 10                	mov    %edx,(%eax)
                    return 0;
c0111b93:	b8 00 00 00 00       	mov    $0x0,%eax
c0111b98:	eb 35                	jmp    c0111bcf <bitmap_alloc+0xe2>
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
        if (map[ix] != 0) {
            for (offset = 0; offset < WORD_BITS; offset ++) {
c0111b9a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
c0111b9e:	83 7d f0 1f          	cmpl   $0x1f,-0x10(%ebp)
c0111ba2:	76 8f                	jbe    c0111b33 <bitmap_alloc+0x46>
                    map[ix] ^= mask;
                    *index_store = ix * WORD_BITS + offset;
                    return 0;
                }
            }
            assert(0);
c0111ba4:	68 e9 6c 11 c0       	push   $0xc0116ce9
c0111ba9:	68 80 6c 11 c0       	push   $0xc0116c80
c0111bae:	6a 43                	push   $0x43
c0111bb0:	68 95 6c 11 c0       	push   $0xc0116c95
c0111bb5:	e8 2b e9 fe ff       	call   c01004e5 <__panic>
// bitmap_alloc - locate a cleared bit, set it, and return its index.
int
bitmap_alloc(struct bitmap *bitmap, uint32_t *index_store) {
    WORD_TYPE *map = bitmap->map;
    uint32_t ix, offset, nwords = bitmap->nwords;
    for (ix = 0; ix < nwords; ix ++) {
c0111bba:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
c0111bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111bc1:	3b 45 e8             	cmp    -0x18(%ebp),%eax
c0111bc4:	0f 82 47 ff ff ff    	jb     c0111b11 <bitmap_alloc+0x24>
                }
            }
            assert(0);
        }
    }
    return -E_NO_MEM;
c0111bca:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
}
c0111bcf:	c9                   	leave  
c0111bd0:	c3                   	ret    

c0111bd1 <bitmap_translate>:

// bitmap_translate - according index, get the related word and mask
static void
bitmap_translate(struct bitmap *bitmap, uint32_t index, WORD_TYPE **word, WORD_TYPE *mask) {
c0111bd1:	55                   	push   %ebp
c0111bd2:	89 e5                	mov    %esp,%ebp
c0111bd4:	83 ec 18             	sub    $0x18,%esp
    assert(index < bitmap->nbits);
c0111bd7:	8b 45 08             	mov    0x8(%ebp),%eax
c0111bda:	8b 00                	mov    (%eax),%eax
c0111bdc:	3b 45 0c             	cmp    0xc(%ebp),%eax
c0111bdf:	77 16                	ja     c0111bf7 <bitmap_translate+0x26>
c0111be1:	68 eb 6c 11 c0       	push   $0xc0116ceb
c0111be6:	68 80 6c 11 c0       	push   $0xc0116c80
c0111beb:	6a 4c                	push   $0x4c
c0111bed:	68 95 6c 11 c0       	push   $0xc0116c95
c0111bf2:	e8 ee e8 fe ff       	call   c01004e5 <__panic>
    uint32_t ix = index / WORD_BITS, offset = index % WORD_BITS;
c0111bf7:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111bfa:	c1 e8 05             	shr    $0x5,%eax
c0111bfd:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111c00:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111c03:	83 e0 1f             	and    $0x1f,%eax
c0111c06:	89 45 f0             	mov    %eax,-0x10(%ebp)
    *word = bitmap->map + ix;
c0111c09:	8b 45 08             	mov    0x8(%ebp),%eax
c0111c0c:	8b 40 08             	mov    0x8(%eax),%eax
c0111c0f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111c12:	c1 e2 02             	shl    $0x2,%edx
c0111c15:	01 c2                	add    %eax,%edx
c0111c17:	8b 45 10             	mov    0x10(%ebp),%eax
c0111c1a:	89 10                	mov    %edx,(%eax)
    *mask = (1 << offset);
c0111c1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c1f:	ba 01 00 00 00       	mov    $0x1,%edx
c0111c24:	89 c1                	mov    %eax,%ecx
c0111c26:	d3 e2                	shl    %cl,%edx
c0111c28:	89 d0                	mov    %edx,%eax
c0111c2a:	89 c2                	mov    %eax,%edx
c0111c2c:	8b 45 14             	mov    0x14(%ebp),%eax
c0111c2f:	89 10                	mov    %edx,(%eax)
}
c0111c31:	90                   	nop
c0111c32:	c9                   	leave  
c0111c33:	c3                   	ret    

c0111c34 <bitmap_test>:

// bitmap_test - according index, get the related value (0 OR 1) in the bitmap
bool
bitmap_test(struct bitmap *bitmap, uint32_t index) {
c0111c34:	55                   	push   %ebp
c0111c35:	89 e5                	mov    %esp,%ebp
c0111c37:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111c3a:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111c3d:	50                   	push   %eax
c0111c3e:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111c41:	50                   	push   %eax
c0111c42:	ff 75 0c             	pushl  0xc(%ebp)
c0111c45:	ff 75 08             	pushl  0x8(%ebp)
c0111c48:	e8 84 ff ff ff       	call   c0111bd1 <bitmap_translate>
c0111c4d:	83 c4 10             	add    $0x10,%esp
    return (*word & mask);
c0111c50:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c53:	8b 10                	mov    (%eax),%edx
c0111c55:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c58:	21 d0                	and    %edx,%eax
}
c0111c5a:	c9                   	leave  
c0111c5b:	c3                   	ret    

c0111c5c <bitmap_free>:

// bitmap_free - according index, set related bit to 1
void
bitmap_free(struct bitmap *bitmap, uint32_t index) {
c0111c5c:	55                   	push   %ebp
c0111c5d:	89 e5                	mov    %esp,%ebp
c0111c5f:	83 ec 18             	sub    $0x18,%esp
    WORD_TYPE *word, mask;
    bitmap_translate(bitmap, index, &word, &mask);
c0111c62:	8d 45 f0             	lea    -0x10(%ebp),%eax
c0111c65:	50                   	push   %eax
c0111c66:	8d 45 f4             	lea    -0xc(%ebp),%eax
c0111c69:	50                   	push   %eax
c0111c6a:	ff 75 0c             	pushl  0xc(%ebp)
c0111c6d:	ff 75 08             	pushl  0x8(%ebp)
c0111c70:	e8 5c ff ff ff       	call   c0111bd1 <bitmap_translate>
c0111c75:	83 c4 10             	add    $0x10,%esp
    assert(!(*word & mask));
c0111c78:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c7b:	8b 10                	mov    (%eax),%edx
c0111c7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0111c80:	21 d0                	and    %edx,%eax
c0111c82:	85 c0                	test   %eax,%eax
c0111c84:	74 16                	je     c0111c9c <bitmap_free+0x40>
c0111c86:	68 01 6d 11 c0       	push   $0xc0116d01
c0111c8b:	68 80 6c 11 c0       	push   $0xc0116c80
c0111c90:	6a 5f                	push   $0x5f
c0111c92:	68 95 6c 11 c0       	push   $0xc0116c95
c0111c97:	e8 49 e8 fe ff       	call   c01004e5 <__panic>
    *word |= mask;
c0111c9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111c9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
c0111ca2:	8b 0a                	mov    (%edx),%ecx
c0111ca4:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0111ca7:	09 ca                	or     %ecx,%edx
c0111ca9:	89 10                	mov    %edx,(%eax)
}
c0111cab:	90                   	nop
c0111cac:	c9                   	leave  
c0111cad:	c3                   	ret    

c0111cae <bitmap_destroy>:

// bitmap_destroy - free memory contains bitmap
void
bitmap_destroy(struct bitmap *bitmap) {
c0111cae:	55                   	push   %ebp
c0111caf:	89 e5                	mov    %esp,%ebp
c0111cb1:	83 ec 08             	sub    $0x8,%esp
    kfree(bitmap->map);
c0111cb4:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cb7:	8b 40 08             	mov    0x8(%eax),%eax
c0111cba:	83 ec 0c             	sub    $0xc,%esp
c0111cbd:	50                   	push   %eax
c0111cbe:	e8 99 51 ff ff       	call   c0106e5c <kfree>
c0111cc3:	83 c4 10             	add    $0x10,%esp
    kfree(bitmap);
c0111cc6:	83 ec 0c             	sub    $0xc,%esp
c0111cc9:	ff 75 08             	pushl  0x8(%ebp)
c0111ccc:	e8 8b 51 ff ff       	call   c0106e5c <kfree>
c0111cd1:	83 c4 10             	add    $0x10,%esp
}
c0111cd4:	90                   	nop
c0111cd5:	c9                   	leave  
c0111cd6:	c3                   	ret    

c0111cd7 <bitmap_getdata>:

// bitmap_getdata - return bitmap->map, return the length of bits to len_store
void *
bitmap_getdata(struct bitmap *bitmap, size_t *len_store) {
c0111cd7:	55                   	push   %ebp
c0111cd8:	89 e5                	mov    %esp,%ebp
    if (len_store != NULL) {
c0111cda:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c0111cde:	74 12                	je     c0111cf2 <bitmap_getdata+0x1b>
        *len_store = sizeof(WORD_TYPE) * bitmap->nwords;
c0111ce0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ce3:	8b 40 04             	mov    0x4(%eax),%eax
c0111ce6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
c0111ced:	8b 45 0c             	mov    0xc(%ebp),%eax
c0111cf0:	89 10                	mov    %edx,(%eax)
    }
    return bitmap->map;
c0111cf2:	8b 45 08             	mov    0x8(%ebp),%eax
c0111cf5:	8b 40 08             	mov    0x8(%eax),%eax
}
c0111cf8:	5d                   	pop    %ebp
c0111cf9:	c3                   	ret    

c0111cfa <sfs_rwblock_nolock>:
 * @blkno: the NO. of disk block
 * @write: BOOL: Read or Write
 * @check: BOOL: if check (blono < sfs super.blocks)
 */
static int
sfs_rwblock_nolock(struct sfs_fs *sfs, void *buf, uint32_t blkno, bool write, bool check) {
c0111cfa:	55                   	push   %ebp
c0111cfb:	89 e5                	mov    %esp,%ebp
c0111cfd:	83 ec 28             	sub    $0x28,%esp
    assert((blkno != 0 || !check) && blkno < sfs->super.blocks);
c0111d00:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0111d04:	75 06                	jne    c0111d0c <sfs_rwblock_nolock+0x12>
c0111d06:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111d0a:	75 0b                	jne    c0111d17 <sfs_rwblock_nolock+0x1d>
c0111d0c:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d0f:	8b 40 04             	mov    0x4(%eax),%eax
c0111d12:	3b 45 10             	cmp    0x10(%ebp),%eax
c0111d15:	77 16                	ja     c0111d2d <sfs_rwblock_nolock+0x33>
c0111d17:	68 14 6d 11 c0       	push   $0xc0116d14
c0111d1c:	68 48 6d 11 c0       	push   $0xc0116d48
c0111d21:	6a 15                	push   $0x15
c0111d23:	68 5d 6d 11 c0       	push   $0xc0116d5d
c0111d28:	e8 b8 e7 fe ff       	call   c01004e5 <__panic>
    struct iobuf __iob, *iob = iobuf_init(&__iob, buf, SFS_BLKSIZE, blkno * SFS_BLKSIZE);
c0111d2d:	8b 45 10             	mov    0x10(%ebp),%eax
c0111d30:	c1 e0 0c             	shl    $0xc,%eax
c0111d33:	50                   	push   %eax
c0111d34:	68 00 10 00 00       	push   $0x1000
c0111d39:	ff 75 0c             	pushl  0xc(%ebp)
c0111d3c:	8d 45 e4             	lea    -0x1c(%ebp),%eax
c0111d3f:	50                   	push   %eax
c0111d40:	e8 10 89 ff ff       	call   c010a655 <iobuf_init>
c0111d45:	83 c4 10             	add    $0x10,%esp
c0111d48:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dop_io(sfs->dev, iob, write);
c0111d4b:	8b 45 08             	mov    0x8(%ebp),%eax
c0111d4e:	8b 40 2c             	mov    0x2c(%eax),%eax
c0111d51:	8b 40 10             	mov    0x10(%eax),%eax
c0111d54:	8b 55 08             	mov    0x8(%ebp),%edx
c0111d57:	8b 52 2c             	mov    0x2c(%edx),%edx
c0111d5a:	83 ec 04             	sub    $0x4,%esp
c0111d5d:	ff 75 14             	pushl  0x14(%ebp)
c0111d60:	ff 75 f4             	pushl  -0xc(%ebp)
c0111d63:	52                   	push   %edx
c0111d64:	ff d0                	call   *%eax
c0111d66:	83 c4 10             	add    $0x10,%esp
}
c0111d69:	c9                   	leave  
c0111d6a:	c3                   	ret    

c0111d6b <sfs_rwblock>:
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 * @write: BOOL: Read - 0 or Write - 1
 */
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
c0111d6b:	55                   	push   %ebp
c0111d6c:	89 e5                	mov    %esp,%ebp
c0111d6e:	83 ec 18             	sub    $0x18,%esp
    int ret = 0;
c0111d71:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    lock_sfs_io(sfs);
c0111d78:	83 ec 0c             	sub    $0xc,%esp
c0111d7b:	ff 75 08             	pushl  0x8(%ebp)
c0111d7e:	e8 38 d5 ff ff       	call   c010f2bb <lock_sfs_io>
c0111d83:	83 c4 10             	add    $0x10,%esp
    {
        while (nblks != 0) {
c0111d86:	eb 31                	jmp    c0111db9 <sfs_rwblock+0x4e>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
c0111d88:	83 ec 0c             	sub    $0xc,%esp
c0111d8b:	6a 01                	push   $0x1
c0111d8d:	ff 75 18             	pushl  0x18(%ebp)
c0111d90:	ff 75 10             	pushl  0x10(%ebp)
c0111d93:	ff 75 0c             	pushl  0xc(%ebp)
c0111d96:	ff 75 08             	pushl  0x8(%ebp)
c0111d99:	e8 5c ff ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c0111d9e:	83 c4 20             	add    $0x20,%esp
c0111da1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111da4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111da8:	75 17                	jne    c0111dc1 <sfs_rwblock+0x56>
                break;
            }
            blkno ++, nblks --;
c0111daa:	83 45 10 01          	addl   $0x1,0x10(%ebp)
c0111dae:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
            buf += SFS_BLKSIZE;
c0111db2:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
static int
sfs_rwblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks, bool write) {
    int ret = 0;
    lock_sfs_io(sfs);
    {
        while (nblks != 0) {
c0111db9:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
c0111dbd:	75 c9                	jne    c0111d88 <sfs_rwblock+0x1d>
c0111dbf:	eb 01                	jmp    c0111dc2 <sfs_rwblock+0x57>
            if ((ret = sfs_rwblock_nolock(sfs, buf, blkno, write, 1)) != 0) {
                break;
c0111dc1:	90                   	nop
            }
            blkno ++, nblks --;
            buf += SFS_BLKSIZE;
        }
    }
    unlock_sfs_io(sfs);
c0111dc2:	83 ec 0c             	sub    $0xc,%esp
c0111dc5:	ff 75 08             	pushl  0x8(%ebp)
c0111dc8:	e8 24 d5 ff ff       	call   c010f2f1 <unlock_sfs_io>
c0111dcd:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111dd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111dd3:	c9                   	leave  
c0111dd4:	c3                   	ret    

c0111dd5 <sfs_rblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_rblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0111dd5:	55                   	push   %ebp
c0111dd6:	89 e5                	mov    %esp,%ebp
c0111dd8:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 0);
c0111ddb:	83 ec 0c             	sub    $0xc,%esp
c0111dde:	6a 00                	push   $0x0
c0111de0:	ff 75 14             	pushl  0x14(%ebp)
c0111de3:	ff 75 10             	pushl  0x10(%ebp)
c0111de6:	ff 75 0c             	pushl  0xc(%ebp)
c0111de9:	ff 75 08             	pushl  0x8(%ebp)
c0111dec:	e8 7a ff ff ff       	call   c0111d6b <sfs_rwblock>
c0111df1:	83 c4 20             	add    $0x20,%esp
}
c0111df4:	c9                   	leave  
c0111df5:	c3                   	ret    

c0111df6 <sfs_wblock>:
 * @buf:   the buffer uesed for Rd/Wr
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_wblock(struct sfs_fs *sfs, void *buf, uint32_t blkno, uint32_t nblks) {
c0111df6:	55                   	push   %ebp
c0111df7:	89 e5                	mov    %esp,%ebp
c0111df9:	83 ec 08             	sub    $0x8,%esp
    return sfs_rwblock(sfs, buf, blkno, nblks, 1);
c0111dfc:	83 ec 0c             	sub    $0xc,%esp
c0111dff:	6a 01                	push   $0x1
c0111e01:	ff 75 14             	pushl  0x14(%ebp)
c0111e04:	ff 75 10             	pushl  0x10(%ebp)
c0111e07:	ff 75 0c             	pushl  0xc(%ebp)
c0111e0a:	ff 75 08             	pushl  0x8(%ebp)
c0111e0d:	e8 59 ff ff ff       	call   c0111d6b <sfs_rwblock>
c0111e12:	83 c4 20             	add    $0x20,%esp
}
c0111e15:	c9                   	leave  
c0111e16:	c3                   	ret    

c0111e17 <sfs_rbuf>:
 * @len:    the length need to Rd
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_rbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0111e17:	55                   	push   %ebp
c0111e18:	89 e5                	mov    %esp,%ebp
c0111e1a:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0111e1d:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111e21:	78 18                	js     c0111e3b <sfs_rbuf+0x24>
c0111e23:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0111e2a:	7f 0f                	jg     c0111e3b <sfs_rbuf+0x24>
c0111e2c:	8b 55 18             	mov    0x18(%ebp),%edx
c0111e2f:	8b 45 10             	mov    0x10(%ebp),%eax
c0111e32:	01 d0                	add    %edx,%eax
c0111e34:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111e39:	76 16                	jbe    c0111e51 <sfs_rbuf+0x3a>
c0111e3b:	68 74 6d 11 c0       	push   $0xc0116d74
c0111e40:	68 48 6d 11 c0       	push   $0xc0116d48
c0111e45:	6a 55                	push   $0x55
c0111e47:	68 5d 6d 11 c0       	push   $0xc0116d5d
c0111e4c:	e8 94 e6 fe ff       	call   c01004e5 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0111e51:	83 ec 0c             	sub    $0xc,%esp
c0111e54:	ff 75 08             	pushl  0x8(%ebp)
c0111e57:	e8 5f d4 ff ff       	call   c010f2bb <lock_sfs_io>
c0111e5c:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0111e5f:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e62:	8b 40 38             	mov    0x38(%eax),%eax
c0111e65:	83 ec 0c             	sub    $0xc,%esp
c0111e68:	6a 01                	push   $0x1
c0111e6a:	6a 00                	push   $0x0
c0111e6c:	ff 75 14             	pushl  0x14(%ebp)
c0111e6f:	50                   	push   %eax
c0111e70:	ff 75 08             	pushl  0x8(%ebp)
c0111e73:	e8 82 fe ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c0111e78:	83 c4 20             	add    $0x20,%esp
c0111e7b:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111e7e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111e82:	75 1d                	jne    c0111ea1 <sfs_rbuf+0x8a>
            memcpy(buf, sfs->sfs_buffer + offset, len);
c0111e84:	8b 45 08             	mov    0x8(%ebp),%eax
c0111e87:	8b 50 38             	mov    0x38(%eax),%edx
c0111e8a:	8b 45 18             	mov    0x18(%ebp),%eax
c0111e8d:	01 d0                	add    %edx,%eax
c0111e8f:	83 ec 04             	sub    $0x4,%esp
c0111e92:	ff 75 10             	pushl  0x10(%ebp)
c0111e95:	50                   	push   %eax
c0111e96:	ff 75 0c             	pushl  0xc(%ebp)
c0111e99:	e8 4a 06 00 00       	call   c01124e8 <memcpy>
c0111e9e:	83 c4 10             	add    $0x10,%esp
        }
    }
    unlock_sfs_io(sfs);
c0111ea1:	83 ec 0c             	sub    $0xc,%esp
c0111ea4:	ff 75 08             	pushl  0x8(%ebp)
c0111ea7:	e8 45 d4 ff ff       	call   c010f2f1 <unlock_sfs_io>
c0111eac:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111eb2:	c9                   	leave  
c0111eb3:	c3                   	ret    

c0111eb4 <sfs_wbuf>:
 * @len:    the length need to Wr
 * @blkno:  the NO. of disk block
 * @offset: the offset in the content of disk block
 */
int
sfs_wbuf(struct sfs_fs *sfs, void *buf, size_t len, uint32_t blkno, off_t offset) {
c0111eb4:	55                   	push   %ebp
c0111eb5:	89 e5                	mov    %esp,%ebp
c0111eb7:	83 ec 18             	sub    $0x18,%esp
    assert(offset >= 0 && offset < SFS_BLKSIZE && offset + len <= SFS_BLKSIZE);
c0111eba:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
c0111ebe:	78 18                	js     c0111ed8 <sfs_wbuf+0x24>
c0111ec0:	81 7d 18 ff 0f 00 00 	cmpl   $0xfff,0x18(%ebp)
c0111ec7:	7f 0f                	jg     c0111ed8 <sfs_wbuf+0x24>
c0111ec9:	8b 55 18             	mov    0x18(%ebp),%edx
c0111ecc:	8b 45 10             	mov    0x10(%ebp),%eax
c0111ecf:	01 d0                	add    %edx,%eax
c0111ed1:	3d 00 10 00 00       	cmp    $0x1000,%eax
c0111ed6:	76 16                	jbe    c0111eee <sfs_wbuf+0x3a>
c0111ed8:	68 74 6d 11 c0       	push   $0xc0116d74
c0111edd:	68 48 6d 11 c0       	push   $0xc0116d48
c0111ee2:	6a 6b                	push   $0x6b
c0111ee4:	68 5d 6d 11 c0       	push   $0xc0116d5d
c0111ee9:	e8 f7 e5 fe ff       	call   c01004e5 <__panic>
    int ret;
    lock_sfs_io(sfs);
c0111eee:	83 ec 0c             	sub    $0xc,%esp
c0111ef1:	ff 75 08             	pushl  0x8(%ebp)
c0111ef4:	e8 c2 d3 ff ff       	call   c010f2bb <lock_sfs_io>
c0111ef9:	83 c4 10             	add    $0x10,%esp
    {
        if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 0, 1)) == 0) {
c0111efc:	8b 45 08             	mov    0x8(%ebp),%eax
c0111eff:	8b 40 38             	mov    0x38(%eax),%eax
c0111f02:	83 ec 0c             	sub    $0xc,%esp
c0111f05:	6a 01                	push   $0x1
c0111f07:	6a 00                	push   $0x0
c0111f09:	ff 75 14             	pushl  0x14(%ebp)
c0111f0c:	50                   	push   %eax
c0111f0d:	ff 75 08             	pushl  0x8(%ebp)
c0111f10:	e8 e5 fd ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c0111f15:	83 c4 20             	add    $0x20,%esp
c0111f18:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0111f1b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0111f1f:	75 3c                	jne    c0111f5d <sfs_wbuf+0xa9>
            memcpy(sfs->sfs_buffer + offset, buf, len);
c0111f21:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f24:	8b 50 38             	mov    0x38(%eax),%edx
c0111f27:	8b 45 18             	mov    0x18(%ebp),%eax
c0111f2a:	01 d0                	add    %edx,%eax
c0111f2c:	83 ec 04             	sub    $0x4,%esp
c0111f2f:	ff 75 10             	pushl  0x10(%ebp)
c0111f32:	ff 75 0c             	pushl  0xc(%ebp)
c0111f35:	50                   	push   %eax
c0111f36:	e8 ad 05 00 00       	call   c01124e8 <memcpy>
c0111f3b:	83 c4 10             	add    $0x10,%esp
            ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1);
c0111f3e:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f41:	8b 40 38             	mov    0x38(%eax),%eax
c0111f44:	83 ec 0c             	sub    $0xc,%esp
c0111f47:	6a 01                	push   $0x1
c0111f49:	6a 01                	push   $0x1
c0111f4b:	ff 75 14             	pushl  0x14(%ebp)
c0111f4e:	50                   	push   %eax
c0111f4f:	ff 75 08             	pushl  0x8(%ebp)
c0111f52:	e8 a3 fd ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c0111f57:	83 c4 20             	add    $0x20,%esp
c0111f5a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
    }
    unlock_sfs_io(sfs);
c0111f5d:	83 ec 0c             	sub    $0xc,%esp
c0111f60:	ff 75 08             	pushl  0x8(%ebp)
c0111f63:	e8 89 d3 ff ff       	call   c010f2f1 <unlock_sfs_io>
c0111f68:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111f6e:	c9                   	leave  
c0111f6f:	c3                   	ret    

c0111f70 <sfs_sync_super>:

/*
 * sfs_sync_super - write sfs->super (in memory) into disk (SFS_BLKN_SUPER, 1) with lock protect.
 */
int
sfs_sync_super(struct sfs_fs *sfs) {
c0111f70:	55                   	push   %ebp
c0111f71:	89 e5                	mov    %esp,%ebp
c0111f73:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c0111f76:	83 ec 0c             	sub    $0xc,%esp
c0111f79:	ff 75 08             	pushl  0x8(%ebp)
c0111f7c:	e8 3a d3 ff ff       	call   c010f2bb <lock_sfs_io>
c0111f81:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0111f84:	8b 45 08             	mov    0x8(%ebp),%eax
c0111f87:	8b 40 38             	mov    0x38(%eax),%eax
c0111f8a:	83 ec 04             	sub    $0x4,%esp
c0111f8d:	68 00 10 00 00       	push   $0x1000
c0111f92:	6a 00                	push   $0x0
c0111f94:	50                   	push   %eax
c0111f95:	e8 6b 04 00 00       	call   c0112405 <memset>
c0111f9a:	83 c4 10             	add    $0x10,%esp
        memcpy(sfs->sfs_buffer, &(sfs->super), sizeof(sfs->super));
c0111f9d:	8b 55 08             	mov    0x8(%ebp),%edx
c0111fa0:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fa3:	8b 40 38             	mov    0x38(%eax),%eax
c0111fa6:	83 ec 04             	sub    $0x4,%esp
c0111fa9:	6a 2c                	push   $0x2c
c0111fab:	52                   	push   %edx
c0111fac:	50                   	push   %eax
c0111fad:	e8 36 05 00 00       	call   c01124e8 <memcpy>
c0111fb2:	83 c4 10             	add    $0x10,%esp
        ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, SFS_BLKN_SUPER, 1, 0);
c0111fb5:	8b 45 08             	mov    0x8(%ebp),%eax
c0111fb8:	8b 40 38             	mov    0x38(%eax),%eax
c0111fbb:	83 ec 0c             	sub    $0xc,%esp
c0111fbe:	6a 00                	push   $0x0
c0111fc0:	6a 01                	push   $0x1
c0111fc2:	6a 00                	push   $0x0
c0111fc4:	50                   	push   %eax
c0111fc5:	ff 75 08             	pushl  0x8(%ebp)
c0111fc8:	e8 2d fd ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c0111fcd:	83 c4 20             	add    $0x20,%esp
c0111fd0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }
    unlock_sfs_io(sfs);
c0111fd3:	83 ec 0c             	sub    $0xc,%esp
c0111fd6:	ff 75 08             	pushl  0x8(%ebp)
c0111fd9:	e8 13 d3 ff ff       	call   c010f2f1 <unlock_sfs_io>
c0111fde:	83 c4 10             	add    $0x10,%esp
    return ret;
c0111fe1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0111fe4:	c9                   	leave  
c0111fe5:	c3                   	ret    

c0111fe6 <sfs_sync_freemap>:

/*
 * sfs_sync_freemap - write sfs bitmap into disk (SFS_BLKN_FREEMAP, nblks)  without lock protect.
 */
int
sfs_sync_freemap(struct sfs_fs *sfs) {
c0111fe6:	55                   	push   %ebp
c0111fe7:	89 e5                	mov    %esp,%ebp
c0111fe9:	83 ec 18             	sub    $0x18,%esp
    uint32_t nblks = sfs_freemap_blocks(&(sfs->super));
c0111fec:	c7 45 f4 00 80 00 00 	movl   $0x8000,-0xc(%ebp)
c0111ff3:	8b 45 08             	mov    0x8(%ebp),%eax
c0111ff6:	8b 50 04             	mov    0x4(%eax),%edx
c0111ff9:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0111ffc:	01 d0                	add    %edx,%eax
c0111ffe:	83 e8 01             	sub    $0x1,%eax
c0112001:	ba 00 00 00 00       	mov    $0x0,%edx
c0112006:	f7 75 f4             	divl   -0xc(%ebp)
c0112009:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sfs_wblock(sfs, bitmap_getdata(sfs->freemap, NULL), SFS_BLKN_FREEMAP, nblks);
c011200c:	8b 45 08             	mov    0x8(%ebp),%eax
c011200f:	8b 40 30             	mov    0x30(%eax),%eax
c0112012:	83 ec 08             	sub    $0x8,%esp
c0112015:	6a 00                	push   $0x0
c0112017:	50                   	push   %eax
c0112018:	e8 ba fc ff ff       	call   c0111cd7 <bitmap_getdata>
c011201d:	83 c4 10             	add    $0x10,%esp
c0112020:	ff 75 f0             	pushl  -0x10(%ebp)
c0112023:	6a 02                	push   $0x2
c0112025:	50                   	push   %eax
c0112026:	ff 75 08             	pushl  0x8(%ebp)
c0112029:	e8 c8 fd ff ff       	call   c0111df6 <sfs_wblock>
c011202e:	83 c4 10             	add    $0x10,%esp
}
c0112031:	c9                   	leave  
c0112032:	c3                   	ret    

c0112033 <sfs_clear_block>:
 * @sfs:   sfs_fs which will be process
 * @blkno: the NO. of disk block
 * @nblks: Rd/Wr number of disk block
 */
int
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
c0112033:	55                   	push   %ebp
c0112034:	89 e5                	mov    %esp,%ebp
c0112036:	83 ec 18             	sub    $0x18,%esp
    int ret;
    lock_sfs_io(sfs);
c0112039:	83 ec 0c             	sub    $0xc,%esp
c011203c:	ff 75 08             	pushl  0x8(%ebp)
c011203f:	e8 77 d2 ff ff       	call   c010f2bb <lock_sfs_io>
c0112044:	83 c4 10             	add    $0x10,%esp
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
c0112047:	8b 45 08             	mov    0x8(%ebp),%eax
c011204a:	8b 40 38             	mov    0x38(%eax),%eax
c011204d:	83 ec 04             	sub    $0x4,%esp
c0112050:	68 00 10 00 00       	push   $0x1000
c0112055:	6a 00                	push   $0x0
c0112057:	50                   	push   %eax
c0112058:	e8 a8 03 00 00       	call   c0112405 <memset>
c011205d:	83 c4 10             	add    $0x10,%esp
        while (nblks != 0) {
c0112060:	eb 2d                	jmp    c011208f <sfs_clear_block+0x5c>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
c0112062:	8b 45 08             	mov    0x8(%ebp),%eax
c0112065:	8b 40 38             	mov    0x38(%eax),%eax
c0112068:	83 ec 0c             	sub    $0xc,%esp
c011206b:	6a 01                	push   $0x1
c011206d:	6a 01                	push   $0x1
c011206f:	ff 75 0c             	pushl  0xc(%ebp)
c0112072:	50                   	push   %eax
c0112073:	ff 75 08             	pushl  0x8(%ebp)
c0112076:	e8 7f fc ff ff       	call   c0111cfa <sfs_rwblock_nolock>
c011207b:	83 c4 20             	add    $0x20,%esp
c011207e:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112081:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
c0112085:	75 10                	jne    c0112097 <sfs_clear_block+0x64>
                break;
            }
            blkno ++, nblks --;
c0112087:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
c011208b:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
sfs_clear_block(struct sfs_fs *sfs, uint32_t blkno, uint32_t nblks) {
    int ret;
    lock_sfs_io(sfs);
    {
        memset(sfs->sfs_buffer, 0, SFS_BLKSIZE);
        while (nblks != 0) {
c011208f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112093:	75 cd                	jne    c0112062 <sfs_clear_block+0x2f>
c0112095:	eb 01                	jmp    c0112098 <sfs_clear_block+0x65>
            if ((ret = sfs_rwblock_nolock(sfs, sfs->sfs_buffer, blkno, 1, 1)) != 0) {
                break;
c0112097:	90                   	nop
            }
            blkno ++, nblks --;
        }
    }
    unlock_sfs_io(sfs);
c0112098:	83 ec 0c             	sub    $0xc,%esp
c011209b:	ff 75 08             	pushl  0x8(%ebp)
c011209e:	e8 4e d2 ff ff       	call   c010f2f1 <unlock_sfs_io>
c01120a3:	83 c4 10             	add    $0x10,%esp
    return ret;
c01120a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c01120a9:	c9                   	leave  
c01120aa:	c3                   	ret    

c01120ab <strlen>:
 * @s:      the input string
 *
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
c01120ab:	55                   	push   %ebp
c01120ac:	89 e5                	mov    %esp,%ebp
c01120ae:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01120b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (*s ++ != '\0') {
c01120b8:	eb 04                	jmp    c01120be <strlen+0x13>
        cnt ++;
c01120ba:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * The strlen() function returns the length of string @s.
 * */
size_t
strlen(const char *s) {
    size_t cnt = 0;
    while (*s ++ != '\0') {
c01120be:	8b 45 08             	mov    0x8(%ebp),%eax
c01120c1:	8d 50 01             	lea    0x1(%eax),%edx
c01120c4:	89 55 08             	mov    %edx,0x8(%ebp)
c01120c7:	0f b6 00             	movzbl (%eax),%eax
c01120ca:	84 c0                	test   %al,%al
c01120cc:	75 ec                	jne    c01120ba <strlen+0xf>
        cnt ++;
    }
    return cnt;
c01120ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c01120d1:	c9                   	leave  
c01120d2:	c3                   	ret    

c01120d3 <strnlen>:
 * The return value is strlen(s), if that is less than @len, or
 * @len if there is no '\0' character among the first @len characters
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
c01120d3:	55                   	push   %ebp
c01120d4:	89 e5                	mov    %esp,%ebp
c01120d6:	83 ec 10             	sub    $0x10,%esp
    size_t cnt = 0;
c01120d9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    while (cnt < len && *s ++ != '\0') {
c01120e0:	eb 04                	jmp    c01120e6 <strnlen+0x13>
        cnt ++;
c01120e2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
 * pointed by @s.
 * */
size_t
strnlen(const char *s, size_t len) {
    size_t cnt = 0;
    while (cnt < len && *s ++ != '\0') {
c01120e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
c01120e9:	3b 45 0c             	cmp    0xc(%ebp),%eax
c01120ec:	73 10                	jae    c01120fe <strnlen+0x2b>
c01120ee:	8b 45 08             	mov    0x8(%ebp),%eax
c01120f1:	8d 50 01             	lea    0x1(%eax),%edx
c01120f4:	89 55 08             	mov    %edx,0x8(%ebp)
c01120f7:	0f b6 00             	movzbl (%eax),%eax
c01120fa:	84 c0                	test   %al,%al
c01120fc:	75 e4                	jne    c01120e2 <strnlen+0xf>
        cnt ++;
    }
    return cnt;
c01120fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
c0112101:	c9                   	leave  
c0112102:	c3                   	ret    

c0112103 <strcat>:
 * @dst:    pointer to the @dst array, which should be large enough to contain the concatenated
 *          resulting string.
 * @src:    string to be appended, this should not overlap @dst
 * */
char *
strcat(char *dst, const char *src) {
c0112103:	55                   	push   %ebp
c0112104:	89 e5                	mov    %esp,%ebp
c0112106:	83 ec 08             	sub    $0x8,%esp
    return strcpy(dst + strlen(dst), src);
c0112109:	ff 75 08             	pushl  0x8(%ebp)
c011210c:	e8 9a ff ff ff       	call   c01120ab <strlen>
c0112111:	83 c4 04             	add    $0x4,%esp
c0112114:	89 c2                	mov    %eax,%edx
c0112116:	8b 45 08             	mov    0x8(%ebp),%eax
c0112119:	01 d0                	add    %edx,%eax
c011211b:	83 ec 08             	sub    $0x8,%esp
c011211e:	ff 75 0c             	pushl  0xc(%ebp)
c0112121:	50                   	push   %eax
c0112122:	e8 05 00 00 00       	call   c011212c <strcpy>
c0112127:	83 c4 10             	add    $0x10,%esp
}
c011212a:	c9                   	leave  
c011212b:	c3                   	ret    

c011212c <strcpy>:
 * To avoid overflows, the size of array pointed by @dst should be long enough to
 * contain the same string as @src (including the terminating null character), and
 * should not overlap in memory with @src.
 * */
char *
strcpy(char *dst, const char *src) {
c011212c:	55                   	push   %ebp
c011212d:	89 e5                	mov    %esp,%ebp
c011212f:	57                   	push   %edi
c0112130:	56                   	push   %esi
c0112131:	83 ec 20             	sub    $0x20,%esp
c0112134:	8b 45 08             	mov    0x8(%ebp),%eax
c0112137:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011213a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011213d:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCPY
#define __HAVE_ARCH_STRCPY
static inline char *
__strcpy(char *dst, const char *src) {
    int d0, d1, d2;
    asm volatile (
c0112140:	8b 55 f0             	mov    -0x10(%ebp),%edx
c0112143:	8b 45 f4             	mov    -0xc(%ebp),%eax
c0112146:	89 d1                	mov    %edx,%ecx
c0112148:	89 c2                	mov    %eax,%edx
c011214a:	89 ce                	mov    %ecx,%esi
c011214c:	89 d7                	mov    %edx,%edi
c011214e:	ac                   	lods   %ds:(%esi),%al
c011214f:	aa                   	stos   %al,%es:(%edi)
c0112150:	84 c0                	test   %al,%al
c0112152:	75 fa                	jne    c011214e <strcpy+0x22>
c0112154:	89 fa                	mov    %edi,%edx
c0112156:	89 f1                	mov    %esi,%ecx
c0112158:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c011215b:	89 55 e8             	mov    %edx,-0x18(%ebp)
c011215e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        "stosb;"
        "testb %%al, %%al;"
        "jne 1b;"
        : "=&S" (d0), "=&D" (d1), "=&a" (d2)
        : "0" (src), "1" (dst) : "memory");
    return dst;
c0112161:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_STRCPY
    return __strcpy(dst, src);
c0112164:	90                   	nop
    char *p = dst;
    while ((*p ++ = *src ++) != '\0')
        /* nothing */;
    return dst;
#endif /* __HAVE_ARCH_STRCPY */
}
c0112165:	83 c4 20             	add    $0x20,%esp
c0112168:	5e                   	pop    %esi
c0112169:	5f                   	pop    %edi
c011216a:	5d                   	pop    %ebp
c011216b:	c3                   	ret    

c011216c <strncpy>:
 * @len:    maximum number of characters to be copied from @src
 *
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
c011216c:	55                   	push   %ebp
c011216d:	89 e5                	mov    %esp,%ebp
c011216f:	83 ec 10             	sub    $0x10,%esp
    char *p = dst;
c0112172:	8b 45 08             	mov    0x8(%ebp),%eax
c0112175:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (len > 0) {
c0112178:	eb 21                	jmp    c011219b <strncpy+0x2f>
        if ((*p = *src) != '\0') {
c011217a:	8b 45 0c             	mov    0xc(%ebp),%eax
c011217d:	0f b6 10             	movzbl (%eax),%edx
c0112180:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112183:	88 10                	mov    %dl,(%eax)
c0112185:	8b 45 fc             	mov    -0x4(%ebp),%eax
c0112188:	0f b6 00             	movzbl (%eax),%eax
c011218b:	84 c0                	test   %al,%al
c011218d:	74 04                	je     c0112193 <strncpy+0x27>
            src ++;
c011218f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        }
        p ++, len --;
c0112193:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0112197:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
 * The return value is @dst
 * */
char *
strncpy(char *dst, const char *src, size_t len) {
    char *p = dst;
    while (len > 0) {
c011219b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011219f:	75 d9                	jne    c011217a <strncpy+0xe>
        if ((*p = *src) != '\0') {
            src ++;
        }
        p ++, len --;
    }
    return dst;
c01121a1:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01121a4:	c9                   	leave  
c01121a5:	c3                   	ret    

c01121a6 <strcmp>:
 * - A value greater than zero indicates that the first character that does
 *   not match has a greater value in @s1 than in @s2;
 * - And a value less than zero indicates the opposite.
 * */
int
strcmp(const char *s1, const char *s2) {
c01121a6:	55                   	push   %ebp
c01121a7:	89 e5                	mov    %esp,%ebp
c01121a9:	57                   	push   %edi
c01121aa:	56                   	push   %esi
c01121ab:	83 ec 20             	sub    $0x20,%esp
c01121ae:	8b 45 08             	mov    0x8(%ebp),%eax
c01121b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01121b4:	8b 45 0c             	mov    0xc(%ebp),%eax
c01121b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_STRCMP
#define __HAVE_ARCH_STRCMP
static inline int
__strcmp(const char *s1, const char *s2) {
    int d0, d1, ret;
    asm volatile (
c01121ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01121bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01121c0:	89 d1                	mov    %edx,%ecx
c01121c2:	89 c2                	mov    %eax,%edx
c01121c4:	89 ce                	mov    %ecx,%esi
c01121c6:	89 d7                	mov    %edx,%edi
c01121c8:	ac                   	lods   %ds:(%esi),%al
c01121c9:	ae                   	scas   %es:(%edi),%al
c01121ca:	75 08                	jne    c01121d4 <strcmp+0x2e>
c01121cc:	84 c0                	test   %al,%al
c01121ce:	75 f8                	jne    c01121c8 <strcmp+0x22>
c01121d0:	31 c0                	xor    %eax,%eax
c01121d2:	eb 04                	jmp    c01121d8 <strcmp+0x32>
c01121d4:	19 c0                	sbb    %eax,%eax
c01121d6:	0c 01                	or     $0x1,%al
c01121d8:	89 fa                	mov    %edi,%edx
c01121da:	89 f1                	mov    %esi,%ecx
c01121dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
c01121df:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c01121e2:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        "orb $1, %%al;"
        "3:"
        : "=a" (ret), "=&S" (d0), "=&D" (d1)
        : "1" (s1), "2" (s2)
        : "memory");
    return ret;
c01121e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
#ifdef __HAVE_ARCH_STRCMP
    return __strcmp(s1, s2);
c01121e8:	90                   	nop
    while (*s1 != '\0' && *s1 == *s2) {
        s1 ++, s2 ++;
    }
    return (int)((unsigned char)*s1 - (unsigned char)*s2);
#endif /* __HAVE_ARCH_STRCMP */
}
c01121e9:	83 c4 20             	add    $0x20,%esp
c01121ec:	5e                   	pop    %esi
c01121ed:	5f                   	pop    %edi
c01121ee:	5d                   	pop    %ebp
c01121ef:	c3                   	ret    

c01121f0 <strncmp>:
 * they are equal to each other, it continues with the following pairs until
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
c01121f0:	55                   	push   %ebp
c01121f1:	89 e5                	mov    %esp,%ebp
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c01121f3:	eb 0c                	jmp    c0112201 <strncmp+0x11>
        n --, s1 ++, s2 ++;
c01121f5:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
c01121f9:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01121fd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
 * the characters differ, until a terminating null-character is reached, or
 * until @n characters match in both strings, whichever happens first.
 * */
int
strncmp(const char *s1, const char *s2, size_t n) {
    while (n > 0 && *s1 != '\0' && *s1 == *s2) {
c0112201:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112205:	74 1a                	je     c0112221 <strncmp+0x31>
c0112207:	8b 45 08             	mov    0x8(%ebp),%eax
c011220a:	0f b6 00             	movzbl (%eax),%eax
c011220d:	84 c0                	test   %al,%al
c011220f:	74 10                	je     c0112221 <strncmp+0x31>
c0112211:	8b 45 08             	mov    0x8(%ebp),%eax
c0112214:	0f b6 10             	movzbl (%eax),%edx
c0112217:	8b 45 0c             	mov    0xc(%ebp),%eax
c011221a:	0f b6 00             	movzbl (%eax),%eax
c011221d:	38 c2                	cmp    %al,%dl
c011221f:	74 d4                	je     c01121f5 <strncmp+0x5>
        n --, s1 ++, s2 ++;
    }
    return (n == 0) ? 0 : (int)((unsigned char)*s1 - (unsigned char)*s2);
c0112221:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c0112225:	74 18                	je     c011223f <strncmp+0x4f>
c0112227:	8b 45 08             	mov    0x8(%ebp),%eax
c011222a:	0f b6 00             	movzbl (%eax),%eax
c011222d:	0f b6 d0             	movzbl %al,%edx
c0112230:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112233:	0f b6 00             	movzbl (%eax),%eax
c0112236:	0f b6 c0             	movzbl %al,%eax
c0112239:	29 c2                	sub    %eax,%edx
c011223b:	89 d0                	mov    %edx,%eax
c011223d:	eb 05                	jmp    c0112244 <strncmp+0x54>
c011223f:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112244:	5d                   	pop    %ebp
c0112245:	c3                   	ret    

c0112246 <strchr>:
 *
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
c0112246:	55                   	push   %ebp
c0112247:	89 e5                	mov    %esp,%ebp
c0112249:	83 ec 04             	sub    $0x4,%esp
c011224c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011224f:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0112252:	eb 14                	jmp    c0112268 <strchr+0x22>
        if (*s == c) {
c0112254:	8b 45 08             	mov    0x8(%ebp),%eax
c0112257:	0f b6 00             	movzbl (%eax),%eax
c011225a:	3a 45 fc             	cmp    -0x4(%ebp),%al
c011225d:	75 05                	jne    c0112264 <strchr+0x1e>
            return (char *)s;
c011225f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112262:	eb 13                	jmp    c0112277 <strchr+0x31>
        }
        s ++;
c0112264:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * The strchr() function returns a pointer to the first occurrence of
 * character in @s. If the value is not found, the function returns 'NULL'.
 * */
char *
strchr(const char *s, char c) {
    while (*s != '\0') {
c0112268:	8b 45 08             	mov    0x8(%ebp),%eax
c011226b:	0f b6 00             	movzbl (%eax),%eax
c011226e:	84 c0                	test   %al,%al
c0112270:	75 e2                	jne    c0112254 <strchr+0xe>
        if (*s == c) {
            return (char *)s;
        }
        s ++;
    }
    return NULL;
c0112272:	b8 00 00 00 00       	mov    $0x0,%eax
}
c0112277:	c9                   	leave  
c0112278:	c3                   	ret    

c0112279 <strfind>:
 * The strfind() function is like strchr() except that if @c is
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
c0112279:	55                   	push   %ebp
c011227a:	89 e5                	mov    %esp,%ebp
c011227c:	83 ec 04             	sub    $0x4,%esp
c011227f:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112282:	88 45 fc             	mov    %al,-0x4(%ebp)
    while (*s != '\0') {
c0112285:	eb 0f                	jmp    c0112296 <strfind+0x1d>
        if (*s == c) {
c0112287:	8b 45 08             	mov    0x8(%ebp),%eax
c011228a:	0f b6 00             	movzbl (%eax),%eax
c011228d:	3a 45 fc             	cmp    -0x4(%ebp),%al
c0112290:	74 10                	je     c01122a2 <strfind+0x29>
            break;
        }
        s ++;
c0112292:	83 45 08 01          	addl   $0x1,0x8(%ebp)
 * not found in @s, then it returns a pointer to the null byte at the
 * end of @s, rather than 'NULL'.
 * */
char *
strfind(const char *s, char c) {
    while (*s != '\0') {
c0112296:	8b 45 08             	mov    0x8(%ebp),%eax
c0112299:	0f b6 00             	movzbl (%eax),%eax
c011229c:	84 c0                	test   %al,%al
c011229e:	75 e7                	jne    c0112287 <strfind+0xe>
c01122a0:	eb 01                	jmp    c01122a3 <strfind+0x2a>
        if (*s == c) {
            break;
c01122a2:	90                   	nop
        }
        s ++;
    }
    return (char *)s;
c01122a3:	8b 45 08             	mov    0x8(%ebp),%eax
}
c01122a6:	c9                   	leave  
c01122a7:	c3                   	ret    

c01122a8 <strtol>:
 * an optional "0x" or "0X" prefix.
 *
 * The strtol() function returns the converted integral number as a long int value.
 * */
long
strtol(const char *s, char **endptr, int base) {
c01122a8:	55                   	push   %ebp
c01122a9:	89 e5                	mov    %esp,%ebp
c01122ab:	83 ec 10             	sub    $0x10,%esp
    int neg = 0;
c01122ae:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    long val = 0;
c01122b5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01122bc:	eb 04                	jmp    c01122c2 <strtol+0x1a>
        s ++;
c01122be:	83 45 08 01          	addl   $0x1,0x8(%ebp)
strtol(const char *s, char **endptr, int base) {
    int neg = 0;
    long val = 0;

    // gobble initial whitespace
    while (*s == ' ' || *s == '\t') {
c01122c2:	8b 45 08             	mov    0x8(%ebp),%eax
c01122c5:	0f b6 00             	movzbl (%eax),%eax
c01122c8:	3c 20                	cmp    $0x20,%al
c01122ca:	74 f2                	je     c01122be <strtol+0x16>
c01122cc:	8b 45 08             	mov    0x8(%ebp),%eax
c01122cf:	0f b6 00             	movzbl (%eax),%eax
c01122d2:	3c 09                	cmp    $0x9,%al
c01122d4:	74 e8                	je     c01122be <strtol+0x16>
        s ++;
    }

    // plus/minus sign
    if (*s == '+') {
c01122d6:	8b 45 08             	mov    0x8(%ebp),%eax
c01122d9:	0f b6 00             	movzbl (%eax),%eax
c01122dc:	3c 2b                	cmp    $0x2b,%al
c01122de:	75 06                	jne    c01122e6 <strtol+0x3e>
        s ++;
c01122e0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01122e4:	eb 15                	jmp    c01122fb <strtol+0x53>
    }
    else if (*s == '-') {
c01122e6:	8b 45 08             	mov    0x8(%ebp),%eax
c01122e9:	0f b6 00             	movzbl (%eax),%eax
c01122ec:	3c 2d                	cmp    $0x2d,%al
c01122ee:	75 0b                	jne    c01122fb <strtol+0x53>
        s ++, neg = 1;
c01122f0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01122f4:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
    }

    // hex or octal base prefix
    if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x')) {
c01122fb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c01122ff:	74 06                	je     c0112307 <strtol+0x5f>
c0112301:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
c0112305:	75 24                	jne    c011232b <strtol+0x83>
c0112307:	8b 45 08             	mov    0x8(%ebp),%eax
c011230a:	0f b6 00             	movzbl (%eax),%eax
c011230d:	3c 30                	cmp    $0x30,%al
c011230f:	75 1a                	jne    c011232b <strtol+0x83>
c0112311:	8b 45 08             	mov    0x8(%ebp),%eax
c0112314:	83 c0 01             	add    $0x1,%eax
c0112317:	0f b6 00             	movzbl (%eax),%eax
c011231a:	3c 78                	cmp    $0x78,%al
c011231c:	75 0d                	jne    c011232b <strtol+0x83>
        s += 2, base = 16;
c011231e:	83 45 08 02          	addl   $0x2,0x8(%ebp)
c0112322:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
c0112329:	eb 2a                	jmp    c0112355 <strtol+0xad>
    }
    else if (base == 0 && s[0] == '0') {
c011232b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011232f:	75 17                	jne    c0112348 <strtol+0xa0>
c0112331:	8b 45 08             	mov    0x8(%ebp),%eax
c0112334:	0f b6 00             	movzbl (%eax),%eax
c0112337:	3c 30                	cmp    $0x30,%al
c0112339:	75 0d                	jne    c0112348 <strtol+0xa0>
        s ++, base = 8;
c011233b:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c011233f:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
c0112346:	eb 0d                	jmp    c0112355 <strtol+0xad>
    }
    else if (base == 0) {
c0112348:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
c011234c:	75 07                	jne    c0112355 <strtol+0xad>
        base = 10;
c011234e:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

    // digits
    while (1) {
        int dig;

        if (*s >= '0' && *s <= '9') {
c0112355:	8b 45 08             	mov    0x8(%ebp),%eax
c0112358:	0f b6 00             	movzbl (%eax),%eax
c011235b:	3c 2f                	cmp    $0x2f,%al
c011235d:	7e 1b                	jle    c011237a <strtol+0xd2>
c011235f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112362:	0f b6 00             	movzbl (%eax),%eax
c0112365:	3c 39                	cmp    $0x39,%al
c0112367:	7f 11                	jg     c011237a <strtol+0xd2>
            dig = *s - '0';
c0112369:	8b 45 08             	mov    0x8(%ebp),%eax
c011236c:	0f b6 00             	movzbl (%eax),%eax
c011236f:	0f be c0             	movsbl %al,%eax
c0112372:	83 e8 30             	sub    $0x30,%eax
c0112375:	89 45 f4             	mov    %eax,-0xc(%ebp)
c0112378:	eb 48                	jmp    c01123c2 <strtol+0x11a>
        }
        else if (*s >= 'a' && *s <= 'z') {
c011237a:	8b 45 08             	mov    0x8(%ebp),%eax
c011237d:	0f b6 00             	movzbl (%eax),%eax
c0112380:	3c 60                	cmp    $0x60,%al
c0112382:	7e 1b                	jle    c011239f <strtol+0xf7>
c0112384:	8b 45 08             	mov    0x8(%ebp),%eax
c0112387:	0f b6 00             	movzbl (%eax),%eax
c011238a:	3c 7a                	cmp    $0x7a,%al
c011238c:	7f 11                	jg     c011239f <strtol+0xf7>
            dig = *s - 'a' + 10;
c011238e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112391:	0f b6 00             	movzbl (%eax),%eax
c0112394:	0f be c0             	movsbl %al,%eax
c0112397:	83 e8 57             	sub    $0x57,%eax
c011239a:	89 45 f4             	mov    %eax,-0xc(%ebp)
c011239d:	eb 23                	jmp    c01123c2 <strtol+0x11a>
        }
        else if (*s >= 'A' && *s <= 'Z') {
c011239f:	8b 45 08             	mov    0x8(%ebp),%eax
c01123a2:	0f b6 00             	movzbl (%eax),%eax
c01123a5:	3c 40                	cmp    $0x40,%al
c01123a7:	7e 3c                	jle    c01123e5 <strtol+0x13d>
c01123a9:	8b 45 08             	mov    0x8(%ebp),%eax
c01123ac:	0f b6 00             	movzbl (%eax),%eax
c01123af:	3c 5a                	cmp    $0x5a,%al
c01123b1:	7f 32                	jg     c01123e5 <strtol+0x13d>
            dig = *s - 'A' + 10;
c01123b3:	8b 45 08             	mov    0x8(%ebp),%eax
c01123b6:	0f b6 00             	movzbl (%eax),%eax
c01123b9:	0f be c0             	movsbl %al,%eax
c01123bc:	83 e8 37             	sub    $0x37,%eax
c01123bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }
        else {
            break;
        }
        if (dig >= base) {
c01123c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123c5:	3b 45 10             	cmp    0x10(%ebp),%eax
c01123c8:	7d 1a                	jge    c01123e4 <strtol+0x13c>
            break;
        }
        s ++, val = (val * base) + dig;
c01123ca:	83 45 08 01          	addl   $0x1,0x8(%ebp)
c01123ce:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01123d1:	0f af 45 10          	imul   0x10(%ebp),%eax
c01123d5:	89 c2                	mov    %eax,%edx
c01123d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
c01123da:	01 d0                	add    %edx,%eax
c01123dc:	89 45 f8             	mov    %eax,-0x8(%ebp)
        // we don't properly detect overflow!
    }
c01123df:	e9 71 ff ff ff       	jmp    c0112355 <strtol+0xad>
        }
        else {
            break;
        }
        if (dig >= base) {
            break;
c01123e4:	90                   	nop
        }
        s ++, val = (val * base) + dig;
        // we don't properly detect overflow!
    }

    if (endptr) {
c01123e5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01123e9:	74 08                	je     c01123f3 <strtol+0x14b>
        *endptr = (char *) s;
c01123eb:	8b 45 0c             	mov    0xc(%ebp),%eax
c01123ee:	8b 55 08             	mov    0x8(%ebp),%edx
c01123f1:	89 10                	mov    %edx,(%eax)
    }
    return (neg ? -val : val);
c01123f3:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
c01123f7:	74 07                	je     c0112400 <strtol+0x158>
c01123f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
c01123fc:	f7 d8                	neg    %eax
c01123fe:	eb 03                	jmp    c0112403 <strtol+0x15b>
c0112400:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
c0112403:	c9                   	leave  
c0112404:	c3                   	ret    

c0112405 <memset>:
 * @n:      number of bytes to be set to the value
 *
 * The memset() function returns @s.
 * */
void *
memset(void *s, char c, size_t n) {
c0112405:	55                   	push   %ebp
c0112406:	89 e5                	mov    %esp,%ebp
c0112408:	57                   	push   %edi
c0112409:	83 ec 24             	sub    $0x24,%esp
c011240c:	8b 45 0c             	mov    0xc(%ebp),%eax
c011240f:	88 45 d8             	mov    %al,-0x28(%ebp)
#ifdef __HAVE_ARCH_MEMSET
    return __memset(s, c, n);
c0112412:	0f be 45 d8          	movsbl -0x28(%ebp),%eax
c0112416:	8b 55 08             	mov    0x8(%ebp),%edx
c0112419:	89 55 f8             	mov    %edx,-0x8(%ebp)
c011241c:	88 45 f7             	mov    %al,-0x9(%ebp)
c011241f:	8b 45 10             	mov    0x10(%ebp),%eax
c0112422:	89 45 f0             	mov    %eax,-0x10(%ebp)
#ifndef __HAVE_ARCH_MEMSET
#define __HAVE_ARCH_MEMSET
static inline void *
__memset(void *s, char c, size_t n) {
    int d0, d1;
    asm volatile (
c0112425:	8b 4d f0             	mov    -0x10(%ebp),%ecx
c0112428:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
c011242c:	8b 55 f8             	mov    -0x8(%ebp),%edx
c011242f:	89 d7                	mov    %edx,%edi
c0112431:	f3 aa                	rep stos %al,%es:(%edi)
c0112433:	89 fa                	mov    %edi,%edx
c0112435:	89 4d ec             	mov    %ecx,-0x14(%ebp)
c0112438:	89 55 e8             	mov    %edx,-0x18(%ebp)
        "rep; stosb;"
        : "=&c" (d0), "=&D" (d1)
        : "0" (n), "a" (c), "1" (s)
        : "memory");
    return s;
c011243b:	8b 45 f8             	mov    -0x8(%ebp),%eax
c011243e:	90                   	nop
    while (n -- > 0) {
        *p ++ = c;
    }
    return s;
#endif /* __HAVE_ARCH_MEMSET */
}
c011243f:	83 c4 24             	add    $0x24,%esp
c0112442:	5f                   	pop    %edi
c0112443:	5d                   	pop    %ebp
c0112444:	c3                   	ret    

c0112445 <memmove>:
 * @n:      number of bytes to copy
 *
 * The memmove() function returns @dst.
 * */
void *
memmove(void *dst, const void *src, size_t n) {
c0112445:	55                   	push   %ebp
c0112446:	89 e5                	mov    %esp,%ebp
c0112448:	57                   	push   %edi
c0112449:	56                   	push   %esi
c011244a:	53                   	push   %ebx
c011244b:	83 ec 30             	sub    $0x30,%esp
c011244e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112451:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112454:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112457:	89 45 ec             	mov    %eax,-0x14(%ebp)
c011245a:	8b 45 10             	mov    0x10(%ebp),%eax
c011245d:	89 45 e8             	mov    %eax,-0x18(%ebp)

#ifndef __HAVE_ARCH_MEMMOVE
#define __HAVE_ARCH_MEMMOVE
static inline void *
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
c0112460:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112463:	3b 45 ec             	cmp    -0x14(%ebp),%eax
c0112466:	73 42                	jae    c01124aa <memmove+0x65>
c0112468:	8b 45 f0             	mov    -0x10(%ebp),%eax
c011246b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c011246e:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112471:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0112474:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112477:	89 45 dc             	mov    %eax,-0x24(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c011247a:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011247d:	c1 e8 02             	shr    $0x2,%eax
c0112480:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c0112482:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112485:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112488:	89 d7                	mov    %edx,%edi
c011248a:	89 c6                	mov    %eax,%esi
c011248c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c011248e:	8b 4d dc             	mov    -0x24(%ebp),%ecx
c0112491:	83 e1 03             	and    $0x3,%ecx
c0112494:	74 02                	je     c0112498 <memmove+0x53>
c0112496:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0112498:	89 f0                	mov    %esi,%eax
c011249a:	89 fa                	mov    %edi,%edx
c011249c:	89 4d d8             	mov    %ecx,-0x28(%ebp)
c011249f:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c01124a2:	89 45 d0             	mov    %eax,-0x30(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c01124a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
#ifdef __HAVE_ARCH_MEMMOVE
    return __memmove(dst, src, n);
c01124a8:	eb 36                	jmp    c01124e0 <memmove+0x9b>
    asm volatile (
        "std;"
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
c01124aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01124ad:	8d 50 ff             	lea    -0x1(%eax),%edx
c01124b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
c01124b3:	01 c2                	add    %eax,%edx
c01124b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01124b8:	8d 48 ff             	lea    -0x1(%eax),%ecx
c01124bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01124be:	8d 1c 01             	lea    (%ecx,%eax,1),%ebx
__memmove(void *dst, const void *src, size_t n) {
    if (dst < src) {
        return __memcpy(dst, src, n);
    }
    int d0, d1, d2;
    asm volatile (
c01124c1:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01124c4:	89 c1                	mov    %eax,%ecx
c01124c6:	89 d8                	mov    %ebx,%eax
c01124c8:	89 d6                	mov    %edx,%esi
c01124ca:	89 c7                	mov    %eax,%edi
c01124cc:	fd                   	std    
c01124cd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c01124cf:	fc                   	cld    
c01124d0:	89 f8                	mov    %edi,%eax
c01124d2:	89 f2                	mov    %esi,%edx
c01124d4:	89 4d cc             	mov    %ecx,-0x34(%ebp)
c01124d7:	89 55 c8             	mov    %edx,-0x38(%ebp)
c01124da:	89 45 c4             	mov    %eax,-0x3c(%ebp)
        "rep; movsb;"
        "cld;"
        : "=&c" (d0), "=&S" (d1), "=&D" (d2)
        : "0" (n), "1" (n - 1 + src), "2" (n - 1 + dst)
        : "memory");
    return dst;
c01124dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
            *d ++ = *s ++;
        }
    }
    return dst;
#endif /* __HAVE_ARCH_MEMMOVE */
}
c01124e0:	83 c4 30             	add    $0x30,%esp
c01124e3:	5b                   	pop    %ebx
c01124e4:	5e                   	pop    %esi
c01124e5:	5f                   	pop    %edi
c01124e6:	5d                   	pop    %ebp
c01124e7:	c3                   	ret    

c01124e8 <memcpy>:
 * it always copies exactly @n bytes. To avoid overflows, the size of arrays pointed
 * by both @src and @dst, should be at least @n bytes, and should not overlap
 * (for overlapping memory area, memmove is a safer approach).
 * */
void *
memcpy(void *dst, const void *src, size_t n) {
c01124e8:	55                   	push   %ebp
c01124e9:	89 e5                	mov    %esp,%ebp
c01124eb:	57                   	push   %edi
c01124ec:	56                   	push   %esi
c01124ed:	83 ec 20             	sub    $0x20,%esp
c01124f0:	8b 45 08             	mov    0x8(%ebp),%eax
c01124f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01124f6:	8b 45 0c             	mov    0xc(%ebp),%eax
c01124f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01124fc:	8b 45 10             	mov    0x10(%ebp),%eax
c01124ff:	89 45 ec             	mov    %eax,-0x14(%ebp)
        "andl $3, %%ecx;"
        "jz 1f;"
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
c0112502:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112505:	c1 e8 02             	shr    $0x2,%eax
c0112508:	89 c1                	mov    %eax,%ecx
#ifndef __HAVE_ARCH_MEMCPY
#define __HAVE_ARCH_MEMCPY
static inline void *
__memcpy(void *dst, const void *src, size_t n) {
    int d0, d1, d2;
    asm volatile (
c011250a:	8b 55 f4             	mov    -0xc(%ebp),%edx
c011250d:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112510:	89 d7                	mov    %edx,%edi
c0112512:	89 c6                	mov    %eax,%esi
c0112514:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
c0112516:	8b 4d ec             	mov    -0x14(%ebp),%ecx
c0112519:	83 e1 03             	and    $0x3,%ecx
c011251c:	74 02                	je     c0112520 <memcpy+0x38>
c011251e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
c0112520:	89 f0                	mov    %esi,%eax
c0112522:	89 fa                	mov    %edi,%edx
c0112524:	89 4d e8             	mov    %ecx,-0x18(%ebp)
c0112527:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c011252a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        "rep; movsb;"
        "1:"
        : "=&c" (d0), "=&D" (d1), "=&S" (d2)
        : "0" (n / 4), "g" (n), "1" (dst), "2" (src)
        : "memory");
    return dst;
c011252d:	8b 45 f4             	mov    -0xc(%ebp),%eax
#ifdef __HAVE_ARCH_MEMCPY
    return __memcpy(dst, src, n);
c0112530:	90                   	nop
    while (n -- > 0) {
        *d ++ = *s ++;
    }
    return dst;
#endif /* __HAVE_ARCH_MEMCPY */
}
c0112531:	83 c4 20             	add    $0x20,%esp
c0112534:	5e                   	pop    %esi
c0112535:	5f                   	pop    %edi
c0112536:	5d                   	pop    %ebp
c0112537:	c3                   	ret    

c0112538 <memcmp>:
 *   match in both memory blocks has a greater value in @v1 than in @v2
 *   as if evaluated as unsigned char values;
 * - And a value less than zero indicates the opposite.
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
c0112538:	55                   	push   %ebp
c0112539:	89 e5                	mov    %esp,%ebp
c011253b:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = (const char *)v1;
c011253e:	8b 45 08             	mov    0x8(%ebp),%eax
c0112541:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s2 = (const char *)v2;
c0112544:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112547:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (n -- > 0) {
c011254a:	eb 30                	jmp    c011257c <memcmp+0x44>
        if (*s1 != *s2) {
c011254c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011254f:	0f b6 10             	movzbl (%eax),%edx
c0112552:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0112555:	0f b6 00             	movzbl (%eax),%eax
c0112558:	38 c2                	cmp    %al,%dl
c011255a:	74 18                	je     c0112574 <memcmp+0x3c>
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
c011255c:	8b 45 fc             	mov    -0x4(%ebp),%eax
c011255f:	0f b6 00             	movzbl (%eax),%eax
c0112562:	0f b6 d0             	movzbl %al,%edx
c0112565:	8b 45 f8             	mov    -0x8(%ebp),%eax
c0112568:	0f b6 00             	movzbl (%eax),%eax
c011256b:	0f b6 c0             	movzbl %al,%eax
c011256e:	29 c2                	sub    %eax,%edx
c0112570:	89 d0                	mov    %edx,%eax
c0112572:	eb 1a                	jmp    c011258e <memcmp+0x56>
        }
        s1 ++, s2 ++;
c0112574:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
c0112578:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
 * */
int
memcmp(const void *v1, const void *v2, size_t n) {
    const char *s1 = (const char *)v1;
    const char *s2 = (const char *)v2;
    while (n -- > 0) {
c011257c:	8b 45 10             	mov    0x10(%ebp),%eax
c011257f:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112582:	89 55 10             	mov    %edx,0x10(%ebp)
c0112585:	85 c0                	test   %eax,%eax
c0112587:	75 c3                	jne    c011254c <memcmp+0x14>
        if (*s1 != *s2) {
            return (int)((unsigned char)*s1 - (unsigned char)*s2);
        }
        s1 ++, s2 ++;
    }
    return 0;
c0112589:	b8 00 00 00 00       	mov    $0x0,%eax
}
c011258e:	c9                   	leave  
c011258f:	c3                   	ret    

c0112590 <printnum>:
 * @width:      maximum number of digits, if the actual width is less than @width, use @padc instead
 * @padc:       character that padded on the left if the actual width is less than @width
 * */
static void
printnum(void (*putch)(int, void*, int), int fd, void *putdat,
        unsigned long long num, unsigned base, int width, int padc) {
c0112590:	55                   	push   %ebp
c0112591:	89 e5                	mov    %esp,%ebp
c0112593:	83 ec 38             	sub    $0x38,%esp
c0112596:	8b 45 14             	mov    0x14(%ebp),%eax
c0112599:	89 45 d0             	mov    %eax,-0x30(%ebp)
c011259c:	8b 45 18             	mov    0x18(%ebp),%eax
c011259f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
    unsigned long long result = num;
c01125a2:	8b 45 d0             	mov    -0x30(%ebp),%eax
c01125a5:	8b 55 d4             	mov    -0x2c(%ebp),%edx
c01125a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
c01125ab:	89 55 ec             	mov    %edx,-0x14(%ebp)
    unsigned mod = do_div(result, base);
c01125ae:	8b 45 1c             	mov    0x1c(%ebp),%eax
c01125b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
c01125b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
c01125b7:	8b 55 ec             	mov    -0x14(%ebp),%edx
c01125ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01125bd:	89 55 f0             	mov    %edx,-0x10(%ebp)
c01125c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
c01125c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
c01125ca:	74 1c                	je     c01125e8 <printnum+0x58>
c01125cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125cf:	ba 00 00 00 00       	mov    $0x0,%edx
c01125d4:	f7 75 e4             	divl   -0x1c(%ebp)
c01125d7:	89 55 f4             	mov    %edx,-0xc(%ebp)
c01125da:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01125dd:	ba 00 00 00 00       	mov    $0x0,%edx
c01125e2:	f7 75 e4             	divl   -0x1c(%ebp)
c01125e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01125e8:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01125eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01125ee:	f7 75 e4             	divl   -0x1c(%ebp)
c01125f1:	89 45 e0             	mov    %eax,-0x20(%ebp)
c01125f4:	89 55 dc             	mov    %edx,-0x24(%ebp)
c01125f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
c01125fa:	8b 55 f0             	mov    -0x10(%ebp),%edx
c01125fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112600:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0112603:	8b 45 dc             	mov    -0x24(%ebp),%eax
c0112606:	89 45 d8             	mov    %eax,-0x28(%ebp)

    // first recursively print all preceding (more significant) digits
    if (num >= base) {
c0112609:	8b 45 1c             	mov    0x1c(%ebp),%eax
c011260c:	ba 00 00 00 00       	mov    $0x0,%edx
c0112611:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0112614:	77 44                	ja     c011265a <printnum+0xca>
c0112616:	3b 55 d4             	cmp    -0x2c(%ebp),%edx
c0112619:	72 05                	jb     c0112620 <printnum+0x90>
c011261b:	3b 45 d0             	cmp    -0x30(%ebp),%eax
c011261e:	77 3a                	ja     c011265a <printnum+0xca>
        printnum(putch, fd, putdat, result, base, width - 1, padc);
c0112620:	8b 45 20             	mov    0x20(%ebp),%eax
c0112623:	83 e8 01             	sub    $0x1,%eax
c0112626:	ff 75 24             	pushl  0x24(%ebp)
c0112629:	50                   	push   %eax
c011262a:	ff 75 1c             	pushl  0x1c(%ebp)
c011262d:	ff 75 ec             	pushl  -0x14(%ebp)
c0112630:	ff 75 e8             	pushl  -0x18(%ebp)
c0112633:	ff 75 10             	pushl  0x10(%ebp)
c0112636:	ff 75 0c             	pushl  0xc(%ebp)
c0112639:	ff 75 08             	pushl  0x8(%ebp)
c011263c:	e8 4f ff ff ff       	call   c0112590 <printnum>
c0112641:	83 c4 20             	add    $0x20,%esp
c0112644:	eb 1e                	jmp    c0112664 <printnum+0xd4>
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
            putch(padc, putdat, fd);
c0112646:	83 ec 04             	sub    $0x4,%esp
c0112649:	ff 75 0c             	pushl  0xc(%ebp)
c011264c:	ff 75 10             	pushl  0x10(%ebp)
c011264f:	ff 75 24             	pushl  0x24(%ebp)
c0112652:	8b 45 08             	mov    0x8(%ebp),%eax
c0112655:	ff d0                	call   *%eax
c0112657:	83 c4 10             	add    $0x10,%esp
    // first recursively print all preceding (more significant) digits
    if (num >= base) {
        printnum(putch, fd, putdat, result, base, width - 1, padc);
    } else {
        // print any needed pad characters before first digit
        while (-- width > 0)
c011265a:	83 6d 20 01          	subl   $0x1,0x20(%ebp)
c011265e:	83 7d 20 00          	cmpl   $0x0,0x20(%ebp)
c0112662:	7f e2                	jg     c0112646 <printnum+0xb6>
            putch(padc, putdat, fd);
    }
    // then print this (the least significant) digit
    putch("0123456789abcdef"[mod], putdat, fd);
c0112664:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112667:	05 c4 6f 11 c0       	add    $0xc0116fc4,%eax
c011266c:	0f b6 00             	movzbl (%eax),%eax
c011266f:	0f be c0             	movsbl %al,%eax
c0112672:	83 ec 04             	sub    $0x4,%esp
c0112675:	ff 75 0c             	pushl  0xc(%ebp)
c0112678:	ff 75 10             	pushl  0x10(%ebp)
c011267b:	50                   	push   %eax
c011267c:	8b 45 08             	mov    0x8(%ebp),%eax
c011267f:	ff d0                	call   *%eax
c0112681:	83 c4 10             	add    $0x10,%esp
}
c0112684:	90                   	nop
c0112685:	c9                   	leave  
c0112686:	c3                   	ret    

c0112687 <getuint>:
 * getuint - get an unsigned int of various possible sizes from a varargs list
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static unsigned long long
getuint(va_list *ap, int lflag) {
c0112687:	55                   	push   %ebp
c0112688:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c011268a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c011268e:	7e 14                	jle    c01126a4 <getuint+0x1d>
        return va_arg(*ap, unsigned long long);
c0112690:	8b 45 08             	mov    0x8(%ebp),%eax
c0112693:	8b 00                	mov    (%eax),%eax
c0112695:	8d 48 08             	lea    0x8(%eax),%ecx
c0112698:	8b 55 08             	mov    0x8(%ebp),%edx
c011269b:	89 0a                	mov    %ecx,(%edx)
c011269d:	8b 50 04             	mov    0x4(%eax),%edx
c01126a0:	8b 00                	mov    (%eax),%eax
c01126a2:	eb 30                	jmp    c01126d4 <getuint+0x4d>
    }
    else if (lflag) {
c01126a4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01126a8:	74 16                	je     c01126c0 <getuint+0x39>
        return va_arg(*ap, unsigned long);
c01126aa:	8b 45 08             	mov    0x8(%ebp),%eax
c01126ad:	8b 00                	mov    (%eax),%eax
c01126af:	8d 48 04             	lea    0x4(%eax),%ecx
c01126b2:	8b 55 08             	mov    0x8(%ebp),%edx
c01126b5:	89 0a                	mov    %ecx,(%edx)
c01126b7:	8b 00                	mov    (%eax),%eax
c01126b9:	ba 00 00 00 00       	mov    $0x0,%edx
c01126be:	eb 14                	jmp    c01126d4 <getuint+0x4d>
    }
    else {
        return va_arg(*ap, unsigned int);
c01126c0:	8b 45 08             	mov    0x8(%ebp),%eax
c01126c3:	8b 00                	mov    (%eax),%eax
c01126c5:	8d 48 04             	lea    0x4(%eax),%ecx
c01126c8:	8b 55 08             	mov    0x8(%ebp),%edx
c01126cb:	89 0a                	mov    %ecx,(%edx)
c01126cd:	8b 00                	mov    (%eax),%eax
c01126cf:	ba 00 00 00 00       	mov    $0x0,%edx
    }
}
c01126d4:	5d                   	pop    %ebp
c01126d5:	c3                   	ret    

c01126d6 <getint>:
 * getint - same as getuint but signed, we can't use getuint because of sign extension
 * @ap:         a varargs list pointer
 * @lflag:      determines the size of the vararg that @ap points to
 * */
static long long
getint(va_list *ap, int lflag) {
c01126d6:	55                   	push   %ebp
c01126d7:	89 e5                	mov    %esp,%ebp
    if (lflag >= 2) {
c01126d9:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
c01126dd:	7e 14                	jle    c01126f3 <getint+0x1d>
        return va_arg(*ap, long long);
c01126df:	8b 45 08             	mov    0x8(%ebp),%eax
c01126e2:	8b 00                	mov    (%eax),%eax
c01126e4:	8d 48 08             	lea    0x8(%eax),%ecx
c01126e7:	8b 55 08             	mov    0x8(%ebp),%edx
c01126ea:	89 0a                	mov    %ecx,(%edx)
c01126ec:	8b 50 04             	mov    0x4(%eax),%edx
c01126ef:	8b 00                	mov    (%eax),%eax
c01126f1:	eb 28                	jmp    c011271b <getint+0x45>
    }
    else if (lflag) {
c01126f3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
c01126f7:	74 12                	je     c011270b <getint+0x35>
        return va_arg(*ap, long);
c01126f9:	8b 45 08             	mov    0x8(%ebp),%eax
c01126fc:	8b 00                	mov    (%eax),%eax
c01126fe:	8d 48 04             	lea    0x4(%eax),%ecx
c0112701:	8b 55 08             	mov    0x8(%ebp),%edx
c0112704:	89 0a                	mov    %ecx,(%edx)
c0112706:	8b 00                	mov    (%eax),%eax
c0112708:	99                   	cltd   
c0112709:	eb 10                	jmp    c011271b <getint+0x45>
    }
    else {
        return va_arg(*ap, int);
c011270b:	8b 45 08             	mov    0x8(%ebp),%eax
c011270e:	8b 00                	mov    (%eax),%eax
c0112710:	8d 48 04             	lea    0x4(%eax),%ecx
c0112713:	8b 55 08             	mov    0x8(%ebp),%edx
c0112716:	89 0a                	mov    %ecx,(%edx)
c0112718:	8b 00                	mov    (%eax),%eax
c011271a:	99                   	cltd   
    }
}
c011271b:	5d                   	pop    %ebp
c011271c:	c3                   	ret    

c011271d <printfmt>:
 * @fd:         file descriptor
 * @putdat:     used by @putch function
 * @fmt:        the format string to use
 * */
void
printfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, ...) {
c011271d:	55                   	push   %ebp
c011271e:	89 e5                	mov    %esp,%ebp
c0112720:	83 ec 18             	sub    $0x18,%esp
    va_list ap;

    va_start(ap, fmt);
c0112723:	8d 45 18             	lea    0x18(%ebp),%eax
c0112726:	89 45 f4             	mov    %eax,-0xc(%ebp)
    vprintfmt(putch, fd, putdat, fmt, ap);
c0112729:	8b 45 f4             	mov    -0xc(%ebp),%eax
c011272c:	83 ec 0c             	sub    $0xc,%esp
c011272f:	50                   	push   %eax
c0112730:	ff 75 14             	pushl  0x14(%ebp)
c0112733:	ff 75 10             	pushl  0x10(%ebp)
c0112736:	ff 75 0c             	pushl  0xc(%ebp)
c0112739:	ff 75 08             	pushl  0x8(%ebp)
c011273c:	e8 06 00 00 00       	call   c0112747 <vprintfmt>
c0112741:	83 c4 20             	add    $0x20,%esp
    va_end(ap);
}
c0112744:	90                   	nop
c0112745:	c9                   	leave  
c0112746:	c3                   	ret    

c0112747 <vprintfmt>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want printfmt() instead.
 * */
void
vprintfmt(void (*putch)(int, void*, int), int fd, void *putdat, const char *fmt, va_list ap) {
c0112747:	55                   	push   %ebp
c0112748:	89 e5                	mov    %esp,%ebp
c011274a:	56                   	push   %esi
c011274b:	53                   	push   %ebx
c011274c:	83 ec 20             	sub    $0x20,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c011274f:	eb 1a                	jmp    c011276b <vprintfmt+0x24>
            if (ch == '\0') {
c0112751:	85 db                	test   %ebx,%ebx
c0112753:	0f 84 be 03 00 00    	je     c0112b17 <vprintfmt+0x3d0>
                return;
            }
            putch(ch, putdat, fd);
c0112759:	83 ec 04             	sub    $0x4,%esp
c011275c:	ff 75 0c             	pushl  0xc(%ebp)
c011275f:	ff 75 10             	pushl  0x10(%ebp)
c0112762:	53                   	push   %ebx
c0112763:	8b 45 08             	mov    0x8(%ebp),%eax
c0112766:	ff d0                	call   *%eax
c0112768:	83 c4 10             	add    $0x10,%esp
    register int ch, err;
    unsigned long long num;
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
c011276b:	8b 45 14             	mov    0x14(%ebp),%eax
c011276e:	8d 50 01             	lea    0x1(%eax),%edx
c0112771:	89 55 14             	mov    %edx,0x14(%ebp)
c0112774:	0f b6 00             	movzbl (%eax),%eax
c0112777:	0f b6 d8             	movzbl %al,%ebx
c011277a:	83 fb 25             	cmp    $0x25,%ebx
c011277d:	75 d2                	jne    c0112751 <vprintfmt+0xa>
            }
            putch(ch, putdat, fd);
        }

        // Process a %-escape sequence
        char padc = ' ';
c011277f:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
        width = precision = -1;
c0112783:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
c011278a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011278d:	89 45 e8             	mov    %eax,-0x18(%ebp)
        lflag = altflag = 0;
c0112790:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
c0112797:	8b 45 dc             	mov    -0x24(%ebp),%eax
c011279a:	89 45 e0             	mov    %eax,-0x20(%ebp)

    reswitch:
        switch (ch = *(unsigned char *)fmt ++) {
c011279d:	8b 45 14             	mov    0x14(%ebp),%eax
c01127a0:	8d 50 01             	lea    0x1(%eax),%edx
c01127a3:	89 55 14             	mov    %edx,0x14(%ebp)
c01127a6:	0f b6 00             	movzbl (%eax),%eax
c01127a9:	0f b6 d8             	movzbl %al,%ebx
c01127ac:	8d 43 dd             	lea    -0x23(%ebx),%eax
c01127af:	83 f8 55             	cmp    $0x55,%eax
c01127b2:	0f 87 2f 03 00 00    	ja     c0112ae7 <vprintfmt+0x3a0>
c01127b8:	8b 04 85 e8 6f 11 c0 	mov    -0x3fee9018(,%eax,4),%eax
c01127bf:	ff e0                	jmp    *%eax

        // flag to pad on the right
        case '-':
            padc = '-';
c01127c1:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
            goto reswitch;
c01127c5:	eb d6                	jmp    c011279d <vprintfmt+0x56>

        // flag to pad with 0's instead of spaces
        case '0':
            padc = '0';
c01127c7:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
            goto reswitch;
c01127cb:	eb d0                	jmp    c011279d <vprintfmt+0x56>

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c01127cd:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
                precision = precision * 10 + ch - '0';
c01127d4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c01127d7:	89 d0                	mov    %edx,%eax
c01127d9:	c1 e0 02             	shl    $0x2,%eax
c01127dc:	01 d0                	add    %edx,%eax
c01127de:	01 c0                	add    %eax,%eax
c01127e0:	01 d8                	add    %ebx,%eax
c01127e2:	83 e8 30             	sub    $0x30,%eax
c01127e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                ch = *fmt;
c01127e8:	8b 45 14             	mov    0x14(%ebp),%eax
c01127eb:	0f b6 00             	movzbl (%eax),%eax
c01127ee:	0f be d8             	movsbl %al,%ebx
                if (ch < '0' || ch > '9') {
c01127f1:	83 fb 2f             	cmp    $0x2f,%ebx
c01127f4:	7e 39                	jle    c011282f <vprintfmt+0xe8>
c01127f6:	83 fb 39             	cmp    $0x39,%ebx
c01127f9:	7f 34                	jg     c011282f <vprintfmt+0xe8>
            padc = '0';
            goto reswitch;

        // width field
        case '1' ... '9':
            for (precision = 0; ; ++ fmt) {
c01127fb:	83 45 14 01          	addl   $0x1,0x14(%ebp)
                precision = precision * 10 + ch - '0';
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
c01127ff:	eb d3                	jmp    c01127d4 <vprintfmt+0x8d>
            goto process_precision;

        case '*':
            precision = va_arg(ap, int);
c0112801:	8b 45 18             	mov    0x18(%ebp),%eax
c0112804:	8d 50 04             	lea    0x4(%eax),%edx
c0112807:	89 55 18             	mov    %edx,0x18(%ebp)
c011280a:	8b 00                	mov    (%eax),%eax
c011280c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
            goto process_precision;
c011280f:	eb 1f                	jmp    c0112830 <vprintfmt+0xe9>

        case '.':
            if (width < 0)
c0112811:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112815:	79 86                	jns    c011279d <vprintfmt+0x56>
                width = 0;
c0112817:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
            goto reswitch;
c011281e:	e9 7a ff ff ff       	jmp    c011279d <vprintfmt+0x56>

        case '#':
            altflag = 1;
c0112823:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
            goto reswitch;
c011282a:	e9 6e ff ff ff       	jmp    c011279d <vprintfmt+0x56>
                ch = *fmt;
                if (ch < '0' || ch > '9') {
                    break;
                }
            }
            goto process_precision;
c011282f:	90                   	nop
        case '#':
            altflag = 1;
            goto reswitch;

        process_precision:
            if (width < 0)
c0112830:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112834:	0f 89 63 ff ff ff    	jns    c011279d <vprintfmt+0x56>
                width = precision, precision = -1;
c011283a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c011283d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112840:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
            goto reswitch;
c0112847:	e9 51 ff ff ff       	jmp    c011279d <vprintfmt+0x56>

        // long flag (doubled for long long)
        case 'l':
            lflag ++;
c011284c:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
            goto reswitch;
c0112850:	e9 48 ff ff ff       	jmp    c011279d <vprintfmt+0x56>

        // character
        case 'c':
            putch(va_arg(ap, int), putdat, fd);
c0112855:	8b 45 18             	mov    0x18(%ebp),%eax
c0112858:	8d 50 04             	lea    0x4(%eax),%edx
c011285b:	89 55 18             	mov    %edx,0x18(%ebp)
c011285e:	8b 00                	mov    (%eax),%eax
c0112860:	83 ec 04             	sub    $0x4,%esp
c0112863:	ff 75 0c             	pushl  0xc(%ebp)
c0112866:	ff 75 10             	pushl  0x10(%ebp)
c0112869:	50                   	push   %eax
c011286a:	8b 45 08             	mov    0x8(%ebp),%eax
c011286d:	ff d0                	call   *%eax
c011286f:	83 c4 10             	add    $0x10,%esp
            break;
c0112872:	e9 9b 02 00 00       	jmp    c0112b12 <vprintfmt+0x3cb>

        // error message
        case 'e':
            err = va_arg(ap, int);
c0112877:	8b 45 18             	mov    0x18(%ebp),%eax
c011287a:	8d 50 04             	lea    0x4(%eax),%edx
c011287d:	89 55 18             	mov    %edx,0x18(%ebp)
c0112880:	8b 18                	mov    (%eax),%ebx
            if (err < 0) {
c0112882:	85 db                	test   %ebx,%ebx
c0112884:	79 02                	jns    c0112888 <vprintfmt+0x141>
                err = -err;
c0112886:	f7 db                	neg    %ebx
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
c0112888:	83 fb 18             	cmp    $0x18,%ebx
c011288b:	7f 0b                	jg     c0112898 <vprintfmt+0x151>
c011288d:	8b 34 9d 60 6f 11 c0 	mov    -0x3fee90a0(,%ebx,4),%esi
c0112894:	85 f6                	test   %esi,%esi
c0112896:	75 1f                	jne    c01128b7 <vprintfmt+0x170>
                printfmt(putch, fd, putdat, "error %d", err);
c0112898:	83 ec 0c             	sub    $0xc,%esp
c011289b:	53                   	push   %ebx
c011289c:	68 d5 6f 11 c0       	push   $0xc0116fd5
c01128a1:	ff 75 10             	pushl  0x10(%ebp)
c01128a4:	ff 75 0c             	pushl  0xc(%ebp)
c01128a7:	ff 75 08             	pushl  0x8(%ebp)
c01128aa:	e8 6e fe ff ff       	call   c011271d <printfmt>
c01128af:	83 c4 20             	add    $0x20,%esp
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
            }
            break;
c01128b2:	e9 5b 02 00 00       	jmp    c0112b12 <vprintfmt+0x3cb>
            }
            if (err > MAXERROR || (p = error_string[err]) == NULL) {
                printfmt(putch, fd, putdat, "error %d", err);
            }
            else {
                printfmt(putch, fd, putdat, "%s", p);
c01128b7:	83 ec 0c             	sub    $0xc,%esp
c01128ba:	56                   	push   %esi
c01128bb:	68 de 6f 11 c0       	push   $0xc0116fde
c01128c0:	ff 75 10             	pushl  0x10(%ebp)
c01128c3:	ff 75 0c             	pushl  0xc(%ebp)
c01128c6:	ff 75 08             	pushl  0x8(%ebp)
c01128c9:	e8 4f fe ff ff       	call   c011271d <printfmt>
c01128ce:	83 c4 20             	add    $0x20,%esp
            }
            break;
c01128d1:	e9 3c 02 00 00       	jmp    c0112b12 <vprintfmt+0x3cb>

        // string
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
c01128d6:	8b 45 18             	mov    0x18(%ebp),%eax
c01128d9:	8d 50 04             	lea    0x4(%eax),%edx
c01128dc:	89 55 18             	mov    %edx,0x18(%ebp)
c01128df:	8b 30                	mov    (%eax),%esi
c01128e1:	85 f6                	test   %esi,%esi
c01128e3:	75 05                	jne    c01128ea <vprintfmt+0x1a3>
                p = "(null)";
c01128e5:	be e1 6f 11 c0       	mov    $0xc0116fe1,%esi
            }
            if (width > 0 && padc != '-') {
c01128ea:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01128ee:	7e 7f                	jle    c011296f <vprintfmt+0x228>
c01128f0:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
c01128f4:	74 79                	je     c011296f <vprintfmt+0x228>
                for (width -= strnlen(p, precision); width > 0; width --) {
c01128f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
c01128f9:	83 ec 08             	sub    $0x8,%esp
c01128fc:	50                   	push   %eax
c01128fd:	56                   	push   %esi
c01128fe:	e8 d0 f7 ff ff       	call   c01120d3 <strnlen>
c0112903:	83 c4 10             	add    $0x10,%esp
c0112906:	89 c2                	mov    %eax,%edx
c0112908:	8b 45 e8             	mov    -0x18(%ebp),%eax
c011290b:	29 d0                	sub    %edx,%eax
c011290d:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112910:	eb 1a                	jmp    c011292c <vprintfmt+0x1e5>
                    putch(padc, putdat, fd);
c0112912:	0f be 45 db          	movsbl -0x25(%ebp),%eax
c0112916:	83 ec 04             	sub    $0x4,%esp
c0112919:	ff 75 0c             	pushl  0xc(%ebp)
c011291c:	ff 75 10             	pushl  0x10(%ebp)
c011291f:	50                   	push   %eax
c0112920:	8b 45 08             	mov    0x8(%ebp),%eax
c0112923:	ff d0                	call   *%eax
c0112925:	83 c4 10             	add    $0x10,%esp
        case 's':
            if ((p = va_arg(ap, char *)) == NULL) {
                p = "(null)";
            }
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
c0112928:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011292c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112930:	7f e0                	jg     c0112912 <vprintfmt+0x1cb>
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c0112932:	eb 3b                	jmp    c011296f <vprintfmt+0x228>
                if (altflag && (ch < ' ' || ch > '~')) {
c0112934:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
c0112938:	74 1f                	je     c0112959 <vprintfmt+0x212>
c011293a:	83 fb 1f             	cmp    $0x1f,%ebx
c011293d:	7e 05                	jle    c0112944 <vprintfmt+0x1fd>
c011293f:	83 fb 7e             	cmp    $0x7e,%ebx
c0112942:	7e 15                	jle    c0112959 <vprintfmt+0x212>
                    putch('?', putdat, fd);
c0112944:	83 ec 04             	sub    $0x4,%esp
c0112947:	ff 75 0c             	pushl  0xc(%ebp)
c011294a:	ff 75 10             	pushl  0x10(%ebp)
c011294d:	6a 3f                	push   $0x3f
c011294f:	8b 45 08             	mov    0x8(%ebp),%eax
c0112952:	ff d0                	call   *%eax
c0112954:	83 c4 10             	add    $0x10,%esp
c0112957:	eb 12                	jmp    c011296b <vprintfmt+0x224>
                }
                else {
                    putch(ch, putdat, fd);
c0112959:	83 ec 04             	sub    $0x4,%esp
c011295c:	ff 75 0c             	pushl  0xc(%ebp)
c011295f:	ff 75 10             	pushl  0x10(%ebp)
c0112962:	53                   	push   %ebx
c0112963:	8b 45 08             	mov    0x8(%ebp),%eax
c0112966:	ff d0                	call   *%eax
c0112968:	83 c4 10             	add    $0x10,%esp
            if (width > 0 && padc != '-') {
                for (width -= strnlen(p, precision); width > 0; width --) {
                    putch(padc, putdat, fd);
                }
            }
            for (; (ch = *p ++) != '\0' && (precision < 0 || -- precision >= 0); width --) {
c011296b:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c011296f:	89 f0                	mov    %esi,%eax
c0112971:	8d 70 01             	lea    0x1(%eax),%esi
c0112974:	0f b6 00             	movzbl (%eax),%eax
c0112977:	0f be d8             	movsbl %al,%ebx
c011297a:	85 db                	test   %ebx,%ebx
c011297c:	74 29                	je     c01129a7 <vprintfmt+0x260>
c011297e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c0112982:	78 b0                	js     c0112934 <vprintfmt+0x1ed>
c0112984:	83 6d e4 01          	subl   $0x1,-0x1c(%ebp)
c0112988:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
c011298c:	79 a6                	jns    c0112934 <vprintfmt+0x1ed>
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c011298e:	eb 17                	jmp    c01129a7 <vprintfmt+0x260>
                putch(' ', putdat, fd);
c0112990:	83 ec 04             	sub    $0x4,%esp
c0112993:	ff 75 0c             	pushl  0xc(%ebp)
c0112996:	ff 75 10             	pushl  0x10(%ebp)
c0112999:	6a 20                	push   $0x20
c011299b:	8b 45 08             	mov    0x8(%ebp),%eax
c011299e:	ff d0                	call   *%eax
c01129a0:	83 c4 10             	add    $0x10,%esp
                }
                else {
                    putch(ch, putdat, fd);
                }
            }
            for (; width > 0; width --) {
c01129a3:	83 6d e8 01          	subl   $0x1,-0x18(%ebp)
c01129a7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c01129ab:	7f e3                	jg     c0112990 <vprintfmt+0x249>
                putch(' ', putdat, fd);
            }
            break;
c01129ad:	e9 60 01 00 00       	jmp    c0112b12 <vprintfmt+0x3cb>

        // (signed) decimal
        case 'd':
            num = getint(&ap, lflag);
c01129b2:	83 ec 08             	sub    $0x8,%esp
c01129b5:	ff 75 e0             	pushl  -0x20(%ebp)
c01129b8:	8d 45 18             	lea    0x18(%ebp),%eax
c01129bb:	50                   	push   %eax
c01129bc:	e8 15 fd ff ff       	call   c01126d6 <getint>
c01129c1:	83 c4 10             	add    $0x10,%esp
c01129c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01129c7:	89 55 f4             	mov    %edx,-0xc(%ebp)
            if ((long long)num < 0) {
c01129ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01129d0:	85 d2                	test   %edx,%edx
c01129d2:	79 26                	jns    c01129fa <vprintfmt+0x2b3>
                putch('-', putdat, fd);
c01129d4:	83 ec 04             	sub    $0x4,%esp
c01129d7:	ff 75 0c             	pushl  0xc(%ebp)
c01129da:	ff 75 10             	pushl  0x10(%ebp)
c01129dd:	6a 2d                	push   $0x2d
c01129df:	8b 45 08             	mov    0x8(%ebp),%eax
c01129e2:	ff d0                	call   *%eax
c01129e4:	83 c4 10             	add    $0x10,%esp
                num = -(long long)num;
c01129e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
c01129ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
c01129ed:	f7 d8                	neg    %eax
c01129ef:	83 d2 00             	adc    $0x0,%edx
c01129f2:	f7 da                	neg    %edx
c01129f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
c01129f7:	89 55 f4             	mov    %edx,-0xc(%ebp)
            }
            base = 10;
c01129fa:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0112a01:	e9 a8 00 00 00       	jmp    c0112aae <vprintfmt+0x367>

        // unsigned decimal
        case 'u':
            num = getuint(&ap, lflag);
c0112a06:	83 ec 08             	sub    $0x8,%esp
c0112a09:	ff 75 e0             	pushl  -0x20(%ebp)
c0112a0c:	8d 45 18             	lea    0x18(%ebp),%eax
c0112a0f:	50                   	push   %eax
c0112a10:	e8 72 fc ff ff       	call   c0112687 <getuint>
c0112a15:	83 c4 10             	add    $0x10,%esp
c0112a18:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a1b:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 10;
c0112a1e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
            goto number;
c0112a25:	e9 84 00 00 00       	jmp    c0112aae <vprintfmt+0x367>

        // (unsigned) octal
        case 'o':
            num = getuint(&ap, lflag);
c0112a2a:	83 ec 08             	sub    $0x8,%esp
c0112a2d:	ff 75 e0             	pushl  -0x20(%ebp)
c0112a30:	8d 45 18             	lea    0x18(%ebp),%eax
c0112a33:	50                   	push   %eax
c0112a34:	e8 4e fc ff ff       	call   c0112687 <getuint>
c0112a39:	83 c4 10             	add    $0x10,%esp
c0112a3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a3f:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 8;
c0112a42:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
            goto number;
c0112a49:	eb 63                	jmp    c0112aae <vprintfmt+0x367>

        // pointer
        case 'p':
            putch('0', putdat, fd);
c0112a4b:	83 ec 04             	sub    $0x4,%esp
c0112a4e:	ff 75 0c             	pushl  0xc(%ebp)
c0112a51:	ff 75 10             	pushl  0x10(%ebp)
c0112a54:	6a 30                	push   $0x30
c0112a56:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a59:	ff d0                	call   *%eax
c0112a5b:	83 c4 10             	add    $0x10,%esp
            putch('x', putdat, fd);
c0112a5e:	83 ec 04             	sub    $0x4,%esp
c0112a61:	ff 75 0c             	pushl  0xc(%ebp)
c0112a64:	ff 75 10             	pushl  0x10(%ebp)
c0112a67:	6a 78                	push   $0x78
c0112a69:	8b 45 08             	mov    0x8(%ebp),%eax
c0112a6c:	ff d0                	call   *%eax
c0112a6e:	83 c4 10             	add    $0x10,%esp
            num = (unsigned long long)(uintptr_t)va_arg(ap, void *);
c0112a71:	8b 45 18             	mov    0x18(%ebp),%eax
c0112a74:	8d 50 04             	lea    0x4(%eax),%edx
c0112a77:	89 55 18             	mov    %edx,0x18(%ebp)
c0112a7a:	8b 00                	mov    (%eax),%eax
c0112a7c:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112a7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
            base = 16;
c0112a86:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
            goto number;
c0112a8d:	eb 1f                	jmp    c0112aae <vprintfmt+0x367>

        // (unsigned) hexadecimal
        case 'x':
            num = getuint(&ap, lflag);
c0112a8f:	83 ec 08             	sub    $0x8,%esp
c0112a92:	ff 75 e0             	pushl  -0x20(%ebp)
c0112a95:	8d 45 18             	lea    0x18(%ebp),%eax
c0112a98:	50                   	push   %eax
c0112a99:	e8 e9 fb ff ff       	call   c0112687 <getuint>
c0112a9e:	83 c4 10             	add    $0x10,%esp
c0112aa1:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112aa4:	89 55 f4             	mov    %edx,-0xc(%ebp)
            base = 16;
c0112aa7:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
        number:
            printnum(putch, fd, putdat, num, base, width, padc);
c0112aae:	0f be 55 db          	movsbl -0x25(%ebp),%edx
c0112ab2:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112ab5:	52                   	push   %edx
c0112ab6:	ff 75 e8             	pushl  -0x18(%ebp)
c0112ab9:	50                   	push   %eax
c0112aba:	ff 75 f4             	pushl  -0xc(%ebp)
c0112abd:	ff 75 f0             	pushl  -0x10(%ebp)
c0112ac0:	ff 75 10             	pushl  0x10(%ebp)
c0112ac3:	ff 75 0c             	pushl  0xc(%ebp)
c0112ac6:	ff 75 08             	pushl  0x8(%ebp)
c0112ac9:	e8 c2 fa ff ff       	call   c0112590 <printnum>
c0112ace:	83 c4 20             	add    $0x20,%esp
            break;
c0112ad1:	eb 3f                	jmp    c0112b12 <vprintfmt+0x3cb>

        // escaped '%' character
        case '%':
            putch(ch, putdat, fd);
c0112ad3:	83 ec 04             	sub    $0x4,%esp
c0112ad6:	ff 75 0c             	pushl  0xc(%ebp)
c0112ad9:	ff 75 10             	pushl  0x10(%ebp)
c0112adc:	53                   	push   %ebx
c0112add:	8b 45 08             	mov    0x8(%ebp),%eax
c0112ae0:	ff d0                	call   *%eax
c0112ae2:	83 c4 10             	add    $0x10,%esp
            break;
c0112ae5:	eb 2b                	jmp    c0112b12 <vprintfmt+0x3cb>

        // unrecognized escape sequence - just print it literally
        default:
            putch('%', putdat, fd);
c0112ae7:	83 ec 04             	sub    $0x4,%esp
c0112aea:	ff 75 0c             	pushl  0xc(%ebp)
c0112aed:	ff 75 10             	pushl  0x10(%ebp)
c0112af0:	6a 25                	push   $0x25
c0112af2:	8b 45 08             	mov    0x8(%ebp),%eax
c0112af5:	ff d0                	call   *%eax
c0112af7:	83 c4 10             	add    $0x10,%esp
            for (fmt --; fmt[-1] != '%'; fmt --)
c0112afa:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0112afe:	eb 04                	jmp    c0112b04 <vprintfmt+0x3bd>
c0112b00:	83 6d 14 01          	subl   $0x1,0x14(%ebp)
c0112b04:	8b 45 14             	mov    0x14(%ebp),%eax
c0112b07:	83 e8 01             	sub    $0x1,%eax
c0112b0a:	0f b6 00             	movzbl (%eax),%eax
c0112b0d:	3c 25                	cmp    $0x25,%al
c0112b0f:	75 ef                	jne    c0112b00 <vprintfmt+0x3b9>
                /* do nothing */;
            break;
c0112b11:	90                   	nop
        }
    }
c0112b12:	e9 38 fc ff ff       	jmp    c011274f <vprintfmt+0x8>
    int base, width, precision, lflag, altflag;

    while (1) {
        while ((ch = *(unsigned char *)fmt ++) != '%') {
            if (ch == '\0') {
                return;
c0112b17:	90                   	nop
            for (fmt --; fmt[-1] != '%'; fmt --)
                /* do nothing */;
            break;
        }
    }
}
c0112b18:	8d 65 f8             	lea    -0x8(%ebp),%esp
c0112b1b:	5b                   	pop    %ebx
c0112b1c:	5e                   	pop    %esi
c0112b1d:	5d                   	pop    %ebp
c0112b1e:	c3                   	ret    

c0112b1f <sprintputch>:
 * sprintputch - 'print' a single character in a buffer
 * @ch:         the character will be printed
 * @b:          the buffer to place the character @ch
 * */
static void
sprintputch(int ch, struct sprintbuf *b) {
c0112b1f:	55                   	push   %ebp
c0112b20:	89 e5                	mov    %esp,%ebp
    b->cnt ++;
c0112b22:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b25:	8b 40 08             	mov    0x8(%eax),%eax
c0112b28:	8d 50 01             	lea    0x1(%eax),%edx
c0112b2b:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b2e:	89 50 08             	mov    %edx,0x8(%eax)
    if (b->buf < b->ebuf) {
c0112b31:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b34:	8b 10                	mov    (%eax),%edx
c0112b36:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b39:	8b 40 04             	mov    0x4(%eax),%eax
c0112b3c:	39 c2                	cmp    %eax,%edx
c0112b3e:	73 12                	jae    c0112b52 <sprintputch+0x33>
        *b->buf ++ = ch;
c0112b40:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b43:	8b 00                	mov    (%eax),%eax
c0112b45:	8d 48 01             	lea    0x1(%eax),%ecx
c0112b48:	8b 55 0c             	mov    0xc(%ebp),%edx
c0112b4b:	89 0a                	mov    %ecx,(%edx)
c0112b4d:	8b 55 08             	mov    0x8(%ebp),%edx
c0112b50:	88 10                	mov    %dl,(%eax)
    }
}
c0112b52:	90                   	nop
c0112b53:	5d                   	pop    %ebp
c0112b54:	c3                   	ret    

c0112b55 <snprintf>:
 * @str:        the buffer to place the result into
 * @size:       the size of buffer, including the trailing null space
 * @fmt:        the format string to use
 * */
int
snprintf(char *str, size_t size, const char *fmt, ...) {
c0112b55:	55                   	push   %ebp
c0112b56:	89 e5                	mov    %esp,%ebp
c0112b58:	83 ec 18             	sub    $0x18,%esp
    va_list ap;
    int cnt;
    va_start(ap, fmt);
c0112b5b:	8d 45 14             	lea    0x14(%ebp),%eax
c0112b5e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    cnt = vsnprintf(str, size, fmt, ap);
c0112b61:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112b64:	50                   	push   %eax
c0112b65:	ff 75 10             	pushl  0x10(%ebp)
c0112b68:	ff 75 0c             	pushl  0xc(%ebp)
c0112b6b:	ff 75 08             	pushl  0x8(%ebp)
c0112b6e:	e8 0b 00 00 00       	call   c0112b7e <vsnprintf>
c0112b73:	83 c4 10             	add    $0x10,%esp
c0112b76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    va_end(ap);
    return cnt;
c0112b79:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112b7c:	c9                   	leave  
c0112b7d:	c3                   	ret    

c0112b7e <vsnprintf>:
 *
 * Call this function if you are already dealing with a va_list.
 * Or you probably want snprintf() instead.
 * */
int
vsnprintf(char *str, size_t size, const char *fmt, va_list ap) {
c0112b7e:	55                   	push   %ebp
c0112b7f:	89 e5                	mov    %esp,%ebp
c0112b81:	83 ec 18             	sub    $0x18,%esp
    struct sprintbuf b = {str, str + size - 1, 0};
c0112b84:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b87:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112b8a:	8b 45 0c             	mov    0xc(%ebp),%eax
c0112b8d:	8d 50 ff             	lea    -0x1(%eax),%edx
c0112b90:	8b 45 08             	mov    0x8(%ebp),%eax
c0112b93:	01 d0                	add    %edx,%eax
c0112b95:	89 45 f0             	mov    %eax,-0x10(%ebp)
c0112b98:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if (str == NULL || b.buf > b.ebuf) {
c0112b9f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
c0112ba3:	74 0a                	je     c0112baf <vsnprintf+0x31>
c0112ba5:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112ba8:	8b 45 f0             	mov    -0x10(%ebp),%eax
c0112bab:	39 c2                	cmp    %eax,%edx
c0112bad:	76 07                	jbe    c0112bb6 <vsnprintf+0x38>
        return -E_INVAL;
c0112baf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
c0112bb4:	eb 28                	jmp    c0112bde <vsnprintf+0x60>
    }
    // print the string to the buffer
    vprintfmt((void*)sprintputch, NO_FD, &b, fmt, ap);
c0112bb6:	83 ec 0c             	sub    $0xc,%esp
c0112bb9:	ff 75 14             	pushl  0x14(%ebp)
c0112bbc:	ff 75 10             	pushl  0x10(%ebp)
c0112bbf:	8d 45 ec             	lea    -0x14(%ebp),%eax
c0112bc2:	50                   	push   %eax
c0112bc3:	68 d9 6a ff ff       	push   $0xffff6ad9
c0112bc8:	68 1f 2b 11 c0       	push   $0xc0112b1f
c0112bcd:	e8 75 fb ff ff       	call   c0112747 <vprintfmt>
c0112bd2:	83 c4 20             	add    $0x20,%esp
    // null terminate the buffer
    *b.buf = '\0';
c0112bd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
c0112bd8:	c6 00 00             	movb   $0x0,(%eax)
    return b.cnt;
c0112bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
c0112bde:	c9                   	leave  
c0112bdf:	c3                   	ret    

c0112be0 <hash32>:
 * @bits:   the number of bits in a return value
 *
 * High bits are more random, so we use them.
 * */
uint32_t
hash32(uint32_t val, unsigned int bits) {
c0112be0:	55                   	push   %ebp
c0112be1:	89 e5                	mov    %esp,%ebp
c0112be3:	83 ec 10             	sub    $0x10,%esp
    uint32_t hash = val * GOLDEN_RATIO_PRIME_32;
c0112be6:	8b 45 08             	mov    0x8(%ebp),%eax
c0112be9:	69 c0 01 00 37 9e    	imul   $0x9e370001,%eax,%eax
c0112bef:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return (hash >> (32 - bits));
c0112bf2:	b8 20 00 00 00       	mov    $0x20,%eax
c0112bf7:	2b 45 0c             	sub    0xc(%ebp),%eax
c0112bfa:	8b 55 fc             	mov    -0x4(%ebp),%edx
c0112bfd:	89 c1                	mov    %eax,%ecx
c0112bff:	d3 ea                	shr    %cl,%edx
c0112c01:	89 d0                	mov    %edx,%eax
}
c0112c03:	c9                   	leave  
c0112c04:	c3                   	ret    

c0112c05 <rand>:
 * rand - returns a pseudo-random integer
 *
 * The rand() function return a value in the range [0, RAND_MAX].
 * */
int
rand(void) {
c0112c05:	55                   	push   %ebp
c0112c06:	89 e5                	mov    %esp,%ebp
c0112c08:	57                   	push   %edi
c0112c09:	56                   	push   %esi
c0112c0a:	53                   	push   %ebx
c0112c0b:	83 ec 24             	sub    $0x24,%esp
    next = (next * 0x5DEECE66DLL + 0xBLL) & ((1LL << 48) - 1);
c0112c0e:	a1 c8 be 14 c0       	mov    0xc014bec8,%eax
c0112c13:	8b 15 cc be 14 c0    	mov    0xc014becc,%edx
c0112c19:	69 fa 6d e6 ec de    	imul   $0xdeece66d,%edx,%edi
c0112c1f:	6b f0 05             	imul   $0x5,%eax,%esi
c0112c22:	01 fe                	add    %edi,%esi
c0112c24:	bf 6d e6 ec de       	mov    $0xdeece66d,%edi
c0112c29:	f7 e7                	mul    %edi
c0112c2b:	01 d6                	add    %edx,%esi
c0112c2d:	89 f2                	mov    %esi,%edx
c0112c2f:	83 c0 0b             	add    $0xb,%eax
c0112c32:	83 d2 00             	adc    $0x0,%edx
c0112c35:	89 c7                	mov    %eax,%edi
c0112c37:	83 e7 ff             	and    $0xffffffff,%edi
c0112c3a:	89 f9                	mov    %edi,%ecx
c0112c3c:	0f b7 da             	movzwl %dx,%ebx
c0112c3f:	89 0d c8 be 14 c0    	mov    %ecx,0xc014bec8
c0112c45:	89 1d cc be 14 c0    	mov    %ebx,0xc014becc
    unsigned long long result = (next >> 12);
c0112c4b:	a1 c8 be 14 c0       	mov    0xc014bec8,%eax
c0112c50:	8b 15 cc be 14 c0    	mov    0xc014becc,%edx
c0112c56:	0f ac d0 0c          	shrd   $0xc,%edx,%eax
c0112c5a:	c1 ea 0c             	shr    $0xc,%edx
c0112c5d:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0112c60:	89 55 e4             	mov    %edx,-0x1c(%ebp)
    return (int)do_div(result, RAND_MAX + 1);
c0112c63:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
c0112c6a:	8b 45 e0             	mov    -0x20(%ebp),%eax
c0112c6d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
c0112c70:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0112c73:	89 55 e8             	mov    %edx,-0x18(%ebp)
c0112c76:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c79:	89 45 ec             	mov    %eax,-0x14(%ebp)
c0112c7c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
c0112c80:	74 1c                	je     c0112c9e <rand+0x99>
c0112c82:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c85:	ba 00 00 00 00       	mov    $0x0,%edx
c0112c8a:	f7 75 dc             	divl   -0x24(%ebp)
c0112c8d:	89 55 ec             	mov    %edx,-0x14(%ebp)
c0112c90:	8b 45 e8             	mov    -0x18(%ebp),%eax
c0112c93:	ba 00 00 00 00       	mov    $0x0,%edx
c0112c98:	f7 75 dc             	divl   -0x24(%ebp)
c0112c9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
c0112c9e:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112ca1:	8b 55 ec             	mov    -0x14(%ebp),%edx
c0112ca4:	f7 75 dc             	divl   -0x24(%ebp)
c0112ca7:	89 45 d8             	mov    %eax,-0x28(%ebp)
c0112caa:	89 55 d4             	mov    %edx,-0x2c(%ebp)
c0112cad:	8b 45 d8             	mov    -0x28(%ebp),%eax
c0112cb0:	8b 55 e8             	mov    -0x18(%ebp),%edx
c0112cb3:	89 45 e0             	mov    %eax,-0x20(%ebp)
c0112cb6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
c0112cb9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
}
c0112cbc:	83 c4 24             	add    $0x24,%esp
c0112cbf:	5b                   	pop    %ebx
c0112cc0:	5e                   	pop    %esi
c0112cc1:	5f                   	pop    %edi
c0112cc2:	5d                   	pop    %ebp
c0112cc3:	c3                   	ret    

c0112cc4 <srand>:
/* *
 * srand - seed the random number generator with the given number
 * @seed:   the required seed number
 * */
void
srand(unsigned int seed) {
c0112cc4:	55                   	push   %ebp
c0112cc5:	89 e5                	mov    %esp,%ebp
    next = seed;
c0112cc7:	8b 45 08             	mov    0x8(%ebp),%eax
c0112cca:	ba 00 00 00 00       	mov    $0x0,%edx
c0112ccf:	a3 c8 be 14 c0       	mov    %eax,0xc014bec8
c0112cd4:	89 15 cc be 14 c0    	mov    %edx,0xc014becc
}
c0112cda:	90                   	nop
c0112cdb:	5d                   	pop    %ebp
c0112cdc:	c3                   	ret    
